
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080066e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005130  20000060  08006748  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005190  08006748  00025190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017abb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004226  00000000  00000000  00037b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001057  00000000  00000000  0003d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194e9  00000000  00000000  0003e347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acd9  00000000  00000000  00057830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097c44  00000000  00000000  00072509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000591c  00000000  00000000  0010a150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006620 	.word	0x08006620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006620 	.word	0x08006620

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f004 fe6b 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f004 fe65 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f004 fe5f 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f004 fe59 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f004 fe53 	bl	80051bc <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f004 fe4d 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f004 fe47 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f004 fe41 	bl	80051bc <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f004 fe3e 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f004 fe38 	bl	80051bc <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f002 f8df 	bl	8002768 <HAL_I2C_Master_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000320 	.word	0x20000320

080005b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f002 f8af 	bl	8002768 <HAL_I2C_Master_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000320 	.word	0x20000320

08000618 <lcd_send_string>:

void lcd_send_string(char * str)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while(*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while(*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <debounce_init>:
#include "debounce.h"

void debounce_init(Debounce_t *s, uint8_t activo_en_cero, uint16_t debounce) {
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	70fb      	strb	r3, [r7, #3]
 800064e:	4613      	mov	r3, r2
 8000650:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	883a      	ldrh	r2, [r7, #0]
 8000656:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks = 0;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero) ? 1 : 0;
 800065e:	78fb      	ldrb	r3, [r7, #3]
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t) BTN_LIBRE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t) BTN_PRESIONADO;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	719a      	strb	r2, [r3, #6]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <debounce_run>:

void debounce_run(Debounce_t *s, uint32_t estado) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	79db      	ldrb	r3, [r3, #7]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4053      	eors	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]

	switch (s->estado) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d866      	bhi.n	800078a <debounce_run+0xfa>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <debounce_run+0x34>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006f7 	.word	0x080006f7
 80006cc:	0800072d 	.word	0x0800072d
 80006d0:	0800074f 	.word	0x0800074f
	case 0:
		if (boton) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <debounce_run+0x58>
			s->debounce_ticks = s->debounce;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	885a      	ldrh	r2, [r3, #2]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	719a      	strb	r2, [r3, #6]
		break;
 80006f4:	e049      	b.n	800078a <debounce_run+0xfa>
	case 1:
		if (!(--(s->debounce_ticks))) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	801a      	strh	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d13c      	bne.n	8000784 <debounce_run+0xf4>
			if (boton) {
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d009      	beq.n	8000724 <debounce_run+0x94>
				s->estado_pin = BTN_PRESIONADO;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2202      	movs	r2, #2
 8000720:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 0;
			}
		}
		break;
 8000722:	e02f      	b.n	8000784 <debounce_run+0xf4>
				s->estado = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	711a      	strb	r2, [r3, #4]
		break;
 800072a:	e02b      	b.n	8000784 <debounce_run+0xf4>
	case 2:
		if (!boton) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d106      	bne.n	8000740 <debounce_run+0xb0>
			s->debounce_ticks = s->debounce;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	885a      	ldrh	r2, [r3, #2]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2203      	movs	r2, #3
 800073e:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2201      	movs	r2, #1
 800074a:	719a      	strb	r2, [r3, #6]
		break;
 800074c:	e01d      	b.n	800078a <debounce_run+0xfa>
	case 3:
		if (!(--(s->debounce_ticks))) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b29a      	uxth	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d112      	bne.n	8000788 <debounce_run+0xf8>
			if (!boton) {
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d109      	bne.n	800077c <debounce_run+0xec>
				s->estado_pin = BTN_LIBRE;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 2;
			}
		}
		break;
 800077a:	e005      	b.n	8000788 <debounce_run+0xf8>
				s->estado = 2;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2202      	movs	r2, #2
 8000780:	711a      	strb	r2, [r3, #4]
		break;
 8000782:	e001      	b.n	8000788 <debounce_run+0xf8>
		break;
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <debounce_run+0xfa>
		break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <debounce_flank>:

int debounce_flank(Debounce_t *s) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	795b      	ldrb	r3, [r3, #5]
			&& (s->estado_anterior_pin == BTN_LIBRE);
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d105      	bne.n	80007b4 <debounce_flank+0x1c>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <debounce_flank+0x1c>
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <debounce_flank+0x1e>
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80007d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <vApplicationGetIdleTaskMemory+0x30>)
 80007da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	2000011c 	.word	0x2000011c

080007f8 <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <game_set_sensor_reader+0x20>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <game_set_sensor_reader+0x24>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	2000031c 	.word	0x2000031c
 800081c:	20000424 	.word	0x20000424

08000820 <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 fefb 	bl	8001624 <lighting_set_output>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <game_reset>:

    lighting_refresh();

}

void game_reset(){
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0

    engine_reset();
 800083a:	f000 fd01 	bl	8001240 <engine_reset>

 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <t_LCD>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void t_LCD(void*) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	lcd_init();
 800084c:	f7ff fe46 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <t_LCD+0x60>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f107 0108 	add.w	r1, r7, #8
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	4618      	mov	r0, r3
 800085e:	f004 f8f5 	bl	8004a4c <xQueueReceive>
		switch (msg.type) {
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d014      	beq.n	8000892 <t_LCD+0x4e>
 8000868:	2b02      	cmp	r3, #2
 800086a:	dcf1      	bgt.n	8000850 <t_LCD+0xc>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <t_LCD+0x32>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d009      	beq.n	8000888 <t_LCD+0x44>
 8000874:	e014      	b.n	80008a0 <t_LCD+0x5c>
		case 0:
			lcd_send_cmd(msg.data[0]);
 8000876:	7a7b      	ldrb	r3, [r7, #9]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe6d 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fc9b 	bl	80051bc <vTaskDelay>
			break;
 8000886:	e00b      	b.n	80008a0 <t_LCD+0x5c>
		case 1:
			lcd_send_data(msg.data[0]);
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe94 	bl	80005b8 <lcd_send_data>
			break;
 8000890:	e006      	b.n	80008a0 <t_LCD+0x5c>
		case 2:
			lcd_send_string(msg.data);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	3301      	adds	r3, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff febd 	bl	8000618 <lcd_send_string>
			break;
 800089e:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80008a0:	e7d6      	b.n	8000850 <t_LCD+0xc>
 80008a2:	bf00      	nop
 80008a4:	20000420 	.word	0x20000420

080008a8 <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	Debounce_t b1;

	debounce_init(&b1, 1, 20);
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	2214      	movs	r2, #20
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fec2 	bl	8000642 <debounce_init>

	LCDQueueItem_t msg = { 0 };
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	4815      	ldr	r0, [pc, #84]	; (800092c <t_Botones+0x84>)
 80008d6:	f001 fdd1 	bl	800247c <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fed3 	bl	8000690 <debounce_run>

		if (debounce_flank(&b1)) {
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff52 	bl	8000798 <debounce_flank>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d014      	beq.n	8000924 <t_Botones+0x7c>
			msg.type = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	723b      	strb	r3, [r7, #8]
			msg.data[0] = 'A';
 80008fe:	2341      	movs	r3, #65	; 0x41
 8000900:	727b      	strb	r3, [r7, #9]
			if (uxQueueMessagesWaiting(lcd_queue) < 20) {
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <t_Botones+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f004 f980 	bl	8004c0c <uxQueueMessagesWaiting>
 800090c:	4603      	mov	r3, r0
 800090e:	2b13      	cmp	r3, #19
 8000910:	d808      	bhi.n	8000924 <t_Botones+0x7c>
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <t_Botones+0x88>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f107 0108 	add.w	r1, r7, #8
 800091a:	2300      	movs	r3, #0
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	f003 ff96 	bl	8004850 <xQueueGenericSend>
			}
		}

		vTaskDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f004 fc49 	bl	80051bc <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800092a:	e7d1      	b.n	80008d0 <t_Botones+0x28>
 800092c:	40020800 	.word	0x40020800
 8000930:	20000420 	.word	0x20000420

08000934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093a:	f000 ffeb 	bl	8001914 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800093e:	f000 f84f 	bl	80009e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000942:	f000 f987 	bl	8000c54 <MX_GPIO_Init>
	MX_DMA_Init();
 8000946:	f000 f965 	bl	8000c14 <MX_DMA_Init>
	MX_TIM1_Init();
 800094a:	f000 f8e3 	bl	8000b14 <MX_TIM1_Init>
	MX_I2C1_Init();
 800094e:	f000 f8b3 	bl	8000ab8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	user_htim1 = &htim1;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <main+0x88>)
 8000954:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <main+0x8c>)
 8000956:	601a      	str	r2, [r3, #0]
	user_init();
 8000958:	f000 fc22 	bl	80011a0 <user_init>
	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 800095c:	2200      	movs	r2, #0
 800095e:	2118      	movs	r1, #24
 8000960:	2014      	movs	r0, #20
 8000962:	f003 ff1b 	bl	800479c <xQueueGenericCreate>
 8000966:	4603      	mov	r3, r0
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <main+0x90>)
 800096a:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <main+0x94>)
 800096e:	1d3c      	adds	r4, r7, #4
 8000970:	461d      	mov	r5, r3
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800097a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fd8d 	bl	80044a2 <osThreadCreate>
 8000988:	4603      	mov	r3, r0
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <main+0x98>)
 800098c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */

	xTaskCreate(t_LCD, "t_LCD",
 800098e:	2300      	movs	r3, #0
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	230a      	movs	r3, #10
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <main+0x9c>)
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <main+0xa0>)
 800099e:	f004 fac0 	bl	8004f22 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 10,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2309      	movs	r3, #9
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	490a      	ldr	r1, [pc, #40]	; (80009d8 <main+0xa4>)
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <main+0xa8>)
 80009b2:	f004 fab6 	bl	8004f22 <xTaskCreate>

	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80009b6:	f003 fd6d 	bl	8004494 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 80009ba:	e7fe      	b.n	80009ba <main+0x86>
 80009bc:	20000470 	.word	0x20000470
 80009c0:	20000374 	.word	0x20000374
 80009c4:	20000420 	.word	0x20000420
 80009c8:	08006658 	.word	0x08006658
 80009cc:	2000041c 	.word	0x2000041c
 80009d0:	08006638 	.word	0x08006638
 80009d4:	08000845 	.word	0x08000845
 80009d8:	08006640 	.word	0x08006640
 80009dc:	080008a9 	.word	0x080008a9

080009e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 fd2c 	bl	800644c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000a54:	2310      	movs	r3, #16
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 f984 	bl	8002d78 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x9a>
		Error_Handler();
 8000a76:	f000 f9b6 	bl	8000de6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2102      	movs	r1, #2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fbe6 	bl	8003268 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc6>
		Error_Handler();
 8000aa2:	f000 f9a0 	bl	8000de6 <Error_Handler>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	; 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_I2C1_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af6:	f001 fcf3 	bl	80024e0 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b00:	f000 f971 	bl	8000de6 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000320 	.word	0x20000320
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	; 0x48
 8000b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 fc84 	bl	800644c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b46:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <MX_TIM1_Init+0xfc>)
 8000b48:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b58:	2268      	movs	r2, #104	; 0x68
 8000b5a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b6e:	4827      	ldr	r0, [pc, #156]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b70:	f002 fe74 	bl	800385c <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0x6a>
		Error_Handler();
 8000b7a:	f000 f934 	bl	8000de6 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000b8e:	f003 fb95 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8000b98:	f000 f925 	bl	8000de6 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	220c      	movs	r2, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000bbe:	f003 f86b 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000bc8:	f000 f90d 	bl	8000de6 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000bf0:	f003 fbd2 	bl	8004398 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 8000bfa:	f000 f8f4 	bl	8000de6 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM1_Init+0xf8>)
 8000c00:	f000 f9d2 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3748      	adds	r7, #72	; 0x48
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000374 	.word	0x20000374
 8000c10:	40010000 	.word	0x40010000

08000c14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	203c      	movs	r0, #60	; 0x3c
 8000c3c:	f000 ff64 	bl	8001b08 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c40:	203c      	movs	r0, #60	; 0x3c
 8000c42:	f000 ff7d 	bl	8001b40 <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a38      	ldr	r2, [pc, #224]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REED_1_Pin | REED_2_Pin | REED_7_Pin,
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2183      	movs	r1, #131	; 0x83
 8000cde:	4833      	ldr	r0, [pc, #204]	; (8000dac <MX_GPIO_Init+0x158>)
 8000ce0:	f001 fbe4 	bl	80024ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | REED_4_Pin | REED_5_Pin | REED_8_Pin,
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000cea:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x15c>)
 8000cec:	f001 fbde 	bl	80024ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, REED_3_Pin | REED_6_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2141      	movs	r1, #65	; 0x41
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <MX_GPIO_Init+0x160>)
 8000cf6:	f001 fbd9 	bl	80024ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4826      	ldr	r0, [pc, #152]	; (8000dac <MX_GPIO_Init+0x158>)
 8000d12:	f001 fa2f 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
	GPIO_InitStruct.Pin = REED_1_Pin | REED_2_Pin | REED_7_Pin;
 8000d16:	2383      	movs	r3, #131	; 0x83
 8000d18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <MX_GPIO_Init+0x158>)
 8000d2e:	f001 fa21 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin REED_4_Pin REED_5_Pin REED_8_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | REED_4_Pin | REED_5_Pin | REED_8_Pin;
 8000d32:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8000d36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <MX_GPIO_Init+0x15c>)
 8000d4c:	f001 fa12 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_3_Pin REED_6_Pin */
	GPIO_InitStruct.Pin = REED_3_Pin | REED_6_Pin;
 8000d50:	2341      	movs	r3, #65	; 0x41
 8000d52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_GPIO_Init+0x160>)
 8000d68:	f001 fa04 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
	 REED_C_Pin REED_E_Pin */
	GPIO_InitStruct.Pin = REED_B_Pin | REED_H_Pin | REED_G_Pin | REED_D_Pin
 8000d6c:	f246 4338 	movw	r3, #25656	; 0x6438
 8000d70:	617b      	str	r3, [r7, #20]
			| REED_C_Pin | REED_E_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_GPIO_Init+0x160>)
 8000d82:	f001 f9f7 	bl	8002174 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_A_Pin REED_F_Pin */
	GPIO_InitStruct.Pin = REED_A_Pin | REED_F_Pin;
 8000d86:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_GPIO_Init+0x15c>)
 8000d9c:	f001 f9ea 	bl	8002174 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020400 	.word	0x40020400

08000db8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f003 fbba 	bl	800453a <osDelay>
 8000dc6:	e7fb      	b.n	8000dc0 <StartDefaultTask+0x8>

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d101      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000dda:	f000 fdbd 	bl	8001958 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dea:	b672      	cpsid	i
}
 8000dec:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dee:	e7fe      	b.n	8000dee <Error_Handler+0x8>

08000df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_MspInit+0x54>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_MspInit+0x54>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x54>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_MspInit+0x54>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_MspInit+0x54>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_MspInit+0x54>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	f06f 0001 	mvn.w	r0, #1
 8000e36:	f000 fe67 	bl	8001b08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x8c>)
 8000ea4:	f001 f966 	bl	8002174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <HAL_TIM_PWM_MspInit+0xc0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d151      	bne.n	8000f8e <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_TIM_PWM_MspInit+0xc4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_TIM_PWM_MspInit+0xc4>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_TIM_PWM_MspInit+0xc4>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f0e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f16:	2240      	movs	r2, #64	; 0x40
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f26:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f36:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f4c:	f000 fe06 	bl	8001b5c <HAL_DMA_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000f56:	f7ff ff46 	bl	8000de6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_TIM_PWM_MspInit+0xc8>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	201a      	movs	r0, #26
 8000f84:	f000 fdc0 	bl	8001b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f88:	201a      	movs	r0, #26
 8000f8a:	f000 fdd9 	bl	8001b40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	200003bc 	.word	0x200003bc
 8000fa4:	40026470 	.word	0x40026470

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_TIM_MspPostInit+0x68>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d11e      	bne.n	8001008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8000fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_TIM_MspPostInit+0x70>)
 8001004:	f001 f8b6 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_InitTick+0xe8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a33      	ldr	r2, [pc, #204]	; (8001104 <HAL_InitTick+0xe8>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_InitTick+0xe8>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001048:	f107 0210 	add.w	r2, r7, #16
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fb14 	bl	8003680 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001062:	f002 faf9 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8001066:	6378      	str	r0, [r7, #52]	; 0x34
 8001068:	e004      	b.n	8001074 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800106a:	f002 faf5 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 800106e:	4603      	mov	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_InitTick+0xec>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	0c9b      	lsrs	r3, r3, #18
 800107e:	3b01      	subs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_InitTick+0xf0>)
 8001084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001088:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_InitTick+0xf0>)
 800108c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001090:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_InitTick+0xf0>)
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_InitTick+0xf0>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_InitTick+0xf0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_InitTick+0xf0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010aa:	4818      	ldr	r0, [pc, #96]	; (800110c <HAL_InitTick+0xf0>)
 80010ac:	f002 fb1a 	bl	80036e4 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11b      	bne.n	80010f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <HAL_InitTick+0xf0>)
 80010c0:	f002 fb6a 	bl	8003798 <HAL_TIM_Base_Start_IT>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d111      	bne.n	80010f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d2:	201c      	movs	r0, #28
 80010d4:	f000 fd34 	bl	8001b40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d808      	bhi.n	80010f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	201c      	movs	r0, #28
 80010e4:	f000 fd10 	bl	8001b08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_InitTick+0xf4>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e002      	b.n	80010f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	431bde83 	.word	0x431bde83
 800110c:	20000428 	.word	0x20000428
 8001110:	20000004 	.word	0x20000004

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001146:	f002 fc9f 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000374 	.word	0x20000374

08001154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM2_IRQHandler+0x10>)
 800115a:	f002 fc95 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000428 	.word	0x20000428

08001168 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA2_Stream4_IRQHandler+0x10>)
 800116e:	f000 fdc5 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200003bc 	.word	0x200003bc

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <user_init>:

TIM_HandleTypeDef * user_htim1;



void user_init(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	ws2812_init();
 80011a4:	f000 fa18 	bl	80015d8 <ws2812_init>

	game_set_sensor_reader((sensor_reader_t)reed_scan_sensors);
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <user_init+0x1c>)
 80011aa:	f7ff fb25 	bl	80007f8 <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <user_init+0x20>)
 80011b0:	f7ff fb36 	bl	8000820 <game_set_led_output_array>

	game_reset();
 80011b4:	f7ff fb3f 	bl	8000836 <game_reset>

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08001645 	.word	0x08001645
 80011c0:	200011f0 	.word	0x200011f0

080011c4 <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e00d      	b.n	80011ee <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	3380      	adds	r3, #128	; 0x80
 80011da:	2202      	movs	r2, #2
 80011dc:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	2206      	movs	r2, #6
 80011e6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b7f      	cmp	r3, #127	; 0x7f
 80011f2:	ddee      	ble.n	80011d2 <clear_game_state+0xe>
    }
    return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4603      	mov	r3, r0
 8001212:	70fb      	strb	r3, [r7, #3]
 8001214:	460b      	mov	r3, r1
 8001216:	70bb      	strb	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	78f9      	ldrb	r1, [r7, #3]
 8001222:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	78ba      	ldrb	r2, [r7, #2]
 800122c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8001244:	4902      	ldr	r1, [pc, #8]	; (8001250 <engine_reset+0x10>)
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <engine_reset+0x14>)
 8001248:	f000 f806 	bl	8001258 <load_fen>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08006674 	.word	0x08006674
 8001254:	20000474 	.word	0x20000474

08001258 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffae 	bl	80011c4 <clear_game_state>

    char * f = (char *)fen;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]

    char col = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3b2f      	subs	r3, #47	; 0x2f
 800127a:	2b43      	cmp	r3, #67	; 0x43
 800127c:	f200 8166 	bhi.w	800154c <load_fen+0x2f4>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <load_fen+0x30>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	08001501 	.word	0x08001501
 800128c:	0800154d 	.word	0x0800154d
 8001290:	0800150d 	.word	0x0800150d
 8001294:	08001515 	.word	0x08001515
 8001298:	0800151d 	.word	0x0800151d
 800129c:	08001525 	.word	0x08001525
 80012a0:	0800152d 	.word	0x0800152d
 80012a4:	08001535 	.word	0x08001535
 80012a8:	0800153d 	.word	0x0800153d
 80012ac:	08001545 	.word	0x08001545
 80012b0:	0800154d 	.word	0x0800154d
 80012b4:	0800154d 	.word	0x0800154d
 80012b8:	0800154d 	.word	0x0800154d
 80012bc:	0800154d 	.word	0x0800154d
 80012c0:	0800154d 	.word	0x0800154d
 80012c4:	0800154d 	.word	0x0800154d
 80012c8:	0800154d 	.word	0x0800154d
 80012cc:	0800154d 	.word	0x0800154d
 80012d0:	0800154d 	.word	0x0800154d
 80012d4:	080013f3 	.word	0x080013f3
 80012d8:	0800154d 	.word	0x0800154d
 80012dc:	0800154d 	.word	0x0800154d
 80012e0:	0800154d 	.word	0x0800154d
 80012e4:	0800154d 	.word	0x0800154d
 80012e8:	0800154d 	.word	0x0800154d
 80012ec:	0800154d 	.word	0x0800154d
 80012f0:	0800154d 	.word	0x0800154d
 80012f4:	0800154d 	.word	0x0800154d
 80012f8:	08001399 	.word	0x08001399
 80012fc:	0800154d 	.word	0x0800154d
 8001300:	0800154d 	.word	0x0800154d
 8001304:	08001411 	.word	0x08001411
 8001308:	0800154d 	.word	0x0800154d
 800130c:	0800142f 	.word	0x0800142f
 8001310:	080013b7 	.word	0x080013b7
 8001314:	080013d5 	.word	0x080013d5
 8001318:	0800154d 	.word	0x0800154d
 800131c:	0800154d 	.word	0x0800154d
 8001320:	0800154d 	.word	0x0800154d
 8001324:	0800154d 	.word	0x0800154d
 8001328:	0800154d 	.word	0x0800154d
 800132c:	0800154d 	.word	0x0800154d
 8001330:	0800154d 	.word	0x0800154d
 8001334:	0800154d 	.word	0x0800154d
 8001338:	0800154d 	.word	0x0800154d
 800133c:	0800154d 	.word	0x0800154d
 8001340:	0800154d 	.word	0x0800154d
 8001344:	0800154d 	.word	0x0800154d
 8001348:	0800154d 	.word	0x0800154d
 800134c:	0800154d 	.word	0x0800154d
 8001350:	0800154d 	.word	0x0800154d
 8001354:	080014a7 	.word	0x080014a7
 8001358:	0800154d 	.word	0x0800154d
 800135c:	0800154d 	.word	0x0800154d
 8001360:	0800154d 	.word	0x0800154d
 8001364:	0800154d 	.word	0x0800154d
 8001368:	0800154d 	.word	0x0800154d
 800136c:	0800154d 	.word	0x0800154d
 8001370:	0800154d 	.word	0x0800154d
 8001374:	0800154d 	.word	0x0800154d
 8001378:	0800144d 	.word	0x0800144d
 800137c:	0800154d 	.word	0x0800154d
 8001380:	0800154d 	.word	0x0800154d
 8001384:	080014c5 	.word	0x080014c5
 8001388:	0800154d 	.word	0x0800154d
 800138c:	080014e3 	.word	0x080014e3
 8001390:	0800146b 	.word	0x0800146b
 8001394:	08001489 	.word	0x08001489
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8001398:	7abb      	ldrb	r3, [r7, #10]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	b2da      	uxtb	r2, r3
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff2a 	bl	8001202 <place_piece>
            col++;
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	3301      	adds	r3, #1
 80013b2:	72fb      	strb	r3, [r7, #11]
            break;
 80013b4:	e0ca      	b.n	800154c <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 80013b6:	7abb      	ldrb	r3, [r7, #10]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	4413      	add	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff1b 	bl	8001202 <place_piece>
            col++;
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	3301      	adds	r3, #1
 80013d0:	72fb      	strb	r3, [r7, #11]
            break;
 80013d2:	e0bb      	b.n	800154c <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	4413      	add	r3, r2
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff0c 	bl	8001202 <place_piece>
            col++;
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	3301      	adds	r3, #1
 80013ee:	72fb      	strb	r3, [r7, #11]
            break;
 80013f0:	e0ac      	b.n	800154c <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 80013f2:	7abb      	ldrb	r3, [r7, #10]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	2103      	movs	r1, #3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fefd 	bl	8001202 <place_piece>
            col++;
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	3301      	adds	r3, #1
 800140c:	72fb      	strb	r3, [r7, #11]
            break;
 800140e:	e09d      	b.n	800154c <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8001410:	7abb      	ldrb	r3, [r7, #10]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	b2da      	uxtb	r2, r3
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	4413      	add	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2200      	movs	r2, #0
 800141e:	2104      	movs	r1, #4
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff feee 	bl	8001202 <place_piece>
            col++;
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	3301      	adds	r3, #1
 800142a:	72fb      	strb	r3, [r7, #11]
            break;
 800142c:	e08e      	b.n	800154c <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 800142e:	7abb      	ldrb	r3, [r7, #10]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	4413      	add	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fedf 	bl	8001202 <place_piece>
            col++;
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	3301      	adds	r3, #1
 8001448:	72fb      	strb	r3, [r7, #11]
            break;
 800144a:	e07f      	b.n	800154c <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	b2da      	uxtb	r2, r3
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2201      	movs	r2, #1
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fed0 	bl	8001202 <place_piece>
            col++;
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	3301      	adds	r3, #1
 8001466:	72fb      	strb	r3, [r7, #11]
            break;
 8001468:	e070      	b.n	800154c <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 800146a:	7abb      	ldrb	r3, [r7, #10]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	4413      	add	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2201      	movs	r2, #1
 8001478:	2101      	movs	r1, #1
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fec1 	bl	8001202 <place_piece>
            col++;
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	3301      	adds	r3, #1
 8001484:	72fb      	strb	r3, [r7, #11]
            break;
 8001486:	e061      	b.n	800154c <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8001488:	7abb      	ldrb	r3, [r7, #10]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	b2da      	uxtb	r2, r3
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	4413      	add	r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2201      	movs	r2, #1
 8001496:	2102      	movs	r1, #2
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff feb2 	bl	8001202 <place_piece>
            col++;
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	3301      	adds	r3, #1
 80014a2:	72fb      	strb	r3, [r7, #11]
            break;
 80014a4:	e052      	b.n	800154c <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 80014a6:	7abb      	ldrb	r3, [r7, #10]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	7afb      	ldrb	r3, [r7, #11]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2201      	movs	r2, #1
 80014b4:	2103      	movs	r1, #3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fea3 	bl	8001202 <place_piece>
            col++;
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	3301      	adds	r3, #1
 80014c0:	72fb      	strb	r3, [r7, #11]
            break;
 80014c2:	e043      	b.n	800154c <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 80014c4:	7abb      	ldrb	r3, [r7, #10]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	4413      	add	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2201      	movs	r2, #1
 80014d2:	2104      	movs	r1, #4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe94 	bl	8001202 <place_piece>
            col++;
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	3301      	adds	r3, #1
 80014de:	72fb      	strb	r3, [r7, #11]
            break;
 80014e0:	e034      	b.n	800154c <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 80014e2:	7abb      	ldrb	r3, [r7, #10]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	4413      	add	r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	2105      	movs	r1, #5
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe85 	bl	8001202 <place_piece>
            col++;
 80014f8:	7afb      	ldrb	r3, [r7, #11]
 80014fa:	3301      	adds	r3, #1
 80014fc:	72fb      	strb	r3, [r7, #11]
            break;
 80014fe:	e025      	b.n	800154c <load_fen+0x2f4>
        case '/':
            row--;
 8001500:	7abb      	ldrb	r3, [r7, #10]
 8001502:	3b01      	subs	r3, #1
 8001504:	72bb      	strb	r3, [r7, #10]
            col=0;
 8001506:	2300      	movs	r3, #0
 8001508:	72fb      	strb	r3, [r7, #11]
            break;
 800150a:	e01f      	b.n	800154c <load_fen+0x2f4>
        case '1':
            col+=1;
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	3301      	adds	r3, #1
 8001510:	72fb      	strb	r3, [r7, #11]
            break;
 8001512:	e01b      	b.n	800154c <load_fen+0x2f4>
        case '2':
            col+=2;
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	3302      	adds	r3, #2
 8001518:	72fb      	strb	r3, [r7, #11]
            break;
 800151a:	e017      	b.n	800154c <load_fen+0x2f4>
        case '3':
            col+=3;
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	3303      	adds	r3, #3
 8001520:	72fb      	strb	r3, [r7, #11]
            break;
 8001522:	e013      	b.n	800154c <load_fen+0x2f4>
        case '4':
            col+=4;
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	3304      	adds	r3, #4
 8001528:	72fb      	strb	r3, [r7, #11]
            break;
 800152a:	e00f      	b.n	800154c <load_fen+0x2f4>
        case '5':
            col+=5;
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	3305      	adds	r3, #5
 8001530:	72fb      	strb	r3, [r7, #11]
            break;
 8001532:	e00b      	b.n	800154c <load_fen+0x2f4>
        case '6':
            col+=6;
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	3306      	adds	r3, #6
 8001538:	72fb      	strb	r3, [r7, #11]
            break;
 800153a:	e007      	b.n	800154c <load_fen+0x2f4>
        case '7':
            col+=7;
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	3307      	adds	r3, #7
 8001540:	72fb      	strb	r3, [r7, #11]
            break;
 8001542:	e003      	b.n	800154c <load_fen+0x2f4>
        case '8':
            col+=8;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	3308      	adds	r3, #8
 8001548:	72fb      	strb	r3, [r7, #11]
            break;
 800154a:	bf00      	nop
        };

        f++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b20      	cmp	r3, #32
 8001558:	f47f ae8c 	bne.w	8001274 <load_fen+0x1c>

    f++;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b77      	cmp	r3, #119	; 0x77
 8001568:	d104      	bne.n	8001574 <load_fen+0x31c>
        state->side_to_move = WHITE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001572:	e003      	b.n	800157c <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3302      	adds	r3, #2
 8001580:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b20      	cmp	r3, #32
 800158e:	d1f8      	bne.n	8001582 <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d1f8      	bne.n	8001596 <load_fen+0x33e>
    f++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 80015bc:	210c      	movs	r1, #12
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f002 f99c 	bl	80038fc <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200012f0 	.word	0x200012f0

080015d8 <ws2812_init>:

void ws2812_init(){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	e010      	b.n	8001606 <ws2812_init+0x2e>
		if(i < 60)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b3b      	cmp	r3, #59	; 0x3b
 80015e8:	dc05      	bgt.n	80015f6 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <ws2812_init+0x48>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2100      	movs	r1, #0
 80015f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015f4:	e004      	b.n	8001600 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <ws2812_init+0x48>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	211c      	movs	r1, #28
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f240 623b 	movw	r2, #1595	; 0x63b
 800160c:	4293      	cmp	r3, r2
 800160e:	dde9      	ble.n	80015e4 <ws2812_init+0xc>
	}
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000578 	.word	0x20000578

08001624 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <lighting_set_output+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200012f4 	.word	0x200012f4

08001644 <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e127      	b.n	80018a2 <reed_scan_sensors+0x25e>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	2101      	movs	r1, #1
 8001662:	4894      	ldr	r0, [pc, #592]	; (80018b4 <reed_scan_sensors+0x270>)
 8001664:	f000 ff22 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2102      	movs	r1, #2
 8001678:	488e      	ldr	r0, [pc, #568]	; (80018b4 <reed_scan_sensors+0x270>)
 800167a:	f000 ff17 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b02      	cmp	r3, #2
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	2101      	movs	r1, #1
 800168e:	488a      	ldr	r0, [pc, #552]	; (80018b8 <reed_scan_sensors+0x274>)
 8001690:	f000 ff0c 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b03      	cmp	r3, #3
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	2140      	movs	r1, #64	; 0x40
 80016a4:	4885      	ldr	r0, [pc, #532]	; (80018bc <reed_scan_sensors+0x278>)
 80016a6:	f000 ff01 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4880      	ldr	r0, [pc, #512]	; (80018bc <reed_scan_sensors+0x278>)
 80016bc:	f000 fef6 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	4879      	ldr	r0, [pc, #484]	; (80018b8 <reed_scan_sensors+0x274>)
 80016d2:	f000 feeb 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b06      	cmp	r3, #6
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	4873      	ldr	r0, [pc, #460]	; (80018b4 <reed_scan_sensors+0x270>)
 80016e8:	f000 fee0 	bl	80024ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	486f      	ldr	r0, [pc, #444]	; (80018bc <reed_scan_sensors+0x278>)
 8001700:	f000 fed4 	bl	80024ac <HAL_GPIO_WritePin>

	for(int i = 0; i < 10; i++){ } //Delay chico para dejar que la señal se propage
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	e002      	b.n	8001710 <reed_scan_sensors+0xcc>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3301      	adds	r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b09      	cmp	r3, #9
 8001714:	ddf9      	ble.n	800170a <reed_scan_sensors+0xc6>


    data[row] = 0;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	4865      	ldr	r0, [pc, #404]	; (80018bc <reed_scan_sensors+0x278>)
 8001726:	f000 fea9 	bl	800247c <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4619      	mov	r1, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	b24b      	sxtb	r3, r1
 8001744:	4313      	orrs	r3, r2
 8001746:	b259      	sxtb	r1, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8001752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001756:	4858      	ldr	r0, [pc, #352]	; (80018b8 <reed_scan_sensors+0x274>)
 8001758:	f000 fe90 	bl	800247c <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <reed_scan_sensors+0x122>
 8001762:	2102      	movs	r1, #2
 8001764:	e000      	b.n	8001768 <reed_scan_sensors+0x124>
 8001766:	2100      	movs	r1, #0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b25a      	sxtb	r2, r3
 8001772:	b24b      	sxtb	r3, r1
 8001774:	4313      	orrs	r3, r2
 8001776:	b259      	sxtb	r1, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8001782:	2110      	movs	r1, #16
 8001784:	484c      	ldr	r0, [pc, #304]	; (80018b8 <reed_scan_sensors+0x274>)
 8001786:	f000 fe79 	bl	800247c <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <reed_scan_sensors+0x150>
 8001790:	2104      	movs	r1, #4
 8001792:	e000      	b.n	8001796 <reed_scan_sensors+0x152>
 8001794:	2100      	movs	r1, #0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	b24b      	sxtb	r3, r1
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b259      	sxtb	r1, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 80017b0:	2108      	movs	r1, #8
 80017b2:	4841      	ldr	r0, [pc, #260]	; (80018b8 <reed_scan_sensors+0x274>)
 80017b4:	f000 fe62 	bl	800247c <HAL_GPIO_ReadPin>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <reed_scan_sensors+0x17e>
 80017be:	2108      	movs	r1, #8
 80017c0:	e000      	b.n	80017c4 <reed_scan_sensors+0x180>
 80017c2:	2100      	movs	r1, #0
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	b24b      	sxtb	r3, r1
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b259      	sxtb	r1, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 80017de:	2120      	movs	r1, #32
 80017e0:	4835      	ldr	r0, [pc, #212]	; (80018b8 <reed_scan_sensors+0x274>)
 80017e2:	f000 fe4b 	bl	800247c <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <reed_scan_sensors+0x1ac>
 80017ec:	2110      	movs	r1, #16
 80017ee:	e000      	b.n	80017f2 <reed_scan_sensors+0x1ae>
 80017f0:	2100      	movs	r1, #0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	b24b      	sxtb	r3, r1
 80017fe:	4313      	orrs	r3, r2
 8001800:	b259      	sxtb	r1, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 800180c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001810:	482a      	ldr	r0, [pc, #168]	; (80018bc <reed_scan_sensors+0x278>)
 8001812:	f000 fe33 	bl	800247c <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <reed_scan_sensors+0x1dc>
 800181c:	2120      	movs	r1, #32
 800181e:	e000      	b.n	8001822 <reed_scan_sensors+0x1de>
 8001820:	2100      	movs	r1, #0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	b24b      	sxtb	r3, r1
 800182e:	4313      	orrs	r3, r2
 8001830:	b259      	sxtb	r1, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	b2ca      	uxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 800183c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001840:	481d      	ldr	r0, [pc, #116]	; (80018b8 <reed_scan_sensors+0x274>)
 8001842:	f000 fe1b 	bl	800247c <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <reed_scan_sensors+0x20c>
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	e000      	b.n	8001852 <reed_scan_sensors+0x20e>
 8001850:	2100      	movs	r1, #0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b25a      	sxtb	r2, r3
 800185c:	b24b      	sxtb	r3, r1
 800185e:	4313      	orrs	r3, r2
 8001860:	b259      	sxtb	r1, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	b2ca      	uxtb	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <reed_scan_sensors+0x274>)
 8001872:	f000 fe03 	bl	800247c <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <reed_scan_sensors+0x23c>
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	e000      	b.n	8001882 <reed_scan_sensors+0x23e>
 8001880:	2100      	movs	r1, #0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25a      	sxtb	r2, r3
 800188c:	b24b      	sxtb	r3, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	b259      	sxtb	r1, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	b2ca      	uxtb	r2, r1
 800189a:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	f77f aed4 	ble.w	8001652 <reed_scan_sensors+0xe>

  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40020000 	.word	0x40020000

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c6:	490e      	ldr	r1, [pc, #56]	; (8001900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018dc:	4c0b      	ldr	r4, [pc, #44]	; (800190c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ea:	f7ff fc47 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f004 fe0b 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f2:	f7ff f81f 	bl	8000934 <main>
  bx  lr    
 80018f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001904:	080066e8 	.word	0x080066e8
  ldr r2, =_sbss
 8001908:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800190c:	20005190 	.word	0x20005190

08001910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f8d8 	bl	8001af2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	200f      	movs	r0, #15
 8001944:	f7ff fb6a 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fa52 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	200012f8 	.word	0x200012f8

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200012f8 	.word	0x200012f8

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff4c 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1a:	f7ff ff61 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	6978      	ldr	r0, [r7, #20]
 8001b26:	f7ff ffb1 	bl	8001a8c <NVIC_EncodePriority>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff80 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff54 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ff0a 	bl	8001980 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e099      	b.n	8001cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b98:	e00f      	b.n	8001bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b9a:	f7ff fef1 	bl	8001980 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d908      	bls.n	8001bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e078      	b.n	8001cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e8      	bne.n	8001b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_DMA_Init+0x158>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d117      	bne.n	8001c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00e      	beq.n	8001c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fa0b 	bl	800207c <DMA_CheckFifoParam>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e016      	b.n	8001cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f9c2 	bl	8002010 <DMA_CalcBaseAndBitshift>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	f010803f 	.word	0xf010803f

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d004      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00c      	b.n	8001cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d08:	4b8e      	ldr	r3, [pc, #568]	; (8001f44 <HAL_DMA_IRQHandler+0x248>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8e      	ldr	r2, [pc, #568]	; (8001f48 <HAL_DMA_IRQHandler+0x24c>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2208      	movs	r2, #8
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2208      	movs	r2, #8
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2204      	movs	r2, #4
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2210      	movs	r2, #16
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03c      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2210      	movs	r2, #16
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e01f      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2220      	movs	r2, #32
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 808f 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8087 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2220      	movs	r2, #32
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d136      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0216 	bic.w	r2, r2, #22
 8001eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x1da>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
        }
        return;
 8001f12:	e079      	b.n	8002008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e02c      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e01e      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0210 	bic.w	r2, r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d307      	bcc.n	8001fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x2cc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e000      	b.n	800200a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3b10      	subs	r3, #16
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <DMA_CalcBaseAndBitshift+0x64>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <DMA_CalcBaseAndBitshift+0x68>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d909      	bls.n	8002052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	659a      	str	r2, [r3, #88]	; 0x58
 8002050:	e007      	b.n	8002062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	aaaaaaab 	.word	0xaaaaaaab
 8002078:	080066d0 	.word	0x080066d0

0800207c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d856      	bhi.n	800214a <DMA_CheckFifoParam+0xce>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <DMA_CheckFifoParam+0x28>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020c7 	.word	0x080020c7
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	0800214b 	.word	0x0800214b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d046      	beq.n	800214e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e043      	b.n	800214e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ce:	d140      	bne.n	8002152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d4:	e03d      	b.n	8002152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	d121      	bne.n	8002124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d837      	bhi.n	8002156 <DMA_CheckFifoParam+0xda>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x70>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002103 	.word	0x08002103
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002115 	.word	0x08002115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e030      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d025      	beq.n	800215a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002112:	e022      	b.n	800215a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002122:	e01c      	b.n	800215e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d903      	bls.n	8002132 <DMA_CheckFifoParam+0xb6>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d003      	beq.n	8002138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002130:	e018      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      break;
 8002136:	e015      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e00b      	b.n	8002162 <DMA_CheckFifoParam+0xe6>
      break;
 800214a:	bf00      	nop
 800214c:	e00a      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e008      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e006      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;   
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
    }
  } 
  
  return status; 
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e159      	b.n	8002444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8148 	bne.w	800243e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d005      	beq.n	80021c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d130      	bne.n	8002228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 0201 	and.w	r2, r3, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b03      	cmp	r3, #3
 8002232:	d017      	beq.n	8002264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d123      	bne.n	80022b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a2 	beq.w	800243e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_GPIO_Init+0x2e8>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_GPIO_Init+0x2e8>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_GPIO_Init+0x2e8>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_GPIO_Init+0x2ec>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a49      	ldr	r2, [pc, #292]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x202>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <HAL_GPIO_Init+0x2f4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x1fe>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_GPIO_Init+0x2f8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x1fa>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a46      	ldr	r2, [pc, #280]	; (8002470 <HAL_GPIO_Init+0x2fc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x1f6>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a45      	ldr	r2, [pc, #276]	; (8002474 <HAL_GPIO_Init+0x300>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x1f2>
 8002362:	2304      	movs	r3, #4
 8002364:	e008      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002366:	2307      	movs	r3, #7
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x204>
 800236a:	2303      	movs	r3, #3
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x204>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x204>
 8002376:	2300      	movs	r3, #0
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4093      	lsls	r3, r2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002388:	4935      	ldr	r1, [pc, #212]	; (8002460 <HAL_GPIO_Init+0x2ec>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_GPIO_Init+0x304>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x304>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_GPIO_Init+0x304>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_GPIO_Init+0x304>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_GPIO_Init+0x304>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x304>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_GPIO_Init+0x304>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_GPIO_Init+0x304>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	f67f aea2 	bls.w	8002190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40013800 	.word	0x40013800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40020800 	.word	0x40020800
 8002470:	40020c00 	.word	0x40020c00
 8002474:	40021000 	.word	0x40021000
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e001      	b.n	800249e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e12b      	b.n	800274a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fc9e 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002544:	f001 f888 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a81      	ldr	r2, [pc, #516]	; (8002754 <HAL_I2C_Init+0x274>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d807      	bhi.n	8002564 <HAL_I2C_Init+0x84>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a80      	ldr	r2, [pc, #512]	; (8002758 <HAL_I2C_Init+0x278>)
 8002558:	4293      	cmp	r3, r2
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e006      	b.n	8002572 <HAL_I2C_Init+0x92>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a7d      	ldr	r2, [pc, #500]	; (800275c <HAL_I2C_Init+0x27c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0e7      	b.n	800274a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a78      	ldr	r2, [pc, #480]	; (8002760 <HAL_I2C_Init+0x280>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	; (8002754 <HAL_I2C_Init+0x274>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d802      	bhi.n	80025b4 <HAL_I2C_Init+0xd4>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	e009      	b.n	80025c8 <HAL_I2C_Init+0xe8>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_I2C_Init+0x284>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	3301      	adds	r3, #1
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	495c      	ldr	r1, [pc, #368]	; (8002754 <HAL_I2C_Init+0x274>)
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d819      	bhi.n	800261c <HAL_I2C_Init+0x13c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e59      	subs	r1, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f6:	1c59      	adds	r1, r3, #1
 80025f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025fc:	400b      	ands	r3, r1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_I2C_Init+0x138>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e59      	subs	r1, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	e051      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 8002618:	2304      	movs	r3, #4
 800261a:	e04f      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <HAL_I2C_Init+0x168>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e012      	b.n	800266e <HAL_I2C_Init+0x18e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	0099      	lsls	r1, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Init+0x196>
 8002672:	2301      	movs	r3, #1
 8002674:	e022      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10e      	bne.n	800269c <HAL_I2C_Init+0x1bc>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e58      	subs	r0, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	440b      	add	r3, r1
 800268c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	e00f      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e58      	subs	r0, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	0099      	lsls	r1, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	6809      	ldr	r1, [r1, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6911      	ldr	r1, [r2, #16]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	000186a0 	.word	0x000186a0
 8002758:	001e847f 	.word	0x001e847f
 800275c:	003d08ff 	.word	0x003d08ff
 8002760:	431bde83 	.word	0x431bde83
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	817b      	strh	r3, [r7, #10]
 8002778:	4613      	mov	r3, r2
 800277a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff f900 	bl	8001980 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	f040 80e0 	bne.w	8002950 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2319      	movs	r3, #25
 8002796:	2201      	movs	r2, #1
 8002798:	4970      	ldr	r1, [pc, #448]	; (800295c <HAL_I2C_Master_Transmit+0x1f4>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f964 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0d3      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_I2C_Master_Transmit+0x50>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0cc      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d007      	beq.n	80027de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2210      	movs	r2, #16
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_I2C_Master_Transmit+0x1f8>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f89c 	bl	8002964 <I2C_MasterRequestWrite>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e08d      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800284c:	e066      	b.n	800291c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9de 	bl	8002c14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06b      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d11b      	bne.n	80028f0 <HAL_I2C_Master_Transmit+0x188>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d017      	beq.n	80028f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6a39      	ldr	r1, [r7, #32]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f9ce 	bl	8002c96 <I2C_WaitOnBTFFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b04      	cmp	r3, #4
 8002906:	d107      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e01a      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	2b00      	cmp	r3, #0
 8002922:	d194      	bne.n	800284e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	00100002 	.word	0x00100002
 8002960:	ffff0000 	.word	0xffff0000

08002964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d006      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b12      	cmp	r3, #18
 80029a6:	d107      	bne.n	80029b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f84f 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e035      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e01b      	b.n	8002a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	11db      	asrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0306 	and.w	r3, r3, #6
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f063 030f 	orn	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <I2C_MasterRequestWrite+0xfc>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f875 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e010      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <I2C_MasterRequestWrite+0x100>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f865 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	00010008 	.word	0x00010008
 8002a64:	00010002 	.word	0x00010002

08002a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a78:	e025      	b.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d021      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe ff7d 	bl	8001980 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e023      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10d      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	e00c      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d0b6      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b24:	e051      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d123      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e046      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d021      	beq.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe fefb 	bl	8001980 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e020      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e00b      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d18d      	bne.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c20:	e02d      	b.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f878 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02d      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d021      	beq.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe fea1 	bl	8001980 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d1ca      	bne.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca2:	e02d      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f837 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e02d      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d021      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbc:	f7fe fe60 	bl	8001980 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d1ca      	bne.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d11b      	bne.n	8002d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e267      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e242      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a68      	ldr	r2, [pc, #416]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a65      	ldr	r2, [pc, #404]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fda6 	bl	8001980 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fda2 	bl	8001980 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e207      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fd92 	bl	8001980 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fd8e 	bl	8001980 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f3      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c7      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4937      	ldr	r1, [pc, #220]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe fd47 	bl	8001980 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fd43 	bl	8001980 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a8      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fd26 	bl	8001980 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe fd22 	bl	8001980 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e187      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d036      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fd06 	bl	8001980 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fd02 	bl	8001980 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e167      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e01b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fcef 	bl	8001980 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fceb 	bl	8001980 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e150      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8097 	beq.w	800310c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b77      	ldr	r3, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b74      	ldr	r3, [pc, #464]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe fcab 	bl	8001980 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe fca7 	bl	8001980 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e10c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x474>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x2ea>
 8003054:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a63      	ldr	r2, [pc, #396]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x30c>
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a5b      	ldr	r2, [pc, #364]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fc6c 	bl	8001980 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fc68 	bl	8001980 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0cb      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <HAL_RCC_OscConfig+0x334>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe fc56 	bl	8001980 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe fc52 	bl	8001980 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0b5      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	4a38      	ldr	r2, [pc, #224]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a1 	beq.w	8003258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003116:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d05c      	beq.n	80031dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d141      	bne.n	80031ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fc26 	bl	8001980 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fc22 	bl	8001980 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e087      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	491b      	ldr	r1, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fbfb 	bl	8001980 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fbf7 	bl	8001980 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e05c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x416>
 80031ac:	e054      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCC_OscConfig+0x478>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fbe4 	bl	8001980 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fbe0 	bl	8001980 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e045      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x444>
 80031da:	e03d      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e038      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d028      	beq.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d121      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11a      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fb12 	bl	8001980 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fb0e 	bl	8001980 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd fe04 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	080066b8 	.word	0x080066b8
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b094      	sub	sp, #80	; 0x50
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
 8003440:	2300      	movs	r3, #0
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003444:	2300      	movs	r3, #0
 8003446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344c:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 8003458:	2b08      	cmp	r3, #8
 800345a:	f200 80e1 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x3a>
 8003466:	e0db      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b73      	ldr	r3, [pc, #460]	; (8003638 <HAL_RCC_GetSysClockFreq+0x204>)
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800346c:	e0db      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b73      	ldr	r3, [pc, #460]	; (800363c <HAL_RCC_GetSysClockFreq+0x208>)
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003472:	e0d8      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	2200      	movs	r2, #0
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
 8003494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4621      	mov	r1, r4
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	6139      	str	r1, [r7, #16]
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4651      	mov	r1, sl
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	4651      	mov	r1, sl
 80034e8:	ebb2 0801 	subs.w	r8, r2, r1
 80034ec:	4659      	mov	r1, fp
 80034ee:	eb63 0901 	sbc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	462b      	mov	r3, r5
 8003514:	eb49 0303 	adc.w	r3, r9, r3
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003526:	4629      	mov	r1, r5
 8003528:	024b      	lsls	r3, r1, #9
 800352a:	4621      	mov	r1, r4
 800352c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003530:	4621      	mov	r1, r4
 8003532:	024a      	lsls	r2, r1, #9
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	2200      	movs	r2, #0
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003544:	f7fc fe4c 	bl	80001e0 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	e058      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	2200      	movs	r2, #0
 800355a:	4618      	mov	r0, r3
 800355c:	4611      	mov	r1, r2
 800355e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	f04f 0000 	mov.w	r0, #0
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800357e:	0150      	lsls	r0, r2, #5
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4641      	mov	r1, r8
 8003586:	ebb2 0a01 	subs.w	sl, r2, r1
 800358a:	4649      	mov	r1, r9
 800358c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800359c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035a4:	ebb2 040a 	subs.w	r4, r2, sl
 80035a8:	eb63 050b 	sbc.w	r5, r3, fp
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	00eb      	lsls	r3, r5, #3
 80035b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ba:	00e2      	lsls	r2, r4, #3
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	18e3      	adds	r3, r4, r3
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	464b      	mov	r3, r9
 80035c8:	eb45 0303 	adc.w	r3, r5, r3
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035da:	4629      	mov	r1, r5
 80035dc:	028b      	lsls	r3, r1, #10
 80035de:	4621      	mov	r1, r4
 80035e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e4:	4621      	mov	r1, r4
 80035e6:	028a      	lsls	r2, r1, #10
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ee:	2200      	movs	r2, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	61fa      	str	r2, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	f7fc fdf2 	bl	80001e0 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetSysClockFreq+0x200>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetSysClockFreq+0x204>)
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003628:	4618      	mov	r0, r3
 800362a:	3750      	adds	r7, #80	; 0x50
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	007a1200 	.word	0x007a1200

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	080066c8 	.word	0x080066c8

08003680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	220f      	movs	r2, #15
 800368e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	08db      	lsrs	r3, r3, #3
 80036ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCC_GetClockConfig+0x60>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f839 	bl	8003782 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 fb98 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e044      	b.n	800383a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_TIM_Base_Start_IT+0xb0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x6c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d013      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x6c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_TIM_Base_Start_IT+0xb4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x6c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <HAL_TIM_Base_Start_IT+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIM_Base_Start_IT+0xbc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x6c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIM_Base_Start_IT+0xc0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d111      	bne.n	8003828 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b06      	cmp	r3, #6
 8003814:	d010      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	e007      	b.n	8003838 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40014000 	.word	0x40014000

0800385c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fb28 	bl	8000ed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fadc 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d855      	bhi.n	80039bc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800394d 	.word	0x0800394d
 800391c:	080039bd 	.word	0x080039bd
 8003920:	080039bd 	.word	0x080039bd
 8003924:	080039bd 	.word	0x080039bd
 8003928:	08003969 	.word	0x08003969
 800392c:	080039bd 	.word	0x080039bd
 8003930:	080039bd 	.word	0x080039bd
 8003934:	080039bd 	.word	0x080039bd
 8003938:	08003985 	.word	0x08003985
 800393c:	080039bd 	.word	0x080039bd
 8003940:	080039bd 	.word	0x080039bd
 8003944:	080039bd 	.word	0x080039bd
 8003948:	080039a1 	.word	0x080039a1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800395a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe f9a9 	bl	8001cb8 <HAL_DMA_Abort_IT>
      break;
 8003966:	e02c      	b.n	80039c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe f99b 	bl	8001cb8 <HAL_DMA_Abort_IT>
      break;
 8003982:	e01e      	b.n	80039c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003992:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe f98d 	bl	8001cb8 <HAL_DMA_Abort_IT>
      break;
 800399e:	e010      	b.n	80039c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe f97f 	bl	8001cb8 <HAL_DMA_Abort_IT>
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d157      	bne.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2200      	movs	r2, #0
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fc4d 	bl	8004270 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d117      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x114>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	f240 4344 	movw	r3, #1092	; 0x444
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10f      	bne.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	f240 4344 	movw	r3, #1092	; 0x444
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	e013      	b.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d104      	bne.n	8003a60 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5e:	e00b      	b.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d104      	bne.n	8003a70 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6e:	e003      	b.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000

08003a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9b0 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f9a2 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fd fd6b 	bl	80015b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0204 	mvn.w	r2, #4
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f986 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f978 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fd fd41 	bl	80015b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0208 	mvn.w	r2, #8
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f95c 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f94e 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fd fd17 	bl	80015b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0210 	mvn.w	r2, #16
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f932 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f924 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7fd fced 	bl	80015b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0201 	mvn.w	r2, #1
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f8de 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d10e      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d107      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fc0c 	bl	8004450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8f0 	bl	8003e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0220 	mvn.w	r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fbd6 	bl	800443c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0ae      	b.n	8003e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f926 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e064      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f96c 	bl	8004024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e043      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f9b7 	bl	80040fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e023      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa01 	bl	80041d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40010000 	.word	0x40010000

08004024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0210 	bic.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <TIM_OC2_SetConfig+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10d      	bne.n	80040a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <TIM_OC2_SetConfig+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d113      	bne.n	80040d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000

080040fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <TIM_OC3_SetConfig+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <TIM_OC3_SetConfig+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000

080041d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <TIM_OC4_SetConfig+0x9c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000

08004270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e050      	b.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d013      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e03d      	b.n	8004430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004476:	2b84      	cmp	r3, #132	; 0x84
 8004478:	d005      	beq.n	8004486 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800447a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	3303      	adds	r3, #3
 8004484:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004498:	f000 fec4 	bl	8005224 <vTaskStartScheduler>
  
  return osOK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a4:	b089      	sub	sp, #36	; 0x24
 80044a6:	af04      	add	r7, sp, #16
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <osThreadCreate+0x54>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685c      	ldr	r4, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691e      	ldr	r6, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ffc8 	bl	8004464 <makeFreeRtosPriority>
 80044d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044de:	9202      	str	r2, [sp, #8]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	9100      	str	r1, [sp, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4632      	mov	r2, r6
 80044e8:	4629      	mov	r1, r5
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 fcbc 	bl	8004e68 <xTaskCreateStatic>
 80044f0:	4603      	mov	r3, r0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e01c      	b.n	8004530 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685c      	ldr	r4, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004502:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ffaa 	bl	8004464 <makeFreeRtosPriority>
 8004510:	4602      	mov	r2, r0
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	9200      	str	r2, [sp, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	4632      	mov	r2, r6
 800451e:	4629      	mov	r1, r5
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fcfe 	bl	8004f22 <xTaskCreate>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004530:	68fb      	ldr	r3, [r7, #12]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800453a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <osDelay+0x16>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e000      	b.n	8004552 <osDelay+0x18>
 8004550:	2301      	movs	r3, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fe32 	bl	80051bc <vTaskDelay>
  
  return osOK;
 8004558:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f103 0208 	add.w	r2, r3, #8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f103 0208 	add.w	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f103 0208 	add.w	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d103      	bne.n	8004624 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e00c      	b.n	800463e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3308      	adds	r3, #8
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e002      	b.n	8004632 <vListInsert+0x2e>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d2f6      	bcs.n	800462c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6892      	ldr	r2, [r2, #8]
 800468c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6852      	ldr	r2, [r2, #4]
 8004696:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d103      	bne.n	80046aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1e5a      	subs	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046f6:	f001 fbdd 	bl	8005eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	441a      	add	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	3b01      	subs	r3, #1
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d114      	bne.n	8004776 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3310      	adds	r3, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ffb5 	bl	80056c8 <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d012      	beq.n	800478a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <xQueueGenericReset+0xcc>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	e009      	b.n	800478a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3310      	adds	r3, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fef1 	bl	8004562 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff feec 	bl	8004562 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800478a:	f001 fbc3 	bl	8005f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800478e:	2301      	movs	r3, #1
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3348      	adds	r3, #72	; 0x48
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 fc4f 	bl	8006078 <pvPortMalloc>
 80047da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d011      	beq.n	8004806 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3348      	adds	r3, #72	; 0x48
 80047ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f805 	bl	8004810 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004806:	69bb      	ldr	r3, [r7, #24]
	}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800483e:	2101      	movs	r1, #1
 8004840:	69b8      	ldr	r0, [r7, #24]
 8004842:	f7ff ff43 	bl	80046cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800485e:	2300      	movs	r3, #0
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericSend+0x32>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <xQueueGenericSend+0x40>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <xQueueGenericSend+0x44>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <xQueueGenericSend+0x46>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <xQueueGenericSend+0x60>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d103      	bne.n	80048be <xQueueGenericSend+0x6e>
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <xQueueGenericSend+0x72>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueGenericSend+0x74>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xQueueGenericSend+0x8e>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048de:	f001 f8b3 	bl	8005a48 <xTaskGetSchedulerState>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <xQueueGenericSend+0x9e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <xQueueGenericSend+0xa2>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <xQueueGenericSend+0xa4>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericSend+0xbe>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fb      	str	r3, [r7, #28]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800490e:	f001 fad1 	bl	8005eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <xQueueGenericSend+0xd4>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d129      	bne.n	8004978 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800492a:	f000 f98d 	bl	8004c48 <prvCopyDataToQueue>
 800492e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	3324      	adds	r3, #36	; 0x24
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fec3 	bl	80056c8 <xTaskRemoveFromEventList>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <xQueueGenericSend+0x1f8>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	e00a      	b.n	8004970 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004960:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <xQueueGenericSend+0x1f8>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004970:	f001 fad0 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 8004974:	2301      	movs	r3, #1
 8004976:	e063      	b.n	8004a40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800497e:	f001 fac9 	bl	8005f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004982:	2300      	movs	r3, #0
 8004984:	e05c      	b.n	8004a40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fefb 	bl	800578c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800499a:	f001 fabb 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800499e:	f000 fcab 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a2:	f001 fa87 	bl	8005eb4 <vPortEnterCritical>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ac:	b25b      	sxtb	r3, r3
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d103      	bne.n	80049bc <xQueueGenericSend+0x16c>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d103      	bne.n	80049d2 <xQueueGenericSend+0x182>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d2:	f001 fa9f 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049d6:	1d3a      	adds	r2, r7, #4
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 feea 	bl	80057b8 <xTaskCheckForTimeOut>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d124      	bne.n	8004a34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ec:	f000 fa24 	bl	8004e38 <prvIsQueueFull>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d018      	beq.n	8004a28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	3310      	adds	r3, #16
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fe3e 	bl	8005680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a06:	f000 f9af 	bl	8004d68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a0a:	f000 fc83 	bl	8005314 <xTaskResumeAll>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f af7c 	bne.w	800490e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <xQueueGenericSend+0x1f8>)
 8004a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	e772      	b.n	800490e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a2a:	f000 f99d 	bl	8004d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a2e:	f000 fc71 	bl	8005314 <xTaskResumeAll>
 8004a32:	e76c      	b.n	800490e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a36:	f000 f997 	bl	8004d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3a:	f000 fc6b 	bl	8005314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3738      	adds	r7, #56	; 0x38
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <xQueueReceive+0x30>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	623b      	str	r3, [r7, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <xQueueReceive+0x3e>
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <xQueueReceive+0x42>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <xQueueReceive+0x44>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <xQueueReceive+0x5e>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61fb      	str	r3, [r7, #28]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aaa:	f000 ffcd 	bl	8005a48 <xTaskGetSchedulerState>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <xQueueReceive+0x6e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <xQueueReceive+0x72>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <xQueueReceive+0x74>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueReceive+0x8e>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61bb      	str	r3, [r7, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ada:	f001 f9eb 	bl	8005eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01f      	beq.n	8004b2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aee:	f000 f915 	bl	8004d1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00f      	beq.n	8004b22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	3310      	adds	r3, #16
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fdde 	bl	80056c8 <xTaskRemoveFromEventList>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b12:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <xQueueReceive+0x1bc>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b22:	f001 f9f7 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e069      	b.n	8004bfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d103      	bne.n	8004b38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b30:	f001 f9f0 	bl	8005f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e062      	b.n	8004bfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fe22 	bl	800578c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b4c:	f001 f9e2 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b50:	f000 fbd2 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b54:	f001 f9ae 	bl	8005eb4 <vPortEnterCritical>
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d103      	bne.n	8004b6e <xQueueReceive+0x122>
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d103      	bne.n	8004b84 <xQueueReceive+0x138>
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b84:	f001 f9c6 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b88:	1d3a      	adds	r2, r7, #4
 8004b8a:	f107 0310 	add.w	r3, r7, #16
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fe11 	bl	80057b8 <xTaskCheckForTimeOut>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d123      	bne.n	8004be4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9e:	f000 f935 	bl	8004e0c <prvIsQueueEmpty>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	3324      	adds	r3, #36	; 0x24
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fd65 	bl	8005680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb8:	f000 f8d6 	bl	8004d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bbc:	f000 fbaa 	bl	8005314 <xTaskResumeAll>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d189      	bne.n	8004ada <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <xQueueReceive+0x1bc>)
 8004bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	e780      	b.n	8004ada <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bda:	f000 f8c5 	bl	8004d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bde:	f000 fb99 	bl	8005314 <xTaskResumeAll>
 8004be2:	e77a      	b.n	8004ada <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	f000 f8bf 	bl	8004d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bea:	f000 fb93 	bl	8005314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf0:	f000 f90c 	bl	8004e0c <prvIsQueueEmpty>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f43f af6f 	beq.w	8004ada <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3730      	adds	r7, #48	; 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004c30:	f001 f940 	bl	8005eb4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 f96b 	bl	8005f14 <vPortExitCritical>

	return uxReturn;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d14d      	bne.n	8004d0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 ff06 	bl	8005a84 <xTaskPriorityDisinherit>
 8004c78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	e043      	b.n	8004d0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d119      	bne.n	8004cbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6858      	ldr	r0, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	461a      	mov	r2, r3
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	f001 fc5e 	bl	8006554 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d32b      	bcc.n	8004d0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	e026      	b.n	8004d0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68d8      	ldr	r0, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	f001 fc44 	bl	8006554 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	441a      	add	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d207      	bcs.n	8004cf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	441a      	add	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d105      	bne.n	8004d0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d12:	697b      	ldr	r3, [r7, #20]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d303      	bcc.n	8004d50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68d9      	ldr	r1, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6838      	ldr	r0, [r7, #0]
 8004d5c:	f001 fbfa 	bl	8006554 <memcpy>
	}
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d70:	f001 f8a0 	bl	8005eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d7c:	e011      	b.n	8004da2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3324      	adds	r3, #36	; 0x24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fc9c 	bl	80056c8 <xTaskRemoveFromEventList>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d96:	f000 fd71 	bl	800587c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dce9      	bgt.n	8004d7e <prvUnlockQueue+0x16>
 8004daa:	e000      	b.n	8004dae <prvUnlockQueue+0x46>
					break;
 8004dac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004db6:	f001 f8ad 	bl	8005f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dba:	f001 f87b 	bl	8005eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc6:	e011      	b.n	8004dec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc77 	bl	80056c8 <xTaskRemoveFromEventList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004de0:	f000 fd4c 	bl	800587c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004de4:	7bbb      	ldrb	r3, [r7, #14]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dce9      	bgt.n	8004dc8 <prvUnlockQueue+0x60>
 8004df4:	e000      	b.n	8004df8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004df6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	22ff      	movs	r2, #255	; 0xff
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e00:	f001 f888 	bl	8005f14 <vPortExitCritical>
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e14:	f001 f84e 	bl	8005eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e001      	b.n	8004e2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e2a:	f001 f873 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e40:	f001 f838 	bl	8005eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d102      	bne.n	8004e56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e001      	b.n	8004e5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e5a:	f001 f85b 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	623b      	str	r3, [r7, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xTaskCreateStatic+0x46>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	61fb      	str	r3, [r7, #28]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eae:	23a0      	movs	r3, #160	; 0xa0
 8004eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2ba0      	cmp	r3, #160	; 0xa0
 8004eb6:	d00a      	beq.n	8004ece <xTaskCreateStatic+0x66>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	61bb      	str	r3, [r7, #24]
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01e      	beq.n	8004f14 <xTaskCreateStatic+0xac>
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f850 	bl	8004fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0e:	f000 f8eb 	bl	80050e8 <prvAddNewTaskToReadyList>
 8004f12:	e001      	b.n	8004f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
	}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b08c      	sub	sp, #48	; 0x30
 8004f26:	af04      	add	r7, sp, #16
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f89e 	bl	8006078 <pvPortMalloc>
 8004f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f44:	20a0      	movs	r0, #160	; 0xa0
 8004f46:	f001 f897 	bl	8006078 <pvPortMalloc>
 8004f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
 8004f58:	e005      	b.n	8004f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f001 f958 	bl	8006210 <vPortFree>
 8004f60:	e001      	b.n	8004f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	9302      	str	r3, [sp, #8]
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f80e 	bl	8004fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f90:	69f8      	ldr	r0, [r7, #28]
 8004f92:	f000 f8a9 	bl	80050e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e002      	b.n	8004fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	617b      	str	r3, [r7, #20]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01f      	beq.n	800503a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e012      	b.n	8005026 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	3334      	adds	r3, #52	; 0x34
 8005010:	460a      	mov	r2, r1
 8005012:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3301      	adds	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d9e9      	bls.n	8005000 <prvInitialiseNewTask+0x54>
 800502c:	e000      	b.n	8005030 <prvInitialiseNewTask+0x84>
			{
				break;
 800502e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005038:	e003      	b.n	8005042 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b06      	cmp	r3, #6
 8005046:	d901      	bls.n	800504c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005048:	2306      	movs	r3, #6
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005056:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fa9d 	bl	80045a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	3318      	adds	r3, #24
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fa98 	bl	80045a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	f1c3 0207 	rsb	r2, r3, #7
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	334c      	adds	r3, #76	; 0x4c
 800509c:	224c      	movs	r2, #76	; 0x4c
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f9d3 	bl	800644c <memset>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <prvInitialiseNewTask+0x130>)
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <prvInitialiseNewTask+0x134>)
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <prvInitialiseNewTask+0x138>)
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	69b8      	ldr	r0, [r7, #24]
 80050be:	f000 fdcd 	bl	8005c5c <pxPortInitialiseStack>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050d4:	bf00      	nop
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20005050 	.word	0x20005050
 80050e0:	200050b8 	.word	0x200050b8
 80050e4:	20005120 	.word	0x20005120

080050e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050f0:	f000 fee0 	bl	8005eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050f4:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <prvAddNewTaskToReadyList+0xb8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <prvAddNewTaskToReadyList+0xb8>)
 80050fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <prvAddNewTaskToReadyList+0xbc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005106:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <prvAddNewTaskToReadyList+0xbc>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <prvAddNewTaskToReadyList+0xb8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d110      	bne.n	8005136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005114:	f000 fbd6 	bl	80058c4 <prvInitialiseTaskLists>
 8005118:	e00d      	b.n	8005136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <prvAddNewTaskToReadyList+0xc0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <prvAddNewTaskToReadyList+0xbc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	429a      	cmp	r2, r3
 800512e:	d802      	bhi.n	8005136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <prvAddNewTaskToReadyList+0xbc>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <prvAddNewTaskToReadyList+0xc4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <prvAddNewTaskToReadyList+0xc4>)
 800513e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <prvAddNewTaskToReadyList+0xcc>)
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7ff fa27 	bl	80045bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800516e:	f000 fed1 	bl	8005f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <prvAddNewTaskToReadyList+0xc0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00e      	beq.n	8005198 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <prvAddNewTaskToReadyList+0xbc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	429a      	cmp	r2, r3
 8005186:	d207      	bcs.n	8005198 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <prvAddNewTaskToReadyList+0xd0>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200013fc 	.word	0x200013fc
 80051a4:	200012fc 	.word	0x200012fc
 80051a8:	20001408 	.word	0x20001408
 80051ac:	20001418 	.word	0x20001418
 80051b0:	20001404 	.word	0x20001404
 80051b4:	20001300 	.word	0x20001300
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <vTaskDelay+0x60>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <vTaskDelay+0x30>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051ec:	f000 f884 	bl	80052f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051f0:	2100      	movs	r1, #0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fccc 	bl	8005b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051f8:	f000 f88c 	bl	8005314 <xTaskResumeAll>
 80051fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <vTaskDelay+0x64>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20001424 	.word	0x20001424
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005232:	463a      	mov	r2, r7
 8005234:	1d39      	adds	r1, r7, #4
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4618      	mov	r0, r3
 800523c:	f7fb fac2 	bl	80007c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	9202      	str	r2, [sp, #8]
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	460a      	mov	r2, r1
 8005252:	4921      	ldr	r1, [pc, #132]	; (80052d8 <vTaskStartScheduler+0xb4>)
 8005254:	4821      	ldr	r0, [pc, #132]	; (80052dc <vTaskStartScheduler+0xb8>)
 8005256:	f7ff fe07 	bl	8004e68 <xTaskCreateStatic>
 800525a:	4603      	mov	r3, r0
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <vTaskStartScheduler+0xbc>)
 800525e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <vTaskStartScheduler+0xbc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e001      	b.n	8005272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d11b      	bne.n	80052b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <vTaskStartScheduler+0xc0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	334c      	adds	r3, #76	; 0x4c
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <vTaskStartScheduler+0xc4>)
 8005294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <vTaskStartScheduler+0xc8>)
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <vTaskStartScheduler+0xcc>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <vTaskStartScheduler+0xd0>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052aa:	f000 fd61 	bl	8005d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ae:	e00e      	b.n	80052ce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d10a      	bne.n	80052ce <vTaskStartScheduler+0xaa>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <vTaskStartScheduler+0xa8>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	080066b0 	.word	0x080066b0
 80052dc:	08005895 	.word	0x08005895
 80052e0:	20001420 	.word	0x20001420
 80052e4:	200012fc 	.word	0x200012fc
 80052e8:	2000005c 	.word	0x2000005c
 80052ec:	2000141c 	.word	0x2000141c
 80052f0:	20001408 	.word	0x20001408
 80052f4:	20001400 	.word	0x20001400

080052f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vTaskSuspendAll+0x18>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <vTaskSuspendAll+0x18>)
 8005304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20001424 	.word	0x20001424

08005314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <xTaskResumeAll+0x114>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xTaskResumeAll+0x2c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	603b      	str	r3, [r7, #0]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005340:	f000 fdb8 	bl	8005eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <xTaskResumeAll+0x114>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	4a37      	ldr	r2, [pc, #220]	; (8005428 <xTaskResumeAll+0x114>)
 800534c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <xTaskResumeAll+0x114>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d161      	bne.n	800541a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005356:	4b35      	ldr	r3, [pc, #212]	; (800542c <xTaskResumeAll+0x118>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d05d      	beq.n	800541a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800535e:	e02e      	b.n	80053be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	4b33      	ldr	r3, [pc, #204]	; (8005430 <xTaskResumeAll+0x11c>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff f982 	bl	8004676 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f97d 	bl	8004676 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <xTaskResumeAll+0x120>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4313      	orrs	r3, r2
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <xTaskResumeAll+0x120>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a27      	ldr	r2, [pc, #156]	; (8005438 <xTaskResumeAll+0x124>)
 800539c:	441a      	add	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7ff f909 	bl	80045bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4b23      	ldr	r3, [pc, #140]	; (800543c <xTaskResumeAll+0x128>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <xTaskResumeAll+0x12c>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <xTaskResumeAll+0x11c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1cc      	bne.n	8005360 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053cc:	f000 fb1c 	bl	8005a08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053d0:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xTaskResumeAll+0x130>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053dc:	f000 f836 	bl	800544c <xTaskIncrementTick>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <xTaskResumeAll+0x12c>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f1      	bne.n	80053dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <xTaskResumeAll+0x130>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <xTaskResumeAll+0x12c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <xTaskResumeAll+0x134>)
 800540c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800541a:	f000 fd7b 	bl	8005f14 <vPortExitCritical>

	return xAlreadyYielded;
 800541e:	68bb      	ldr	r3, [r7, #8]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20001424 	.word	0x20001424
 800542c:	200013fc 	.word	0x200013fc
 8005430:	200013bc 	.word	0x200013bc
 8005434:	20001404 	.word	0x20001404
 8005438:	20001300 	.word	0x20001300
 800543c:	200012fc 	.word	0x200012fc
 8005440:	20001410 	.word	0x20001410
 8005444:	2000140c 	.word	0x2000140c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005456:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <xTaskIncrementTick+0x144>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 808e 	bne.w	800557c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005460:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <xTaskIncrementTick+0x148>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005468:	4a4a      	ldr	r2, [pc, #296]	; (8005594 <xTaskIncrementTick+0x148>)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d120      	bne.n	80054b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005474:	4b48      	ldr	r3, [pc, #288]	; (8005598 <xTaskIncrementTick+0x14c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <xTaskIncrementTick+0x48>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	603b      	str	r3, [r7, #0]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <xTaskIncrementTick+0x46>
 8005494:	4b40      	ldr	r3, [pc, #256]	; (8005598 <xTaskIncrementTick+0x14c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	4b40      	ldr	r3, [pc, #256]	; (800559c <xTaskIncrementTick+0x150>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3e      	ldr	r2, [pc, #248]	; (8005598 <xTaskIncrementTick+0x14c>)
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4a3e      	ldr	r2, [pc, #248]	; (800559c <xTaskIncrementTick+0x150>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b3d      	ldr	r3, [pc, #244]	; (80055a0 <xTaskIncrementTick+0x154>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a3c      	ldr	r2, [pc, #240]	; (80055a0 <xTaskIncrementTick+0x154>)
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	f000 faa9 	bl	8005a08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054b6:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <xTaskIncrementTick+0x158>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d348      	bcc.n	8005552 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c0:	4b35      	ldr	r3, [pc, #212]	; (8005598 <xTaskIncrementTick+0x14c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <xTaskIncrementTick+0x158>)
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	601a      	str	r2, [r3, #0]
					break;
 80054d2:	e03e      	b.n	8005552 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d4:	4b30      	ldr	r3, [pc, #192]	; (8005598 <xTaskIncrementTick+0x14c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d203      	bcs.n	80054f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054ec:	4a2d      	ldr	r2, [pc, #180]	; (80055a4 <xTaskIncrementTick+0x158>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054f2:	e02e      	b.n	8005552 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f8bc 	bl	8004676 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3318      	adds	r3, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f8b3 	bl	8004676 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	2201      	movs	r2, #1
 8005516:	409a      	lsls	r2, r3
 8005518:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <xTaskIncrementTick+0x15c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <xTaskIncrementTick+0x15c>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <xTaskIncrementTick+0x160>)
 8005530:	441a      	add	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7ff f83f 	bl	80045bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <xTaskIncrementTick+0x164>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	429a      	cmp	r2, r3
 800554a:	d3b9      	bcc.n	80054c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005550:	e7b6      	b.n	80054c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <xTaskIncrementTick+0x164>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4914      	ldr	r1, [pc, #80]	; (80055ac <xTaskIncrementTick+0x160>)
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d901      	bls.n	800556e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <xTaskIncrementTick+0x168>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e004      	b.n	8005586 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <xTaskIncrementTick+0x16c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <xTaskIncrementTick+0x16c>)
 8005584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005586:	697b      	ldr	r3, [r7, #20]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20001424 	.word	0x20001424
 8005594:	20001400 	.word	0x20001400
 8005598:	200013b4 	.word	0x200013b4
 800559c:	200013b8 	.word	0x200013b8
 80055a0:	20001414 	.word	0x20001414
 80055a4:	2000141c 	.word	0x2000141c
 80055a8:	20001404 	.word	0x20001404
 80055ac:	20001300 	.word	0x20001300
 80055b0:	200012fc 	.word	0x200012fc
 80055b4:	20001410 	.word	0x20001410
 80055b8:	2000140c 	.word	0x2000140c

080055bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <vTaskSwitchContext+0xac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ca:	4b28      	ldr	r3, [pc, #160]	; (800566c <vTaskSwitchContext+0xb0>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055d0:	e044      	b.n	800565c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80055d2:	4b26      	ldr	r3, [pc, #152]	; (800566c <vTaskSwitchContext+0xb0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <vTaskSwitchContext+0xb4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	f1c3 031f 	rsb	r3, r3, #31
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	4921      	ldr	r1, [pc, #132]	; (8005674 <vTaskSwitchContext+0xb8>)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <vTaskSwitchContext+0x5a>
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a14      	ldr	r2, [pc, #80]	; (8005674 <vTaskSwitchContext+0xb8>)
 8005624:	4413      	add	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	3308      	adds	r3, #8
 800563a:	429a      	cmp	r2, r3
 800563c:	d104      	bne.n	8005648 <vTaskSwitchContext+0x8c>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <vTaskSwitchContext+0xbc>)
 8005650:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <vTaskSwitchContext+0xbc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	334c      	adds	r3, #76	; 0x4c
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <vTaskSwitchContext+0xc0>)
 800565a:	6013      	str	r3, [r2, #0]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20001424 	.word	0x20001424
 800566c:	20001410 	.word	0x20001410
 8005670:	20001404 	.word	0x20001404
 8005674:	20001300 	.word	0x20001300
 8005678:	200012fc 	.word	0x200012fc
 800567c:	2000005c 	.word	0x2000005c

08005680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <vTaskPlaceOnEventList+0x44>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3318      	adds	r3, #24
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe ffa8 	bl	8004604 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056b4:	2101      	movs	r1, #1
 80056b6:	6838      	ldr	r0, [r7, #0]
 80056b8:	f000 fa6a 	bl	8005b90 <prvAddCurrentTaskToDelayedList>
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	200012fc 	.word	0x200012fc

080056c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe ffbc 	bl	8004676 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056fe:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <xTaskRemoveFromEventList+0xac>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11c      	bne.n	8005740 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3304      	adds	r3, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe ffb3 	bl	8004676 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	4b17      	ldr	r3, [pc, #92]	; (8005778 <xTaskRemoveFromEventList+0xb0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4313      	orrs	r3, r2
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <xTaskRemoveFromEventList+0xb0>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4a13      	ldr	r2, [pc, #76]	; (800577c <xTaskRemoveFromEventList+0xb4>)
 8005730:	441a      	add	r2, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f7fe ff3f 	bl	80045bc <vListInsertEnd>
 800573e:	e005      	b.n	800574c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3318      	adds	r3, #24
 8005744:	4619      	mov	r1, r3
 8005746:	480e      	ldr	r0, [pc, #56]	; (8005780 <xTaskRemoveFromEventList+0xb8>)
 8005748:	f7fe ff38 	bl	80045bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <xTaskRemoveFromEventList+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	429a      	cmp	r2, r3
 8005758:	d905      	bls.n	8005766 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <xTaskRemoveFromEventList+0xc0>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e001      	b.n	800576a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800576a:	697b      	ldr	r3, [r7, #20]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20001424 	.word	0x20001424
 8005778:	20001404 	.word	0x20001404
 800577c:	20001300 	.word	0x20001300
 8005780:	200013bc 	.word	0x200013bc
 8005784:	200012fc 	.word	0x200012fc
 8005788:	20001410 	.word	0x20001410

0800578c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <vTaskInternalSetTimeOutState+0x24>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <vTaskInternalSetTimeOutState+0x28>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20001414 	.word	0x20001414
 80057b4:	20001400 	.word	0x20001400

080057b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	613b      	str	r3, [r7, #16]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	60fb      	str	r3, [r7, #12]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057fa:	f000 fb5b 	bl	8005eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <xTaskCheckForTimeOut+0xbc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d102      	bne.n	800581e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e023      	b.n	8005866 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <xTaskCheckForTimeOut+0xc0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d007      	beq.n	800583a <xTaskCheckForTimeOut+0x82>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e015      	b.n	8005866 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	429a      	cmp	r2, r3
 8005842:	d20b      	bcs.n	800585c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff9b 	bl	800578c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e004      	b.n	8005866 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005862:	2301      	movs	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005866:	f000 fb55 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 800586a:	69fb      	ldr	r3, [r7, #28]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20001400 	.word	0x20001400
 8005878:	20001414 	.word	0x20001414

0800587c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <vTaskMissedYield+0x14>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20001410 	.word	0x20001410

08005894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800589c:	f000 f852 	bl	8005944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <prvIdleTask+0x28>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d9f9      	bls.n	800589c <prvIdleTask+0x8>
			{
				taskYIELD();
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <prvIdleTask+0x2c>)
 80058aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058b8:	e7f0      	b.n	800589c <prvIdleTask+0x8>
 80058ba:	bf00      	nop
 80058bc:	20001300 	.word	0x20001300
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	e00c      	b.n	80058ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a12      	ldr	r2, [pc, #72]	; (8005924 <prvInitialiseTaskLists+0x60>)
 80058dc:	4413      	add	r3, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fe3f 	bl	8004562 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3301      	adds	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d9ef      	bls.n	80058d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058f0:	480d      	ldr	r0, [pc, #52]	; (8005928 <prvInitialiseTaskLists+0x64>)
 80058f2:	f7fe fe36 	bl	8004562 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058f6:	480d      	ldr	r0, [pc, #52]	; (800592c <prvInitialiseTaskLists+0x68>)
 80058f8:	f7fe fe33 	bl	8004562 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058fc:	480c      	ldr	r0, [pc, #48]	; (8005930 <prvInitialiseTaskLists+0x6c>)
 80058fe:	f7fe fe30 	bl	8004562 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005902:	480c      	ldr	r0, [pc, #48]	; (8005934 <prvInitialiseTaskLists+0x70>)
 8005904:	f7fe fe2d 	bl	8004562 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005908:	480b      	ldr	r0, [pc, #44]	; (8005938 <prvInitialiseTaskLists+0x74>)
 800590a:	f7fe fe2a 	bl	8004562 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvInitialiseTaskLists+0x78>)
 8005910:	4a05      	ldr	r2, [pc, #20]	; (8005928 <prvInitialiseTaskLists+0x64>)
 8005912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvInitialiseTaskLists+0x7c>)
 8005916:	4a05      	ldr	r2, [pc, #20]	; (800592c <prvInitialiseTaskLists+0x68>)
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20001300 	.word	0x20001300
 8005928:	2000138c 	.word	0x2000138c
 800592c:	200013a0 	.word	0x200013a0
 8005930:	200013bc 	.word	0x200013bc
 8005934:	200013d0 	.word	0x200013d0
 8005938:	200013e8 	.word	0x200013e8
 800593c:	200013b4 	.word	0x200013b4
 8005940:	200013b8 	.word	0x200013b8

08005944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800594a:	e019      	b.n	8005980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800594c:	f000 fab2 	bl	8005eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <prvCheckTasksWaitingTermination+0x50>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fe8a 	bl	8004676 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <prvCheckTasksWaitingTermination+0x54>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3b01      	subs	r3, #1
 8005968:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <prvCheckTasksWaitingTermination+0x54>)
 800596a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 8005974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005976:	f000 facd 	bl	8005f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f810 	bl	80059a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e1      	bne.n	800594c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200013d0 	.word	0x200013d0
 8005998:	200013fc 	.word	0x200013fc
 800599c:	200013e4 	.word	0x200013e4

080059a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	334c      	adds	r3, #76	; 0x4c
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fd55 	bl	800645c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fc25 	bl	8006210 <vPortFree>
				vPortFree( pxTCB );
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc22 	bl	8006210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059cc:	e018      	b.n	8005a00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d103      	bne.n	80059e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fc19 	bl	8006210 <vPortFree>
	}
 80059de:	e00f      	b.n	8005a00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d00a      	beq.n	8005a00 <prvDeleteTCB+0x60>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	60fb      	str	r3, [r7, #12]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <prvDeleteTCB+0x5e>
	}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <prvResetNextTaskUnblockTime+0x38>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <prvResetNextTaskUnblockTime+0x3c>)
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a20:	e008      	b.n	8005a34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <prvResetNextTaskUnblockTime+0x38>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <prvResetNextTaskUnblockTime+0x3c>)
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200013b4 	.word	0x200013b4
 8005a44:	2000141c 	.word	0x2000141c

08005a48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <xTaskGetSchedulerState+0x34>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a56:	2301      	movs	r3, #1
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	e008      	b.n	8005a6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <xTaskGetSchedulerState+0x38>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a64:	2302      	movs	r3, #2
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	e001      	b.n	8005a6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a6e:	687b      	ldr	r3, [r7, #4]
	}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20001408 	.word	0x20001408
 8005a80:	20001424 	.word	0x20001424

08005a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d06e      	beq.n	8005b78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a9a:	4b3a      	ldr	r3, [pc, #232]	; (8005b84 <xTaskPriorityDisinherit+0x100>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d00a      	beq.n	8005aba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60bb      	str	r3, [r7, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d044      	beq.n	8005b78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d140      	bne.n	8005b78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fdbb 	bl	8004676 <uxListRemove>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	491f      	ldr	r1, [pc, #124]	; (8005b88 <xTaskPriorityDisinherit+0x104>)
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xTaskPriorityDisinherit+0xae>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	2201      	movs	r2, #1
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43da      	mvns	r2, r3
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <xTaskPriorityDisinherit+0x108>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <xTaskPriorityDisinherit+0x108>)
 8005b30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f1c3 0207 	rsb	r2, r3, #7
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <xTaskPriorityDisinherit+0x108>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <xTaskPriorityDisinherit+0x108>)
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4a08      	ldr	r2, [pc, #32]	; (8005b88 <xTaskPriorityDisinherit+0x104>)
 8005b66:	441a      	add	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7fe fd24 	bl	80045bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b78:	697b      	ldr	r3, [r7, #20]
	}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200012fc 	.word	0x200012fc
 8005b88:	20001300 	.word	0x20001300
 8005b8c:	20001404 	.word	0x20001404

08005b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b9a:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fd65 	bl	8004676 <uxListRemove>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bb2:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2201      	movs	r2, #1
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d10a      	bne.n	8005be8 <prvAddCurrentTaskToDelayedList+0x58>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	481a      	ldr	r0, [pc, #104]	; (8005c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005be2:	f7fe fceb 	bl	80045bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005be6:	e026      	b.n	8005c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d209      	bcs.n	8005c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f7fe fcf9 	bl	8004604 <vListInsert>
}
 8005c12:	e010      	b.n	8005c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f7fe fcef 	bl	8004604 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d202      	bcs.n	8005c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6013      	str	r3, [r2, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20001400 	.word	0x20001400
 8005c44:	200012fc 	.word	0x200012fc
 8005c48:	20001404 	.word	0x20001404
 8005c4c:	200013e8 	.word	0x200013e8
 8005c50:	200013b8 	.word	0x200013b8
 8005c54:	200013b4 	.word	0x200013b4
 8005c58:	2000141c 	.word	0x2000141c

08005c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3b04      	subs	r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0201 	bic.w	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3b04      	subs	r3, #4
 8005c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c8c:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <pxPortInitialiseStack+0x64>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b14      	subs	r3, #20
 8005c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3b04      	subs	r3, #4
 8005ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f06f 0202 	mvn.w	r2, #2
 8005caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3b20      	subs	r3, #32
 8005cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	08005cc5 	.word	0x08005cc5

08005cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <prvTaskExitError+0x54>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d00a      	beq.n	8005cee <prvTaskExitError+0x2a>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <prvTaskExitError+0x28>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60bb      	str	r3, [r7, #8]
}
 8005d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d02:	bf00      	nop
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0fc      	beq.n	8005d04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	2000000c 	.word	0x2000000c
 8005d1c:	00000000 	.word	0x00000000

08005d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <pxCurrentTCBConst2>)
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	6808      	ldr	r0, [r1, #0]
 8005d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2a:	f380 8809 	msr	PSP, r0
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8811 	msr	BASEPRI, r0
 8005d3a:	4770      	bx	lr
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst2>:
 8005d40:	200012fc 	.word	0x200012fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d48:	4808      	ldr	r0, [pc, #32]	; (8005d6c <prvPortStartFirstTask+0x24>)
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	6800      	ldr	r0, [r0, #0]
 8005d4e:	f380 8808 	msr	MSP, r0
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8814 	msr	CONTROL, r0
 8005d5a:	b662      	cpsie	i
 8005d5c:	b661      	cpsie	f
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	df00      	svc	0
 8005d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d6a:	bf00      	nop
 8005d6c:	e000ed08 	.word	0xe000ed08

08005d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d76:	4b46      	ldr	r3, [pc, #280]	; (8005e90 <xPortStartScheduler+0x120>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <xPortStartScheduler+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10a      	bne.n	8005d96 <xPortStartScheduler+0x26>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d96:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <xPortStartScheduler+0x120>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	; (8005e98 <xPortStartScheduler+0x128>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10a      	bne.n	8005db6 <xPortStartScheduler+0x46>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <xPortStartScheduler+0x12c>)
 8005db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b31      	ldr	r3, [pc, #196]	; (8005ea0 <xPortStartScheduler+0x130>)
 8005ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005de4:	e009      	b.n	8005dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d0ef      	beq.n	8005de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e06:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1c3 0307 	rsb	r3, r3, #7
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00a      	beq.n	8005e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e28:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <xPortStartScheduler+0x134>)
 8005e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <xPortStartScheduler+0x138>)
 8005e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e5e:	f000 f8dd 	bl	800601c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <xPortStartScheduler+0x13c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e68:	f000 f8fc 	bl	8006064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e6c:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <xPortStartScheduler+0x140>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0f      	ldr	r2, [pc, #60]	; (8005eb0 <xPortStartScheduler+0x140>)
 8005e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e78:	f7ff ff66 	bl	8005d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e7c:	f7ff fb9e 	bl	80055bc <vTaskSwitchContext>
	prvTaskExitError();
 8005e80:	f7ff ff20 	bl	8005cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed00 	.word	0xe000ed00
 8005e94:	410fc271 	.word	0x410fc271
 8005e98:	410fc270 	.word	0x410fc270
 8005e9c:	e000e400 	.word	0xe000e400
 8005ea0:	20001428 	.word	0x20001428
 8005ea4:	2000142c 	.word	0x2000142c
 8005ea8:	e000ed20 	.word	0xe000ed20
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	e000ef34 	.word	0xe000ef34

08005eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	607b      	str	r3, [r7, #4]
}
 8005ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <vPortEnterCritical+0x58>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <vPortEnterCritical+0x58>)
 8005ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <vPortEnterCritical+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10f      	bne.n	8005f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortEnterCritical+0x5c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	603b      	str	r3, [r7, #0]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vPortEnterCritical+0x4a>
	}
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <vPortExitCritical+0x50>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vPortExitCritical+0x24>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	607b      	str	r3, [r7, #4]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <vPortExitCritical+0x50>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <vPortExitCritical+0x50>)
 8005f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <vPortExitCritical+0x50>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <vPortExitCritical+0x42>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c
	...

08005f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f70:	f3ef 8009 	mrs	r0, PSP
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <pxCurrentTCBConst>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	f01e 0f10 	tst.w	lr, #16
 8005f80:	bf08      	it	eq
 8005f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	6010      	str	r0, [r2, #0]
 8005f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f94:	f380 8811 	msr	BASEPRI, r0
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f7ff fb0c 	bl	80055bc <vTaskSwitchContext>
 8005fa4:	f04f 0000 	mov.w	r0, #0
 8005fa8:	f380 8811 	msr	BASEPRI, r0
 8005fac:	bc09      	pop	{r0, r3}
 8005fae:	6819      	ldr	r1, [r3, #0]
 8005fb0:	6808      	ldr	r0, [r1, #0]
 8005fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb6:	f01e 0f10 	tst.w	lr, #16
 8005fba:	bf08      	it	eq
 8005fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fc0:	f380 8809 	msr	PSP, r0
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst>:
 8005fd0:	200012fc 	.word	0x200012fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ff2:	f7ff fa2b 	bl	800544c <xTaskIncrementTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <SysTick_Handler+0x40>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f383 8811 	msr	BASEPRI, r3
}
 800600e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <vPortSetupTimerInterrupt+0x38>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <vPortSetupTimerInterrupt+0x3c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <vPortSetupTimerInterrupt+0x40>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	4a09      	ldr	r2, [pc, #36]	; (8006060 <vPortSetupTimerInterrupt+0x44>)
 800603a:	3b01      	subs	r3, #1
 800603c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800603e:	4b04      	ldr	r3, [pc, #16]	; (8006050 <vPortSetupTimerInterrupt+0x34>)
 8006040:	2207      	movs	r2, #7
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	e000e010 	.word	0xe000e010
 8006054:	e000e018 	.word	0xe000e018
 8006058:	20000000 	.word	0x20000000
 800605c:	10624dd3 	.word	0x10624dd3
 8006060:	e000e014 	.word	0xe000e014

08006064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006074 <vPortEnableVFP+0x10>
 8006068:	6801      	ldr	r1, [r0, #0]
 800606a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800606e:	6001      	str	r1, [r0, #0]
 8006070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006072:	bf00      	nop
 8006074:	e000ed88 	.word	0xe000ed88

08006078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006084:	f7ff f938 	bl	80052f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006088:	4b5b      	ldr	r3, [pc, #364]	; (80061f8 <pvPortMalloc+0x180>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006090:	f000 f920 	bl	80062d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006094:	4b59      	ldr	r3, [pc, #356]	; (80061fc <pvPortMalloc+0x184>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 8093 	bne.w	80061c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01d      	beq.n	80060e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060a8:	2208      	movs	r2, #8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <pvPortMalloc+0x6c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617b      	str	r3, [r7, #20]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d06e      	beq.n	80061c8 <pvPortMalloc+0x150>
 80060ea:	4b45      	ldr	r3, [pc, #276]	; (8006200 <pvPortMalloc+0x188>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d869      	bhi.n	80061c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060f4:	4b43      	ldr	r3, [pc, #268]	; (8006204 <pvPortMalloc+0x18c>)
 80060f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060f8:	4b42      	ldr	r3, [pc, #264]	; (8006204 <pvPortMalloc+0x18c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060fe:	e004      	b.n	800610a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <pvPortMalloc+0xa4>
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f1      	bne.n	8006100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800611c:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <pvPortMalloc+0x180>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	429a      	cmp	r2, r3
 8006124:	d050      	beq.n	80061c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2208      	movs	r2, #8
 800612c:	4413      	add	r3, r2
 800612e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	2308      	movs	r3, #8
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	429a      	cmp	r2, r3
 8006146:	d91f      	bls.n	8006188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <pvPortMalloc+0xf8>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	613b      	str	r3, [r7, #16]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	1ad2      	subs	r2, r2, r3
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006182:	69b8      	ldr	r0, [r7, #24]
 8006184:	f000 f908 	bl	8006398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006188:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <pvPortMalloc+0x188>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <pvPortMalloc+0x188>)
 8006194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <pvPortMalloc+0x188>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <pvPortMalloc+0x190>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d203      	bcs.n	80061aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061a2:	4b17      	ldr	r3, [pc, #92]	; (8006200 <pvPortMalloc+0x188>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <pvPortMalloc+0x190>)
 80061a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <pvPortMalloc+0x184>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <pvPortMalloc+0x194>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	4a11      	ldr	r2, [pc, #68]	; (800620c <pvPortMalloc+0x194>)
 80061c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061c8:	f7ff f8a4 	bl	8005314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <pvPortMalloc+0x174>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
}
 80061e8:	bf00      	nop
 80061ea:	e7fe      	b.n	80061ea <pvPortMalloc+0x172>
	return pvReturn;
 80061ec:	69fb      	ldr	r3, [r7, #28]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20005038 	.word	0x20005038
 80061fc:	2000504c 	.word	0x2000504c
 8006200:	2000503c 	.word	0x2000503c
 8006204:	20005030 	.word	0x20005030
 8006208:	20005040 	.word	0x20005040
 800620c:	20005044 	.word	0x20005044

08006210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d04d      	beq.n	80062be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006222:	2308      	movs	r3, #8
 8006224:	425b      	negs	r3, r3
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <vPortFree+0xb8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <vPortFree+0x44>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <vPortFree+0x62>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60bb      	str	r3, [r7, #8]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <vPortFree+0xb8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01e      	beq.n	80062be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11a      	bne.n	80062be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <vPortFree+0xb8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	43db      	mvns	r3, r3
 8006292:	401a      	ands	r2, r3
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006298:	f7ff f82e 	bl	80052f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <vPortFree+0xbc>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <vPortFree+0xbc>)
 80062a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f000 f874 	bl	8006398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <vPortFree+0xc0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	4a06      	ldr	r2, [pc, #24]	; (80062d0 <vPortFree+0xc0>)
 80062b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062ba:	f7ff f82b 	bl	8005314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000504c 	.word	0x2000504c
 80062cc:	2000503c 	.word	0x2000503c
 80062d0:	20005048 	.word	0x20005048

080062d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <prvHeapInit+0xac>)
 80062e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3307      	adds	r3, #7
 80062f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <prvHeapInit+0xac>)
 8006304:	4413      	add	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800630c:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <prvHeapInit+0xb0>)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <prvHeapInit+0xb0>)
 8006314:	2200      	movs	r2, #0
 8006316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006320:	2208      	movs	r2, #8
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <prvHeapInit+0xb4>)
 8006334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <prvHeapInit+0xb4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800633e:	4b12      	ldr	r3, [pc, #72]	; (8006388 <prvHeapInit+0xb4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006354:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <prvHeapInit+0xb4>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <prvHeapInit+0xb8>)
 8006362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <prvHeapInit+0xbc>)
 800636a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <prvHeapInit+0xc0>)
 800636e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20001430 	.word	0x20001430
 8006384:	20005030 	.word	0x20005030
 8006388:	20005038 	.word	0x20005038
 800638c:	20005040 	.word	0x20005040
 8006390:	2000503c 	.word	0x2000503c
 8006394:	2000504c 	.word	0x2000504c

08006398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <prvInsertBlockIntoFreeList+0xac>)
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e002      	b.n	80063ac <prvInsertBlockIntoFreeList+0x14>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d8f7      	bhi.n	80063a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d108      	bne.n	80063da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	441a      	add	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d118      	bne.n	8006420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <prvInsertBlockIntoFreeList+0xb0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d00d      	beq.n	8006416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	e008      	b.n	8006428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvInsertBlockIntoFreeList+0xb0>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e003      	b.n	8006428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d002      	beq.n	8006436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20005030 	.word	0x20005030
 8006448:	20005038 	.word	0x20005038

0800644c <memset>:
 800644c:	4402      	add	r2, r0
 800644e:	4603      	mov	r3, r0
 8006450:	4293      	cmp	r3, r2
 8006452:	d100      	bne.n	8006456 <memset+0xa>
 8006454:	4770      	bx	lr
 8006456:	f803 1b01 	strb.w	r1, [r3], #1
 800645a:	e7f9      	b.n	8006450 <memset+0x4>

0800645c <_reclaim_reent>:
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <_reclaim_reent+0xa8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4283      	cmp	r3, r0
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	4604      	mov	r4, r0
 8006466:	d04b      	beq.n	8006500 <_reclaim_reent+0xa4>
 8006468:	69c3      	ldr	r3, [r0, #28]
 800646a:	b143      	cbz	r3, 800647e <_reclaim_reent+0x22>
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d144      	bne.n	80064fc <_reclaim_reent+0xa0>
 8006472:	69e3      	ldr	r3, [r4, #28]
 8006474:	6819      	ldr	r1, [r3, #0]
 8006476:	b111      	cbz	r1, 800647e <_reclaim_reent+0x22>
 8006478:	4620      	mov	r0, r4
 800647a:	f000 f879 	bl	8006570 <_free_r>
 800647e:	6961      	ldr	r1, [r4, #20]
 8006480:	b111      	cbz	r1, 8006488 <_reclaim_reent+0x2c>
 8006482:	4620      	mov	r0, r4
 8006484:	f000 f874 	bl	8006570 <_free_r>
 8006488:	69e1      	ldr	r1, [r4, #28]
 800648a:	b111      	cbz	r1, 8006492 <_reclaim_reent+0x36>
 800648c:	4620      	mov	r0, r4
 800648e:	f000 f86f 	bl	8006570 <_free_r>
 8006492:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006494:	b111      	cbz	r1, 800649c <_reclaim_reent+0x40>
 8006496:	4620      	mov	r0, r4
 8006498:	f000 f86a 	bl	8006570 <_free_r>
 800649c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649e:	b111      	cbz	r1, 80064a6 <_reclaim_reent+0x4a>
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 f865 	bl	8006570 <_free_r>
 80064a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064a8:	b111      	cbz	r1, 80064b0 <_reclaim_reent+0x54>
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f860 	bl	8006570 <_free_r>
 80064b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064b2:	b111      	cbz	r1, 80064ba <_reclaim_reent+0x5e>
 80064b4:	4620      	mov	r0, r4
 80064b6:	f000 f85b 	bl	8006570 <_free_r>
 80064ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80064bc:	b111      	cbz	r1, 80064c4 <_reclaim_reent+0x68>
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f856 	bl	8006570 <_free_r>
 80064c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80064c6:	b111      	cbz	r1, 80064ce <_reclaim_reent+0x72>
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 f851 	bl	8006570 <_free_r>
 80064ce:	6a23      	ldr	r3, [r4, #32]
 80064d0:	b1b3      	cbz	r3, 8006500 <_reclaim_reent+0xa4>
 80064d2:	4620      	mov	r0, r4
 80064d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064d8:	4718      	bx	r3
 80064da:	5949      	ldr	r1, [r1, r5]
 80064dc:	b941      	cbnz	r1, 80064f0 <_reclaim_reent+0x94>
 80064de:	3504      	adds	r5, #4
 80064e0:	69e3      	ldr	r3, [r4, #28]
 80064e2:	2d80      	cmp	r5, #128	; 0x80
 80064e4:	68d9      	ldr	r1, [r3, #12]
 80064e6:	d1f8      	bne.n	80064da <_reclaim_reent+0x7e>
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 f841 	bl	8006570 <_free_r>
 80064ee:	e7c0      	b.n	8006472 <_reclaim_reent+0x16>
 80064f0:	680e      	ldr	r6, [r1, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f83c 	bl	8006570 <_free_r>
 80064f8:	4631      	mov	r1, r6
 80064fa:	e7ef      	b.n	80064dc <_reclaim_reent+0x80>
 80064fc:	2500      	movs	r5, #0
 80064fe:	e7ef      	b.n	80064e0 <_reclaim_reent+0x84>
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	bf00      	nop
 8006504:	2000005c 	.word	0x2000005c

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4d0d      	ldr	r5, [pc, #52]	; (8006540 <__libc_init_array+0x38>)
 800650c:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	2600      	movs	r6, #0
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	4d0b      	ldr	r5, [pc, #44]	; (8006548 <__libc_init_array+0x40>)
 800651a:	4c0c      	ldr	r4, [pc, #48]	; (800654c <__libc_init_array+0x44>)
 800651c:	f000 f880 	bl	8006620 <_init>
 8006520:	1b64      	subs	r4, r4, r5
 8006522:	10a4      	asrs	r4, r4, #2
 8006524:	2600      	movs	r6, #0
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	f855 3b04 	ldr.w	r3, [r5], #4
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	080066e0 	.word	0x080066e0
 8006544:	080066e0 	.word	0x080066e0
 8006548:	080066e0 	.word	0x080066e0
 800654c:	080066e4 	.word	0x080066e4

08006550 <__retarget_lock_acquire_recursive>:
 8006550:	4770      	bx	lr

08006552 <__retarget_lock_release_recursive>:
 8006552:	4770      	bx	lr

08006554 <memcpy>:
 8006554:	440a      	add	r2, r1
 8006556:	4291      	cmp	r1, r2
 8006558:	f100 33ff 	add.w	r3, r0, #4294967295
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	4770      	bx	lr
 8006560:	b510      	push	{r4, lr}
 8006562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656a:	4291      	cmp	r1, r2
 800656c:	d1f9      	bne.n	8006562 <memcpy+0xe>
 800656e:	bd10      	pop	{r4, pc}

08006570 <_free_r>:
 8006570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006572:	2900      	cmp	r1, #0
 8006574:	d044      	beq.n	8006600 <_free_r+0x90>
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f1a1 0404 	sub.w	r4, r1, #4
 8006582:	bfb8      	it	lt
 8006584:	18e4      	addlt	r4, r4, r3
 8006586:	f000 f83f 	bl	8006608 <__malloc_lock>
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <_free_r+0x94>)
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	b933      	cbnz	r3, 80065a0 <_free_r+0x30>
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	6014      	str	r4, [r2, #0]
 8006596:	b003      	add	sp, #12
 8006598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800659c:	f000 b83a 	b.w	8006614 <__malloc_unlock>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d908      	bls.n	80065b6 <_free_r+0x46>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf01      	itttt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	e7ed      	b.n	8006592 <_free_r+0x22>
 80065b6:	461a      	mov	r2, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b10b      	cbz	r3, 80065c0 <_free_r+0x50>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x46>
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	1855      	adds	r5, r2, r1
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x70>
 80065c8:	6824      	ldr	r4, [r4, #0]
 80065ca:	4421      	add	r1, r4
 80065cc:	1854      	adds	r4, r2, r1
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	d1e0      	bne.n	8006596 <_free_r+0x26>
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	6053      	str	r3, [r2, #4]
 80065da:	440c      	add	r4, r1
 80065dc:	6014      	str	r4, [r2, #0]
 80065de:	e7da      	b.n	8006596 <_free_r+0x26>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x78>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	e7d6      	b.n	8006596 <_free_r+0x26>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf04      	itt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	bf04      	itt	eq
 80065f8:	1949      	addeq	r1, r1, r5
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	6054      	str	r4, [r2, #4]
 80065fe:	e7ca      	b.n	8006596 <_free_r+0x26>
 8006600:	b003      	add	sp, #12
 8006602:	bd30      	pop	{r4, r5, pc}
 8006604:	2000518c 	.word	0x2000518c

08006608 <__malloc_lock>:
 8006608:	4801      	ldr	r0, [pc, #4]	; (8006610 <__malloc_lock+0x8>)
 800660a:	f7ff bfa1 	b.w	8006550 <__retarget_lock_acquire_recursive>
 800660e:	bf00      	nop
 8006610:	20005188 	.word	0x20005188

08006614 <__malloc_unlock>:
 8006614:	4801      	ldr	r0, [pc, #4]	; (800661c <__malloc_unlock+0x8>)
 8006616:	f7ff bf9c 	b.w	8006552 <__retarget_lock_release_recursive>
 800661a:	bf00      	nop
 800661c:	20005188 	.word	0x20005188

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
