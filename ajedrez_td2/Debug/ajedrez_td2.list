
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a018  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3dc  0800a3dc  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e4  0800a3e4  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800a3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c94  200000f8  0800a4e4  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00001104  20006d8c  0800a4e4  00026d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b57  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a54  00000000  00000000  00039cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001145  00000000  00000000  0003fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a022  00000000  00000000  00040eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d912  00000000  00000000  0005aed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098ef4  00000000  00000000  000787e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d6c  00000000  00000000  001116e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1a0 	.word	0x0800a1a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	0800a1a0 	.word	0x0800a1a0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(500);  // wait for >40ms
 80004e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e4:	f008 fb14 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e8:	2030      	movs	r0, #48	; 0x30
 80004ea:	f000 f835 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ee:	2005      	movs	r0, #5
 80004f0:	f008 fb0e 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f4:	2030      	movs	r0, #48	; 0x30
 80004f6:	f000 f82f 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004fa:	2001      	movs	r0, #1
 80004fc:	f008 fb08 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x30);
 8000500:	2030      	movs	r0, #48	; 0x30
 8000502:	f000 f829 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000506:	200a      	movs	r0, #10
 8000508:	f008 fb02 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050c:	2020      	movs	r0, #32
 800050e:	f000 f823 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000512:	200a      	movs	r0, #10
 8000514:	f008 fafc 	bl	8008b10 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000518:	2028      	movs	r0, #40	; 0x28
 800051a:	f000 f81d 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f008 faf6 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000524:	2008      	movs	r0, #8
 8000526:	f000 f817 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f008 faf0 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 8000530:	2001      	movs	r0, #1
 8000532:	f000 f811 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000536:	200a      	movs	r0, #10
 8000538:	f008 faea 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800053c:	2006      	movs	r0, #6
 800053e:	f000 f80b 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f008 fae4 	bl	8008b10 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000548:	200c      	movs	r0, #12
 800054a:	f000 f805 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f008 fade 	bl	8008b10 <vTaskDelay>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f005 f951 	bl	800584c <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003b4 	.word	0x200003b4

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f005 f921 	bl	800584c <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003b4 	.word	0x200003b4

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 10;
 80006d4:	230a      	movs	r3, #10
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <vApplicationGetIdleTaskMemory+0x2c>)
 8000924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <vApplicationGetIdleTaskMemory+0x30>)
 800092a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000114 	.word	0x20000114
 8000944:	200001b4 	.word	0x200001b4

08000948 <game_set_led_output_array>:
void game_set_sensor_reader(sensor_reader_t reader){
    sensor_reader = reader;
    get_sensors = reader;
}

void game_set_led_output_array(led_color output_array[8][8]){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f003 fc2d 	bl	80041b0 <lighting_set_output>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <game_fsm>:


void game_fsm(){
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

    movement_fsm();
 8000962:	f000 fbcb 	bl	80010fc <movement_fsm>

    lighting_refresh();
 8000966:	f003 fdbf 	bl	80044e8 <lighting_refresh>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <game_reset>:

void game_reset(){
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0

    engine_reset();
 8000972:	f002 fb53 	bl	800301c <engine_reset>

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f003 ffb3 	bl	80048ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f893 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f9cb 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 f9a9 	bl	8000ce4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000992:	f000 f927 	bl	8000be4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000996:	f000 f8f7 	bl	8000b88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 800099a:	2200      	movs	r2, #0
 800099c:	2118      	movs	r1, #24
 800099e:	2014      	movs	r0, #20
 80009a0:	f007 fa04 	bl	8007dac <xQueueGenericCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <main+0xf0>)
 80009a8:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	2014      	movs	r0, #20
 80009b0:	f007 f9fc 	bl	8007dac <xQueueGenericCreate>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <main+0xf4>)
 80009b8:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009ba:	2203      	movs	r2, #3
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f007 f9f4 	bl	8007dac <xQueueGenericCreate>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <main+0xf8>)
 80009c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <main+0xfc>)
 80009cc:	1d3c      	adds	r4, r7, #4
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 f866 	bl	8007ab2 <osThreadCreate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <main+0x100>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(t_LCD, "t_LCD",
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <main+0x104>)
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <main+0x108>)
 80009fc:	f007 febd 	bl	800877a <xTaskCreate>
	tskIDLE_PRIORITY + 3,
	NULL);



	xTaskCreate(t_Timer, "t_Timer",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2304      	movs	r3, #4
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	491e      	ldr	r1, [pc, #120]	; (8000a88 <main+0x10c>)
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <main+0x110>)
 8000a10:	f007 feb3 	bl	800877a <xTaskCreate>
	tskIDLE_PRIORITY + 4,
	NULL);



	xTaskCreate(t_Botones, "t_Botones",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	491b      	ldr	r1, [pc, #108]	; (8000a90 <main+0x114>)
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <main+0x118>)
 8000a24:	f007 fea9 	bl	800877a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4918      	ldr	r1, [pc, #96]	; (8000a98 <main+0x11c>)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <main+0x120>)
 8000a38:	f007 fe9f 	bl	800877a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_reed_scan_sensors, "t_reed_scan_sensors",
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2306      	movs	r3, #6
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4915      	ldr	r1, [pc, #84]	; (8000aa0 <main+0x124>)
 8000a4a:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <main+0x128>)
 8000a4c:	f007 fe95 	bl	800877a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 6,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a50:	2300      	movs	r3, #0
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	2301      	movs	r3, #1
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5e:	4912      	ldr	r1, [pc, #72]	; (8000aa8 <main+0x12c>)
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <main+0x130>)
 8000a62:	f007 fe8a 	bl	800877a <xTaskCreate>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a66:	f007 f81d 	bl	8007aa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000a6a:	e7fe      	b.n	8000a6a <main+0xee>
 8000a6c:	200004b4 	.word	0x200004b4
 8000a70:	200004b8 	.word	0x200004b8
 8000a74:	200004bc 	.word	0x200004bc
 8000a78:	0800a20c 	.word	0x0800a20c
 8000a7c:	200004b0 	.word	0x200004b0
 8000a80:	0800a1b8 	.word	0x0800a1b8
 8000a84:	08001891 	.word	0x08001891
 8000a88:	0800a1c0 	.word	0x0800a1c0
 8000a8c:	08001821 	.word	0x08001821
 8000a90:	0800a1c8 	.word	0x0800a1c8
 8000a94:	08001901 	.word	0x08001901
 8000a98:	0800a1d4 	.word	0x0800a1d4
 8000a9c:	080029ad 	.word	0x080029ad
 8000aa0:	0800a1e0 	.word	0x0800a1e0
 8000aa4:	0800460d 	.word	0x0800460d
 8000aa8:	0800a1f4 	.word	0x0800a1f4
 8000aac:	08001a45 	.word	0x08001a45

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 fa84 	bl	8009fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <SystemClock_Config+0xd4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xd4>)
 8000afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SystemClock_Config+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b24:	2310      	movs	r3, #16
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b32:	2307      	movs	r3, #7
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 f98e 	bl	8005e5c <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f9de 	bl	8000f06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f005 fbf0 	bl	800634c <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b72:	f000 f9c8 	bl	8000f06 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_I2C1_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x58>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000baa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc6:	f004 fcfd 	bl	80055c4 <HAL_I2C_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f999 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200003b4 	.word	0x200003b4
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	000186a0 	.word	0x000186a0

08000be4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b092      	sub	sp, #72	; 0x48
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 f9dc 	bl	8009fcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c16:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <MX_TIM1_Init+0xfc>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c28:	2268      	movs	r2, #104	; 0x68
 8000c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3e:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c40:	f005 fe7e 	bl	8006940 <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f95c 	bl	8000f06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c5e:	f006 fe35 	bl	80078cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c68:	f000 f94d 	bl	8000f06 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	220c      	movs	r2, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c8e:	f006 fa25 	bl	80070dc <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000c98:	f000 f935 	bl	8000f06 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000cc0:	f006 fe72 	bl	80079a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000cca:	f000 f91c 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000cd0:	f000 fc9c 	bl	800160c <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3748      	adds	r7, #72	; 0x48
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000408 	.word	0x20000408
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	203c      	movs	r0, #60	; 0x3c
 8000d0c:	f003 fee8 	bl	8004ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d10:	203c      	movs	r0, #60	; 0x3c
 8000d12:	f003 ff01 	bl	8004b18 <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a61      	ldr	r2, [pc, #388]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2183      	movs	r1, #131	; 0x83
 8000dae:	4847      	ldr	r0, [pc, #284]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000db0:	f004 fbee 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000dba:	4845      	ldr	r0, [pc, #276]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000dbc:	f004 fbe8 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2141      	movs	r1, #65	; 0x41
 8000dc4:	4843      	ldr	r0, [pc, #268]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000dc6:	f004 fbe3 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	483a      	ldr	r0, [pc, #232]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000de2:	f004 fa39 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000de6:	2383      	movs	r3, #131	; 0x83
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4833      	ldr	r0, [pc, #204]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000dfe:	f004 fa2b 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e02:	2320      	movs	r3, #32
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000e1a:	f004 fa1d 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = REED_4_Pin|REED_5_Pin|REED_8_Pin;
 8000e1e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000e38:	f004 fa0e 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pin : REED_D_Pin */
  GPIO_InitStruct.Pin = REED_D_Pin;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REED_D_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481f      	ldr	r0, [pc, #124]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000e50:	f004 fa02 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 8000e54:	2341      	movs	r3, #65	; 0x41
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000e6c:	f004 f9f4 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_C_Pin
                           REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_C_Pin
 8000e70:	f246 4330 	movw	r3, #25648	; 0x6430
 8000e74:	617b      	str	r3, [r7, #20]
                          |REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000e86:	f004 f9e7 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
  GPIO_InitStruct.Pin = BOTON_1_Pin|BOTON_2_Pin|BOTON_3_Pin;
 8000e8a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000ea0:	f004 f9da 	bl	8005258 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000ea4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000eba:	f004 f9cd 	bl	8005258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 fe32 	bl	8007b4a <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <StartDefaultTask+0x8>

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f003 fd19 	bl	8004930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0a:	b672      	cpsid	i
}
 8000f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f0e:	e7fe      	b.n	8000f0e <Error_Handler+0x8>

08000f10 <get_last_sensor_change>:

extern uint8_t reed_data[8];

extern game_state_t engine_game_state;

piece_change_t get_last_sensor_change(){
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0

    //get_sensors(new_sensor_state);


    piece_change_t ret = {0, NONE};
 8000f16:	2300      	movs	r3, #0
 8000f18:	713b      	strb	r3, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e054      	b.n	8000fce <get_last_sensor_change+0xbe>
        for (int file = 0; file < 8; file++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e04b      	b.n	8000fc2 <get_last_sensor_change+0xb2>
            char new_state = (reed_data[rank]&(1<<file)) != 0;
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <get_last_sensor_change+0xe4>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa42 f303 	asr.w	r3, r2, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <get_last_sensor_change+0xe8>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	fa42 f303 	asr.w	r3, r2, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f6a:	7afa      	ldrb	r2, [r7, #11]
 8000f6c:	7abb      	ldrb	r3, [r7, #10]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d024      	beq.n	8000fbc <get_last_sensor_change+0xac>
                ret.square_affected = COORD2SQ(rank, file);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <get_last_sensor_change+0x7e>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e000      	b.n	8000f90 <get_last_sensor_change+0x80>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00b      	b.n	8000fb0 <get_last_sensor_change+0xa0>
                    previous_sensor_state[i] = reed_data[i];
 8000f98:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <get_last_sensor_change+0xe4>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <get_last_sensor_change+0xe8>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	ddf0      	ble.n	8000f98 <get_last_sensor_change+0x88>
                }
                return ret;
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	813b      	strh	r3, [r7, #8]
 8000fba:	e00d      	b.n	8000fd8 <get_last_sensor_change+0xc8>
        for (int file = 0; file < 8; file++) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	ddb0      	ble.n	8000f2a <get_last_sensor_change+0x1a>
    for (int rank = 0; rank < 8; rank++) {
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	dda7      	ble.n	8000f24 <get_last_sensor_change+0x14>
            }
        }
    }
    return ret;
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	813b      	strh	r3, [r7, #8]
}
 8000fd8:	2300      	movs	r3, #0
 8000fda:	7a3a      	ldrb	r2, [r7, #8]
 8000fdc:	f362 0307 	bfi	r3, r2, #0, #8
 8000fe0:	7a7a      	ldrb	r2, [r7, #9]
 8000fe2:	f362 230f 	bfi	r3, r2, #8, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20001ccc 	.word	0x20001ccc
 8000ff8:	200004c0 	.word	0x200004c0

08000ffc <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	e044      	b.n	8001096 <is_board_ok+0x9a>
        for (int file = 0; file < 8; file++) {
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	e03b      	b.n	800108a <is_board_ok+0x8e>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <is_board_ok+0xac>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	fa42 f303 	asr.w	r3, r2, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d010      	beq.n	800104c <is_board_ok+0x50>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f8d0 	bl	80031e0 <engine_get_piece>
 8001040:	4603      	mov	r3, r0
 8001042:	2b06      	cmp	r3, #6
 8001044:	d102      	bne.n	800104c <is_board_ok+0x50>
                board_ok = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e01b      	b.n	8001084 <is_board_ok+0x88>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <is_board_ok+0xac>)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	fa42 f303 	asr.w	r3, r2, r3
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10f      	bne.n	8001084 <is_board_ok+0x88>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	b2da      	uxtb	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f002 f8b3 	bl	80031e0 <engine_get_piece>
 800107a:	4603      	mov	r3, r0
 800107c:	2b06      	cmp	r3, #6
 800107e:	d001      	beq.n	8001084 <is_board_ok+0x88>
                board_ok = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b07      	cmp	r3, #7
 800108e:	ddc0      	ble.n	8001012 <is_board_ok+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b07      	cmp	r3, #7
 800109a:	ddb7      	ble.n	800100c <is_board_ok+0x10>
            }
        }
    }
    return board_ok;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001ccc 	.word	0x20001ccc

080010ac <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e00f      	b.n	80010e4 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d102      	bne.n	80010de <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbeb      	blt.n	80010c4 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <movement_fsm>:

move_t cpu_movement;

char capturing = 0;

void movement_fsm(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 8001102:	f7ff ff05 	bl	8000f10 <get_last_sensor_change>
 8001106:	4603      	mov	r3, r0
 8001108:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 800110a:	4bac      	ldr	r3, [pc, #688]	; (80013bc <movement_fsm+0x2c0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b09      	cmp	r3, #9
 8001110:	f200 818a 	bhi.w	8001428 <movement_fsm+0x32c>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <movement_fsm+0x20>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001145 	.word	0x08001145
 8001120:	080011c5 	.word	0x080011c5
 8001124:	08001429 	.word	0x08001429
 8001128:	0800132f 	.word	0x0800132f
 800112c:	08001429 	.word	0x08001429
 8001130:	0800134b 	.word	0x0800134b
 8001134:	08001381 	.word	0x08001381
 8001138:	080013dd 	.word	0x080013dd
 800113c:	080013fb 	.word	0x080013fb
 8001140:	08001421 	.word	0x08001421
    {
    case WAIT_STATE:
        if(piece_change.piece_action == REMOVED){
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d131      	bne.n	80011ae <movement_fsm+0xb2>
            movement_state = PIECE_LIFTED_STATE;
 800114a:	4b9c      	ldr	r3, [pc, #624]	; (80013bc <movement_fsm+0x2c0>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001150:	793a      	ldrb	r2, [r7, #4]
 8001152:	4b9b      	ldr	r3, [pc, #620]	; (80013c0 <movement_fsm+0x2c4>)
 8001154:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves, 1);
 8001156:	2101      	movs	r1, #1
 8001158:	489a      	ldr	r0, [pc, #616]	; (80013c4 <movement_fsm+0x2c8>)
 800115a:	f001 ff7d 	bl	8003058 <engine_list_moves>
 800115e:	4603      	mov	r3, r0
 8001160:	4a99      	ldr	r2, [pc, #612]	; (80013c8 <movement_fsm+0x2cc>)
 8001162:	6013      	str	r3, [r2, #0]



            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 8001164:	4b96      	ldr	r3, [pc, #600]	; (80013c0 <movement_fsm+0x2c4>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4a97      	ldr	r2, [pc, #604]	; (80013c8 <movement_fsm+0x2cc>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4995      	ldr	r1, [pc, #596]	; (80013c4 <movement_fsm+0x2c8>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff9c 	bl	80010ac <get_lifted_moves>
 8001174:	60b8      	str	r0, [r7, #8]

            if(lifted_piece_valid_moves == 0){
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <movement_fsm+0x8e>
                movement_state = ERROR_STATE;
 800117c:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <movement_fsm+0x2c0>)
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001182:	2002      	movs	r0, #2
 8001184:	f003 f952 	bl	800442c <lighting_set_state>
        }
        else if(piece_change.piece_action == PLACED){
            movement_state = ERROR_STATE;
            lighting_set_state(LIGHTING_ERROR_STATE);
        }
        break;
 8001188:	e150      	b.n	800142c <movement_fsm+0x330>
                movement_state = PIECE_LIFTED_STATE;
 800118a:	4b8c      	ldr	r3, [pc, #560]	; (80013bc <movement_fsm+0x2c0>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 8001190:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <movement_fsm+0x2c4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f959 	bl	800444c <lighting_piece_lifted_square>
                lighting_set_valid_moves(valid_moves, total_valid_moves);
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <movement_fsm+0x2cc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4888      	ldr	r0, [pc, #544]	; (80013c4 <movement_fsm+0x2c8>)
 80011a2:	f003 f973 	bl	800448c <lighting_set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 80011a6:	2001      	movs	r0, #1
 80011a8:	f003 f940 	bl	800442c <lighting_set_state>
        break;
 80011ac:	e13e      	b.n	800142c <movement_fsm+0x330>
        else if(piece_change.piece_action == PLACED){
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	f040 813b 	bne.w	800142c <movement_fsm+0x330>
            movement_state = ERROR_STATE;
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <movement_fsm+0x2c0>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 80011bc:	2002      	movs	r0, #2
 80011be:	f003 f935 	bl	800442c <lighting_set_state>
        break;
 80011c2:	e133      	b.n	800142c <movement_fsm+0x330>
    
    case PIECE_LIFTED_STATE:
        if(piece_change.piece_action == PLACED){
 80011c4:	797b      	ldrb	r3, [r7, #5]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d158      	bne.n	800127c <movement_fsm+0x180>
            move_t move_played;
            move_played.from = square_lifted;
 80011ca:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <movement_fsm+0x2c4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f001 ff2d 	bl	8003034 <engine_move_piece>
 80011da:	4603      	mov	r3, r0
 80011dc:	73bb      	strb	r3, [r7, #14]
            if(capturing){
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <movement_fsm+0x2d0>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d013      	beq.n	800120e <movement_fsm+0x112>
                if(cpu_player == COLOR_EMPTY){
 80011e6:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <movement_fsm+0x2d4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d106      	bne.n	80011fc <movement_fsm+0x100>
                    movement_state = WAIT_STATE;
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <movement_fsm+0x2c0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
                    //printf("Eval: %d\n", engine_negamax_seach(engine_game_state, 1, MIN_EVAL, MAX_EVAL));
                    lighting_set_state(LIGHTING_IDLE_STATE);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f003 f919 	bl	800442c <lighting_set_state>
 80011fa:	e005      	b.n	8001208 <movement_fsm+0x10c>
                }
                else{
                    movement_state = CPU_THINKING_STATE;
 80011fc:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <movement_fsm+0x2c0>)
 80011fe:	2205      	movs	r2, #5
 8001200:	701a      	strb	r2, [r3, #0]
                    lighting_set_state(LIGHTING_CPU_THINKING_STATE);
 8001202:	2004      	movs	r0, #4
 8001204:	f003 f912 	bl	800442c <lighting_set_state>
                }
                capturing = 0;
 8001208:	4b70      	ldr	r3, [pc, #448]	; (80013cc <movement_fsm+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
            }
            if(move_ok){
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02c      	beq.n	800126e <movement_fsm+0x172>
                total_valid_moves = engine_list_moves(valid_moves, 1);
 8001214:	2101      	movs	r1, #1
 8001216:	486b      	ldr	r0, [pc, #428]	; (80013c4 <movement_fsm+0x2c8>)
 8001218:	f001 ff1e 	bl	8003058 <engine_list_moves>
 800121c:	4603      	mov	r3, r0
 800121e:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <movement_fsm+0x2cc>)
 8001220:	6013      	str	r3, [r2, #0]
                if(total_valid_moves == 0){
 8001222:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <movement_fsm+0x2cc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <movement_fsm+0x14e>
                    lighting_set_winner(1 - engine_game_state.side_to_move);
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <movement_fsm+0x2d8>)
 800122c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001230:	f1c3 0301 	rsb	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f918 	bl	800446c <lighting_set_winner>
                    lighting_set_state(LIGHTING_GAME_FINISHED_STATE);
 800123c:	2008      	movs	r0, #8
 800123e:	f003 f8f5 	bl	800442c <lighting_set_state>
                    movement_state = GAME_FINISHED_STATE;
 8001242:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <movement_fsm+0x2c0>)
 8001244:	2209      	movs	r2, #9
 8001246:	701a      	strb	r2, [r3, #0]
                movement_state = ERROR_STATE;
                lighting_set_state(LIGHTING_ERROR_STATE);
            }
        }
        
        break;
 8001248:	e0f2      	b.n	8001430 <movement_fsm+0x334>
                    if(cpu_player == COLOR_EMPTY){
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <movement_fsm+0x2d4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d106      	bne.n	8001260 <movement_fsm+0x164>
                        movement_state = WAIT_STATE;
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <movement_fsm+0x2c0>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
                        lighting_set_state(LIGHTING_IDLE_STATE);
 8001258:	2000      	movs	r0, #0
 800125a:	f003 f8e7 	bl	800442c <lighting_set_state>
        break;
 800125e:	e0e7      	b.n	8001430 <movement_fsm+0x334>
                        movement_state = CPU_THINKING_STATE;
 8001260:	4b56      	ldr	r3, [pc, #344]	; (80013bc <movement_fsm+0x2c0>)
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
                        lighting_set_state(LIGHTING_CPU_THINKING_STATE);
 8001266:	2004      	movs	r0, #4
 8001268:	f003 f8e0 	bl	800442c <lighting_set_state>
        break;
 800126c:	e0e0      	b.n	8001430 <movement_fsm+0x334>
                movement_state = ERROR_STATE;
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <movement_fsm+0x2c0>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001274:	2002      	movs	r0, #2
 8001276:	f003 f8d9 	bl	800442c <lighting_set_state>
        break;
 800127a:	e0d9      	b.n	8001430 <movement_fsm+0x334>
        else if(piece_change.piece_action == REMOVED){
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 80d6 	bne.w	8001430 <movement_fsm+0x334>
            total_valid_moves = engine_list_moves(valid_moves, 1);
 8001284:	2101      	movs	r1, #1
 8001286:	484f      	ldr	r0, [pc, #316]	; (80013c4 <movement_fsm+0x2c8>)
 8001288:	f001 fee6 	bl	8003058 <engine_list_moves>
 800128c:	4603      	mov	r3, r0
 800128e:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <movement_fsm+0x2cc>)
 8001290:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e038      	b.n	800130e <movement_fsm+0x212>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 800129c:	4949      	ldr	r1, [pc, #292]	; (80013c4 <movement_fsm+0x2c8>)
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <movement_fsm+0x2c4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d12a      	bne.n	8001308 <movement_fsm+0x20c>
 80012b2:	4944      	ldr	r1, [pc, #272]	; (80013c4 <movement_fsm+0x2c8>)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	3301      	adds	r3, #1
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	793b      	ldrb	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d11f      	bne.n	8001308 <movement_fsm+0x20c>
                    captured_piece_is_valid = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f8bc 	bl	800444c <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 80012d4:	2003      	movs	r0, #3
 80012d6:	f003 f8a9 	bl	800442c <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 80012da:	493a      	ldr	r1, [pc, #232]	; (80013c4 <movement_fsm+0x2c8>)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	7859      	ldrb	r1, [r3, #1]
 80012ea:	0209      	lsls	r1, r1, #8
 80012ec:	430a      	orrs	r2, r1
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	f362 0317 	bfi	r3, r2, #0, #24
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fe9a 	bl	8003034 <engine_move_piece>
                    capturing = 1;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <movement_fsm+0x2d0>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
                    break;
 8001306:	e007      	b.n	8001318 <movement_fsm+0x21c>
            for(int i = 0; i < total_valid_moves; i++){
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <movement_fsm+0x2cc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbc1      	blt.n	800129c <movement_fsm+0x1a0>
            if(!captured_piece_is_valid){
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 8088 	bne.w	8001430 <movement_fsm+0x334>
                movement_state = ERROR_STATE;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <movement_fsm+0x2c0>)
 8001322:	2203      	movs	r2, #3
 8001324:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001326:	2002      	movs	r0, #2
 8001328:	f003 f880 	bl	800442c <lighting_set_state>
        break;
 800132c:	e080      	b.n	8001430 <movement_fsm+0x334>

    case ERROR_STATE:
        board_ok = is_board_ok();
 800132e:	f7ff fe65 	bl	8000ffc <is_board_ok>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]

        if(board_ok){
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d07b      	beq.n	8001434 <movement_fsm+0x338>
            movement_state = WAIT_STATE;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <movement_fsm+0x2c0>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 8001342:	2000      	movs	r0, #0
 8001344:	f003 f872 	bl	800442c <lighting_set_state>
        }
        break;
 8001348:	e074      	b.n	8001434 <movement_fsm+0x338>

    case CPU_THINKING_STATE:
        cpu_movement = engine_search();
 800134a:	f002 f841 	bl	80033d0 <engine_search>
 800134e:	4602      	mov	r2, r0
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <movement_fsm+0x2dc>)
 8001352:	4611      	mov	r1, r2
 8001354:	7019      	strb	r1, [r3, #0]
 8001356:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800135a:	7059      	strb	r1, [r3, #1]
 800135c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001360:	709a      	strb	r2, [r3, #2]
        movement_state = CPU_LIFT_FROM_STATE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <movement_fsm+0x2c0>)
 8001364:	2206      	movs	r2, #6
 8001366:	701a      	strb	r2, [r3, #0]
        lighting_set_cpu_movement(cpu_movement.from, cpu_movement.to);
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <movement_fsm+0x2dc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <movement_fsm+0x2dc>)
 800136e:	7852      	ldrb	r2, [r2, #1]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f003 f8a0 	bl	80044b8 <lighting_set_cpu_movement>
        lighting_set_state(LIGHTING_CPU_LIFT_FROM_STATE);
 8001378:	2005      	movs	r0, #5
 800137a:	f003 f857 	bl	800442c <lighting_set_state>
        /*
        if(engine_finished()){

        }
        */
        break;
 800137e:	e060      	b.n	8001442 <movement_fsm+0x346>

    case CPU_LIFT_FROM_STATE:

        //Player must lift cpu piece
        if(piece_change.piece_action == REMOVED){
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d158      	bne.n	8001438 <movement_fsm+0x33c>
            if(piece_change.square_affected == cpu_movement.from){
 8001386:	793a      	ldrb	r2, [r7, #4]
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <movement_fsm+0x2dc>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d153      	bne.n	8001438 <movement_fsm+0x33c>
                if(engine_get_piece(cpu_movement.to) != PIECE_EMPTY){
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <movement_fsm+0x2dc>)
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	4618      	mov	r0, r3
 8001396:	f001 ff23 	bl	80031e0 <engine_get_piece>
 800139a:	4603      	mov	r3, r0
 800139c:	2b06      	cmp	r3, #6
 800139e:	d006      	beq.n	80013ae <movement_fsm+0x2b2>
                    movement_state = CPU_LIFT_CAPTURED_STATE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <movement_fsm+0x2c0>)
 80013a2:	2207      	movs	r2, #7
 80013a4:	701a      	strb	r2, [r3, #0]
                    lighting_set_state(LIGHTING_CPU_LIFT_CAPTURED_STATE);
 80013a6:	2006      	movs	r0, #6
 80013a8:	f003 f840 	bl	800442c <lighting_set_state>
                    lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
                    movement_state = CPU_PLACE_TO_STATE;
                }
            }
        }
        break;
 80013ac:	e044      	b.n	8001438 <movement_fsm+0x33c>
                    lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f003 f83c 	bl	800442c <lighting_set_state>
                    movement_state = CPU_PLACE_TO_STATE;
 80013b4:	4b01      	ldr	r3, [pc, #4]	; (80013bc <movement_fsm+0x2c0>)
 80013b6:	2208      	movs	r2, #8
 80013b8:	701a      	strb	r2, [r3, #0]
        break;
 80013ba:	e03d      	b.n	8001438 <movement_fsm+0x33c>
 80013bc:	200004c8 	.word	0x200004c8
 80013c0:	200004c9 	.word	0x200004c9
 80013c4:	200004d0 	.word	0x200004d0
 80013c8:	200004cc 	.word	0x200004cc
 80013cc:	200007d3 	.word	0x200007d3
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000838 	.word	0x20000838
 80013d8:	200007d0 	.word	0x200007d0

    case CPU_LIFT_CAPTURED_STATE:
        //Player must lift cpu piece
        if(piece_change.piece_action == REMOVED){
 80013dc:	797b      	ldrb	r3, [r7, #5]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d12c      	bne.n	800143c <movement_fsm+0x340>
            if(piece_change.square_affected == cpu_movement.to){
 80013e2:	793a      	ldrb	r2, [r7, #4]
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <movement_fsm+0x350>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d127      	bne.n	800143c <movement_fsm+0x340>
                movement_state = CPU_PLACE_TO_STATE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <movement_fsm+0x354>)
 80013ee:	2208      	movs	r2, #8
 80013f0:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f003 f81a 	bl	800442c <lighting_set_state>
            }
        }
        break;
 80013f8:	e020      	b.n	800143c <movement_fsm+0x340>

    case CPU_PLACE_TO_STATE:
        //Player must lift cpu piece
        if(piece_change.piece_action == PLACED){
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d11f      	bne.n	8001440 <movement_fsm+0x344>
            if(piece_change.square_affected == cpu_movement.to){
 8001400:	793a      	ldrb	r2, [r7, #4]
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <movement_fsm+0x350>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	429a      	cmp	r2, r3
 8001408:	d11a      	bne.n	8001440 <movement_fsm+0x344>
                movement_state = WAIT_STATE;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <movement_fsm+0x354>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
                engine_move_piece(cpu_movement);
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <movement_fsm+0x350>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f001 fe0e 	bl	8003034 <engine_move_piece>
                lighting_set_state(LIGHTING_IDLE_STATE);
 8001418:	2000      	movs	r0, #0
 800141a:	f003 f807 	bl	800442c <lighting_set_state>
            }
        }
        break;
 800141e:	e00f      	b.n	8001440 <movement_fsm+0x344>

    case GAME_FINISHED_STATE:
        lighting_set_state(GAME_FINISHED_STATE);
 8001420:	2009      	movs	r0, #9
 8001422:	f003 f803 	bl	800442c <lighting_set_state>
    break;
 8001426:	e00c      	b.n	8001442 <movement_fsm+0x346>

    default:
        break;
 8001428:	bf00      	nop
 800142a:	e00a      	b.n	8001442 <movement_fsm+0x346>
        break;
 800142c:	bf00      	nop
 800142e:	e008      	b.n	8001442 <movement_fsm+0x346>
        break;
 8001430:	bf00      	nop
 8001432:	e006      	b.n	8001442 <movement_fsm+0x346>
        break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <movement_fsm+0x346>
        break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <movement_fsm+0x346>
        break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <movement_fsm+0x346>
        break;
 8001440:	bf00      	nop
    }
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200007d0 	.word	0x200007d0
 8001450:	200004c8 	.word	0x200004c8

08001454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x54>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_MspInit+0x54>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x54>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_MspInit+0x54>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_MspInit+0x54>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_MspInit+0x54>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	210f      	movs	r1, #15
 8001496:	f06f 0001 	mvn.w	r0, #1
 800149a:	f003 fb21 	bl	8004ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <HAL_I2C_MspInit+0x8c>)
 8001508:	f003 fea6 	bl	8005258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x88>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <HAL_TIM_PWM_MspInit+0xc0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d151      	bne.n	80015f2 <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_TIM_PWM_MspInit+0xc4>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_TIM_PWM_MspInit+0xc4>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_TIM_PWM_MspInit+0xc4>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_TIM_PWM_MspInit+0xcc>)
 800156e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 8001572:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001576:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 800157a:	2240      	movs	r2, #64	; 0x40
 800157c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 8001586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 800158e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001592:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015b0:	f003 fac0 	bl	8004b34 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80015ba:	f7ff fca4 	bl	8000f06 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
 80015c4:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_TIM_PWM_MspInit+0xc8>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2105      	movs	r1, #5
 80015e6:	201a      	movs	r0, #26
 80015e8:	f003 fa7a 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015ec:	201a      	movs	r0, #26
 80015ee:	f003 fa93 	bl	8004b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010000 	.word	0x40010000
 8001600:	40023800 	.word	0x40023800
 8001604:	20000450 	.word	0x20000450
 8001608:	40026470 	.word	0x40026470

0800160c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_TIM_MspPostInit+0x68>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d11e      	bne.n	800166c <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_TIM_MspPostInit+0x6c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_TIM_MspPostInit+0x6c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_TIM_MspPostInit+0x6c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 800164a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_TIM_MspPostInit+0x70>)
 8001668:	f003 fdf6 	bl	8005258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010000 	.word	0x40010000
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_InitTick+0xe8>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a33      	ldr	r2, [pc, #204]	; (8001768 <HAL_InitTick+0xe8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_InitTick+0xe8>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ac:	f107 0210 	add.w	r2, r7, #16
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 f854 	bl	8006764 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016c6:	f005 f839 	bl	800673c <HAL_RCC_GetPCLK1Freq>
 80016ca:	6378      	str	r0, [r7, #52]	; 0x34
 80016cc:	e004      	b.n	80016d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ce:	f005 f835 	bl	800673c <HAL_RCC_GetPCLK1Freq>
 80016d2:	4603      	mov	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	4a24      	ldr	r2, [pc, #144]	; (800176c <HAL_InitTick+0xec>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3b01      	subs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_InitTick+0xf0>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_InitTick+0xf0>)
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_InitTick+0xf0>)
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_InitTick+0xf0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_InitTick+0xf0>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_InitTick+0xf0>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800170e:	4818      	ldr	r0, [pc, #96]	; (8001770 <HAL_InitTick+0xf0>)
 8001710:	f005 f85a 	bl	80067c8 <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800171a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11b      	bne.n	800175a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <HAL_InitTick+0xf0>)
 8001724:	f005 f8aa 	bl	800687c <HAL_TIM_Base_Start_IT>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800172e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001732:	2b00      	cmp	r3, #0
 8001734:	d111      	bne.n	800175a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001736:	201c      	movs	r0, #28
 8001738:	f003 f9ee 	bl	8004b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	d808      	bhi.n	8001754 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001742:	2200      	movs	r2, #0
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	201c      	movs	r0, #28
 8001748:	f003 f9ca 	bl	8004ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_InitTick+0xf4>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e002      	b.n	800175a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800175a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800175e:	4618      	mov	r0, r3
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	431bde83 	.word	0x431bde83
 8001770:	200007d4 	.word	0x200007d4
 8001774:	2000009c 	.word	0x2000009c

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>
	...

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  static volatile int junk = 0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(junk){
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HardFault_Handler+0x1c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d100      	bne.n	800178e <HardFault_Handler+0xe>
 800178c:	e7fa      	b.n	8001784 <HardFault_Handler+0x4>
		  break;
 800178e:	bf00      	nop
	  }
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000081c 	.word	0x2000081c

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017c6:	f005 fb81 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000408 	.word	0x20000408

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f005 fb77 	bl	8006ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200007d4 	.word	0x200007d4

080017e8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA2_Stream4_IRQHandler+0x10>)
 80017ee:	f003 fac9 	bl	8004d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000450 	.word	0x20000450

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <t_Timer>:
uint8_t modo_de_juego = 0, mostrar_tiempo = 0, contar = 0, actualizar_display =
		0;

uint32_t segundos_j1 = 0, segundos_j2 = 0, incremento = 0;

void t_Timer() {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 1000; //1seg
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	607b      	str	r3, [r7, #4]
	while (1) {
		if (!get_error_position() && modo_de_juego == 1) {
 800182c:	f001 f936 	bl	8002a9c <get_error_position>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11b      	bne.n	800186e <t_Timer+0x4e>
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <t_Timer+0x60>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d117      	bne.n	800186e <t_Timer+0x4e>
			if (get_side_to_move() == 0) {
 800183e:	f001 f8f5 	bl	8002a2c <get_side_to_move>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <t_Timer+0x3c>
				if (segundos_j1 > 0)
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <t_Timer+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <t_Timer+0x4e>
					segundos_j1--;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <t_Timer+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <t_Timer+0x64>)
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e008      	b.n	800186e <t_Timer+0x4e>
			}

			else {
				if (segundos_j2 > 0)
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <t_Timer+0x68>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <t_Timer+0x4e>
					segundos_j2--;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <t_Timer+0x68>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <t_Timer+0x68>)
 800186c:	6013      	str	r3, [r2, #0]
			}

		}

		actualizar_display = 1;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <t_Timer+0x6c>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001874:	463b      	mov	r3, r7
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f007 f8cb 	bl	8008a14 <vTaskDelayUntil>
		if (!get_error_position() && modo_de_juego == 1) {
 800187e:	e7d5      	b.n	800182c <t_Timer+0xc>
 8001880:	20000821 	.word	0x20000821
 8001884:	20000824 	.word	0x20000824
 8001888:	20000828 	.word	0x20000828
 800188c:	20000823 	.word	0x20000823

08001890 <t_LCD>:
	}
}

void t_LCD(void*) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <t_LCD+0x6c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <t_LCD+0x16>
		tareas_error_handler(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f001 f8ab 	bl	80029fc <tareas_error_handler>
	}

	lcd_init();
 80018a6:	f7fe fe19 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <t_LCD+0x6c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f107 0108 	add.w	r1, r7, #8
 80018b2:	f04f 32ff 	mov.w	r2, #4294967295
 80018b6:	4618      	mov	r0, r3
 80018b8:	f006 fbd0 	bl	800805c <xQueueReceive>
		switch (msg.type) {
 80018bc:	7a3b      	ldrb	r3, [r7, #8]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d014      	beq.n	80018ec <t_LCD+0x5c>
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	dcf1      	bgt.n	80018aa <t_LCD+0x1a>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <t_LCD+0x40>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d009      	beq.n	80018e2 <t_LCD+0x52>
 80018ce:	e014      	b.n	80018fa <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 80018d0:	7a7b      	ldrb	r3, [r7, #9]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe40 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4618      	mov	r0, r3
 80018dc:	f007 f918 	bl	8008b10 <vTaskDelay>
			break;
 80018e0:	e00b      	b.n	80018fa <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 80018e2:	7a7b      	ldrb	r3, [r7, #9]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe67 	bl	80005b8 <lcd_send_data>
			break;
 80018ea:	e006      	b.n	80018fa <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	3301      	adds	r3, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe90 	bl	8000618 <lcd_send_string>
			break;
 80018f8:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80018fa:	e7d6      	b.n	80018aa <t_LCD+0x1a>
 80018fc:	200004b4 	.word	0x200004b4

08001900 <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	2202      	movs	r2, #2
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe ff34 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	2202      	movs	r2, #2
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe ff2d 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2202      	movs	r2, #2
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe ff26 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <t_Botones+0x13c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <t_Botones+0x40>
		tareas_error_handler(4);
 800193a:	2004      	movs	r0, #4
 800193c:	f001 f85e 	bl	80029fc <tareas_error_handler>
	}

	uint8_t msg = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	483e      	ldr	r0, [pc, #248]	; (8001a40 <t_Botones+0x140>)
 8001948:	f003 fe0a 	bl	8005560 <HAL_GPIO_ReadPin>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe ff38 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 800195c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001960:	4837      	ldr	r0, [pc, #220]	; (8001a40 <t_Botones+0x140>)
 8001962:	f003 fdfd 	bl	8005560 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe ff2b 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 8001976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197a:	4831      	ldr	r0, [pc, #196]	; (8001a40 <t_Botones+0x140>)
 800197c:	f003 fdf0 	bl	8005560 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe ff1e 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) { // Boton arriba (no contra el tablero)
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe ff9d 	bl	80008d4 <debounce_flank>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d012      	beq.n	80019c6 <t_Botones+0xc6>
			msg = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <t_Botones+0x13c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 fd43 	bl	8008434 <uxQueueMessagesWaiting>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b13      	cmp	r3, #19
 80019b2:	d808      	bhi.n	80019c6 <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <t_Botones+0x13c>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f107 010f 	add.w	r1, r7, #15
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	f006 fa4d 	bl	8007e60 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) { // Boton abajo (contra el tablero)
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe ff82 	bl	80008d4 <debounce_flank>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d012      	beq.n	80019fc <t_Botones+0xfc>
			msg = 2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <t_Botones+0x13c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fd28 	bl	8008434 <uxQueueMessagesWaiting>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b13      	cmp	r3, #19
 80019e8:	d808      	bhi.n	80019fc <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <t_Botones+0x13c>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f107 010f 	add.w	r1, r7, #15
 80019f2:	2300      	movs	r3, #0
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	f006 fa32 	bl	8007e60 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) { // Boton verde
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe ff67 	bl	80008d4 <debounce_flank>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <t_Botones+0x132>
			msg = 3;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <t_Botones+0x13c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 fd0d 	bl	8008434 <uxQueueMessagesWaiting>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b13      	cmp	r3, #19
 8001a1e:	d808      	bhi.n	8001a32 <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <t_Botones+0x13c>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f107 010f 	add.w	r1, r7, #15
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	f006 fa17 	bl	8007e60 <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f007 f86c 	bl	8008b10 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001a38:	e784      	b.n	8001944 <t_Botones+0x44>
 8001a3a:	bf00      	nop
 8001a3c:	200004b8 	.word	0x200004b8
 8001a40:	40020800 	.word	0x40020800

08001a44 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b096      	sub	sp, #88	; 0x58
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001a4c:	4ba0      	ldr	r3, [pc, #640]	; (8001cd0 <t_userLoop+0x28c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <t_userLoop+0x16>
		tareas_error_handler(2);
 8001a54:	2002      	movs	r0, #2
 8001a56:	f000 ffd1 	bl	80029fc <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <t_userLoop+0x290>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <t_userLoop+0x24>
		tareas_error_handler(4);
 8001a62:	2004      	movs	r0, #4
 8001a64:	f000 ffca 	bl	80029fc <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 8001a68:	4b9b      	ldr	r3, [pc, #620]	; (8001cd8 <t_userLoop+0x294>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <t_userLoop+0x32>
		tareas_error_handler(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f000 ffc3 	bl	80029fc <tareas_error_handler>
	}

	user_htim1 = &htim1;
 8001a76:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <t_userLoop+0x298>)
 8001a78:	4a99      	ldr	r2, [pc, #612]	; (8001ce0 <t_userLoop+0x29c>)
 8001a7a:	601a      	str	r2, [r3, #0]
	user_init();
 8001a7c:	f000 ffc6 	bl	8002a0c <user_init>

	ws2812_init();
 8001a80:	f002 fadc 	bl	800403c <ws2812_init>

	uint8_t button = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 33; // 30fps aprox
 8001a8a:	2321      	movs	r3, #33	; 0x21
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50

	LCDQueueItem_t msg = { 0 };
 8001a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]

	char msg_tiempo[] = "-> JX - XX:XX    ";
 8001aa0:	4b90      	ldr	r3, [pc, #576]	; (8001ce4 <t_userLoop+0x2a0>)
 8001aa2:	f107 0420 	add.w	r4, r7, #32
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	8023      	strh	r3, [r4, #0]

	uint8_t prev_side_to_move = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	xQueueSend(buttons_queue, &button, 0);
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <t_userLoop+0x290>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f006 f9cd 	bl	8007e60 <xQueueGenericSend>

	while (1) {
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <t_userLoop+0x290>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f006 fac3 	bl	800805c <xQueueReceive>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <t_userLoop+0xa2>
			ME_general(button);
 8001adc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f9c9 	bl	8001e78 <ME_general>
		}

		switch (modo_de_juego) {
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <t_userLoop+0x2a4>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	f200 81a9 	bhi.w	8001e42 <t_userLoop+0x3fe>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <t_userLoop+0xb4>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001e43 	.word	0x08001e43
 8001afc:	08001b09 	.word	0x08001b09
 8001b00:	08001e11 	.word	0x08001e11
 8001b04:	08001e43 	.word	0x08001e43
		case 0:
			break;
		case 1:
			set_cpu_player(0);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f000 ffb1 	bl	8002a70 <set_cpu_player>
			user_loop(); // FSM CHESS
 8001b0e:	f001 f8f9 	bl	8002d04 <user_loop>

			// Detecto si hubo un cambio de turno para sumar incremento de tiempo
			if (prev_side_to_move != get_side_to_move()) {
 8001b12:	f000 ff8b 	bl	8002a2c <get_side_to_move>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d017      	beq.n	8001b52 <t_userLoop+0x10e>
				prev_side_to_move = get_side_to_move();
 8001b22:	f000 ff83 	bl	8002a2c <get_side_to_move>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if (prev_side_to_move)
 8001b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <t_userLoop+0x100>
					segundos_j1 += incremento;
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <t_userLoop+0x2a8>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <t_userLoop+0x2ac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a6b      	ldr	r2, [pc, #428]	; (8001cec <t_userLoop+0x2a8>)
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e006      	b.n	8001b52 <t_userLoop+0x10e>
				else
					segundos_j2 += incremento;
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <t_userLoop+0x2b0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <t_userLoop+0x2ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a69      	ldr	r2, [pc, #420]	; (8001cf4 <t_userLoop+0x2b0>)
 8001b50:	6013      	str	r3, [r2, #0]
			}

			//Imprimo tiempos si tengo que hacerlo
			if (actualizar_display && mostrar_tiempo) {
 8001b52:	4b69      	ldr	r3, [pc, #420]	; (8001cf8 <t_userLoop+0x2b4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8146 	beq.w	8001de8 <t_userLoop+0x3a4>
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <t_userLoop+0x2b8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8141 	beq.w	8001de8 <t_userLoop+0x3a4>
				actualizar_display = 0;
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <t_userLoop+0x2b4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
				msg = lcd_msg_first_line();
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fdc1 	bl	80006f6 <lcd_msg_first_line>
 8001b74:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001b78:	463d      	mov	r5, r7
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b82:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <t_userLoop+0x294>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	f006 f964 	bl	8007e60 <xQueueGenericSend>

				if (get_side_to_move() == 0) {
 8001b98:	f000 ff48 	bl	8002a2c <get_side_to_move>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <t_userLoop+0x16c>
					msg_tiempo[0] = '-';
 8001ba2:	232d      	movs	r3, #45	; 0x2d
 8001ba4:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = '>';
 8001ba8:	233e      	movs	r3, #62	; 0x3e
 8001baa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001bae:	e005      	b.n	8001bbc <t_userLoop+0x178>
				} else {
					msg_tiempo[0] = ' ';
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = ' ';
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				}

				// char * msg_tiempo = "JX - XX:XX";
				msg_tiempo[4] = '1';
 8001bbc:	2331      	movs	r3, #49	; 0x31
 8001bbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				msg_tiempo[8] = ((segundos_j1 / 60) / 10) + 48;
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <t_userLoop+0x2a8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <t_userLoop+0x2bc>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3330      	adds	r3, #48	; 0x30
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[9] = ((segundos_j1 / 60) % 10) + 48;
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <t_userLoop+0x2a8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <t_userLoop+0x2c0>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0959      	lsrs	r1, r3, #5
 8001be4:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <t_userLoop+0x2c4>)
 8001be6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	1aca      	subs	r2, r1, r3
 8001bf6:	b2d3      	uxtb	r3, r2
 8001bf8:	3330      	adds	r3, #48	; 0x30
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				msg_tiempo[11] = ((segundos_j1 % 60) / 10) + 48;
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <t_userLoop+0x2a8>)
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <t_userLoop+0x2c0>)
 8001c06:	fba3 2301 	umull	r2, r3, r3, r1
 8001c0a:	095a      	lsrs	r2, r3, #5
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	1aca      	subs	r2, r1, r3
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <t_userLoop+0x2c4>)
 8001c18:	fba3 2302 	umull	r2, r3, r3, r2
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3330      	adds	r3, #48	; 0x30
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				msg_tiempo[12] = ((segundos_j1 % 60) % 10) + 48;
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <t_userLoop+0x2a8>)
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <t_userLoop+0x2c0>)
 8001c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001c32:	095a      	lsrs	r2, r3, #5
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	1aca      	subs	r2, r1, r3
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <t_userLoop+0x2c4>)
 8001c40:	fba3 1302 	umull	r1, r3, r3, r2
 8001c44:	08d9      	lsrs	r1, r3, #3
 8001c46:	460b      	mov	r3, r1
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	1ad1      	subs	r1, r2, r3
 8001c50:	b2cb      	uxtb	r3, r1
 8001c52:	3330      	adds	r3, #48	; 0x30
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				msg = lcd_msg_from_string(msg_tiempo);
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	f107 0220 	add.w	r2, r7, #32
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fced 	bl	8000642 <lcd_msg_from_string>
 8001c68:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c6c:	463d      	mov	r5, r7
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c76:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <t_userLoop+0x294>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c82:	2300      	movs	r3, #0
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	f006 f8ea 	bl	8007e60 <xQueueGenericSend>
				msg = lcd_msg_second_line();
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fd53 	bl	800073a <lcd_msg_second_line>
 8001c94:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c98:	463d      	mov	r5, r7
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ca2:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <t_userLoop+0x294>)
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	f006 f8d4 	bl	8007e60 <xQueueGenericSend>

				if (get_side_to_move() == 1) {
 8001cb8:	f000 feb8 	bl	8002a2c <get_side_to_move>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d124      	bne.n	8001d0c <t_userLoop+0x2c8>
					msg_tiempo[0] = '-';
 8001cc2:	232d      	movs	r3, #45	; 0x2d
 8001cc4:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = '>';
 8001cc8:	233e      	movs	r3, #62	; 0x3e
 8001cca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001cce:	e023      	b.n	8001d18 <t_userLoop+0x2d4>
 8001cd0:	200004bc 	.word	0x200004bc
 8001cd4:	200004b8 	.word	0x200004b8
 8001cd8:	200004b4 	.word	0x200004b4
 8001cdc:	20000834 	.word	0x20000834
 8001ce0:	20000408 	.word	0x20000408
 8001ce4:	0800a228 	.word	0x0800a228
 8001ce8:	20000821 	.word	0x20000821
 8001cec:	20000824 	.word	0x20000824
 8001cf0:	2000082c 	.word	0x2000082c
 8001cf4:	20000828 	.word	0x20000828
 8001cf8:	20000823 	.word	0x20000823
 8001cfc:	20000822 	.word	0x20000822
 8001d00:	1b4e81b5 	.word	0x1b4e81b5
 8001d04:	88888889 	.word	0x88888889
 8001d08:	cccccccd 	.word	0xcccccccd
				} else {
					msg_tiempo[0] = ' ';
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = ' ';
 8001d12:	2320      	movs	r3, #32
 8001d14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				}

				msg_tiempo[4] = '2';
 8001d18:	2332      	movs	r3, #50	; 0x32
 8001d1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				msg_tiempo[8] = ((segundos_j2 / 60) / 10) + 48;
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <t_userLoop+0x414>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <t_userLoop+0x418>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3330      	adds	r3, #48	; 0x30
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[9] = ((segundos_j2 / 60) % 10) + 48;
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <t_userLoop+0x414>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <t_userLoop+0x41c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0959      	lsrs	r1, r3, #5
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <t_userLoop+0x420>)
 8001d42:	fba3 2301 	umull	r2, r3, r3, r1
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	1aca      	subs	r2, r1, r3
 8001d52:	b2d3      	uxtb	r3, r2
 8001d54:	3330      	adds	r3, #48	; 0x30
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				msg_tiempo[11] = ((segundos_j2 % 60) / 10) + 48;
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <t_userLoop+0x414>)
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <t_userLoop+0x41c>)
 8001d62:	fba3 2301 	umull	r2, r3, r3, r1
 8001d66:	095a      	lsrs	r2, r3, #5
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <t_userLoop+0x420>)
 8001d74:	fba3 2302 	umull	r2, r3, r3, r2
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3330      	adds	r3, #48	; 0x30
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				msg_tiempo[12] = ((segundos_j2 % 60) % 10) + 48;
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <t_userLoop+0x414>)
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <t_userLoop+0x41c>)
 8001d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d8e:	095a      	lsrs	r2, r3, #5
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	1aca      	subs	r2, r1, r3
 8001d9a:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <t_userLoop+0x420>)
 8001d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001da0:	08d9      	lsrs	r1, r3, #3
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	1ad1      	subs	r1, r2, r3
 8001dac:	b2cb      	uxtb	r3, r1
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				msg = lcd_msg_from_string(msg_tiempo);
 8001db6:	463b      	mov	r3, r7
 8001db8:	f107 0220 	add.w	r2, r7, #32
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fc3f 	bl	8000642 <lcd_msg_from_string>
 8001dc4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001dc8:	463d      	mov	r5, r7
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd2:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <t_userLoop+0x424>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001dde:	2300      	movs	r3, #0
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	f006 f83c 	bl	8007e60 <xQueueGenericSend>
			}
			if (get_finished_state()) {
 8001de8:	f000 fe32 	bl	8002a50 <get_finished_state>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <t_userLoop+0x3f8>
				modo_de_juego = 3;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <t_userLoop+0x428>)
 8001df4:	2203      	movs	r2, #3
 8001df6:	701a      	strb	r2, [r3, #0]
				button = 4;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				xQueueSend(buttons_queue, &button, 0);
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <t_userLoop+0x42c>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001e06:	2300      	movs	r3, #0
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f006 f829 	bl	8007e60 <xQueueGenericSend>
			}

			break;
 8001e0e:	e015      	b.n	8001e3c <t_userLoop+0x3f8>
		case 2:
			user_loop();
 8001e10:	f000 ff78 	bl	8002d04 <user_loop>
			if (get_finished_state()) {
 8001e14:	f000 fe1c 	bl	8002a50 <get_finished_state>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <t_userLoop+0x3fc>
				modo_de_juego = 3;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <t_userLoop+0x428>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
				button = 4;
 8001e24:	2304      	movs	r3, #4
 8001e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				xQueueSend(buttons_queue, &button, 0);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <t_userLoop+0x42c>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	f006 f813 	bl	8007e60 <xQueueGenericSend>
			}

			break;
 8001e3a:	e001      	b.n	8001e40 <t_userLoop+0x3fc>
			break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <t_userLoop+0x3fe>
			break;
 8001e40:	bf00      	nop
		case 3:
			break;
		}

		xSemaphoreGive(ws2812_sem);
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <t_userLoop+0x430>)
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f006 f808 	bl	8007e60 <xQueueGenericSend>
		vTaskDelay(33);
 8001e50:	2021      	movs	r0, #33	; 0x21
 8001e52:	f006 fe5d 	bl	8008b10 <vTaskDelay>
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001e56:	e636      	b.n	8001ac6 <t_userLoop+0x82>
 8001e58:	20000828 	.word	0x20000828
 8001e5c:	1b4e81b5 	.word	0x1b4e81b5
 8001e60:	88888889 	.word	0x88888889
 8001e64:	cccccccd 	.word	0xcccccccd
 8001e68:	200004b4 	.word	0x200004b4
 8001e6c:	20000821 	.word	0x20000821
 8001e70:	200004b8 	.word	0x200004b8
 8001e74:	200004bc 	.word	0x200004bc

08001e78 <ME_general>:
	}
}

static void ME_general(uint8_t button) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	77fb      	strb	r3, [r7, #31]
	static int8_t sub_estado = 0;
	LCDQueueItem_t msg = { 0 };
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]

	uint8_t aux_button = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (estado) {
 8001e9a:	4bae      	ldr	r3, [pc, #696]	; (8002154 <ME_general+0x2dc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	f200 856f 	bhi.w	8002982 <ME_general+0xb0a>
 8001ea4:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <ME_general+0x34>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001fcd 	.word	0x08001fcd
 8001eb4:	0800217d 	.word	0x0800217d
 8001eb8:	080024b5 	.word	0x080024b5
 8001ebc:	08002739 	.word	0x08002739
 8001ec0:	08002865 	.word	0x08002865
	case ME_GENERAL_RESET:
		modo_de_juego = 0;
 8001ec4:	4ba4      	ldr	r3, [pc, #656]	; (8002158 <ME_general+0x2e0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		msg = lcd_msg_clear();
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fbf0 	bl	80006b2 <lcd_msg_clear>
 8001ed2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ed6:	463d      	mov	r5, r7
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ee0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ee4:	4b9d      	ldr	r3, [pc, #628]	; (800215c <ME_general+0x2e4>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001eec:	2300      	movs	r3, #0
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	f005 ffb5 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fbfc 	bl	80006f6 <lcd_msg_first_line>
 8001efe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f02:	463d      	mov	r5, r7
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f0c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <ME_general+0x2e4>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	f005 ff9f 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Smart Chess");
 8001f22:	463b      	mov	r3, r7
 8001f24:	498e      	ldr	r1, [pc, #568]	; (8002160 <ME_general+0x2e8>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb8b 	bl	8000642 <lcd_msg_from_string>
 8001f2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f30:	463d      	mov	r5, r7
 8001f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f3a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f3e:	4b87      	ldr	r3, [pc, #540]	; (800215c <ME_general+0x2e4>)
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f46:	2300      	movs	r3, #0
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	f005 ff88 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001f50:	463b      	mov	r3, r7
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fbf1 	bl	800073a <lcd_msg_second_line>
 8001f58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f5c:	463d      	mov	r5, r7
 8001f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f66:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <ME_general+0x2e4>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f72:	2300      	movs	r3, #0
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	f005 ff72 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4979      	ldr	r1, [pc, #484]	; (8002164 <ME_general+0x2ec>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fb5e 	bl	8000642 <lcd_msg_from_string>
 8001f86:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f8a:	463d      	mov	r5, r7
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f94:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <ME_general+0x2e4>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa6:	f005 ff5b 	bl	8007e60 <xQueueGenericSend>

		if (button == 3) {
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	f040 84dd 	bne.w	800296c <ME_general+0xaf4>
			estado = ME_GENERAL_SELECCION_MODO;
 8001fb2:	4b68      	ldr	r3, [pc, #416]	; (8002154 <ME_general+0x2dc>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <ME_general+0x2f0>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f005 ff4c 	bl	8007e60 <xQueueGenericSend>
		}

		break;
 8001fc8:	f000 bcd0 	b.w	800296c <ME_general+0xaf4>
	case ME_GENERAL_SELECCION_MODO:
		msg = lcd_msg_clear();
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fb6f 	bl	80006b2 <lcd_msg_clear>
 8001fd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fd8:	463d      	mov	r5, r7
 8001fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fe2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <ME_general+0x2e4>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	f005 ff34 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fb7b 	bl	80006f6 <lcd_msg_first_line>
 8002000:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002004:	463d      	mov	r5, r7
 8002006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800200e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <ME_general+0x2e4>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800201a:	2300      	movs	r3, #0
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	f005 ff1e 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Modo:");
 8002024:	463b      	mov	r3, r7
 8002026:	4951      	ldr	r1, [pc, #324]	; (800216c <ME_general+0x2f4>)
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fb0a 	bl	8000642 <lcd_msg_from_string>
 800202e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002032:	463d      	mov	r5, r7
 8002034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002038:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <ME_general+0x2e4>)
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002048:	2300      	movs	r3, #0
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	f005 ff07 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002052:	463b      	mov	r3, r7
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fb70 	bl	800073a <lcd_msg_second_line>
 800205a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800205e:	463d      	mov	r5, r7
 8002060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002064:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002068:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <ME_general+0x2e4>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002074:	2300      	movs	r3, #0
 8002076:	f04f 32ff 	mov.w	r2, #4294967295
 800207a:	f005 fef1 	bl	8007e60 <xQueueGenericSend>
		if (sub_estado == 0) {
 800207e:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <ME_general+0x2f8>)
 8002080:	f993 3000 	ldrsb.w	r3, [r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d116      	bne.n	80020b6 <ME_general+0x23e>
			msg = lcd_msg_from_string("-> Jug vs Jug");
 8002088:	463b      	mov	r3, r7
 800208a:	493a      	ldr	r1, [pc, #232]	; (8002174 <ME_general+0x2fc>)
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fad8 	bl	8000642 <lcd_msg_from_string>
 8002092:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002096:	463d      	mov	r5, r7
 8002098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020a0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <ME_general+0x2e4>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020ac:	2300      	movs	r3, #0
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	f005 fed5 	bl	8007e60 <xQueueGenericSend>
		}
		if (sub_estado == 1) {
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <ME_general+0x2f8>)
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d116      	bne.n	80020ee <ME_general+0x276>
			msg = lcd_msg_from_string("-> Jug vs Maq");
 80020c0:	463b      	mov	r3, r7
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <ME_general+0x300>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fabc 	bl	8000642 <lcd_msg_from_string>
 80020ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020ce:	463d      	mov	r5, r7
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020d8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <ME_general+0x2e4>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020e4:	2300      	movs	r3, #0
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ea:	f005 feb9 	bl	8007e60 <xQueueGenericSend>
		}

		if (button == 3) {
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d116      	bne.n	8002122 <ME_general+0x2aa>
			estado =
					sub_estado == 0 ?
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <ME_general+0x2f8>)
 80020f6:	f993 3000 	ldrsb.w	r3, [r3]
							ME_GENERAL_SELECCION_TIEMPO : ME_GENERAL_JVM;
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <ME_general+0x28a>
 80020fe:	2202      	movs	r2, #2
 8002100:	e000      	b.n	8002104 <ME_general+0x28c>
 8002102:	2204      	movs	r2, #4
			estado =
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <ME_general+0x2dc>)
 8002106:	701a      	strb	r2, [r3, #0]
			sub_estado = 0;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <ME_general+0x2f8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <ME_general+0x2f0>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	f005 fea1 	bl	8007e60 <xQueueGenericSend>
		} else if (button != 0) {
			sub_estado = !sub_estado;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 800211e:	f000 bc27 	b.w	8002970 <ME_general+0xaf8>
		} else if (button != 0) {
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8423 	beq.w	8002970 <ME_general+0xaf8>
			sub_estado = !sub_estado;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <ME_general+0x2f8>)
 800212c:	f993 3000 	ldrsb.w	r3, [r3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	b25a      	sxtb	r2, r3
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <ME_general+0x2f8>)
 800213e:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <ME_general+0x2f0>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f005 fe88 	bl	8007e60 <xQueueGenericSend>
		break;
 8002150:	f000 bc0e 	b.w	8002970 <ME_general+0xaf8>
 8002154:	20000820 	.word	0x20000820
 8002158:	20000821 	.word	0x20000821
 800215c:	200004b4 	.word	0x200004b4
 8002160:	0800a23c 	.word	0x0800a23c
 8002164:	0800a248 	.word	0x0800a248
 8002168:	200004b8 	.word	0x200004b8
 800216c:	0800a258 	.word	0x0800a258
 8002170:	20000830 	.word	0x20000830
 8002174:	0800a268 	.word	0x0800a268
 8002178:	0800a278 	.word	0x0800a278

	case ME_GENERAL_SELECCION_TIEMPO:
		msg = lcd_msg_clear();
 800217c:	463b      	mov	r3, r7
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fa97 	bl	80006b2 <lcd_msg_clear>
 8002184:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002188:	463d      	mov	r5, r7
 800218a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002192:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002196:	4bb8      	ldr	r3, [pc, #736]	; (8002478 <ME_general+0x600>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800219e:	2300      	movs	r3, #0
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	f005 fe5c 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 80021a8:	463b      	mov	r3, r7
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe faa3 	bl	80006f6 <lcd_msg_first_line>
 80021b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021b4:	463d      	mov	r5, r7
 80021b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021be:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80021c2:	4bad      	ldr	r3, [pc, #692]	; (8002478 <ME_general+0x600>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021ca:	2300      	movs	r3, #0
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	f005 fe46 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Tiempo:");
 80021d4:	463b      	mov	r3, r7
 80021d6:	49a9      	ldr	r1, [pc, #676]	; (800247c <ME_general+0x604>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fa32 	bl	8000642 <lcd_msg_from_string>
 80021de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021e2:	463d      	mov	r5, r7
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ec:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80021f0:	4ba1      	ldr	r3, [pc, #644]	; (8002478 <ME_general+0x600>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021f8:	2300      	movs	r3, #0
 80021fa:	f04f 32ff 	mov.w	r2, #4294967295
 80021fe:	f005 fe2f 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002202:	463b      	mov	r3, r7
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fa98 	bl	800073a <lcd_msg_second_line>
 800220a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800220e:	463d      	mov	r5, r7
 8002210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002214:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002218:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800221c:	4b96      	ldr	r3, [pc, #600]	; (8002478 <ME_general+0x600>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002224:	2300      	movs	r3, #0
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	f005 fe19 	bl	8007e60 <xQueueGenericSend>

		switch (sub_estado) {
 800222e:	4b94      	ldr	r3, [pc, #592]	; (8002480 <ME_general+0x608>)
 8002230:	f993 3000 	ldrsb.w	r3, [r3]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d869      	bhi.n	800230c <ME_general+0x494>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <ME_general+0x3c8>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002259 	.word	0x08002259
 8002244:	08002277 	.word	0x08002277
 8002248:	08002295 	.word	0x08002295
 800224c:	080022b3 	.word	0x080022b3
 8002250:	080022d1 	.word	0x080022d1
 8002254:	080022ef 	.word	0x080022ef
		case 0:
			msg = lcd_msg_from_string("5min S/INC");
 8002258:	463b      	mov	r3, r7
 800225a:	498a      	ldr	r1, [pc, #552]	; (8002484 <ME_general+0x60c>)
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f9f0 	bl	8000642 <lcd_msg_from_string>
 8002262:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002266:	463d      	mov	r5, r7
 8002268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002270:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002274:	e04a      	b.n	800230c <ME_general+0x494>
		case 1:
			msg = lcd_msg_from_string("5min +30seg");
 8002276:	463b      	mov	r3, r7
 8002278:	4983      	ldr	r1, [pc, #524]	; (8002488 <ME_general+0x610>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f9e1 	bl	8000642 <lcd_msg_from_string>
 8002280:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002284:	463d      	mov	r5, r7
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800228e:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002292:	e03b      	b.n	800230c <ME_general+0x494>
		case 2:
			msg = lcd_msg_from_string("10min S/INC");
 8002294:	463b      	mov	r3, r7
 8002296:	497d      	ldr	r1, [pc, #500]	; (800248c <ME_general+0x614>)
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f9d2 	bl	8000642 <lcd_msg_from_string>
 800229e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022a2:	463d      	mov	r5, r7
 80022a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ac:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022b0:	e02c      	b.n	800230c <ME_general+0x494>
		case 3:
			msg = lcd_msg_from_string("10min +1min");
 80022b2:	463b      	mov	r3, r7
 80022b4:	4976      	ldr	r1, [pc, #472]	; (8002490 <ME_general+0x618>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f9c3 	bl	8000642 <lcd_msg_from_string>
 80022bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022c0:	463d      	mov	r5, r7
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ca:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022ce:	e01d      	b.n	800230c <ME_general+0x494>
		case 4:
			msg = lcd_msg_from_string("30min S/INC");
 80022d0:	463b      	mov	r3, r7
 80022d2:	4970      	ldr	r1, [pc, #448]	; (8002494 <ME_general+0x61c>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f9b4 	bl	8000642 <lcd_msg_from_string>
 80022da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022de:	463d      	mov	r5, r7
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022e8:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022ec:	e00e      	b.n	800230c <ME_general+0x494>
		case 5:
			msg = lcd_msg_from_string("30min +3min");
 80022ee:	463b      	mov	r3, r7
 80022f0:	4969      	ldr	r1, [pc, #420]	; (8002498 <ME_general+0x620>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f9a5 	bl	8000642 <lcd_msg_from_string>
 80022f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022fc:	463d      	mov	r5, r7
 80022fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002306:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 800230a:	bf00      	nop
		}

		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800230c:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <ME_general+0x600>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002314:	2300      	movs	r3, #0
 8002316:	f04f 32ff 	mov.w	r2, #4294967295
 800231a:	f005 fda1 	bl	8007e60 <xQueueGenericSend>

		if (button == 1) {
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d119      	bne.n	8002358 <ME_general+0x4e0>
			sub_estado--;
 8002324:	4b56      	ldr	r3, [pc, #344]	; (8002480 <ME_general+0x608>)
 8002326:	f993 3000 	ldrsb.w	r3, [r3]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	b25a      	sxtb	r2, r3
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <ME_general+0x608>)
 8002334:	701a      	strb	r2, [r3, #0]
			if (sub_estado < 0)
 8002336:	4b52      	ldr	r3, [pc, #328]	; (8002480 <ME_general+0x608>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da02      	bge.n	8002346 <ME_general+0x4ce>
				sub_estado = 5;
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <ME_general+0x608>)
 8002342:	2205      	movs	r2, #5
 8002344:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002346:	4b55      	ldr	r3, [pc, #340]	; (800249c <ME_general+0x624>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	f005 fd85 	bl	8007e60 <xQueueGenericSend>
			}
			sub_estado = 0;
			mostrar_tiempo = 1;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 8002356:	e30d      	b.n	8002974 <ME_general+0xafc>
		} else if (button == 2) {
 8002358:	7ffb      	ldrb	r3, [r7, #31]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d119      	bne.n	8002392 <ME_general+0x51a>
			sub_estado++;
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <ME_general+0x608>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	b25a      	sxtb	r2, r3
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <ME_general+0x608>)
 800236e:	701a      	strb	r2, [r3, #0]
			if (sub_estado > 5)
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <ME_general+0x608>)
 8002372:	f993 3000 	ldrsb.w	r3, [r3]
 8002376:	2b05      	cmp	r3, #5
 8002378:	dd02      	ble.n	8002380 <ME_general+0x508>
				sub_estado = 0;
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <ME_general+0x608>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <ME_general+0x624>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	f005 fd68 	bl	8007e60 <xQueueGenericSend>
		break;
 8002390:	e2f0      	b.n	8002974 <ME_general+0xafc>
		} else if (button == 3) {
 8002392:	7ffb      	ldrb	r3, [r7, #31]
 8002394:	2b03      	cmp	r3, #3
 8002396:	f040 82ed 	bne.w	8002974 <ME_general+0xafc>
			estado = ME_GENERAL_JVJ;
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <ME_general+0x628>)
 800239c:	2203      	movs	r2, #3
 800239e:	701a      	strb	r2, [r3, #0]
			switch (sub_estado) {
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <ME_general+0x608>)
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d856      	bhi.n	8002458 <ME_general+0x5e0>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <ME_general+0x538>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023e1 	.word	0x080023e1
 80023b8:	080023f9 	.word	0x080023f9
 80023bc:	08002411 	.word	0x08002411
 80023c0:	08002429 	.word	0x08002429
 80023c4:	08002441 	.word	0x08002441
				segundos_j1 = 300;
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <ME_general+0x62c>)
 80023ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ce:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <ME_general+0x630>)
 80023d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d6:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <ME_general+0x634>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
				break;
 80023de:	e03b      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 300;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <ME_general+0x62c>)
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <ME_general+0x630>)
 80023ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ee:	601a      	str	r2, [r3, #0]
				incremento = 30;
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <ME_general+0x634>)
 80023f2:	221e      	movs	r2, #30
 80023f4:	601a      	str	r2, [r3, #0]
				break;
 80023f6:	e02f      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 600;
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <ME_general+0x62c>)
 80023fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023fe:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <ME_general+0x630>)
 8002402:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002406:	601a      	str	r2, [r3, #0]
				incremento = 0;
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <ME_general+0x634>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
				break;
 800240e:	e023      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 600;
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <ME_general+0x62c>)
 8002412:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002416:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <ME_general+0x630>)
 800241a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800241e:	601a      	str	r2, [r3, #0]
				incremento = 60;
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <ME_general+0x634>)
 8002422:	223c      	movs	r2, #60	; 0x3c
 8002424:	601a      	str	r2, [r3, #0]
				break;
 8002426:	e017      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 1800;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <ME_general+0x62c>)
 800242a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800242e:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <ME_general+0x630>)
 8002432:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002436:	601a      	str	r2, [r3, #0]
				incremento = 0;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <ME_general+0x634>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
				break;
 800243e:	e00b      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 1800;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <ME_general+0x62c>)
 8002442:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002446:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <ME_general+0x630>)
 800244a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800244e:	601a      	str	r2, [r3, #0]
				incremento = 180;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <ME_general+0x634>)
 8002452:	22b4      	movs	r2, #180	; 0xb4
 8002454:	601a      	str	r2, [r3, #0]
				break;
 8002456:	bf00      	nop
			sub_estado = 0;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <ME_general+0x608>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			mostrar_tiempo = 1;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <ME_general+0x638>)
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <ME_general+0x624>)
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800246c:	2300      	movs	r3, #0
 800246e:	2200      	movs	r2, #0
 8002470:	f005 fcf6 	bl	8007e60 <xQueueGenericSend>
		break;
 8002474:	e27e      	b.n	8002974 <ME_general+0xafc>
 8002476:	bf00      	nop
 8002478:	200004b4 	.word	0x200004b4
 800247c:	0800a288 	.word	0x0800a288
 8002480:	20000830 	.word	0x20000830
 8002484:	0800a298 	.word	0x0800a298
 8002488:	0800a2a4 	.word	0x0800a2a4
 800248c:	0800a2b0 	.word	0x0800a2b0
 8002490:	0800a2bc 	.word	0x0800a2bc
 8002494:	0800a2c8 	.word	0x0800a2c8
 8002498:	0800a2d4 	.word	0x0800a2d4
 800249c:	200004b8 	.word	0x200004b8
 80024a0:	20000820 	.word	0x20000820
 80024a4:	20000824 	.word	0x20000824
 80024a8:	20000828 	.word	0x20000828
 80024ac:	2000082c 	.word	0x2000082c
 80024b0:	20000822 	.word	0x20000822

	case ME_GENERAL_JVJ:
		modo_de_juego = 1;
 80024b4:	4b97      	ldr	r3, [pc, #604]	; (8002714 <ME_general+0x89c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
		set_cpu_player(0);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 fad8 	bl	8002a70 <set_cpu_player>

		if (sub_estado == 0) {
 80024c0:	4b95      	ldr	r3, [pc, #596]	; (8002718 <ME_general+0x8a0>)
 80024c2:	f993 3000 	ldrsb.w	r3, [r3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d170      	bne.n	80025ac <ME_general+0x734>
			msg = lcd_msg_clear();
 80024ca:	463b      	mov	r3, r7
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f8f0 	bl	80006b2 <lcd_msg_clear>
 80024d2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024d6:	463d      	mov	r5, r7
 80024d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024e0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80024e4:	4b8d      	ldr	r3, [pc, #564]	; (800271c <ME_general+0x8a4>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024ec:	2300      	movs	r3, #0
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	f005 fcb5 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80024f6:	463b      	mov	r3, r7
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f8fc 	bl	80006f6 <lcd_msg_first_line>
 80024fe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002502:	463d      	mov	r5, r7
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	e895 0003 	ldmia.w	r5, {r0, r1}
 800250c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <ME_general+0x8a4>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002518:	2300      	movs	r3, #0
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	f005 fc9f 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_from_string("Ver Tiempos");
 8002522:	463b      	mov	r3, r7
 8002524:	497e      	ldr	r1, [pc, #504]	; (8002720 <ME_general+0x8a8>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f88b 	bl	8000642 <lcd_msg_from_string>
 800252c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002530:	463d      	mov	r5, r7
 8002532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	e895 0003 	ldmia.w	r5, {r0, r1}
 800253a:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800253e:	4b77      	ldr	r3, [pc, #476]	; (800271c <ME_general+0x8a4>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002546:	2300      	movs	r3, #0
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	f005 fc88 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 8002550:	463b      	mov	r3, r7
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f8f1 	bl	800073a <lcd_msg_second_line>
 8002558:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800255c:	463d      	mov	r5, r7
 800255e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002566:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800256a:	4b6c      	ldr	r3, [pc, #432]	; (800271c <ME_general+0x8a4>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002572:	2300      	movs	r3, #0
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	f005 fc72 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 800257c:	463b      	mov	r3, r7
 800257e:	4969      	ldr	r1, [pc, #420]	; (8002724 <ME_general+0x8ac>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f85e 	bl	8000642 <lcd_msg_from_string>
 8002586:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800258a:	463d      	mov	r5, r7
 800258c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002590:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002594:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002598:	4b60      	ldr	r3, [pc, #384]	; (800271c <ME_general+0x8a4>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025a0:	2300      	movs	r3, #0
 80025a2:	f04f 32ff 	mov.w	r2, #4294967295
 80025a6:	f005 fc5b 	bl	8007e60 <xQueueGenericSend>
 80025aa:	e072      	b.n	8002692 <ME_general+0x81a>
		} else {
			mostrar_tiempo = 0;
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <ME_general+0x8b0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
			msg = lcd_msg_clear();
 80025b2:	463b      	mov	r3, r7
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe f87c 	bl	80006b2 <lcd_msg_clear>
 80025ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025be:	463d      	mov	r5, r7
 80025c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025c8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <ME_general+0x8a4>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025d4:	2300      	movs	r3, #0
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295
 80025da:	f005 fc41 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80025de:	463b      	mov	r3, r7
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f888 	bl	80006f6 <lcd_msg_first_line>
 80025e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025ea:	463d      	mov	r5, r7
 80025ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025f4:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <ME_general+0x8a4>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002600:	2300      	movs	r3, #0
 8002602:	f04f 32ff 	mov.w	r2, #4294967295
 8002606:	f005 fc2b 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_from_string("Modo Reset");
 800260a:	463b      	mov	r3, r7
 800260c:	4947      	ldr	r1, [pc, #284]	; (800272c <ME_general+0x8b4>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe f817 	bl	8000642 <lcd_msg_from_string>
 8002614:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002618:	463d      	mov	r5, r7
 800261a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800261c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002622:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <ME_general+0x8a4>)
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	f005 fc14 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 8002638:	463b      	mov	r3, r7
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f87d 	bl	800073a <lcd_msg_second_line>
 8002640:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002644:	463d      	mov	r5, r7
 8002646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800264e:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <ME_general+0x8a4>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800265a:	2300      	movs	r3, #0
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	f005 fbfe 	bl	8007e60 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 8002664:	463b      	mov	r3, r7
 8002666:	492f      	ldr	r1, [pc, #188]	; (8002724 <ME_general+0x8ac>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ffea 	bl	8000642 <lcd_msg_from_string>
 800266e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002672:	463d      	mov	r5, r7
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	e895 0003 	ldmia.w	r5, {r0, r1}
 800267c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <ME_general+0x8a4>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002688:	2300      	movs	r3, #0
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	f005 fbe7 	bl	8007e60 <xQueueGenericSend>
		}

		if (button == 3) {
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d116      	bne.n	80026c6 <ME_general+0x84e>
			if (sub_estado == 1) {
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <ME_general+0x8a0>)
 800269a:	f993 3000 	ldrsb.w	r3, [r3]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <ME_general+0x836>
				user_init();
 80026a2:	f000 f9b3 	bl	8002a0c <user_init>
				estado = ME_GENERAL_RESET;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <ME_general+0x8b8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <ME_general+0x83c>
			} else {
				mostrar_tiempo = 1;
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <ME_general+0x8b0>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]

			}

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <ME_general+0x8bc>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	f005 fbce 	bl	8007e60 <xQueueGenericSend>
 80026c4:	e015      	b.n	80026f2 <ME_general+0x87a>
		} else if (button != 0) {
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d012      	beq.n	80026f2 <ME_general+0x87a>
			sub_estado = !sub_estado;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <ME_general+0x8a0>)
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <ME_general+0x8a0>)
 80026e0:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <ME_general+0x8bc>)
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80026ea:	2300      	movs	r3, #0
 80026ec:	2200      	movs	r2, #0
 80026ee:	f005 fbb7 	bl	8007e60 <xQueueGenericSend>
		}

		if (button == 4) {
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	f040 813f 	bne.w	8002978 <ME_general+0xb00>
			estado = ME_GENERAL_FIN;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <ME_general+0x8b8>)
 80026fc:	2205      	movs	r2, #5
 80026fe:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <ME_general+0x8bc>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002708:	2300      	movs	r3, #0
 800270a:	2200      	movs	r2, #0
 800270c:	f005 fba8 	bl	8007e60 <xQueueGenericSend>
		}
		break;
 8002710:	e132      	b.n	8002978 <ME_general+0xb00>
 8002712:	bf00      	nop
 8002714:	20000821 	.word	0x20000821
 8002718:	20000830 	.word	0x20000830
 800271c:	200004b4 	.word	0x200004b4
 8002720:	0800a2e0 	.word	0x0800a2e0
 8002724:	0800a2ec 	.word	0x0800a2ec
 8002728:	20000822 	.word	0x20000822
 800272c:	0800a2f8 	.word	0x0800a2f8
 8002730:	20000820 	.word	0x20000820
 8002734:	200004b8 	.word	0x200004b8
	case ME_GENERAL_JVM:
		set_cpu_player(1);
 8002738:	2001      	movs	r0, #1
 800273a:	f000 f999 	bl	8002a70 <set_cpu_player>
		modo_de_juego = 2;
 800273e:	4b93      	ldr	r3, [pc, #588]	; (800298c <ME_general+0xb14>)
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 8002744:	463b      	mov	r3, r7
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ffb3 	bl	80006b2 <lcd_msg_clear>
 800274c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002750:	463d      	mov	r5, r7
 8002752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002756:	e895 0003 	ldmia.w	r5, {r0, r1}
 800275a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <ME_general+0xb18>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002766:	2300      	movs	r3, #0
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	f005 fb78 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002770:	463b      	mov	r3, r7
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd ffbf 	bl	80006f6 <lcd_msg_first_line>
 8002778:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800277c:	463d      	mov	r5, r7
 800277e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002782:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002786:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800278a:	4b81      	ldr	r3, [pc, #516]	; (8002990 <ME_general+0xb18>)
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002792:	2300      	movs	r3, #0
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	f005 fb62 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Jug vs Maq");
 800279c:	463b      	mov	r3, r7
 800279e:	497d      	ldr	r1, [pc, #500]	; (8002994 <ME_general+0xb1c>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd ff4e 	bl	8000642 <lcd_msg_from_string>
 80027a6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027aa:	463d      	mov	r5, r7
 80027ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027b4:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <ME_general+0xb18>)
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027c0:	2300      	movs	r3, #0
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295
 80027c6:	f005 fb4b 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 80027ca:	463b      	mov	r3, r7
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd ffb4 	bl	800073a <lcd_msg_second_line>
 80027d2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027d6:	463d      	mov	r5, r7
 80027d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027e0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <ME_general+0xb18>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027ec:	2300      	movs	r3, #0
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295
 80027f2:	f005 fb35 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Rst");
 80027f6:	463b      	mov	r3, r7
 80027f8:	4967      	ldr	r1, [pc, #412]	; (8002998 <ME_general+0xb20>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd ff21 	bl	8000642 <lcd_msg_from_string>
 8002800:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002804:	463d      	mov	r5, r7
 8002806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800280e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <ME_general+0xb18>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800281a:	2300      	movs	r3, #0
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	f005 fb1e 	bl	8007e60 <xQueueGenericSend>

		if (button == 3) {
 8002824:	7ffb      	ldrb	r3, [r7, #31]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d10c      	bne.n	8002844 <ME_general+0x9cc>
			user_init();
 800282a:	f000 f8ef 	bl	8002a0c <user_init>
			estado = ME_GENERAL_RESET;
 800282e:	4b5b      	ldr	r3, [pc, #364]	; (800299c <ME_general+0xb24>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <ME_general+0xb28>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800283c:	2300      	movs	r3, #0
 800283e:	2200      	movs	r2, #0
 8002840:	f005 fb0e 	bl	8007e60 <xQueueGenericSend>
		}

		if (button == 4) {
 8002844:	7ffb      	ldrb	r3, [r7, #31]
 8002846:	2b04      	cmp	r3, #4
 8002848:	f040 8098 	bne.w	800297c <ME_general+0xb04>
			estado = ME_GENERAL_FIN;
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <ME_general+0xb24>)
 800284e:	2205      	movs	r2, #5
 8002850:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <ME_general+0xb28>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800285a:	2300      	movs	r3, #0
 800285c:	2200      	movs	r2, #0
 800285e:	f005 faff 	bl	8007e60 <xQueueGenericSend>
		}
		break;
 8002862:	e08b      	b.n	800297c <ME_general+0xb04>
	case ME_GENERAL_FIN:
		modo_de_juego = 3;
 8002864:	4b49      	ldr	r3, [pc, #292]	; (800298c <ME_general+0xb14>)
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 800286a:	463b      	mov	r3, r7
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd ff20 	bl	80006b2 <lcd_msg_clear>
 8002872:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002876:	463d      	mov	r5, r7
 8002878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002880:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002884:	4b42      	ldr	r3, [pc, #264]	; (8002990 <ME_general+0xb18>)
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800288c:	2300      	movs	r3, #0
 800288e:	f04f 32ff 	mov.w	r2, #4294967295
 8002892:	f005 fae5 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002896:	463b      	mov	r3, r7
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd ff2c 	bl	80006f6 <lcd_msg_first_line>
 800289e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028a2:	463d      	mov	r5, r7
 80028a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028ac:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <ME_general+0xb18>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028b8:	2300      	movs	r3, #0
 80028ba:	f04f 32ff 	mov.w	r2, #4294967295
 80028be:	f005 facf 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Juego Terminado");
 80028c2:	463b      	mov	r3, r7
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <ME_general+0xb2c>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd febb 	bl	8000642 <lcd_msg_from_string>
 80028cc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028d0:	463d      	mov	r5, r7
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028da:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <ME_general+0xb18>)
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028e6:	2300      	movs	r3, #0
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	f005 fab8 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 80028f0:	463b      	mov	r3, r7
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd ff21 	bl	800073a <lcd_msg_second_line>
 80028f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028fc:	463d      	mov	r5, r7
 80028fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002902:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002906:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <ME_general+0xb18>)
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002912:	2300      	movs	r3, #0
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	f005 faa2 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 800291c:	463b      	mov	r3, r7
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <ME_general+0xb30>)
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe8e 	bl	8000642 <lcd_msg_from_string>
 8002926:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800292a:	463d      	mov	r5, r7
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002934:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <ME_general+0xb18>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002940:	2300      	movs	r3, #0
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	f005 fa8b 	bl	8007e60 <xQueueGenericSend>

		if (button == 3) {
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d117      	bne.n	8002980 <ME_general+0xb08>
			user_init();
 8002950:	f000 f85c 	bl	8002a0c <user_init>
			estado = ME_GENERAL_RESET;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <ME_general+0xb24>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <ME_general+0xb28>)
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002962:	2300      	movs	r3, #0
 8002964:	2200      	movs	r2, #0
 8002966:	f005 fa7b 	bl	8007e60 <xQueueGenericSend>
		}
		break;
 800296a:	e009      	b.n	8002980 <ME_general+0xb08>
		break;
 800296c:	bf00      	nop
 800296e:	e008      	b.n	8002982 <ME_general+0xb0a>
		break;
 8002970:	bf00      	nop
 8002972:	e006      	b.n	8002982 <ME_general+0xb0a>
		break;
 8002974:	bf00      	nop
 8002976:	e004      	b.n	8002982 <ME_general+0xb0a>
		break;
 8002978:	bf00      	nop
 800297a:	e002      	b.n	8002982 <ME_general+0xb0a>
		break;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <ME_general+0xb0a>
		break;
 8002980:	bf00      	nop
	}
}
 8002982:	bf00      	nop
 8002984:	3740      	adds	r7, #64	; 0x40
 8002986:	46bd      	mov	sp, r7
 8002988:	bdb0      	pop	{r4, r5, r7, pc}
 800298a:	bf00      	nop
 800298c:	20000821 	.word	0x20000821
 8002990:	200004b4 	.word	0x200004b4
 8002994:	0800a304 	.word	0x0800a304
 8002998:	0800a310 	.word	0x0800a310
 800299c:	20000820 	.word	0x20000820
 80029a0:	200004b8 	.word	0x200004b8
 80029a4:	0800a320 	.word	0x0800a320
 80029a8:	0800a248 	.word	0x0800a248

080029ac <t_WS2812>:

void t_WS2812(void*) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <t_WS2812+0x44>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <t_WS2812+0x16>
		tareas_error_handler(2);
 80029bc:	2002      	movs	r0, #2
 80029be:	f000 f81d 	bl	80029fc <tareas_error_handler>
	}

	ws2812_init();
 80029c2:	f001 fb3b 	bl	800403c <ws2812_init>

	while (1) {
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <t_WS2812+0x44>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f04f 31ff 	mov.w	r1, #4294967295
 80029ce:	4618      	mov	r0, r3
 80029d0:	f005 fc24 	bl	800821c <xQueueSemaphoreTake>
		ws2812_update_leds_from_data(user_htim1);
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <t_WS2812+0x48>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fbd1 	bl	8004180 <ws2812_update_leds_from_data>
		while (!ws2812_finished_dma) {
 80029de:	e002      	b.n	80029e6 <t_WS2812+0x3a>
			vTaskDelay(5);
 80029e0:	2005      	movs	r0, #5
 80029e2:	f006 f895 	bl	8008b10 <vTaskDelay>
		while (!ws2812_finished_dma) {
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <t_WS2812+0x4c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f8      	beq.n	80029e0 <t_WS2812+0x34>
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 80029ee:	e7ea      	b.n	80029c6 <t_WS2812+0x1a>
 80029f0:	200004bc 	.word	0x200004bc
 80029f4:	20000834 	.word	0x20000834
 80029f8:	20001cb4 	.word	0x20001cb4

080029fc <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(void *error) {
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
	__disable_irq();
	while (1) {
		UNUSED(error);
 8002a08:	e7fe      	b.n	8002a08 <tareas_error_handler+0xc>
	...

08002a0c <user_init>:

extern color_t cpu_player;

extern char movement_state;

void user_init() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	//game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);

	game_set_led_output_array(ws2812_color_data);
 8002a10:	4804      	ldr	r0, [pc, #16]	; (8002a24 <user_init+0x18>)
 8002a12:	f7fd ff99 	bl	8000948 <game_set_led_output_array>

	game_reset();
 8002a16:	f7fd ffaa 	bl	800096e <game_reset>

	movement_state = WAIT_STATE;
 8002a1a:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <user_init+0x1c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20001bb4 	.word	0x20001bb4
 8002a28:	200004c8 	.word	0x200004c8

08002a2c <get_side_to_move>:

uint8_t get_side_to_move()
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	return (engine_game_state.side_to_move == WHITE ? 0 : 1);
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <get_side_to_move+0x20>)
 8002a32:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000838 	.word	0x20000838

08002a50 <get_finished_state>:



uint8_t get_finished_state()
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
	return (movement_state == GAME_FINISHED_STATE ? 1 : 0);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <get_finished_state+0x1c>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	200004c8 	.word	0x200004c8

08002a70 <set_cpu_player>:

void set_cpu_player(uint8_t on)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	cpu_player = on ? BLACK : COLOR_EMPTY;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <set_cpu_player+0x14>
 8002a80:	2201      	movs	r2, #1
 8002a82:	e000      	b.n	8002a86 <set_cpu_player+0x16>
 8002a84:	2202      	movs	r2, #2
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <set_cpu_player+0x28>)
 8002a88:	701a      	strb	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <get_error_position>:

uint8_t get_error_position()
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
	return (lighting_state == LIGHTING_ERROR_STATE ? 1 : 0);
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <get_error_position+0x1c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	20001cb5 	.word	0x20001cb5

08002abc <get_promotion>:

piece_t get_promotion() {
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b08e      	sub	sp, #56	; 0x38
 8002ac0:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fde6 	bl	80006b2 <lcd_msg_clear>
 8002ae6:	f107 041c 	add.w	r4, r7, #28
 8002aea:	463d      	mov	r5, r7
 8002aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002af4:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002af8:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <get_promotion+0x22c>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f107 011c 	add.w	r1, r7, #28
 8002b00:	2300      	movs	r3, #0
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295
 8002b06:	f005 f9ab 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fdf2 	bl	80006f6 <lcd_msg_first_line>
 8002b12:	f107 041c 	add.w	r4, r7, #28
 8002b16:	463d      	mov	r5, r7
 8002b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b20:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b24:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <get_promotion+0x22c>)
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	f107 011c 	add.w	r1, r7, #28
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b32:	f005 f995 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 8002b36:	463b      	mov	r3, r7
 8002b38:	496c      	ldr	r1, [pc, #432]	; (8002cec <get_promotion+0x230>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd81 	bl	8000642 <lcd_msg_from_string>
 8002b40:	f107 041c 	add.w	r4, r7, #28
 8002b44:	463d      	mov	r5, r7
 8002b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b4e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b52:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <get_promotion+0x22c>)
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	f107 011c 	add.w	r1, r7, #28
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	f005 f97e 	bl	8007e60 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002b64:	463b      	mov	r3, r7
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fde7 	bl	800073a <lcd_msg_second_line>
 8002b6c:	f107 041c 	add.w	r4, r7, #28
 8002b70:	463d      	mov	r5, r7
 8002b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b7a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b7e:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <get_promotion+0x22c>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	f107 011c 	add.w	r1, r7, #28
 8002b86:	2300      	movs	r3, #0
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	f005 f968 	bl	8007e60 <xQueueGenericSend>
		switch (piece) {
 8002b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b94:	3b01      	subs	r3, #1
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d86a      	bhi.n	8002c70 <get_promotion+0x1b4>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <get_promotion+0xe4>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002be1 	.word	0x08002be1
 8002ba8:	08002c41 	.word	0x08002c41
 8002bac:	08002c11 	.word	0x08002c11
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	494f      	ldr	r1, [pc, #316]	; (8002cf0 <get_promotion+0x234>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fd44 	bl	8000642 <lcd_msg_from_string>
 8002bba:	f107 041c 	add.w	r4, r7, #28
 8002bbe:	463d      	mov	r5, r7
 8002bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bc8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <get_promotion+0x22c>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	f107 011c 	add.w	r1, r7, #28
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	f005 f941 	bl	8007e60 <xQueueGenericSend>
			break;
 8002bde:	e047      	b.n	8002c70 <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 8002be0:	463b      	mov	r3, r7
 8002be2:	4944      	ldr	r1, [pc, #272]	; (8002cf4 <get_promotion+0x238>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fd2c 	bl	8000642 <lcd_msg_from_string>
 8002bea:	f107 041c 	add.w	r4, r7, #28
 8002bee:	463d      	mov	r5, r7
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bf8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <get_promotion+0x22c>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	f107 011c 	add.w	r1, r7, #28
 8002c04:	2300      	movs	r3, #0
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	f005 f929 	bl	8007e60 <xQueueGenericSend>
			break;
 8002c0e:	e02f      	b.n	8002c70 <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8002c10:	463b      	mov	r3, r7
 8002c12:	4939      	ldr	r1, [pc, #228]	; (8002cf8 <get_promotion+0x23c>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fd14 	bl	8000642 <lcd_msg_from_string>
 8002c1a:	f107 041c 	add.w	r4, r7, #28
 8002c1e:	463d      	mov	r5, r7
 8002c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c28:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <get_promotion+0x22c>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	f107 011c 	add.w	r1, r7, #28
 8002c34:	2300      	movs	r3, #0
 8002c36:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3a:	f005 f911 	bl	8007e60 <xQueueGenericSend>
			break;
 8002c3e:	e017      	b.n	8002c70 <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8002c40:	463b      	mov	r3, r7
 8002c42:	492e      	ldr	r1, [pc, #184]	; (8002cfc <get_promotion+0x240>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fcfc 	bl	8000642 <lcd_msg_from_string>
 8002c4a:	f107 041c 	add.w	r4, r7, #28
 8002c4e:	463d      	mov	r5, r7
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c58:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <get_promotion+0x22c>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	f107 011c 	add.w	r1, r7, #28
 8002c64:	2300      	movs	r3, #0
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	f005 f8f9 	bl	8007e60 <xQueueGenericSend>
			break;
 8002c6e:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <get_promotion+0x244>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f107 011b 	add.w	r1, r7, #27
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f005 f9ed 	bl	800805c <xQueueReceive>

		switch (button) {
 8002c82:	7efb      	ldrb	r3, [r7, #27]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d023      	beq.n	8002cd0 <get_promotion+0x214>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	dc22      	bgt.n	8002cd2 <get_promotion+0x216>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d010      	beq.n	8002cb2 <get_promotion+0x1f6>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d11e      	bne.n	8002cd2 <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8002c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 8002c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d902      	bls.n	8002cac <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	76fb      	strb	r3, [r7, #27]
			break;
 8002cb0:	e00f      	b.n	8002cd2 <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 8002cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 8002cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	76fb      	strb	r3, [r7, #27]
			break;
 8002cce:	e000      	b.n	8002cd2 <get_promotion+0x216>
			break;
 8002cd0:	bf00      	nop
		}

		if (button)
 8002cd2:	7efb      	ldrb	r3, [r7, #27]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d100      	bne.n	8002cda <get_promotion+0x21e>
		msg = lcd_msg_clear();
 8002cd8:	e701      	b.n	8002ade <get_promotion+0x22>
			break;
 8002cda:	bf00      	nop
	}

	return piece;
 8002cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3738      	adds	r7, #56	; 0x38
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce8:	200004b4 	.word	0x200004b4
 8002cec:	0800a330 	.word	0x0800a330
 8002cf0:	0800a340 	.word	0x0800a340
 8002cf4:	0800a34c 	.word	0x0800a34c
 8002cf8:	0800a358 	.word	0x0800a358
 8002cfc:	0800a364 	.word	0x0800a364
 8002d00:	200004b8 	.word	0x200004b8

08002d04 <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	game_fsm();
 8002d08:	f7fd fe29 	bl	800095e <game_fsm>
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <is_attacked>:
#include "./engine/board.h"
#include "./engine/moves.h"
#include <stdint.h>


int is_attacked(game_state_t * state, color_t by_color, square_t sq){
 8002d10:	b480      	push	{r7}
 8002d12:	b08b      	sub	sp, #44	; 0x2c
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	70bb      	strb	r3, [r7, #2]
    square_t from_square;


    if(by_color == WHITE){
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12b      	bne.n	8002d7e <is_attacked+0x6e>
        if(SQ2ROW(sq) > 0){
 8002d26:	78bb      	ldrb	r3, [r7, #2]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d052      	beq.n	8002dd6 <is_attacked+0xc6>
            if(SQ2COL(sq) > 0){
 8002d30:	78bb      	ldrb	r3, [r7, #2]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	dd10      	ble.n	8002d5c <is_attacked+0x4c>
                if( state->pieces[sq - 17] == PAWN &&
 8002d3a:	78bb      	ldrb	r3, [r7, #2]
 8002d3c:	3b11      	subs	r3, #17
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d10a      	bne.n	8002d5c <is_attacked+0x4c>
                    state->color[sq - 17] == by_color){
 8002d46:	78bb      	ldrb	r3, [r7, #2]
 8002d48:	3b11      	subs	r3, #17
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
                if( state->pieces[sq - 17] == PAWN &&
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d101      	bne.n	8002d5c <is_attacked+0x4c>
                    return 1;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0fe      	b.n	8002f5a <is_attacked+0x24a>
                }
            }
            if( state->pieces[sq - 15] == PAWN &&
 8002d5c:	78bb      	ldrb	r3, [r7, #2]
 8002d5e:	3b0f      	subs	r3, #15
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d136      	bne.n	8002dd6 <is_attacked+0xc6>
                state->color[sq - 15] == by_color){
 8002d68:	78bb      	ldrb	r3, [r7, #2]
 8002d6a:	3b0f      	subs	r3, #15
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
            if( state->pieces[sq - 15] == PAWN &&
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d12d      	bne.n	8002dd6 <is_attacked+0xc6>
                return 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0ed      	b.n	8002f5a <is_attacked+0x24a>
            }
        }
    }
    else{
        if(SQ2ROW(sq) < 7){
 8002d7e:	78bb      	ldrb	r3, [r7, #2]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d826      	bhi.n	8002dd6 <is_attacked+0xc6>
            if(SQ2COL(sq) < 7){
 8002d88:	78bb      	ldrb	r3, [r7, #2]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	dc10      	bgt.n	8002db4 <is_attacked+0xa4>
                if( state->pieces[sq + 17] == PAWN &&
 8002d92:	78bb      	ldrb	r3, [r7, #2]
 8002d94:	3311      	adds	r3, #17
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d10a      	bne.n	8002db4 <is_attacked+0xa4>
                    state->color[sq + 17] == by_color){
 8002d9e:	78bb      	ldrb	r3, [r7, #2]
 8002da0:	3311      	adds	r3, #17
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
                if( state->pieces[sq + 17] == PAWN &&
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d101      	bne.n	8002db4 <is_attacked+0xa4>
                    return 1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d2      	b.n	8002f5a <is_attacked+0x24a>
                }
            }
            if( state->pieces[sq + 15] == PAWN &&
 8002db4:	78bb      	ldrb	r3, [r7, #2]
 8002db6:	330f      	adds	r3, #15
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10a      	bne.n	8002dd6 <is_attacked+0xc6>
                state->color[sq + 15] == by_color){
 8002dc0:	78bb      	ldrb	r3, [r7, #2]
 8002dc2:	330f      	adds	r3, #15
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
            if( state->pieces[sq + 15] == PAWN &&
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d101      	bne.n	8002dd6 <is_attacked+0xc6>
                return 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0c1      	b.n	8002f5a <is_attacked+0x24a>
            }
        }        
    }

    //Caballo
    for(int dir = 0; dir < 8; dir++ ){
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	e020      	b.n	8002e1e <is_attacked+0x10e>
        from_square = sq + move_directions[KNIGHT][dir];
 8002ddc:	4a62      	ldr	r2, [pc, #392]	; (8002f68 <is_attacked+0x258>)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	4413      	add	r3, r2
 8002de2:	3320      	adds	r3, #32
 8002de4:	f993 3000 	ldrsb.w	r3, [r3]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	78bb      	ldrb	r3, [r7, #2]
 8002dec:	4413      	add	r3, r2
 8002dee:	74bb      	strb	r3, [r7, #18]
        if (IS_VALID(from_square) && state->pieces[from_square] == KNIGHT &&
 8002df0:	7cbb      	ldrb	r3, [r7, #18]
 8002df2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10e      	bne.n	8002e18 <is_attacked+0x108>
 8002dfa:	7cbb      	ldrb	r3, [r7, #18]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d109      	bne.n	8002e18 <is_attacked+0x108>
            state->color[from_square] == by_color){
 8002e04:	7cbb      	ldrb	r3, [r7, #18]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
        if (IS_VALID(from_square) && state->pieces[from_square] == KNIGHT &&
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d101      	bne.n	8002e18 <is_attacked+0x108>
            return 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0a0      	b.n	8002f5a <is_attacked+0x24a>
    for(int dir = 0; dir < 8; dir++ ){
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	dddb      	ble.n	8002ddc <is_attacked+0xcc>
        }
    }
    

    //Rey
    for(int dir = 0; dir < 8; dir++ ){
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	e01f      	b.n	8002e6a <is_attacked+0x15a>
        from_square = sq + move_directions[KING][dir];
 8002e2a:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <is_attacked+0x258>)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f993 3000 	ldrsb.w	r3, [r3]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	78bb      	ldrb	r3, [r7, #2]
 8002e38:	4413      	add	r3, r2
 8002e3a:	74bb      	strb	r3, [r7, #18]
        if (IS_VALID(from_square) && state->pieces[from_square] == KING &&
 8002e3c:	7cbb      	ldrb	r3, [r7, #18]
 8002e3e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10e      	bne.n	8002e64 <is_attacked+0x154>
 8002e46:	7cbb      	ldrb	r3, [r7, #18]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <is_attacked+0x154>
            state->color[from_square] == by_color){
 8002e50:	7cbb      	ldrb	r3, [r7, #18]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
        if (IS_VALID(from_square) && state->pieces[from_square] == KING &&
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d101      	bne.n	8002e64 <is_attacked+0x154>
            return 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e07a      	b.n	8002f5a <is_attacked+0x24a>
    for(int dir = 0; dir < 8; dir++ ){
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	3301      	adds	r3, #1
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	dddc      	ble.n	8002e2a <is_attacked+0x11a>
        }
    }   
    uint8_t straight_dirs[] = {DIR_N, DIR_E, DIR_S, DIR_W};
 8002e70:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <is_attacked+0x25c>)
 8002e72:	60fb      	str	r3, [r7, #12]

    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e031      	b.n	8002ede <is_attacked+0x1ce>
        uint8_t from_square = sq + straight_dirs[dir_n];
 8002e7a:	f107 020c 	add.w	r2, r7, #12
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	78bb      	ldrb	r3, [r7, #2]
 8002e86:	4413      	add	r3, r2
 8002e88:	76fb      	strb	r3, [r7, #27]

        while (IS_VALID(from_square)){
 8002e8a:	e020      	b.n	8002ece <is_attacked+0x1be>
            if (state->pieces[from_square] != PIECE_EMPTY){
 8002e8c:	7efb      	ldrb	r3, [r7, #27]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d013      	beq.n	8002ebe <is_attacked+0x1ae>
                if ((state->color[from_square] == by_color) 
 8002e96:	7efb      	ldrb	r3, [r7, #27]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d118      	bne.n	8002ed8 <is_attacked+0x1c8>
                &&  (state->pieces[from_square] == ROOK || state->pieces[from_square] == QUEEN ) )
 8002ea6:	7efb      	ldrb	r3, [r7, #27]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d004      	beq.n	8002eba <is_attacked+0x1aa>
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10e      	bne.n	8002ed8 <is_attacked+0x1c8>
                    return 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e04d      	b.n	8002f5a <is_attacked+0x24a>
                else{
                    break;
                }
            }
            from_square = from_square + straight_dirs[dir_n];
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	7efb      	ldrb	r3, [r7, #27]
 8002eca:	4413      	add	r3, r2
 8002ecc:	76fb      	strb	r3, [r7, #27]
        while (IS_VALID(from_square)){
 8002ece:	7efb      	ldrb	r3, [r7, #27]
 8002ed0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0d9      	beq.n	8002e8c <is_attacked+0x17c>
    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	ddca      	ble.n	8002e7a <is_attacked+0x16a>
        }
        
    }

    uint8_t diag_dirs[] = {DIR_NE, DIR_SE, DIR_SW, DIR_NW};
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <is_attacked+0x260>)
 8002ee6:	60bb      	str	r3, [r7, #8]

    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e031      	b.n	8002f52 <is_attacked+0x242>
        uint8_t from_square = sq + diag_dirs[dir_n];
 8002eee:	f107 0208 	add.w	r2, r7, #8
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	78bb      	ldrb	r3, [r7, #2]
 8002efa:	4413      	add	r3, r2
 8002efc:	74fb      	strb	r3, [r7, #19]

        while (IS_VALID(from_square)){
 8002efe:	e020      	b.n	8002f42 <is_attacked+0x232>
            if (state->pieces[from_square] != PIECE_EMPTY){
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	5cd3      	ldrb	r3, [r2, r3]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d013      	beq.n	8002f32 <is_attacked+0x222>
                if ((state->color[from_square] == by_color) 
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d118      	bne.n	8002f4c <is_attacked+0x23c>
                &&  (state->pieces[from_square] == QUEEN || state->pieces[from_square] == BISHOP ) )
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d004      	beq.n	8002f2e <is_attacked+0x21e>
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	5cd3      	ldrb	r3, [r2, r3]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d10e      	bne.n	8002f4c <is_attacked+0x23c>
                    return 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e013      	b.n	8002f5a <is_attacked+0x24a>
                else{
                    break;
                }
            }
            from_square = from_square + diag_dirs[dir_n];
 8002f32:	f107 0208 	add.w	r2, r7, #8
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	4413      	add	r3, r2
 8002f40:	74fb      	strb	r3, [r7, #19]
        while (IS_VALID(from_square)){
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0d9      	beq.n	8002f00 <is_attacked+0x1f0>
    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	ddca      	ble.n	8002eee <is_attacked+0x1de>
        }
        
    }
    

    return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	372c      	adds	r7, #44	; 0x2c
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	fff00110 	.word	0xfff00110
 8002f70:	0feff111 	.word	0x0feff111

08002f74 <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e00d      	b.n	8002f9e <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	3380      	adds	r3, #128	; 0x80
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	2206      	movs	r2, #6
 8002f96:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa2:	ddee      	ble.n	8002f82 <clear_game_state+0xe>
    }
    return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	4608      	mov	r0, r1
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	70fb      	strb	r3, [r7, #3]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70bb      	strb	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	78f9      	ldrb	r1, [r7, #3]
 8002fd2:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	78ba      	ldrb	r2, [r7, #2]
 8002fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	2106      	movs	r1, #6
 8003000:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <engine_reset>:

game_state_t engine_game_state;

const int8_t engine_piece_scores[] = {0, QUEEN_SCORE, ROOK_SCORE, BISHOP_SCORE, KNIGHT_SCORE, PAWN_SCORE, 0};

void engine_reset(){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    load_fen(&engine_game_state, STARTFEN);
 8003020:	4902      	ldr	r1, [pc, #8]	; (800302c <engine_reset+0x10>)
 8003022:	4803      	ldr	r0, [pc, #12]	; (8003030 <engine_reset+0x14>)
 8003024:	f000 fa68 	bl	80034f8 <load_fen>
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	0800a370 	.word	0x0800a370
 8003030:	20000838 	.word	0x20000838

08003034 <engine_move_piece>:

char engine_move_piece(move_t move){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    return make_move(&engine_game_state, move, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <engine_move_piece+0x20>)
 8003042:	f000 fc07 	bl	8003854 <make_move>
 8003046:	4603      	mov	r3, r0
 8003048:	b2db      	uxtb	r3, r3
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000838 	.word	0x20000838

08003058 <engine_list_moves>:

move_t pseudo_legal_moves[255] = {0};

int engine_list_moves(move_t moves[], char only_legal){
 8003058:	b580      	push	{r7, lr}
 800305a:	b0c8      	sub	sp, #288	; 0x120
 800305c:	af00      	add	r7, sp, #0
 800305e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003062:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003066:	6018      	str	r0, [r3, #0]
 8003068:	460a      	mov	r2, r1
 800306a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800306e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003072:	701a      	strb	r2, [r3, #0]
	only_legal = 1;
 8003074:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003078:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    if(only_legal){
 8003080:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003084:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8096 	beq.w	80031bc <engine_list_moves+0x164>

        game_state_t test_game_state = engine_game_state;
 8003090:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003094:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003098:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <engine_list_moves+0x180>)
 800309a:	4618      	mov	r0, r3
 800309c:	4611      	mov	r1, r2
 800309e:	f44f 7381 	mov.w	r3, #258	; 0x102
 80030a2:	461a      	mov	r2, r3
 80030a4:	f007 f816 	bl	800a0d4 <memcpy>
        //game_state_t test_game_state;
        //memcpy(&test_game_state, &engine_game_state, sizeof(game_state_t));

        int num_pseudo_legal = generate_moves(&engine_game_state, pseudo_legal_moves);
 80030a8:	494c      	ldr	r1, [pc, #304]	; (80031dc <engine_list_moves+0x184>)
 80030aa:	484b      	ldr	r0, [pc, #300]	; (80031d8 <engine_list_moves+0x180>)
 80030ac:	f000 fcec 	bl	8003a88 <generate_moves>
 80030b0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110




        int num_legal = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(int i = 0; i < num_pseudo_legal; i++){
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030c0:	e073      	b.n	80031aa <engine_list_moves+0x152>

        	memcpy(&test_game_state, &engine_game_state, sizeof(game_state_t));
 80030c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030ca:	4a43      	ldr	r2, [pc, #268]	; (80031d8 <engine_list_moves+0x180>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	4611      	mov	r1, r2
 80030d0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80030d4:	461a      	mov	r2, r3
 80030d6:	f006 fffd 	bl	800a0d4 <memcpy>
            make_move(&test_game_state, pseudo_legal_moves[i], 0);
 80030da:	4940      	ldr	r1, [pc, #256]	; (80031dc <engine_list_moves+0x184>)
 80030dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f107 000c 	add.w	r0, r7, #12
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	7859      	ldrb	r1, [r3, #1]
 80030f0:	0209      	lsls	r1, r1, #8
 80030f2:	430a      	orrs	r2, r1
 80030f4:	789b      	ldrb	r3, [r3, #2]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	2300      	movs	r3, #0
 80030fc:	f362 0317 	bfi	r3, r2, #0, #24
 8003100:	2200      	movs	r2, #0
 8003102:	4619      	mov	r1, r3
 8003104:	f000 fba6 	bl	8003854 <make_move>
            uint8_t king_pos = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            while(!(test_game_state.pieces[king_pos] == KING && test_game_state.color[king_pos] == engine_game_state.side_to_move)){
 800310e:	e004      	b.n	800311a <engine_list_moves+0xc2>
                king_pos++;
 8003110:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003114:	3301      	adds	r3, #1
 8003116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            while(!(test_game_state.pieces[king_pos] == KING && test_game_state.color[king_pos] == engine_game_state.side_to_move)){
 800311a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800311e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003122:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <engine_list_moves+0xb8>
 800312c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003130:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003134:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003138:	4413      	add	r3, r2
 800313a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <engine_list_moves+0x180>)
 8003140:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003144:	429a      	cmp	r2, r3
 8003146:	d1e3      	bne.n	8003110 <engine_list_moves+0xb8>
            }
            if(!is_attacked(&test_game_state, test_game_state.side_to_move, king_pos)){
 8003148:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800314c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003150:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 8003154:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fdd7 	bl	8002d10 <is_attacked>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11b      	bne.n	80031a0 <engine_list_moves+0x148>
                moves[num_legal] = pseudo_legal_moves[i];
 8003168:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003176:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	18d0      	adds	r0, r2, r3
 800317e:	4917      	ldr	r1, [pc, #92]	; (80031dc <engine_list_moves+0x184>)
 8003180:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	18ca      	adds	r2, r1, r3
 800318c:	4603      	mov	r3, r0
 800318e:	8811      	ldrh	r1, [r2, #0]
 8003190:	7892      	ldrb	r2, [r2, #2]
 8003192:	8019      	strh	r1, [r3, #0]
 8003194:	709a      	strb	r2, [r3, #2]
                num_legal++;
 8003196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800319a:	3301      	adds	r3, #1
 800319c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(int i = 0; i < num_pseudo_legal; i++){
 80031a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031a4:	3301      	adds	r3, #1
 80031a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80031aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031b2:	429a      	cmp	r2, r3
 80031b4:	db85      	blt.n	80030c2 <engine_list_moves+0x6a>
            }

        }
        return num_legal;
 80031b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031ba:	e008      	b.n	80031ce <engine_list_moves+0x176>
    }
    else{
        return generate_moves(&engine_game_state, moves);
 80031bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <engine_list_moves+0x180>)
 80031c8:	f000 fc5e 	bl	8003a88 <generate_moves>
 80031cc:	4603      	mov	r3, r0
    }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000838 	.word	0x20000838
 80031dc:	2000093c 	.word	0x2000093c

080031e0 <engine_get_piece>:

char engine_get_piece(uint8_t square){
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
    return engine_game_state.pieces[square];
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <engine_get_piece+0x1c>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20000838 	.word	0x20000838

08003200 <engine_eval>:

int engine_eval(game_state_t * game_state){
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

    //
    int score = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

    for (uint8_t row=0; row < 8; row++){
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
 8003210:	e02f      	b.n	8003272 <engine_eval+0x72>
        for (uint8_t col=0; col < 8; col++) {
 8003212:	2300      	movs	r3, #0
 8003214:	74bb      	strb	r3, [r7, #18]
 8003216:	e026      	b.n	8003266 <engine_eval+0x66>

            uint8_t sq = COORD2SQ(row, col);
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	b2da      	uxtb	r2, r3
 800321e:	7cbb      	ldrb	r3, [r7, #18]
 8003220:	4413      	add	r3, r2
 8003222:	747b      	strb	r3, [r7, #17]

            if(game_state->color[sq] != COLOR_EMPTY){
 8003224:	7c7b      	ldrb	r3, [r7, #17]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800322e:	2b02      	cmp	r3, #2
 8003230:	d016      	beq.n	8003260 <engine_eval+0x60>
                int piece_score = engine_piece_scores[game_state->pieces[sq]];
 8003232:	7c7b      	ldrb	r3, [r7, #17]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	461a      	mov	r2, r3
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <engine_eval+0x98>)
 800323c:	569b      	ldrsb	r3, [r3, r2]
 800323e:	60fb      	str	r3, [r7, #12]
                if(game_state->color[sq] == WHITE)
 8003240:	7c7b      	ldrb	r3, [r7, #17]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <engine_eval+0x58>
                    score += piece_score;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e003      	b.n	8003260 <engine_eval+0x60>
                else
                    score -= piece_score;
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
        for (uint8_t col=0; col < 8; col++) {
 8003260:	7cbb      	ldrb	r3, [r7, #18]
 8003262:	3301      	adds	r3, #1
 8003264:	74bb      	strb	r3, [r7, #18]
 8003266:	7cbb      	ldrb	r3, [r7, #18]
 8003268:	2b07      	cmp	r3, #7
 800326a:	d9d5      	bls.n	8003218 <engine_eval+0x18>
    for (uint8_t row=0; row < 8; row++){
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	3301      	adds	r3, #1
 8003270:	74fb      	strb	r3, [r7, #19]
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d9cc      	bls.n	8003212 <engine_eval+0x12>
        }
    }



    if(game_state->side_to_move == WHITE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <engine_eval+0x86>
        return score;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	e001      	b.n	800328a <engine_eval+0x8a>
    else
        return -score;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	425b      	negs	r3, r3
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	0800a3cc 	.word	0x0800a3cc

0800329c <engine_negamax_seach2>:
}

*/

move_t search_valid_moves[255];
int engine_negamax_seach2(game_state_t game_state, int depth, int alpha, int beta){
 800329c:	b084      	sub	sp, #16
 800329e:	b590      	push	{r4, r7, lr}
 80032a0:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80032a4:	af40      	add	r7, sp, #256	; 0x100
 80032a6:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80032aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	move_t moves_calc[100];

	game_state_t test_game_state;

    if(depth == 0)
 80032ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <engine_negamax_seach2+0x26>
        return engine_eval(&game_state);
 80032b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80032ba:	f7ff ffa1 	bl	8003200 <engine_eval>
 80032be:	4603      	mov	r3, r0
 80032c0:	e07b      	b.n	80033ba <engine_negamax_seach2+0x11e>

    int num_moves = engine_list_moves(moves_calc, 1);
 80032c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fec5 	bl	8003058 <engine_list_moves>
 80032ce:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238

    if(num_moves == 0){
 80032d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <engine_negamax_seach2+0x42>
        return MIN_EVAL;
 80032da:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <engine_negamax_seach2+0x130>)
 80032dc:	e06d      	b.n	80033ba <engine_negamax_seach2+0x11e>
    }

    //Idealmente ordenar moviminetos
    int score = MIN_EVAL;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <engine_negamax_seach2+0x130>)
 80032e0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    for(int i = 0; i < num_moves; i++){
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80032ea:	e05e      	b.n	80033aa <engine_negamax_seach2+0x10e>
        move_t test_move = moves_calc[i];
 80032ec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80032f0:	f5a3 7010 	sub.w	r0, r3, #576	; 0x240
 80032f4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80032f8:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80032fc:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	18ca      	adds	r2, r1, r3
 8003308:	4603      	mov	r3, r0
 800330a:	8811      	ldrh	r1, [r2, #0]
 800330c:	7892      	ldrb	r2, [r2, #2]
 800330e:	8019      	strh	r1, [r3, #0]
 8003310:	709a      	strb	r2, [r3, #2]
        test_game_state = game_state;
 8003312:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003316:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800331a:	4618      	mov	r0, r3
 800331c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003320:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003324:	4619      	mov	r1, r3
 8003326:	f006 fed5 	bl	800a0d4 <memcpy>
        make_move(&test_game_state, test_move, 0);
 800332a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800332e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8003332:	1d38      	adds	r0, r7, #4
 8003334:	2200      	movs	r2, #0
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	f000 fa8c 	bl	8003854 <make_move>
        score = -engine_negamax_seach2(test_game_state, depth - 1, -beta, -alpha);
 800333c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003340:	3b01      	subs	r3, #1
 8003342:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8003346:	4252      	negs	r2, r2
 8003348:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 800334c:	4249      	negs	r1, r1
 800334e:	f507 7010 	add.w	r0, r7, #576	; 0x240
 8003352:	f5a0 740f 	sub.w	r4, r0, #572	; 0x23c
 8003356:	913f      	str	r1, [sp, #252]	; 0xfc
 8003358:	923e      	str	r2, [sp, #248]	; 0xf8
 800335a:	933d      	str	r3, [sp, #244]	; 0xf4
 800335c:	4668      	mov	r0, sp
 800335e:	f104 0310 	add.w	r3, r4, #16
 8003362:	22f2      	movs	r2, #242	; 0xf2
 8003364:	4619      	mov	r1, r3
 8003366:	f006 feb5 	bl	800a0d4 <memcpy>
 800336a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800336e:	f7ff ff95 	bl	800329c <engine_negamax_seach2>
 8003372:	4603      	mov	r3, r0
 8003374:	425b      	negs	r3, r3
 8003376:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
        if(score >= beta)
 800337a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800337e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8003382:	429a      	cmp	r2, r3
 8003384:	db02      	blt.n	800338c <engine_negamax_seach2+0xf0>
        	return beta;
 8003386:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800338a:	e016      	b.n	80033ba <engine_negamax_seach2+0x11e>
        if(score > alpha)
 800338c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003390:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8003394:	429a      	cmp	r2, r3
 8003396:	dd03      	ble.n	80033a0 <engine_negamax_seach2+0x104>
            alpha = score;
 8003398:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800339c:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    for(int i = 0; i < num_moves; i++){
 80033a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033a4:	3301      	adds	r3, #1
 80033a6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80033aa:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80033ae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80033b2:	429a      	cmp	r2, r3
 80033b4:	db9a      	blt.n	80032ec <engine_negamax_seach2+0x50>
    }
    return alpha;
 80033b6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	f507 7711 	add.w	r7, r7, #580	; 0x244
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033c6:	b004      	add	sp, #16
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	ffffd8f0 	.word	0xffffd8f0

080033d0 <engine_search>:



move_t engine_search(){
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80033d6:	af40      	add	r7, sp, #256	; 0x100
    //Placeholder for actual search
    int num_moves = generate_moves(&engine_game_state, search_valid_moves);
 80033d8:	4944      	ldr	r1, [pc, #272]	; (80034ec <engine_search+0x11c>)
 80033da:	4845      	ldr	r0, [pc, #276]	; (80034f0 <engine_search+0x120>)
 80033dc:	f000 fb54 	bl	8003a88 <generate_moves>
 80033e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    move_t best_move;
    int best_score = MIN_EVAL;
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <engine_search+0x124>)
 80033e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    game_state_t test_game_state;

    for(int i = 0; i < num_moves; i++){
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80033f0:	e05a      	b.n	80034a8 <engine_search+0xd8>
        move_t test_move = search_valid_moves[i];
 80033f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80033f6:	f5a3 7090 	sub.w	r0, r3, #288	; 0x120
 80033fa:	493c      	ldr	r1, [pc, #240]	; (80034ec <engine_search+0x11c>)
 80033fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	18ca      	adds	r2, r1, r3
 8003408:	4603      	mov	r3, r0
 800340a:	8811      	ldrh	r1, [r2, #0]
 800340c:	7892      	ldrb	r2, [r2, #2]
 800340e:	8019      	strh	r1, [r3, #0]
 8003410:	709a      	strb	r2, [r3, #2]
        test_game_state = engine_game_state;
 8003412:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003416:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800341a:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <engine_search+0x120>)
 800341c:	4618      	mov	r0, r3
 800341e:	4611      	mov	r1, r2
 8003420:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003424:	461a      	mov	r2, r3
 8003426:	f006 fe55 	bl	800a0d4 <memcpy>
        make_move(&test_game_state, test_move, 0);
 800342a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800342e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003432:	1d38      	adds	r0, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	f000 fa0c 	bl	8003854 <make_move>
        int score = -engine_negamax_seach2(test_game_state, SEARCH_DEPTH - 1, MIN_EVAL, MAX_EVAL);
 800343c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003440:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8003444:	f242 7310 	movw	r3, #10000	; 0x2710
 8003448:	933f      	str	r3, [sp, #252]	; 0xfc
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <engine_search+0x124>)
 800344c:	933e      	str	r3, [sp, #248]	; 0xf8
 800344e:	2302      	movs	r3, #2
 8003450:	933d      	str	r3, [sp, #244]	; 0xf4
 8003452:	4668      	mov	r0, sp
 8003454:	f104 0310 	add.w	r3, r4, #16
 8003458:	22f2      	movs	r2, #242	; 0xf2
 800345a:	4619      	mov	r1, r3
 800345c:	f006 fe3a 	bl	800a0d4 <memcpy>
 8003460:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003464:	f7ff ff1a 	bl	800329c <engine_negamax_seach2>
 8003468:	4603      	mov	r3, r0
 800346a:	425b      	negs	r3, r3
 800346c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        if(score > best_score){
 8003470:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003478:	429a      	cmp	r2, r3
 800347a:	dd10      	ble.n	800349e <engine_search+0xce>
            best_score = score;
 800347c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003480:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            best_move = search_valid_moves[i];
 8003484:	4919      	ldr	r1, [pc, #100]	; (80034ec <engine_search+0x11c>)
 8003486:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	18ca      	adds	r2, r1, r3
 8003492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003496:	8811      	ldrh	r1, [r2, #0]
 8003498:	7892      	ldrb	r2, [r2, #2]
 800349a:	8019      	strh	r1, [r3, #0]
 800349c:	709a      	strb	r2, [r3, #2]
    for(int i = 0; i < num_moves; i++){
 800349e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80034a2:	3301      	adds	r3, #1
 80034a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80034a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b0:	429a      	cmp	r2, r3
 80034b2:	db9e      	blt.n	80033f2 <engine_search+0x22>
        }
    }

    return best_move;
 80034b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80034b8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	4611      	mov	r1, r2
 80034c0:	8019      	strh	r1, [r3, #0]
 80034c2:	3302      	adds	r3, #2
 80034c4:	0c12      	lsrs	r2, r2, #16
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80034ce:	f362 0307 	bfi	r3, r2, #0, #8
 80034d2:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80034d6:	f362 230f 	bfi	r3, r2, #8, #8
 80034da:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80034de:	f362 4317 	bfi	r3, r2, #16, #8

}
 80034e2:	4618      	mov	r0, r3
 80034e4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}
 80034ec:	20000c3c 	.word	0x20000c3c
 80034f0:	20000838 	.word	0x20000838
 80034f4:	ffffd8f0 	.word	0xffffd8f0

080034f8 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fd36 	bl	8002f74 <clear_game_state>

    char * f = (char *)fen;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	60fb      	str	r3, [r7, #12]

    char col = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8003510:	2307      	movs	r3, #7
 8003512:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	3b2f      	subs	r3, #47	; 0x2f
 800351a:	2b43      	cmp	r3, #67	; 0x43
 800351c:	f200 8166 	bhi.w	80037ec <load_fen+0x2f4>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <load_fen+0x30>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	080037a1 	.word	0x080037a1
 800352c:	080037ed 	.word	0x080037ed
 8003530:	080037ad 	.word	0x080037ad
 8003534:	080037b5 	.word	0x080037b5
 8003538:	080037bd 	.word	0x080037bd
 800353c:	080037c5 	.word	0x080037c5
 8003540:	080037cd 	.word	0x080037cd
 8003544:	080037d5 	.word	0x080037d5
 8003548:	080037dd 	.word	0x080037dd
 800354c:	080037e5 	.word	0x080037e5
 8003550:	080037ed 	.word	0x080037ed
 8003554:	080037ed 	.word	0x080037ed
 8003558:	080037ed 	.word	0x080037ed
 800355c:	080037ed 	.word	0x080037ed
 8003560:	080037ed 	.word	0x080037ed
 8003564:	080037ed 	.word	0x080037ed
 8003568:	080037ed 	.word	0x080037ed
 800356c:	080037ed 	.word	0x080037ed
 8003570:	080037ed 	.word	0x080037ed
 8003574:	08003693 	.word	0x08003693
 8003578:	080037ed 	.word	0x080037ed
 800357c:	080037ed 	.word	0x080037ed
 8003580:	080037ed 	.word	0x080037ed
 8003584:	080037ed 	.word	0x080037ed
 8003588:	080037ed 	.word	0x080037ed
 800358c:	080037ed 	.word	0x080037ed
 8003590:	080037ed 	.word	0x080037ed
 8003594:	080037ed 	.word	0x080037ed
 8003598:	08003639 	.word	0x08003639
 800359c:	080037ed 	.word	0x080037ed
 80035a0:	080037ed 	.word	0x080037ed
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	080037ed 	.word	0x080037ed
 80035ac:	080036cf 	.word	0x080036cf
 80035b0:	08003657 	.word	0x08003657
 80035b4:	08003675 	.word	0x08003675
 80035b8:	080037ed 	.word	0x080037ed
 80035bc:	080037ed 	.word	0x080037ed
 80035c0:	080037ed 	.word	0x080037ed
 80035c4:	080037ed 	.word	0x080037ed
 80035c8:	080037ed 	.word	0x080037ed
 80035cc:	080037ed 	.word	0x080037ed
 80035d0:	080037ed 	.word	0x080037ed
 80035d4:	080037ed 	.word	0x080037ed
 80035d8:	080037ed 	.word	0x080037ed
 80035dc:	080037ed 	.word	0x080037ed
 80035e0:	080037ed 	.word	0x080037ed
 80035e4:	080037ed 	.word	0x080037ed
 80035e8:	080037ed 	.word	0x080037ed
 80035ec:	080037ed 	.word	0x080037ed
 80035f0:	080037ed 	.word	0x080037ed
 80035f4:	08003747 	.word	0x08003747
 80035f8:	080037ed 	.word	0x080037ed
 80035fc:	080037ed 	.word	0x080037ed
 8003600:	080037ed 	.word	0x080037ed
 8003604:	080037ed 	.word	0x080037ed
 8003608:	080037ed 	.word	0x080037ed
 800360c:	080037ed 	.word	0x080037ed
 8003610:	080037ed 	.word	0x080037ed
 8003614:	080037ed 	.word	0x080037ed
 8003618:	080036ed 	.word	0x080036ed
 800361c:	080037ed 	.word	0x080037ed
 8003620:	080037ed 	.word	0x080037ed
 8003624:	08003765 	.word	0x08003765
 8003628:	080037ed 	.word	0x080037ed
 800362c:	08003783 	.word	0x08003783
 8003630:	0800370b 	.word	0x0800370b
 8003634:	08003729 	.word	0x08003729
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8003638:	7abb      	ldrb	r3, [r7, #10]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	b2da      	uxtb	r2, r3
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	4413      	add	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fcb2 	bl	8002fb2 <place_piece>
            col++;
 800364e:	7afb      	ldrb	r3, [r7, #11]
 8003650:	3301      	adds	r3, #1
 8003652:	72fb      	strb	r3, [r7, #11]
            break;
 8003654:	e0ca      	b.n	80037ec <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8003656:	7abb      	ldrb	r3, [r7, #10]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	b2da      	uxtb	r2, r3
 800365c:	7afb      	ldrb	r3, [r7, #11]
 800365e:	4413      	add	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2200      	movs	r2, #0
 8003664:	2101      	movs	r1, #1
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fca3 	bl	8002fb2 <place_piece>
            col++;
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	3301      	adds	r3, #1
 8003670:	72fb      	strb	r3, [r7, #11]
            break;
 8003672:	e0bb      	b.n	80037ec <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8003674:	7abb      	ldrb	r3, [r7, #10]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	4413      	add	r3, r2
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2200      	movs	r2, #0
 8003682:	2102      	movs	r1, #2
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fc94 	bl	8002fb2 <place_piece>
            col++;
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	3301      	adds	r3, #1
 800368e:	72fb      	strb	r3, [r7, #11]
            break;
 8003690:	e0ac      	b.n	80037ec <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 8003692:	7abb      	ldrb	r3, [r7, #10]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	b2da      	uxtb	r2, r3
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	4413      	add	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	2103      	movs	r1, #3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fc85 	bl	8002fb2 <place_piece>
            col++;
 80036a8:	7afb      	ldrb	r3, [r7, #11]
 80036aa:	3301      	adds	r3, #1
 80036ac:	72fb      	strb	r3, [r7, #11]
            break;
 80036ae:	e09d      	b.n	80037ec <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 80036b0:	7abb      	ldrb	r3, [r7, #10]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	4413      	add	r3, r2
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	2104      	movs	r1, #4
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fc76 	bl	8002fb2 <place_piece>
            col++;
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	3301      	adds	r3, #1
 80036ca:	72fb      	strb	r3, [r7, #11]
            break;
 80036cc:	e08e      	b.n	80037ec <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 80036ce:	7abb      	ldrb	r3, [r7, #10]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	7afb      	ldrb	r3, [r7, #11]
 80036d6:	4413      	add	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	2105      	movs	r1, #5
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fc67 	bl	8002fb2 <place_piece>
            col++;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	3301      	adds	r3, #1
 80036e8:	72fb      	strb	r3, [r7, #11]
            break;
 80036ea:	e07f      	b.n	80037ec <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 80036ec:	7abb      	ldrb	r3, [r7, #10]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	4413      	add	r3, r2
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	2100      	movs	r1, #0
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fc58 	bl	8002fb2 <place_piece>
            col++;
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	3301      	adds	r3, #1
 8003706:	72fb      	strb	r3, [r7, #11]
            break;
 8003708:	e070      	b.n	80037ec <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 800370a:	7abb      	ldrb	r3, [r7, #10]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	b2da      	uxtb	r2, r3
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	4413      	add	r3, r2
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2201      	movs	r2, #1
 8003718:	2101      	movs	r1, #1
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fc49 	bl	8002fb2 <place_piece>
            col++;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	3301      	adds	r3, #1
 8003724:	72fb      	strb	r3, [r7, #11]
            break;
 8003726:	e061      	b.n	80037ec <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8003728:	7abb      	ldrb	r3, [r7, #10]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	b2da      	uxtb	r2, r3
 800372e:	7afb      	ldrb	r3, [r7, #11]
 8003730:	4413      	add	r3, r2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2201      	movs	r2, #1
 8003736:	2102      	movs	r1, #2
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fc3a 	bl	8002fb2 <place_piece>
            col++;
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	3301      	adds	r3, #1
 8003742:	72fb      	strb	r3, [r7, #11]
            break;
 8003744:	e052      	b.n	80037ec <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 8003746:	7abb      	ldrb	r3, [r7, #10]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	b2da      	uxtb	r2, r3
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	4413      	add	r3, r2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2201      	movs	r2, #1
 8003754:	2103      	movs	r1, #3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fc2b 	bl	8002fb2 <place_piece>
            col++;
 800375c:	7afb      	ldrb	r3, [r7, #11]
 800375e:	3301      	adds	r3, #1
 8003760:	72fb      	strb	r3, [r7, #11]
            break;
 8003762:	e043      	b.n	80037ec <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8003764:	7abb      	ldrb	r3, [r7, #10]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	b2da      	uxtb	r2, r3
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	4413      	add	r3, r2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2201      	movs	r2, #1
 8003772:	2104      	movs	r1, #4
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fc1c 	bl	8002fb2 <place_piece>
            col++;
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	3301      	adds	r3, #1
 800377e:	72fb      	strb	r3, [r7, #11]
            break;
 8003780:	e034      	b.n	80037ec <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 8003782:	7abb      	ldrb	r3, [r7, #10]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	b2da      	uxtb	r2, r3
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	4413      	add	r3, r2
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2201      	movs	r2, #1
 8003790:	2105      	movs	r1, #5
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fc0d 	bl	8002fb2 <place_piece>
            col++;
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	3301      	adds	r3, #1
 800379c:	72fb      	strb	r3, [r7, #11]
            break;
 800379e:	e025      	b.n	80037ec <load_fen+0x2f4>
        case '/':
            row--;
 80037a0:	7abb      	ldrb	r3, [r7, #10]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	72bb      	strb	r3, [r7, #10]
            col=0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	72fb      	strb	r3, [r7, #11]
            break;
 80037aa:	e01f      	b.n	80037ec <load_fen+0x2f4>
        case '1':
            col+=1;
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	3301      	adds	r3, #1
 80037b0:	72fb      	strb	r3, [r7, #11]
            break;
 80037b2:	e01b      	b.n	80037ec <load_fen+0x2f4>
        case '2':
            col+=2;
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	3302      	adds	r3, #2
 80037b8:	72fb      	strb	r3, [r7, #11]
            break;
 80037ba:	e017      	b.n	80037ec <load_fen+0x2f4>
        case '3':
            col+=3;
 80037bc:	7afb      	ldrb	r3, [r7, #11]
 80037be:	3303      	adds	r3, #3
 80037c0:	72fb      	strb	r3, [r7, #11]
            break;
 80037c2:	e013      	b.n	80037ec <load_fen+0x2f4>
        case '4':
            col+=4;
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	3304      	adds	r3, #4
 80037c8:	72fb      	strb	r3, [r7, #11]
            break;
 80037ca:	e00f      	b.n	80037ec <load_fen+0x2f4>
        case '5':
            col+=5;
 80037cc:	7afb      	ldrb	r3, [r7, #11]
 80037ce:	3305      	adds	r3, #5
 80037d0:	72fb      	strb	r3, [r7, #11]
            break;
 80037d2:	e00b      	b.n	80037ec <load_fen+0x2f4>
        case '6':
            col+=6;
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	3306      	adds	r3, #6
 80037d8:	72fb      	strb	r3, [r7, #11]
            break;
 80037da:	e007      	b.n	80037ec <load_fen+0x2f4>
        case '7':
            col+=7;
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	3307      	adds	r3, #7
 80037e0:	72fb      	strb	r3, [r7, #11]
            break;
 80037e2:	e003      	b.n	80037ec <load_fen+0x2f4>
        case '8':
            col+=8;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	3308      	adds	r3, #8
 80037e8:	72fb      	strb	r3, [r7, #11]
            break;
 80037ea:	bf00      	nop
        };

        f++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f47f ae8c 	bne.w	8003514 <load_fen+0x1c>

    f++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b77      	cmp	r3, #119	; 0x77
 8003808:	d104      	bne.n	8003814 <load_fen+0x31c>
        state->side_to_move = WHITE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003812:	e003      	b.n	800381c <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3302      	adds	r3, #2
 8003820:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3301      	adds	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b20      	cmp	r3, #32
 800382e:	d1f8      	bne.n	8003822 <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3301      	adds	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b20      	cmp	r3, #32
 8003842:	d1f8      	bne.n	8003836 <load_fen+0x33e>
    f++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800385a:	af00      	add	r7, sp, #0
 800385c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003860:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003864:	6018      	str	r0, [r3, #0]
 8003866:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800386a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800386e:	6019      	str	r1, [r3, #0]
 8003870:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003874:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8003878:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 800387a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800387e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003888:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	429a      	cmp	r2, r3
 8003890:	d101      	bne.n	8003896 <make_move+0x42>
        return 0;
 8003892:	2300      	movs	r3, #0
 8003894:	e0eb      	b.n	8003a6e <make_move+0x21a>

    if(safe){
 8003896:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800389a:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d05d      	beq.n	8003960 <make_move+0x10c>
        uint8_t move_ok = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 80038aa:	f107 0214 	add.w	r2, r7, #20
 80038ae:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80038b2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80038b6:	4611      	mov	r1, r2
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 f8e5 	bl	8003a88 <generate_moves>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 80038ca:	e03d      	b.n	8003948 <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 80038cc:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 80038d0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80038d4:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	440b      	add	r3, r1
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80038e6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d126      	bne.n	800393e <make_move+0xea>
 80038f0:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 80038f4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80038f8:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	440b      	add	r3, r1
 8003904:	3301      	adds	r3, #1
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800390c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	429a      	cmp	r2, r3
 8003914:	d113      	bne.n	800393e <make_move+0xea>
                move_ok = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 800391c:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8003920:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003924:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	440b      	add	r3, r1
 8003930:	3302      	adds	r3, #2
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003938:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800393c:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 800393e:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8003942:	3301      	adds	r3, #1
 8003944:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8003948:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 800394c:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8003950:	429a      	cmp	r2, r3
 8003952:	d3bb      	bcc.n	80038cc <make_move+0x78>
            }
        }
        if(!move_ok){
 8003954:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <make_move+0x10c>
            return 0;
 800395c:	2300      	movs	r3, #0
 800395e:	e086      	b.n	8003a6e <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8003960:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003964:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800396e:	f1c3 0301 	rsb	r3, r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003978:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8003982:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003986:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	461a      	mov	r2, r3
 800398e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003992:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	5c9b      	ldrb	r3, [r3, r2]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d00c      	beq.n	80039b8 <make_move+0x164>
        remove_piece(state, move.to);
 800399e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039a2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80039a6:	785a      	ldrb	r2, [r3, #1]
 80039a8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039ac:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80039b0:	4611      	mov	r1, r2
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	f7ff fb1b 	bl	8002fee <remove_piece>

    if(move.promotion != 0)
 80039b8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039bc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01f      	beq.n	8003a06 <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 80039c6:	f000 f857 	bl	8003a78 <check_promotion>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461c      	mov	r4, r3
 80039ce:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039d2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039de:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80039ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80039ee:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	f507 7146 	add.w	r1, r7, #792	; 0x318
 80039f8:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 80039fc:	4621      	mov	r1, r4
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	f7ff fad7 	bl	8002fb2 <place_piece>
 8003a04:	e025      	b.n	8003a52 <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8003a06:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a0a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a16:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	5c99      	ldrb	r1, [r3, r2]
 8003a1e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a22:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a2e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003a3a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a3e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8003a48:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8003a4c:	6800      	ldr	r0, [r0, #0]
 8003a4e:	f7ff fab0 	bl	8002fb2 <place_piece>
    }

    remove_piece(state, move.from);
 8003a52:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a56:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003a60:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003a64:	4611      	mov	r1, r2
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f7ff fac1 	bl	8002fee <remove_piece>
    return 1;
 8003a6c:	2301      	movs	r3, #1
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    return get_promotion();
 8003a7c:	f7ff f81e 	bl	8002abc <get_promotion>
 8003a80:	4603      	mov	r3, r0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e29f      	b.n	8003fdc <generate_moves+0x554>

        uint8_t piece_type = state->pieces[square];
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	f000 8291 	beq.w	8003fd0 <generate_moves+0x548>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3380      	adds	r3, #128	; 0x80
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	f040 8288 	bne.w	8003fd4 <generate_moves+0x54c>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 8003ac4:	7b7b      	ldrb	r3, [r7, #13]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	f040 81fa 	bne.w	8003ec0 <generate_moves+0x438>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 80fa 	bne.w	8003ccc <generate_moves+0x244>
                if(IS_VALID(square + DIR_N)){
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3310      	adds	r3, #16
 8003adc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d168      	bne.n	8003bb6 <generate_moves+0x12e>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3310      	adds	r3, #16
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d162      	bne.n	8003bb6 <generate_moves+0x12e>
                        moves[n_moves].from = square;
 8003af0:	8afa      	ldrh	r2, [r7, #22]
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	8afa      	ldrh	r2, [r7, #22]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	f101 0210 	add.w	r2, r1, #16
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003b1a:	8afa      	ldrh	r2, [r7, #22]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003b2a:	8afa      	ldrh	r2, [r7, #22]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d107      	bne.n	8003b50 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8003b40:	8afa      	ldrh	r2, [r7, #22]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003b50:	8afb      	ldrh	r3, [r7, #22]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	82fa      	strh	r2, [r7, #22]
 8003b56:	2bfe      	cmp	r3, #254	; 0xfe
 8003b58:	f200 8245 	bhi.w	8003fe6 <generate_moves+0x55e>
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	111b      	asrs	r3, r3, #4
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d128      	bne.n	8003bb6 <generate_moves+0x12e>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	3320      	adds	r3, #32
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d122      	bne.n	8003bb6 <generate_moves+0x12e>
                            moves[n_moves].from = square;
 8003b70:	8afa      	ldrh	r2, [r7, #22]
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	8afa      	ldrh	r2, [r7, #22]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	f101 0220 	add.w	r2, r1, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 8003b9a:	8afa      	ldrh	r2, [r7, #22]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	82fa      	strh	r2, [r7, #22]
 8003bb0:	2bfe      	cmp	r3, #254	; 0xfe
 8003bb2:	f200 821a 	bhi.w	8003fea <generate_moves+0x562>
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3311      	adds	r3, #17
 8003bba:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13d      	bne.n	8003c3e <generate_moves+0x1b6>
                    if(state->color[square + DIR_NE] == BLACK){
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	3311      	adds	r3, #17
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d135      	bne.n	8003c3e <generate_moves+0x1b6>
                        moves[n_moves].from = square;
 8003bd2:	8afa      	ldrh	r2, [r7, #22]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4413      	add	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	8afa      	ldrh	r2, [r7, #22]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f101 0211 	add.w	r2, r1, #17
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003bfc:	8afa      	ldrh	r2, [r7, #22]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003c0c:	8afa      	ldrh	r2, [r7, #22]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	d107      	bne.n	8003c32 <generate_moves+0x1aa>
                            moves[n_moves].promotion = 1;
 8003c22:	8afa      	ldrh	r2, [r7, #22]
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	2201      	movs	r2, #1
 8003c30:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003c32:	8afb      	ldrh	r3, [r7, #22]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	82fa      	strh	r2, [r7, #22]
 8003c38:	2bfe      	cmp	r3, #254	; 0xfe
 8003c3a:	f200 81d8 	bhi.w	8003fee <generate_moves+0x566>
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	330f      	adds	r3, #15
 8003c42:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 81c5 	bne.w	8003fd6 <generate_moves+0x54e>
                    if(state->color[square + DIR_NW] == BLACK){
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	330f      	adds	r3, #15
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 81bc 	bne.w	8003fd6 <generate_moves+0x54e>
                        moves[n_moves].from = square;
 8003c5e:	8afa      	ldrh	r2, [r7, #22]
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	8afa      	ldrh	r2, [r7, #22]
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f101 020f 	add.w	r2, r1, #15
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003c88:	8afa      	ldrh	r2, [r7, #22]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003c98:	8afa      	ldrh	r2, [r7, #22]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b07      	cmp	r3, #7
 8003cac:	d107      	bne.n	8003cbe <generate_moves+0x236>
                            moves[n_moves].promotion = 1;
 8003cae:	8afa      	ldrh	r2, [r7, #22]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	2201      	movs	r2, #1
 8003cbc:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003cbe:	8afb      	ldrh	r3, [r7, #22]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	82fa      	strh	r2, [r7, #22]
 8003cc4:	2bfe      	cmp	r3, #254	; 0xfe
 8003cc6:	f240 8186 	bls.w	8003fd6 <generate_moves+0x54e>
 8003cca:	e197      	b.n	8003ffc <generate_moves+0x574>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	3b10      	subs	r3, #16
 8003cd0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d168      	bne.n	8003daa <generate_moves+0x322>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3b10      	subs	r3, #16
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d162      	bne.n	8003daa <generate_moves+0x322>
                        moves[n_moves].from = square;
 8003ce4:	8afa      	ldrh	r2, [r7, #22]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	8afa      	ldrh	r2, [r7, #22]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	f1a1 0210 	sub.w	r2, r1, #16
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003d0e:	8afa      	ldrh	r2, [r7, #22]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	4413      	add	r3, r2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8003d1e:	8afa      	ldrh	r2, [r7, #22]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <generate_moves+0x2bc>
                            moves[n_moves].promotion = 1;
 8003d34:	8afa      	ldrh	r2, [r7, #22]
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	2201      	movs	r2, #1
 8003d42:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003d44:	8afb      	ldrh	r3, [r7, #22]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	82fa      	strh	r2, [r7, #22]
 8003d4a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d4c:	f200 8151 	bhi.w	8003ff2 <generate_moves+0x56a>
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	111b      	asrs	r3, r3, #4
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d128      	bne.n	8003daa <generate_moves+0x322>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3b20      	subs	r3, #32
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	2b06      	cmp	r3, #6
 8003d62:	d122      	bne.n	8003daa <generate_moves+0x322>
                            moves[n_moves].from = square;
 8003d64:	8afa      	ldrh	r2, [r7, #22]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	b2d9      	uxtb	r1, r3
 8003d7a:	8afa      	ldrh	r2, [r7, #22]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	f1a1 0220 	sub.w	r2, r1, #32
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 8003d9e:	8afb      	ldrh	r3, [r7, #22]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	82fa      	strh	r2, [r7, #22]
 8003da4:	2bfe      	cmp	r3, #254	; 0xfe
 8003da6:	f200 8126 	bhi.w	8003ff6 <generate_moves+0x56e>
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	3b0f      	subs	r3, #15
 8003dae:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d13d      	bne.n	8003e32 <generate_moves+0x3aa>
                    if(state->color[square + DIR_SE] == WHITE){
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	3b0f      	subs	r3, #15
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d135      	bne.n	8003e32 <generate_moves+0x3aa>
                        moves[n_moves].from = square;
 8003dc6:	8afa      	ldrh	r2, [r7, #22]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	b2d9      	uxtb	r1, r3
 8003ddc:	8afa      	ldrh	r2, [r7, #22]
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	f1a1 020f 	sub.w	r2, r1, #15
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003df0:	8afa      	ldrh	r2, [r7, #22]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <generate_moves+0x39e>
                            moves[n_moves].promotion = 1;
 8003e16:	8afa      	ldrh	r2, [r7, #22]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	2201      	movs	r2, #1
 8003e24:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003e26:	8afb      	ldrh	r3, [r7, #22]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	82fa      	strh	r2, [r7, #22]
 8003e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8003e2e:	f200 80e4 	bhi.w	8003ffa <generate_moves+0x572>
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	3b11      	subs	r3, #17
 8003e36:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 80cb 	bne.w	8003fd6 <generate_moves+0x54e>
                    if(state->color[square + DIR_SW] == WHITE){
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3b11      	subs	r3, #17
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 80c2 	bne.w	8003fd6 <generate_moves+0x54e>
                        moves[n_moves].from = square;
 8003e52:	8afa      	ldrh	r2, [r7, #22]
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	b2d9      	uxtb	r1, r3
 8003e68:	8afa      	ldrh	r2, [r7, #22]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	f1a1 0211 	sub.w	r2, r1, #17
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003e7c:	8afa      	ldrh	r2, [r7, #22]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8003e8c:	8afa      	ldrh	r2, [r7, #22]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <generate_moves+0x42a>
                            moves[n_moves].promotion = 1;
 8003ea2:	8afa      	ldrh	r2, [r7, #22]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	2201      	movs	r2, #1
 8003eb0:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	82fa      	strh	r2, [r7, #22]
 8003eb8:	2bfe      	cmp	r3, #254	; 0xfe
 8003eba:	f240 808c 	bls.w	8003fd6 <generate_moves+0x54e>
 8003ebe:	e09d      	b.n	8003ffc <generate_moves+0x574>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e07b      	b.n	8003fbe <generate_moves+0x536>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 8003ec6:	7b7a      	ldrb	r2, [r7, #13]
 8003ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ecc:	494f      	ldr	r1, [pc, #316]	; (800400c <generate_moves+0x584>)
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 8003ee2:	e05d      	b.n	8003fa0 <generate_moves+0x518>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d11e      	bne.n	8003f2c <generate_moves+0x4a4>
                        moves[n_moves].from = square;
 8003eee:	8afa      	ldrh	r2, [r7, #22]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 8003f00:	8afa      	ldrh	r2, [r7, #22]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	7bba      	ldrb	r2, [r7, #14]
 8003f0e:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003f10:	8afa      	ldrh	r2, [r7, #22]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003f20:	8afb      	ldrh	r3, [r7, #22]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	82fa      	strh	r2, [r7, #22]
 8003f26:	2bfe      	cmp	r3, #254	; 0xfe
 8003f28:	d928      	bls.n	8003f7c <generate_moves+0x4f4>
 8003f2a:	e042      	b.n	8003fb2 <generate_moves+0x52a>
                    }
                    else{
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 8003f2c:	7bbb      	ldrb	r3, [r7, #14]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d035      	beq.n	8003fac <generate_moves+0x524>
                            moves[n_moves].from = square;
 8003f40:	8afa      	ldrh	r2, [r7, #22]
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 8003f52:	8afa      	ldrh	r2, [r7, #22]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	7bba      	ldrb	r2, [r7, #14]
 8003f60:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8003f62:	8afa      	ldrh	r2, [r7, #22]
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 8003f72:	8afb      	ldrh	r3, [r7, #22]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	82fa      	strh	r2, [r7, #22]
 8003f78:	2bfe      	cmp	r3, #254	; 0xfe
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8003f7a:	e017      	b.n	8003fac <generate_moves+0x524>

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 8003f7c:	7b7b      	ldrb	r3, [r7, #13]
 8003f7e:	4a24      	ldr	r2, [pc, #144]	; (8004010 <generate_moves+0x588>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d014      	beq.n	8003fb0 <generate_moves+0x528>
                        break;
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 8003f86:	7b7a      	ldrb	r2, [r7, #13]
 8003f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8c:	491f      	ldr	r1, [pc, #124]	; (800400c <generate_moves+0x584>)
 8003f8e:	00d2      	lsls	r2, r2, #3
 8003f90:	440a      	add	r2, r1
 8003f92:	4413      	add	r3, r2
 8003f94:	f993 3000 	ldrsb.w	r3, [r3]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d09c      	beq.n	8003ee4 <generate_moves+0x45c>
 8003faa:	e002      	b.n	8003fb2 <generate_moves+0x52a>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <generate_moves+0x52a>
                        break;
 8003fb0:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	7b7a      	ldrb	r2, [r7, #13]
 8003fc4:	4913      	ldr	r1, [pc, #76]	; (8004014 <generate_moves+0x58c>)
 8003fc6:	5c8a      	ldrb	r2, [r1, r2]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f6ff af7c 	blt.w	8003ec6 <generate_moves+0x43e>
 8003fce:	e002      	b.n	8003fd6 <generate_moves+0x54e>
            continue;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <generate_moves+0x54e>
            continue;
 8003fd4:	bf00      	nop
    for(int square = 0; square < 128; square++){
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b7f      	cmp	r3, #127	; 0x7f
 8003fe0:	f77f ad5c 	ble.w	8003a9c <generate_moves+0x14>
 8003fe4:	e00a      	b.n	8003ffc <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 8003fe6:	bf00      	nop
 8003fe8:	e008      	b.n	8003ffc <generate_moves+0x574>
                            if(n_moves++ >= 255) break;
 8003fea:	bf00      	nop
 8003fec:	e006      	b.n	8003ffc <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <generate_moves+0x574>
                            if(n_moves++ >= 255) break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 8003ffa:	bf00      	nop
                }
            }
        }
    }
    return n_moves;
 8003ffc:	8afb      	ldrh	r3, [r7, #22]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000008 	.word	0x20000008
 8004010:	20000038 	.word	0x20000038
 8004014:	20000030 	.word	0x20000030

08004018 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8004020:	210c      	movs	r1, #12
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f002 fe8c 	bl	8006d40 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20001cb4 	.word	0x20001cb4

0800403c <ws2812_init>:

void ws2812_init(){
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e010      	b.n	800406a <ws2812_init+0x2e>
		if(i < 60)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b3b      	cmp	r3, #59	; 0x3b
 800404c:	dc05      	bgt.n	800405a <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 800404e:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <ws2812_init+0x48>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2100      	movs	r1, #0
 8004054:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004058:	e004      	b.n	8004064 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <ws2812_init+0x48>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	211c      	movs	r1, #28
 8004060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3301      	adds	r3, #1
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f240 623b 	movw	r2, #1595	; 0x63b
 8004070:	4293      	cmp	r3, r2
 8004072:	dde9      	ble.n	8004048 <ws2812_init+0xc>
	}
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000f3c 	.word	0x20000f3c

08004088 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e065      	b.n	8004160 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e05c      	b.n	8004154 <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80040a4:	4933      	ldr	r1, [pc, #204]	; (8004174 <ws2812_update_pwm_data+0xec>)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	00da      	lsls	r2, r3, #3
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 80040b8:	482e      	ldr	r0, [pc, #184]	; (8004174 <ws2812_update_pwm_data+0xec>)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	00d9      	lsls	r1, r3, #3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	440b      	add	r3, r1
 80040c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80040cc:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 80040ce:	4829      	ldr	r0, [pc, #164]	; (8004174 <ws2812_update_pwm_data+0xec>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	00d9      	lsls	r1, r3, #3
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	440b      	add	r3, r1
 80040d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040dc:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80040de:	4313      	orrs	r3, r2
 80040e0:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e02f      	b.n	8004148 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 80040e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	fa42 f303 	asr.w	r3, r2, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d011      	beq.n	8004120 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <ws2812_update_pwm_data+0xf0>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4413      	add	r3, r2
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <ws2812_update_pwm_data+0xf4>)
 8004118:	214c      	movs	r1, #76	; 0x4c
 800411a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800411e:	e010      	b.n	8004142 <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <ws2812_update_pwm_data+0xf0>)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4413      	add	r3, r2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <ws2812_update_pwm_data+0xf4>)
 800413c:	211c      	movs	r1, #28
 800413e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b17      	cmp	r3, #23
 800414c:	ddcc      	ble.n	80040e8 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b07      	cmp	r3, #7
 8004158:	dd9f      	ble.n	800409a <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3301      	adds	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b07      	cmp	r3, #7
 8004164:	dd96      	ble.n	8004094 <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20001bb4 	.word	0x20001bb4
 8004178:	20000040 	.word	0x20000040
 800417c:	20000f3c 	.word	0x20000f3c

08004180 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8004188:	f7ff ff7e 	bl	8004088 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <ws2812_update_leds_from_data+0x28>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 8004192:	f240 633c 	movw	r3, #1596	; 0x63c
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <ws2812_update_leds_from_data+0x2c>)
 8004198:	210c      	movs	r1, #12
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f002 fc20 	bl	80069e0 <HAL_TIM_PWM_Start_DMA>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20001cb4 	.word	0x20001cb4
 80041ac:	20000f3c 	.word	0x20000f3c

080041b0 <lighting_set_output>:
led_color * output_array = (led_color *)0;

color_t game_finished_winner = COLOR_EMPTY;

//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <lighting_set_output+0x1c>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20001cb8 	.word	0x20001cb8

080041d0 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 80041de:	79fa      	ldrb	r2, [r7, #7]
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <set_color+0x34>)
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	00d8      	lsls	r0, r3, #3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4403      	add	r3, r0
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	4905      	ldr	r1, [pc, #20]	; (8004208 <set_color+0x38>)
 80041f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041f6:	601a      	str	r2, [r3, #0]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20001cb8 	.word	0x20001cb8
 8004208:	20000080 	.word	0x20000080

0800420c <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e01a      	b.n	800424e <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 8004218:	2300      	movs	r3, #0
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	e011      	b.n	8004242 <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4053      	eors	r3, r2
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ffca 	bl	80041d0 <set_color>
    for (int file = 0; file < 8; file++) {
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b07      	cmp	r3, #7
 8004246:	ddea      	ble.n	800421e <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3301      	adds	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b07      	cmp	r3, #7
 8004252:	dde1      	ble.n	8004218 <paint_board+0xc>
    }
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

    //total_valid_moves = engine_list_moves(valid_moves, 1);
    for(int i = 0; i < total_valid_moves; i++){
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	e026      	b.n	80042c4 <paint_valid_moves+0x66>
        if(valid_moves[i].from == square_lifted){
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	429a      	cmp	r2, r3
 8004288:	d119      	bne.n	80042be <paint_valid_moves+0x60>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4413      	add	r3, r2
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4618      	mov	r0, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4413      	add	r3, r2
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	2202      	movs	r2, #2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7ff ff8c 	bl	80041d0 <set_color>
            lifted_piece_valid_moves ++;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3301      	adds	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3301      	adds	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	dbd4      	blt.n	8004276 <paint_valid_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80042cc:	697b      	ldr	r3, [r7, #20]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	e04e      	b.n	8004386 <paint_differences+0xae>
        for (int file = 0; file < 8; file++) {
 80042e8:	2300      	movs	r3, #0
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e045      	b.n	800437a <paint_differences+0xa2>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 80042ee:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <paint_differences+0xc0>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4413      	add	r3, r2
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	fa42 f303 	asr.w	r3, r2, r3
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <paint_differences+0x5a>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	b2da      	uxtb	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4413      	add	r3, r2
 8004314:	b2db      	uxtb	r3, r3
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe ff62 	bl	80031e0 <engine_get_piece>
 800431c:	4603      	mov	r3, r0
 800431e:	2b06      	cmp	r3, #6
 8004320:	d107      	bne.n	8004332 <paint_differences+0x5a>
                set_color(rank, file, INVALID_ID);
 8004322:	2205      	movs	r2, #5
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68b8      	ldr	r0, [r7, #8]
 8004328:	f7ff ff52 	bl	80041d0 <set_color>
                board_ok = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e020      	b.n	8004374 <paint_differences+0x9c>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8004332:	4a19      	ldr	r2, [pc, #100]	; (8004398 <paint_differences+0xc0>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4413      	add	r3, r2
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	fa42 f303 	asr.w	r3, r2, r3
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d114      	bne.n	8004374 <paint_differences+0x9c>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	b2da      	uxtb	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4413      	add	r3, r2
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe ff40 	bl	80031e0 <engine_get_piece>
 8004360:	4603      	mov	r3, r0
 8004362:	2b06      	cmp	r3, #6
 8004364:	d006      	beq.n	8004374 <paint_differences+0x9c>
                set_color(rank, file, MISSING_ID);
 8004366:	2204      	movs	r2, #4
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7ff ff30 	bl	80041d0 <set_color>
                board_ok = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b07      	cmp	r3, #7
 800437e:	ddb6      	ble.n	80042ee <paint_differences+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3301      	adds	r3, #1
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b07      	cmp	r3, #7
 800438a:	ddad      	ble.n	80042e8 <paint_differences+0x10>
            }
        }
    }
    return board_ok;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20001ccc 	.word	0x20001ccc

0800439c <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 80043a6:	2202      	movs	r2, #2
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ff10 	bl	80041d0 <set_color>
    return 1;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <paint_winner>:

char paint_winner(){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
    for (int rank = 0; rank < 8; rank++) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	e027      	b.n	8004418 <paint_winner+0x5c>
        for (int file = 0; file < 8; file++) {
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	e01e      	b.n	800440c <paint_winner+0x50>
            if((rank < 4) == (game_finished_winner == WHITE))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	bfcc      	ite	gt
 80043d4:	2301      	movgt	r3, #1
 80043d6:	2300      	movle	r3, #0
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <paint_winner+0x6c>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4053      	eors	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <paint_winner+0x40>
                set_color(rank, file, VALID_ID);
 80043f0:	2202      	movs	r2, #2
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff feeb 	bl	80041d0 <set_color>
 80043fa:	e004      	b.n	8004406 <paint_winner+0x4a>
            else
                set_color(rank, file, INVALID_ID);
 80043fc:	2205      	movs	r2, #5
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fee5 	bl	80041d0 <set_color>
        for (int file = 0; file < 8; file++) {
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b07      	cmp	r3, #7
 8004410:	dddd      	ble.n	80043ce <paint_winner+0x12>
    for (int rank = 0; rank < 8; rank++) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3301      	adds	r3, #1
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b07      	cmp	r3, #7
 800441c:	ddd4      	ble.n	80043c8 <paint_winner+0xc>
        }
    }
    return 1;
 800441e:	2301      	movs	r3, #1
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000098 	.word	0x20000098

0800442c <lighting_set_state>:
int total_valid_moves_lighting;

uint8_t square_cpu_from_lighting;
uint8_t square_cpu_to_lighting;

void lighting_set_state(char state){
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <lighting_set_state+0x1c>)
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	7013      	strb	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20001cb5 	.word	0x20001cb5

0800444c <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 8004456:	4a04      	ldr	r2, [pc, #16]	; (8004468 <lighting_piece_lifted_square+0x1c>)
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	7013      	strb	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	20001cbc 	.word	0x20001cbc

0800446c <lighting_set_winner>:

void lighting_set_winner(char winner){
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
    game_finished_winner = winner;
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <lighting_set_winner+0x1c>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	7013      	strb	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000098 	.word	0x20000098

0800448c <lighting_set_valid_moves>:

void lighting_set_valid_moves(move_t * moves, int total_valid_moves){
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 8004496:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <lighting_set_valid_moves+0x24>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 800449c:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <lighting_set_valid_moves+0x28>)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6013      	str	r3, [r2, #0]
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20001cc0 	.word	0x20001cc0
 80044b4:	20001cc4 	.word	0x20001cc4

080044b8 <lighting_set_cpu_movement>:

void lighting_set_cpu_movement(uint8_t from, uint8_t to){
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	460a      	mov	r2, r1
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
    square_cpu_from_lighting = from;
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <lighting_set_cpu_movement+0x28>)
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	7013      	strb	r3, [r2, #0]
    square_cpu_to_lighting = to;
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <lighting_set_cpu_movement+0x2c>)
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	7013      	strb	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20001cc8 	.word	0x20001cc8
 80044e4:	20001cc9 	.word	0x20001cc9

080044e8 <lighting_refresh>:
void set_valid_moves(move_t * moves, int total_valid_moves){
    valid_moves_lighting = moves;
    total_valid_moves_lighting = total_valid_moves;
}

void lighting_refresh(){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 80044ec:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <lighting_refresh+0x10c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d87c      	bhi.n	80045ee <lighting_refresh+0x106>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <lighting_refresh+0x14>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004527 	.word	0x08004527
 8004504:	08004559 	.word	0x08004559
 8004508:	08004563 	.word	0x08004563
 800450c:	08004583 	.word	0x08004583
 8004510:	08004589 	.word	0x08004589
 8004514:	080045a9 	.word	0x080045a9
 8004518:	080045c9 	.word	0x080045c9
 800451c:	080045e9 	.word	0x080045e9
        case LIGHTING_IDLE_STATE:
            paint_board();
 8004520:	f7ff fe74 	bl	800420c <paint_board>
                        set_color(y, x, INVALID_ID);
                    }
                }
            }
            */
        break;
 8004524:	e063      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 8004526:	f7ff fe71 	bl	800420c <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <lighting_refresh+0x110>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4618      	mov	r0, r3
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <lighting_refresh+0x110>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	2203      	movs	r2, #3
 800453e:	4619      	mov	r1, r3
 8004540:	f7ff fe46 	bl	80041d0 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 8004544:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <lighting_refresh+0x110>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <lighting_refresh+0x114>)
 800454a:	6811      	ldr	r1, [r2, #0]
 800454c:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <lighting_refresh+0x118>)
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fe84 	bl	800425e <paint_valid_moves>
        break;
 8004556:	e04a      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_ERROR_STATE:
            paint_board();
 8004558:	f7ff fe58 	bl	800420c <paint_board>
            paint_differences();
 800455c:	f7ff febc 	bl	80042d8 <paint_differences>
        break;
 8004560:	e045      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 8004562:	f7ff fe53 	bl	800420c <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <lighting_refresh+0x110>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <lighting_refresh+0x110>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7ff ff0e 	bl	800439c <paint_capture>
        break;
 8004580:	e035      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_CPU_THINKING_STATE:
            paint_board();
 8004582:	f7ff fe43 	bl	800420c <paint_board>
        break;
 8004586:	e032      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_CPU_LIFT_FROM_STATE:
            paint_board();
 8004588:	f7ff fe40 	bl	800420c <paint_board>
            set_color(SQ2ROW(square_cpu_from_lighting), SQ2COL(square_cpu_from_lighting), INVALID_ID);
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <lighting_refresh+0x11c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4618      	mov	r0, r3
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <lighting_refresh+0x11c>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	2205      	movs	r2, #5
 80045a0:	4619      	mov	r1, r3
 80045a2:	f7ff fe15 	bl	80041d0 <set_color>
        break;
 80045a6:	e022      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_CPU_LIFT_CAPTURED_STATE:
            paint_board();
 80045a8:	f7ff fe30 	bl	800420c <paint_board>
            set_color(SQ2ROW(square_cpu_to_lighting), SQ2COL(square_cpu_to_lighting), INVALID_ID);
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <lighting_refresh+0x120>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	4618      	mov	r0, r3
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <lighting_refresh+0x120>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2205      	movs	r2, #5
 80045c0:	4619      	mov	r1, r3
 80045c2:	f7ff fe05 	bl	80041d0 <set_color>
        break;
 80045c6:	e012      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_CPU_PLACE_TO_STATE:
            paint_board();
 80045c8:	f7ff fe20 	bl	800420c <paint_board>
            set_color(SQ2ROW(square_cpu_to_lighting), SQ2COL(square_cpu_to_lighting), VALID_ID);
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <lighting_refresh+0x120>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <lighting_refresh+0x120>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2202      	movs	r2, #2
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7ff fdf5 	bl	80041d0 <set_color>
        break;
 80045e6:	e002      	b.n	80045ee <lighting_refresh+0x106>

        case LIGHTING_GAME_FINISHED_STATE:
            paint_winner();
 80045e8:	f7ff fee8 	bl	80043bc <paint_winner>
        break;
 80045ec:	bf00      	nop
    }
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20001cb5 	.word	0x20001cb5
 80045f8:	20001cbc 	.word	0x20001cbc
 80045fc:	20001cc0 	.word	0x20001cc0
 8004600:	20001cc4 	.word	0x20001cc4
 8004604:	20001cc8 	.word	0x20001cc8
 8004608:	20001cc9 	.word	0x20001cc9

0800460c <t_reed_scan_sensors>:

volatile uint8_t reed_data[8] = { 0 };



void t_reed_scan_sensors() {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0

	while (1) {
		for (int row = 0; row < 8; row++) {
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	e131      	b.n	800487c <t_reed_scan_sensors+0x270>
			HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	2101      	movs	r1, #1
 8004628:	4897      	ldr	r0, [pc, #604]	; (8004888 <t_reed_scan_sensors+0x27c>)
 800462a:	f000 ffb1 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	2102      	movs	r1, #2
 800463e:	4892      	ldr	r0, [pc, #584]	; (8004888 <t_reed_scan_sensors+0x27c>)
 8004640:	f000 ffa6 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	2101      	movs	r1, #1
 8004654:	488d      	ldr	r0, [pc, #564]	; (800488c <t_reed_scan_sensors+0x280>)
 8004656:	f000 ff9b 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b03      	cmp	r3, #3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	4889      	ldr	r0, [pc, #548]	; (8004890 <t_reed_scan_sensors+0x284>)
 800466c:	f000 ff90 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	4883      	ldr	r0, [pc, #524]	; (8004890 <t_reed_scan_sensors+0x284>)
 8004682:	f000 ff85 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b05      	cmp	r3, #5
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	2140      	movs	r1, #64	; 0x40
 8004696:	487d      	ldr	r0, [pc, #500]	; (800488c <t_reed_scan_sensors+0x280>)
 8004698:	f000 ff7a 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	4876      	ldr	r0, [pc, #472]	; (8004888 <t_reed_scan_sensors+0x27c>)
 80046ae:	f000 ff6f 	bl	8005590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b07      	cmp	r3, #7
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046c4:	4872      	ldr	r0, [pc, #456]	; (8004890 <t_reed_scan_sensors+0x284>)
 80046c6:	f000 ff63 	bl	8005590 <HAL_GPIO_WritePin>

			//for(int i = 0; i < 100; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
			vTaskDelay(10); // Lo uso para hacer más lenta toda la lectura
 80046ca:	200a      	movs	r0, #10
 80046cc:	f004 fa20 	bl	8008b10 <vTaskDelay>

			reed_data[row] = 0;
 80046d0:	4a70      	ldr	r2, [pc, #448]	; (8004894 <t_reed_scan_sensors+0x288>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 80046da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046de:	486c      	ldr	r0, [pc, #432]	; (8004890 <t_reed_scan_sensors+0x284>)
 80046e0:	f000 ff3e 	bl	8005560 <HAL_GPIO_ReadPin>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	4a68      	ldr	r2, [pc, #416]	; (8004894 <t_reed_scan_sensors+0x288>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	b25a      	sxtb	r2, r3
 80046fe:	b24b      	sxtb	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	b25b      	sxtb	r3, r3
 8004704:	b2d9      	uxtb	r1, r3
 8004706:	4a63      	ldr	r2, [pc, #396]	; (8004894 <t_reed_scan_sensors+0x288>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	460a      	mov	r2, r1
 800470e:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8004710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004714:	485d      	ldr	r0, [pc, #372]	; (800488c <t_reed_scan_sensors+0x280>)
 8004716:	f000 ff23 	bl	8005560 <HAL_GPIO_ReadPin>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <t_reed_scan_sensors+0x118>
 8004720:	2102      	movs	r1, #2
 8004722:	e000      	b.n	8004726 <t_reed_scan_sensors+0x11a>
 8004724:	2100      	movs	r1, #0
 8004726:	4a5b      	ldr	r2, [pc, #364]	; (8004894 <t_reed_scan_sensors+0x288>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	b25a      	sxtb	r2, r3
 8004732:	b24b      	sxtb	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	b25b      	sxtb	r3, r3
 8004738:	b2d9      	uxtb	r1, r3
 800473a:	4a56      	ldr	r2, [pc, #344]	; (8004894 <t_reed_scan_sensors+0x288>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	460a      	mov	r2, r1
 8004742:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8004744:	2110      	movs	r1, #16
 8004746:	4851      	ldr	r0, [pc, #324]	; (800488c <t_reed_scan_sensors+0x280>)
 8004748:	f000 ff0a 	bl	8005560 <HAL_GPIO_ReadPin>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <t_reed_scan_sensors+0x14a>
 8004752:	2104      	movs	r1, #4
 8004754:	e000      	b.n	8004758 <t_reed_scan_sensors+0x14c>
 8004756:	2100      	movs	r1, #0
 8004758:	4a4e      	ldr	r2, [pc, #312]	; (8004894 <t_reed_scan_sensors+0x288>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	b25a      	sxtb	r2, r3
 8004764:	b24b      	sxtb	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	b25b      	sxtb	r3, r3
 800476a:	b2d9      	uxtb	r1, r3
 800476c:	4a49      	ldr	r2, [pc, #292]	; (8004894 <t_reed_scan_sensors+0x288>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	460a      	mov	r2, r1
 8004774:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8004776:	2110      	movs	r1, #16
 8004778:	4843      	ldr	r0, [pc, #268]	; (8004888 <t_reed_scan_sensors+0x27c>)
 800477a:	f000 fef1 	bl	8005560 <HAL_GPIO_ReadPin>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <t_reed_scan_sensors+0x17c>
 8004784:	2108      	movs	r1, #8
 8004786:	e000      	b.n	800478a <t_reed_scan_sensors+0x17e>
 8004788:	2100      	movs	r1, #0
 800478a:	4a42      	ldr	r2, [pc, #264]	; (8004894 <t_reed_scan_sensors+0x288>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	b25a      	sxtb	r2, r3
 8004796:	b24b      	sxtb	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	b25b      	sxtb	r3, r3
 800479c:	b2d9      	uxtb	r1, r3
 800479e:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <t_reed_scan_sensors+0x288>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	460a      	mov	r2, r1
 80047a6:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 80047a8:	2120      	movs	r1, #32
 80047aa:	4838      	ldr	r0, [pc, #224]	; (800488c <t_reed_scan_sensors+0x280>)
 80047ac:	f000 fed8 	bl	8005560 <HAL_GPIO_ReadPin>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <t_reed_scan_sensors+0x1ae>
 80047b6:	2110      	movs	r1, #16
 80047b8:	e000      	b.n	80047bc <t_reed_scan_sensors+0x1b0>
 80047ba:	2100      	movs	r1, #0
 80047bc:	4a35      	ldr	r2, [pc, #212]	; (8004894 <t_reed_scan_sensors+0x288>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	b25a      	sxtb	r2, r3
 80047c8:	b24b      	sxtb	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	b2d9      	uxtb	r1, r3
 80047d0:	4a30      	ldr	r2, [pc, #192]	; (8004894 <t_reed_scan_sensors+0x288>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	460a      	mov	r2, r1
 80047d8:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 80047da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047de:	482c      	ldr	r0, [pc, #176]	; (8004890 <t_reed_scan_sensors+0x284>)
 80047e0:	f000 febe 	bl	8005560 <HAL_GPIO_ReadPin>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <t_reed_scan_sensors+0x1e2>
 80047ea:	2120      	movs	r1, #32
 80047ec:	e000      	b.n	80047f0 <t_reed_scan_sensors+0x1e4>
 80047ee:	2100      	movs	r1, #0
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <t_reed_scan_sensors+0x288>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	b25a      	sxtb	r2, r3
 80047fc:	b24b      	sxtb	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	b25b      	sxtb	r3, r3
 8004802:	b2d9      	uxtb	r1, r3
 8004804:	4a23      	ldr	r2, [pc, #140]	; (8004894 <t_reed_scan_sensors+0x288>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	460a      	mov	r2, r1
 800480c:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 800480e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004812:	481e      	ldr	r0, [pc, #120]	; (800488c <t_reed_scan_sensors+0x280>)
 8004814:	f000 fea4 	bl	8005560 <HAL_GPIO_ReadPin>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <t_reed_scan_sensors+0x216>
 800481e:	2140      	movs	r1, #64	; 0x40
 8004820:	e000      	b.n	8004824 <t_reed_scan_sensors+0x218>
 8004822:	2100      	movs	r1, #0
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <t_reed_scan_sensors+0x288>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	b25a      	sxtb	r2, r3
 8004830:	b24b      	sxtb	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	b25b      	sxtb	r3, r3
 8004836:	b2d9      	uxtb	r1, r3
 8004838:	4a16      	ldr	r2, [pc, #88]	; (8004894 <t_reed_scan_sensors+0x288>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	460a      	mov	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8004842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004846:	4811      	ldr	r0, [pc, #68]	; (800488c <t_reed_scan_sensors+0x280>)
 8004848:	f000 fe8a 	bl	8005560 <HAL_GPIO_ReadPin>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <t_reed_scan_sensors+0x24a>
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	e000      	b.n	8004858 <t_reed_scan_sensors+0x24c>
 8004856:	2100      	movs	r1, #0
 8004858:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <t_reed_scan_sensors+0x288>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	b25a      	sxtb	r2, r3
 8004864:	b24b      	sxtb	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	b25b      	sxtb	r3, r3
 800486a:	b2d9      	uxtb	r1, r3
 800486c:	4a09      	ldr	r2, [pc, #36]	; (8004894 <t_reed_scan_sensors+0x288>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	460a      	mov	r2, r1
 8004874:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < 8; row++) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3301      	adds	r3, #1
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b07      	cmp	r3, #7
 8004880:	f77f aeca 	ble.w	8004618 <t_reed_scan_sensors+0xc>
 8004884:	e6c5      	b.n	8004612 <t_reed_scan_sensors+0x6>
 8004886:	bf00      	nop
 8004888:	40020800 	.word	0x40020800
 800488c:	40020400 	.word	0x40020400
 8004890:	40020000 	.word	0x40020000
 8004894:	20001ccc 	.word	0x20001ccc

08004898 <Reset_Handler>:
 8004898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048d0 <LoopFillZerobss+0x12>
 800489c:	480d      	ldr	r0, [pc, #52]	; (80048d4 <LoopFillZerobss+0x16>)
 800489e:	490e      	ldr	r1, [pc, #56]	; (80048d8 <LoopFillZerobss+0x1a>)
 80048a0:	4a0e      	ldr	r2, [pc, #56]	; (80048dc <LoopFillZerobss+0x1e>)
 80048a2:	2300      	movs	r3, #0
 80048a4:	e002      	b.n	80048ac <LoopCopyDataInit>

080048a6 <CopyDataInit>:
 80048a6:	58d4      	ldr	r4, [r2, r3]
 80048a8:	50c4      	str	r4, [r0, r3]
 80048aa:	3304      	adds	r3, #4

080048ac <LoopCopyDataInit>:
 80048ac:	18c4      	adds	r4, r0, r3
 80048ae:	428c      	cmp	r4, r1
 80048b0:	d3f9      	bcc.n	80048a6 <CopyDataInit>
 80048b2:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <LoopFillZerobss+0x22>)
 80048b4:	4c0b      	ldr	r4, [pc, #44]	; (80048e4 <LoopFillZerobss+0x26>)
 80048b6:	2300      	movs	r3, #0
 80048b8:	e001      	b.n	80048be <LoopFillZerobss>

080048ba <FillZerobss>:
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	3204      	adds	r2, #4

080048be <LoopFillZerobss>:
 80048be:	42a2      	cmp	r2, r4
 80048c0:	d3fb      	bcc.n	80048ba <FillZerobss>
 80048c2:	f7fc ff9b 	bl	80017fc <SystemInit>
 80048c6:	f005 fbdf 	bl	800a088 <__libc_init_array>
 80048ca:	f7fc f857 	bl	800097c <main>
 80048ce:	4770      	bx	lr
 80048d0:	20018000 	.word	0x20018000
 80048d4:	20000000 	.word	0x20000000
 80048d8:	200000f8 	.word	0x200000f8
 80048dc:	0800a3ec 	.word	0x0800a3ec
 80048e0:	200000f8 	.word	0x200000f8
 80048e4:	20006d8c 	.word	0x20006d8c

080048e8 <ADC_IRQHandler>:
 80048e8:	e7fe      	b.n	80048e8 <ADC_IRQHandler>
	...

080048ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_Init+0x40>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_Init+0x40>)
 80048f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_Init+0x40>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_Init+0x40>)
 8004902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_Init+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a07      	ldr	r2, [pc, #28]	; (800492c <HAL_Init+0x40>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004914:	2003      	movs	r0, #3
 8004916:	f000 f8d8 	bl	8004aca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800491a:	200f      	movs	r0, #15
 800491c:	f7fc feb0 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004920:	f7fc fd98 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00

08004930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_IncTick+0x20>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_IncTick+0x24>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4413      	add	r3, r2
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_IncTick+0x24>)
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	200000a0 	.word	0x200000a0
 8004954:	20001cd4 	.word	0x20001cd4

08004958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return uwTick;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_GetTick+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20001cd4 	.word	0x20001cd4

08004970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800498c:	4013      	ands	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049a2:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <__NVIC_SetPriorityGrouping+0x44>)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	60d3      	str	r3, [r2, #12]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <__NVIC_GetPriorityGrouping+0x18>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f003 0307 	and.w	r3, r3, #7
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	db0b      	blt.n	80049fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	f003 021f 	and.w	r2, r3, #31
 80049ec:	4907      	ldr	r1, [pc, #28]	; (8004a0c <__NVIC_EnableIRQ+0x38>)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2001      	movs	r0, #1
 80049f6:	fa00 f202 	lsl.w	r2, r0, r2
 80049fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e100 	.word	0xe000e100

08004a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db0a      	blt.n	8004a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	490c      	ldr	r1, [pc, #48]	; (8004a5c <__NVIC_SetPriority+0x4c>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a38:	e00a      	b.n	8004a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4908      	ldr	r1, [pc, #32]	; (8004a60 <__NVIC_SetPriority+0x50>)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3b04      	subs	r3, #4
 8004a48:	0112      	lsls	r2, r2, #4
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	761a      	strb	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e100 	.word	0xe000e100
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f1c3 0307 	rsb	r3, r3, #7
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	bf28      	it	cs
 8004a82:	2304      	movcs	r3, #4
 8004a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d902      	bls.n	8004a94 <NVIC_EncodePriority+0x30>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3b03      	subs	r3, #3
 8004a92:	e000      	b.n	8004a96 <NVIC_EncodePriority+0x32>
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aac:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	43d9      	mvns	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004abc:	4313      	orrs	r3, r2
         );
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3724      	adds	r7, #36	; 0x24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ff4c 	bl	8004970 <__NVIC_SetPriorityGrouping>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004af2:	f7ff ff61 	bl	80049b8 <__NVIC_GetPriorityGrouping>
 8004af6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	f7ff ffb1 	bl	8004a64 <NVIC_EncodePriority>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ff80 	bl	8004a10 <__NVIC_SetPriority>
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff54 	bl	80049d4 <__NVIC_EnableIRQ>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7ff ff0a 	bl	8004958 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e099      	b.n	8004c84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b70:	e00f      	b.n	8004b92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b72:	f7ff fef1 	bl	8004958 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b05      	cmp	r3, #5
 8004b7e:	d908      	bls.n	8004b92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e078      	b.n	8004c84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e8      	bne.n	8004b72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4b38      	ldr	r3, [pc, #224]	; (8004c8c <HAL_DMA_Init+0x158>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d107      	bne.n	8004bfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0307 	bic.w	r3, r3, #7
 8004c12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d117      	bne.n	8004c56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00e      	beq.n	8004c56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa91 	bl	8005160 <DMA_CheckFifoParam>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2240      	movs	r2, #64	; 0x40
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c52:	2301      	movs	r3, #1
 8004c54:	e016      	b.n	8004c84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa48 	bl	80050f4 <DMA_CalcBaseAndBitshift>
 8004c64:	4603      	mov	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	223f      	movs	r2, #63	; 0x3f
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	f010803f 	.word	0xf010803f

08004c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_DMA_Start_IT+0x26>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e040      	b.n	8004d38 <HAL_DMA_Start_IT+0xa8>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12f      	bne.n	8004d2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f9da 	bl	8005098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	223f      	movs	r2, #63	; 0x3f
 8004cea:	409a      	lsls	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0216 	orr.w	r2, r2, #22
 8004cfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e005      	b.n	8004d36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
 8004d34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e00c      	b.n	8004d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2205      	movs	r2, #5
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d90:	4b8e      	ldr	r3, [pc, #568]	; (8004fcc <HAL_DMA_IRQHandler+0x248>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a8e      	ldr	r2, [pc, #568]	; (8004fd0 <HAL_DMA_IRQHandler+0x24c>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0a9b      	lsrs	r3, r3, #10
 8004d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	2208      	movs	r2, #8
 8004db0:	409a      	lsls	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01a      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0204 	bic.w	r2, r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	2208      	movs	r2, #8
 8004dde:	409a      	lsls	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	2201      	movs	r2, #1
 8004df6:	409a      	lsls	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e12:	2201      	movs	r2, #1
 8004e14:	409a      	lsls	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0202 	orr.w	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	2204      	movs	r2, #4
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f043 0204 	orr.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	2210      	movs	r2, #16
 8004e62:	409a      	lsls	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d043      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d03c      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	2210      	movs	r2, #16
 8004e80:	409a      	lsls	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d018      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d024      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
 8004eb2:	e01f      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
 8004ec4:	e016      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0208 	bic.w	r2, r2, #8
 8004ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef8:	2220      	movs	r2, #32
 8004efa:	409a      	lsls	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 808f 	beq.w	8005024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8087 	beq.w	8005024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d136      	bne.n	8004f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0216 	bic.w	r2, r2, #22
 8004f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x1da>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0208 	bic.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	223f      	movs	r2, #63	; 0x3f
 8004f74:	409a      	lsls	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d07e      	beq.n	8005090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
        }
        return;
 8004f9a:	e079      	b.n	8005090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d031      	beq.n	8005024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
 8004fc8:	e02c      	b.n	8005024 <HAL_DMA_IRQHandler+0x2a0>
 8004fca:	bf00      	nop
 8004fcc:	20000004 	.word	0x20000004
 8004fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d023      	beq.n	8005024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
 8004fe4:	e01e      	b.n	8005024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10f      	bne.n	8005014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
 8005002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d032      	beq.n	8005092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2205      	movs	r2, #5
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3301      	adds	r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	429a      	cmp	r2, r3
 800505a:	d307      	bcc.n	800506c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f2      	bne.n	8005050 <HAL_DMA_IRQHandler+0x2cc>
 800506a:	e000      	b.n	800506e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800506c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e000      	b.n	8005092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005090:	bf00      	nop
    }
  }
}
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d108      	bne.n	80050d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050d6:	e007      	b.n	80050e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	3b10      	subs	r3, #16
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <DMA_CalcBaseAndBitshift+0x64>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800510e:	4a13      	ldr	r2, [pc, #76]	; (800515c <DMA_CalcBaseAndBitshift+0x68>)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d909      	bls.n	8005136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	659a      	str	r2, [r3, #88]	; 0x58
 8005134:	e007      	b.n	8005146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	aaaaaaab 	.word	0xaaaaaaab
 800515c:	0800a3d4 	.word	0x0800a3d4

08005160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11f      	bne.n	80051ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d856      	bhi.n	800522e <DMA_CheckFifoParam+0xce>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <DMA_CheckFifoParam+0x28>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	08005199 	.word	0x08005199
 800518c:	080051ab 	.word	0x080051ab
 8005190:	08005199 	.word	0x08005199
 8005194:	0800522f 	.word	0x0800522f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d046      	beq.n	8005232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a8:	e043      	b.n	8005232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051b2:	d140      	bne.n	8005236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b8:	e03d      	b.n	8005236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c2:	d121      	bne.n	8005208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d837      	bhi.n	800523a <DMA_CheckFifoParam+0xda>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <DMA_CheckFifoParam+0x70>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051e7 	.word	0x080051e7
 80051d8:	080051e1 	.word	0x080051e1
 80051dc:	080051f9 	.word	0x080051f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      break;
 80051e4:	e030      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d025      	beq.n	800523e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f6:	e022      	b.n	800523e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005200:	d11f      	bne.n	8005242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005206:	e01c      	b.n	8005242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d903      	bls.n	8005216 <DMA_CheckFifoParam+0xb6>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d003      	beq.n	800521c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005214:	e018      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      break;
 800521a:	e015      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e00b      	b.n	8005246 <DMA_CheckFifoParam+0xe6>
      break;
 800522e:	bf00      	nop
 8005230:	e00a      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;
 8005232:	bf00      	nop
 8005234:	e008      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;
 8005236:	bf00      	nop
 8005238:	e006      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;
 800523a:	bf00      	nop
 800523c:	e004      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;
 800523e:	bf00      	nop
 8005240:	e002      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;   
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
      break;
 8005246:	bf00      	nop
    }
  } 
  
  return status; 
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop

08005258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	; 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e159      	b.n	8005528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005274:	2201      	movs	r2, #1
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	429a      	cmp	r2, r3
 800528e:	f040 8148 	bne.w	8005522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d005      	beq.n	80052aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d130      	bne.n	800530c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	2203      	movs	r2, #3
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052e0:	2201      	movs	r2, #1
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 0201 	and.w	r2, r3, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b03      	cmp	r3, #3
 8005316:	d017      	beq.n	8005348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d123      	bne.n	800539c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	08da      	lsrs	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3208      	adds	r2, #8
 800535c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	220f      	movs	r2, #15
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	08da      	lsrs	r2, r3, #3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3208      	adds	r2, #8
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0203 	and.w	r2, r3, #3
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80a2 	beq.w	8005522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4b57      	ldr	r3, [pc, #348]	; (8005540 <HAL_GPIO_Init+0x2e8>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	4a56      	ldr	r2, [pc, #344]	; (8005540 <HAL_GPIO_Init+0x2e8>)
 80053e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ec:	6453      	str	r3, [r2, #68]	; 0x44
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <HAL_GPIO_Init+0x2e8>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053fa:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_GPIO_Init+0x2ec>)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	3302      	adds	r3, #2
 8005402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	220f      	movs	r2, #15
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a49      	ldr	r2, [pc, #292]	; (8005548 <HAL_GPIO_Init+0x2f0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d019      	beq.n	800545a <HAL_GPIO_Init+0x202>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a48      	ldr	r2, [pc, #288]	; (800554c <HAL_GPIO_Init+0x2f4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_GPIO_Init+0x1fe>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a47      	ldr	r2, [pc, #284]	; (8005550 <HAL_GPIO_Init+0x2f8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00d      	beq.n	8005452 <HAL_GPIO_Init+0x1fa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a46      	ldr	r2, [pc, #280]	; (8005554 <HAL_GPIO_Init+0x2fc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <HAL_GPIO_Init+0x1f6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a45      	ldr	r2, [pc, #276]	; (8005558 <HAL_GPIO_Init+0x300>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_GPIO_Init+0x1f2>
 8005446:	2304      	movs	r3, #4
 8005448:	e008      	b.n	800545c <HAL_GPIO_Init+0x204>
 800544a:	2307      	movs	r3, #7
 800544c:	e006      	b.n	800545c <HAL_GPIO_Init+0x204>
 800544e:	2303      	movs	r3, #3
 8005450:	e004      	b.n	800545c <HAL_GPIO_Init+0x204>
 8005452:	2302      	movs	r3, #2
 8005454:	e002      	b.n	800545c <HAL_GPIO_Init+0x204>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_GPIO_Init+0x204>
 800545a:	2300      	movs	r3, #0
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	f002 0203 	and.w	r2, r2, #3
 8005462:	0092      	lsls	r2, r2, #2
 8005464:	4093      	lsls	r3, r2
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4313      	orrs	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800546c:	4935      	ldr	r1, [pc, #212]	; (8005544 <HAL_GPIO_Init+0x2ec>)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800547a:	4b38      	ldr	r3, [pc, #224]	; (800555c <HAL_GPIO_Init+0x304>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	43db      	mvns	r3, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800549e:	4a2f      	ldr	r2, [pc, #188]	; (800555c <HAL_GPIO_Init+0x304>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054a4:	4b2d      	ldr	r3, [pc, #180]	; (800555c <HAL_GPIO_Init+0x304>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054c8:	4a24      	ldr	r2, [pc, #144]	; (800555c <HAL_GPIO_Init+0x304>)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054ce:	4b23      	ldr	r3, [pc, #140]	; (800555c <HAL_GPIO_Init+0x304>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054f2:	4a1a      	ldr	r2, [pc, #104]	; (800555c <HAL_GPIO_Init+0x304>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <HAL_GPIO_Init+0x304>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800551c:	4a0f      	ldr	r2, [pc, #60]	; (800555c <HAL_GPIO_Init+0x304>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	f67f aea2 	bls.w	8005274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800
 8005544:	40013800 	.word	0x40013800
 8005548:	40020000 	.word	0x40020000
 800554c:	40020400 	.word	0x40020400
 8005550:	40020800 	.word	0x40020800
 8005554:	40020c00 	.word	0x40020c00
 8005558:	40021000 	.word	0x40021000
 800555c:	40013c00 	.word	0x40013c00

08005560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	e001      	b.n	8005582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
 800559c:	4613      	mov	r3, r2
 800559e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055a0:	787b      	ldrb	r3, [r7, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055ac:	e003      	b.n	80055b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055ae:	887b      	ldrh	r3, [r7, #2]
 80055b0:	041a      	lsls	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	619a      	str	r2, [r3, #24]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e12b      	b.n	800582e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb ff5e 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005628:	f001 f888 	bl	800673c <HAL_RCC_GetPCLK1Freq>
 800562c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	4a81      	ldr	r2, [pc, #516]	; (8005838 <HAL_I2C_Init+0x274>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d807      	bhi.n	8005648 <HAL_I2C_Init+0x84>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a80      	ldr	r2, [pc, #512]	; (800583c <HAL_I2C_Init+0x278>)
 800563c:	4293      	cmp	r3, r2
 800563e:	bf94      	ite	ls
 8005640:	2301      	movls	r3, #1
 8005642:	2300      	movhi	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e006      	b.n	8005656 <HAL_I2C_Init+0x92>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a7d      	ldr	r2, [pc, #500]	; (8005840 <HAL_I2C_Init+0x27c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	bf94      	ite	ls
 8005650:	2301      	movls	r3, #1
 8005652:	2300      	movhi	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e0e7      	b.n	800582e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a78      	ldr	r2, [pc, #480]	; (8005844 <HAL_I2C_Init+0x280>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	0c9b      	lsrs	r3, r3, #18
 8005668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4a6a      	ldr	r2, [pc, #424]	; (8005838 <HAL_I2C_Init+0x274>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d802      	bhi.n	8005698 <HAL_I2C_Init+0xd4>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	3301      	adds	r3, #1
 8005696:	e009      	b.n	80056ac <HAL_I2C_Init+0xe8>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	4a69      	ldr	r2, [pc, #420]	; (8005848 <HAL_I2C_Init+0x284>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	3301      	adds	r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	430b      	orrs	r3, r1
 80056b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	495c      	ldr	r1, [pc, #368]	; (8005838 <HAL_I2C_Init+0x274>)
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d819      	bhi.n	8005700 <HAL_I2C_Init+0x13c>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1e59      	subs	r1, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056da:	1c59      	adds	r1, r3, #1
 80056dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056e0:	400b      	ands	r3, r1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_I2C_Init+0x138>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1e59      	subs	r1, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056fa:	e051      	b.n	80057a0 <HAL_I2C_Init+0x1dc>
 80056fc:	2304      	movs	r3, #4
 80056fe:	e04f      	b.n	80057a0 <HAL_I2C_Init+0x1dc>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_I2C_Init+0x168>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e58      	subs	r0, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	440b      	add	r3, r1
 8005716:	fbb0 f3f3 	udiv	r3, r0, r3
 800571a:	3301      	adds	r3, #1
 800571c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e012      	b.n	8005752 <HAL_I2C_Init+0x18e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1e58      	subs	r0, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	0099      	lsls	r1, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005742:	3301      	adds	r3, #1
 8005744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Init+0x196>
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_I2C_Init+0x1dc>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10e      	bne.n	8005780 <HAL_I2C_Init+0x1bc>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1e58      	subs	r0, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	fbb0 f3f3 	udiv	r3, r0, r3
 8005774:	3301      	adds	r3, #1
 8005776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577e:	e00f      	b.n	80057a0 <HAL_I2C_Init+0x1dc>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1e58      	subs	r0, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	0099      	lsls	r1, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	fbb0 f3f3 	udiv	r3, r0, r3
 8005796:	3301      	adds	r3, #1
 8005798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6809      	ldr	r1, [r1, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6911      	ldr	r1, [r2, #16]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	000186a0 	.word	0x000186a0
 800583c:	001e847f 	.word	0x001e847f
 8005840:	003d08ff 	.word	0x003d08ff
 8005844:	431bde83 	.word	0x431bde83
 8005848:	10624dd3 	.word	0x10624dd3

0800584c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	461a      	mov	r2, r3
 8005858:	460b      	mov	r3, r1
 800585a:	817b      	strh	r3, [r7, #10]
 800585c:	4613      	mov	r3, r2
 800585e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005860:	f7ff f87a 	bl	8004958 <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	f040 80e0 	bne.w	8005a34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2319      	movs	r3, #25
 800587a:	2201      	movs	r2, #1
 800587c:	4970      	ldr	r1, [pc, #448]	; (8005a40 <HAL_I2C_Master_Transmit+0x1f4>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f964 	bl	8005b4c <I2C_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	e0d3      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_I2C_Master_Transmit+0x50>
 8005898:	2302      	movs	r3, #2
 800589a:	e0cc      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d007      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2221      	movs	r2, #33	; 0x21
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2210      	movs	r2, #16
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	893a      	ldrh	r2, [r7, #8]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a50      	ldr	r2, [pc, #320]	; (8005a44 <HAL_I2C_Master_Transmit+0x1f8>)
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f89c 	bl	8005a48 <I2C_MasterRequestWrite>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e08d      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005930:	e066      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f9de 	bl	8005cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e06b      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11b      	bne.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6a39      	ldr	r1, [r7, #32]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f9ce 	bl	8005d7a <I2C_WaitOnBTFFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e01a      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d194      	bne.n	8005932 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	00100002 	.word	0x00100002
 8005a44:	ffff0000 	.word	0xffff0000

08005a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	460b      	mov	r3, r1
 8005a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d006      	beq.n	8005a72 <I2C_MasterRequestWrite+0x2a>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d003      	beq.n	8005a72 <I2C_MasterRequestWrite+0x2a>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a70:	d108      	bne.n	8005a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e00b      	b.n	8005a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	2b12      	cmp	r3, #18
 8005a8a:	d107      	bne.n	8005a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f84f 	bl	8005b4c <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac2:	d103      	bne.n	8005acc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e035      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad8:	d108      	bne.n	8005aec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	e01b      	b.n	8005b24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	11db      	asrs	r3, r3, #7
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f003 0306 	and.w	r3, r3, #6
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f063 030f 	orn	r3, r3, #15
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	490e      	ldr	r1, [pc, #56]	; (8005b44 <I2C_MasterRequestWrite+0xfc>)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f875 	bl	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e010      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b1a:	897b      	ldrh	r3, [r7, #10]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <I2C_MasterRequestWrite+0x100>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f865 	bl	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	00010008 	.word	0x00010008
 8005b48:	00010002 	.word	0x00010002

08005b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5c:	e025      	b.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d021      	beq.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fe fef7 	bl	8004958 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d116      	bne.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e023      	b.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10d      	bne.n	8005bd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf0c      	ite	eq
 8005bc6:	2301      	moveq	r3, #1
 8005bc8:	2300      	movne	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	e00c      	b.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d0b6      	beq.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c08:	e051      	b.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c18:	d123      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e046      	b.n	8005cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d021      	beq.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fe fe75 	bl	8004958 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e020      	b.n	8005cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10c      	bne.n	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	43da      	mvns	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e00b      	b.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	43da      	mvns	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d18d      	bne.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d04:	e02d      	b.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f878 	bl	8005dfc <I2C_IsAcknowledgeFailed>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02d      	b.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d021      	beq.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fe fe1b 	bl	8004958 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d116      	bne.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e007      	b.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d1ca      	bne.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d86:	e02d      	b.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f837 	bl	8005dfc <I2C_IsAcknowledgeFailed>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e02d      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d021      	beq.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da0:	f7fe fdda 	bl	8004958 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d302      	bcc.n	8005db6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d116      	bne.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e007      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d1ca      	bne.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d11b      	bne.n	8005e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e267      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d075      	beq.n	8005f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e7a:	4b88      	ldr	r3, [pc, #544]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e86:	4b85      	ldr	r3, [pc, #532]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d112      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e92:	4b82      	ldr	r3, [pc, #520]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d05b      	beq.n	8005f64 <HAL_RCC_OscConfig+0x108>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d157      	bne.n	8005f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e242      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x74>
 8005ec2:	4b76      	ldr	r3, [pc, #472]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a75      	ldr	r2, [pc, #468]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e01d      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x98>
 8005eda:	4b70      	ldr	r3, [pc, #448]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6f      	ldr	r2, [pc, #444]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b6d      	ldr	r3, [pc, #436]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a6c      	ldr	r2, [pc, #432]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e00b      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ef4:	4b69      	ldr	r3, [pc, #420]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a68      	ldr	r2, [pc, #416]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b66      	ldr	r3, [pc, #408]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fe fd20 	bl	8004958 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fe fd1c 	bl	8004958 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e207      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b5b      	ldr	r3, [pc, #364]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0xc0>
 8005f3a:	e014      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fe fd0c 	bl	8004958 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fe fd08 	bl	8004958 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1f3      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0xe8>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d063      	beq.n	800603a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f72:	4b4a      	ldr	r3, [pc, #296]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f7e:	4b47      	ldr	r3, [pc, #284]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d11c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8a:	4b44      	ldr	r3, [pc, #272]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d116      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	4b41      	ldr	r3, [pc, #260]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e1c7      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	4b3b      	ldr	r3, [pc, #236]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4937      	ldr	r1, [pc, #220]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc2:	e03a      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fcc:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <HAL_RCC_OscConfig+0x244>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fe fcc1 	bl	8004958 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fe fcbd 	bl	8004958 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e1a8      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff8:	4b28      	ldr	r3, [pc, #160]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4925      	ldr	r1, [pc, #148]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]
 800600c:	e015      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600e:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <HAL_RCC_OscConfig+0x244>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fe fca0 	bl	8004958 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601c:	f7fe fc9c 	bl	8004958 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e187      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602e:	4b1b      	ldr	r3, [pc, #108]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d036      	beq.n	80060b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <HAL_RCC_OscConfig+0x248>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fe fc80 	bl	8004958 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605c:	f7fe fc7c 	bl	8004958 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e167      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_OscConfig+0x240>)
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x200>
 800607a:	e01b      	b.n	80060b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_RCC_OscConfig+0x248>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006082:	f7fe fc69 	bl	8004958 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006088:	e00e      	b.n	80060a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608a:	f7fe fc65 	bl	8004958 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d907      	bls.n	80060a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e150      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
 800609c:	40023800 	.word	0x40023800
 80060a0:	42470000 	.word	0x42470000
 80060a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a8:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ea      	bne.n	800608a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8097 	beq.w	80061f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c6:	4b81      	ldr	r3, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	4b7d      	ldr	r3, [pc, #500]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	4a7c      	ldr	r2, [pc, #496]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6413      	str	r3, [r2, #64]	; 0x40
 80060e2:	4b7a      	ldr	r3, [pc, #488]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f2:	4b77      	ldr	r3, [pc, #476]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d118      	bne.n	8006130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060fe:	4b74      	ldr	r3, [pc, #464]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a73      	ldr	r2, [pc, #460]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800610a:	f7fe fc25 	bl	8004958 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006112:	f7fe fc21 	bl	8004958 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e10c      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006124:	4b6a      	ldr	r3, [pc, #424]	; (80062d0 <HAL_RCC_OscConfig+0x474>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d106      	bne.n	8006146 <HAL_RCC_OscConfig+0x2ea>
 8006138:	4b64      	ldr	r3, [pc, #400]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4a63      	ldr	r2, [pc, #396]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	; 0x70
 8006144:	e01c      	b.n	8006180 <HAL_RCC_OscConfig+0x324>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b05      	cmp	r3, #5
 800614c:	d10c      	bne.n	8006168 <HAL_RCC_OscConfig+0x30c>
 800614e:	4b5f      	ldr	r3, [pc, #380]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a5e      	ldr	r2, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006154:	f043 0304 	orr.w	r3, r3, #4
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a5b      	ldr	r2, [pc, #364]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	e00b      	b.n	8006180 <HAL_RCC_OscConfig+0x324>
 8006168:	4b58      	ldr	r3, [pc, #352]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	4a57      	ldr	r2, [pc, #348]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	6713      	str	r3, [r2, #112]	; 0x70
 8006174:	4b55      	ldr	r3, [pc, #340]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	4a54      	ldr	r2, [pc, #336]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 800617a:	f023 0304 	bic.w	r3, r3, #4
 800617e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fe fbe6 	bl	8004958 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fe fbe2 	bl	8004958 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0cb      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a6:	4b49      	ldr	r3, [pc, #292]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ee      	beq.n	8006190 <HAL_RCC_OscConfig+0x334>
 80061b2:	e014      	b.n	80061de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b4:	f7fe fbd0 	bl	8004958 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ba:	e00a      	b.n	80061d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061bc:	f7fe fbcc 	bl	8004958 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0b5      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d2:	4b3e      	ldr	r3, [pc, #248]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ee      	bne.n	80061bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e4:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	4a38      	ldr	r2, [pc, #224]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80a1 	beq.w	800633c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061fa:	4b34      	ldr	r3, [pc, #208]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b08      	cmp	r3, #8
 8006204:	d05c      	beq.n	80062c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d141      	bne.n	8006292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fe fba0 	bl	8004958 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621c:	f7fe fb9c 	bl	8004958 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e087      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	019b      	lsls	r3, r3, #6
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	3b01      	subs	r3, #1
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	491b      	ldr	r1, [pc, #108]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006260:	4313      	orrs	r3, r2
 8006262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626a:	f7fe fb75 	bl	8004958 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006272:	f7fe fb71 	bl	8004958 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e05c      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006284:	4b11      	ldr	r3, [pc, #68]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x416>
 8006290:	e054      	b.n	800633c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_RCC_OscConfig+0x478>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fe fb5e 	bl	8004958 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fe fb5a 	bl	8004958 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e045      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_RCC_OscConfig+0x470>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x444>
 80062be:	e03d      	b.n	800633c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e038      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40007000 	.word	0x40007000
 80062d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <HAL_RCC_OscConfig+0x4ec>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d028      	beq.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d121      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d11a      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800630e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006310:	4293      	cmp	r3, r2
 8006312:	d111      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	3b01      	subs	r3, #1
 8006322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d107      	bne.n	8006338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800

0800634c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0cc      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006360:	4b68      	ldr	r3, [pc, #416]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d90c      	bls.n	8006388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b65      	ldr	r3, [pc, #404]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	4b63      	ldr	r3, [pc, #396]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d001      	beq.n	8006388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0b8      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d020      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a0:	4b59      	ldr	r3, [pc, #356]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a52      	ldr	r2, [pc, #328]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c4:	4b50      	ldr	r3, [pc, #320]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	494d      	ldr	r1, [pc, #308]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d044      	beq.n	800646c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d107      	bne.n	80063fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ea:	4b47      	ldr	r3, [pc, #284]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d119      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e07f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d003      	beq.n	800640a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006406:	2b03      	cmp	r3, #3
 8006408:	d107      	bne.n	800641a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640a:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e06f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641a:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e067      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800642a:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 0203 	bic.w	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4934      	ldr	r1, [pc, #208]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800643c:	f7fe fa8c 	bl	8004958 <HAL_GetTick>
 8006440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	e00a      	b.n	800645a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006444:	f7fe fa88 	bl	8004958 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e04f      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 020c 	and.w	r2, r3, #12
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	429a      	cmp	r2, r3
 800646a:	d1eb      	bne.n	8006444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d20c      	bcs.n	8006494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e032      	b.n	80064fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4916      	ldr	r1, [pc, #88]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	490e      	ldr	r1, [pc, #56]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064d2:	f000 f821 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	490a      	ldr	r1, [pc, #40]	; (800650c <HAL_RCC_ClockConfig+0x1c0>)
 80064e4:	5ccb      	ldrb	r3, [r1, r3]
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	4a09      	ldr	r2, [pc, #36]	; (8006510 <HAL_RCC_ClockConfig+0x1c4>)
 80064ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_ClockConfig+0x1c8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fb f8c4 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40023c00 	.word	0x40023c00
 8006508:	40023800 	.word	0x40023800
 800650c:	0800a3b4 	.word	0x0800a3b4
 8006510:	20000004 	.word	0x20000004
 8006514:	2000009c 	.word	0x2000009c

08006518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b094      	sub	sp, #80	; 0x50
 800651e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	647b      	str	r3, [r7, #68]	; 0x44
 8006524:	2300      	movs	r3, #0
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006528:	2300      	movs	r3, #0
 800652a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006530:	4b79      	ldr	r3, [pc, #484]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b08      	cmp	r3, #8
 800653a:	d00d      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x40>
 800653c:	2b08      	cmp	r3, #8
 800653e:	f200 80e1 	bhi.w	8006704 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x34>
 8006546:	2b04      	cmp	r3, #4
 8006548:	d003      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0x3a>
 800654a:	e0db      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800654c:	4b73      	ldr	r3, [pc, #460]	; (800671c <HAL_RCC_GetSysClockFreq+0x204>)
 800654e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006550:	e0db      	b.n	800670a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006552:	4b73      	ldr	r3, [pc, #460]	; (8006720 <HAL_RCC_GetSysClockFreq+0x208>)
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006556:	e0d8      	b.n	800670a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006558:	4b6f      	ldr	r3, [pc, #444]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006560:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006562:	4b6d      	ldr	r3, [pc, #436]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d063      	beq.n	8006636 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656e:	4b6a      	ldr	r3, [pc, #424]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	099b      	lsrs	r3, r3, #6
 8006574:	2200      	movs	r2, #0
 8006576:	63bb      	str	r3, [r7, #56]	; 0x38
 8006578:	63fa      	str	r2, [r7, #60]	; 0x3c
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
 8006586:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800658a:	4622      	mov	r2, r4
 800658c:	462b      	mov	r3, r5
 800658e:	f04f 0000 	mov.w	r0, #0
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	0159      	lsls	r1, r3, #5
 8006598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800659c:	0150      	lsls	r0, r2, #5
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4621      	mov	r1, r4
 80065a4:	1a51      	subs	r1, r2, r1
 80065a6:	6139      	str	r1, [r7, #16]
 80065a8:	4629      	mov	r1, r5
 80065aa:	eb63 0301 	sbc.w	r3, r3, r1
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065bc:	4659      	mov	r1, fp
 80065be:	018b      	lsls	r3, r1, #6
 80065c0:	4651      	mov	r1, sl
 80065c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065c6:	4651      	mov	r1, sl
 80065c8:	018a      	lsls	r2, r1, #6
 80065ca:	4651      	mov	r1, sl
 80065cc:	ebb2 0801 	subs.w	r8, r2, r1
 80065d0:	4659      	mov	r1, fp
 80065d2:	eb63 0901 	sbc.w	r9, r3, r1
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ea:	4690      	mov	r8, r2
 80065ec:	4699      	mov	r9, r3
 80065ee:	4623      	mov	r3, r4
 80065f0:	eb18 0303 	adds.w	r3, r8, r3
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	462b      	mov	r3, r5
 80065f8:	eb49 0303 	adc.w	r3, r9, r3
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800660a:	4629      	mov	r1, r5
 800660c:	024b      	lsls	r3, r1, #9
 800660e:	4621      	mov	r1, r4
 8006610:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006614:	4621      	mov	r1, r4
 8006616:	024a      	lsls	r2, r1, #9
 8006618:	4610      	mov	r0, r2
 800661a:	4619      	mov	r1, r3
 800661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661e:	2200      	movs	r2, #0
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
 8006622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006624:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006628:	f7f9 fdda 	bl	80001e0 <__aeabi_uldivmod>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4613      	mov	r3, r2
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	e058      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006636:	4b38      	ldr	r3, [pc, #224]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	2200      	movs	r2, #0
 800663e:	4618      	mov	r0, r3
 8006640:	4611      	mov	r1, r2
 8006642:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006646:	623b      	str	r3, [r7, #32]
 8006648:	2300      	movs	r3, #0
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	f04f 0000 	mov.w	r0, #0
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	0159      	lsls	r1, r3, #5
 800665e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006662:	0150      	lsls	r0, r2, #5
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4641      	mov	r1, r8
 800666a:	ebb2 0a01 	subs.w	sl, r2, r1
 800666e:	4649      	mov	r1, r9
 8006670:	eb63 0b01 	sbc.w	fp, r3, r1
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006680:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006684:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006688:	ebb2 040a 	subs.w	r4, r2, sl
 800668c:	eb63 050b 	sbc.w	r5, r3, fp
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	00eb      	lsls	r3, r5, #3
 800669a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800669e:	00e2      	lsls	r2, r4, #3
 80066a0:	4614      	mov	r4, r2
 80066a2:	461d      	mov	r5, r3
 80066a4:	4643      	mov	r3, r8
 80066a6:	18e3      	adds	r3, r4, r3
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	464b      	mov	r3, r9
 80066ac:	eb45 0303 	adc.w	r3, r5, r3
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066be:	4629      	mov	r1, r5
 80066c0:	028b      	lsls	r3, r1, #10
 80066c2:	4621      	mov	r1, r4
 80066c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066c8:	4621      	mov	r1, r4
 80066ca:	028a      	lsls	r2, r1, #10
 80066cc:	4610      	mov	r0, r2
 80066ce:	4619      	mov	r1, r3
 80066d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d2:	2200      	movs	r2, #0
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	61fa      	str	r2, [r7, #28]
 80066d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066dc:	f7f9 fd80 	bl	80001e0 <__aeabi_uldivmod>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4613      	mov	r3, r2
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	3301      	adds	r3, #1
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006702:	e002      	b.n	800670a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_RCC_GetSysClockFreq+0x204>)
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800670a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800670c:	4618      	mov	r0, r3
 800670e:	3750      	adds	r7, #80	; 0x50
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006716:	bf00      	nop
 8006718:	40023800 	.word	0x40023800
 800671c:	00f42400 	.word	0x00f42400
 8006720:	007a1200 	.word	0x007a1200

08006724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <HAL_RCC_GetHCLKFreq+0x14>)
 800672a:	681b      	ldr	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000004 	.word	0x20000004

0800673c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006740:	f7ff fff0 	bl	8006724 <HAL_RCC_GetHCLKFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	0a9b      	lsrs	r3, r3, #10
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	4903      	ldr	r1, [pc, #12]	; (8006760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006758:	4618      	mov	r0, r3
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40023800 	.word	0x40023800
 8006760:	0800a3c4 	.word	0x0800a3c4

08006764 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	220f      	movs	r2, #15
 8006772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006774:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0203 	and.w	r2, r3, #3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <HAL_RCC_GetClockConfig+0x5c>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <HAL_RCC_GetClockConfig+0x5c>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	08db      	lsrs	r3, r3, #3
 800679e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067a6:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <HAL_RCC_GetClockConfig+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0207 	and.w	r2, r3, #7
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40023c00 	.word	0x40023c00

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e041      	b.n	800685e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f839 	bl	8006866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fe2e 	bl	8007468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e044      	b.n	800691e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1e      	ldr	r2, [pc, #120]	; (800692c <HAL_TIM_Base_Start_IT+0xb0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d018      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x6c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	d013      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x6c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <HAL_TIM_Base_Start_IT+0xb4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00e      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x6c>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_TIM_Base_Start_IT+0xb8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x6c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a17      	ldr	r2, [pc, #92]	; (8006938 <HAL_TIM_Base_Start_IT+0xbc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x6c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a16      	ldr	r2, [pc, #88]	; (800693c <HAL_TIM_Base_Start_IT+0xc0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d111      	bne.n	800690c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d010      	beq.n	800691c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690a:	e007      	b.n	800691c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40014000 	.word	0x40014000

08006940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fa fde8 	bl	800153c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 fd72 	bl	8007468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_TIM_PWM_Start_DMA+0x2c>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e022      	b.n	8006a52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d109      	bne.n	8006a26 <HAL_TIM_PWM_Start_DMA+0x46>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	e015      	b.n	8006a52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d109      	bne.n	8006a40 <HAL_TIM_PWM_Start_DMA+0x60>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	e008      	b.n	8006a52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2301      	moveq	r3, #1
 8006a4e:	2300      	movne	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
 8006a58:	e15d      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_TIM_PWM_Start_DMA+0x94>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	e022      	b.n	8006aba <HAL_TIM_PWM_Start_DMA+0xda>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d109      	bne.n	8006a8e <HAL_TIM_PWM_Start_DMA+0xae>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	e015      	b.n	8006aba <HAL_TIM_PWM_Start_DMA+0xda>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d109      	bne.n	8006aa8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2301      	moveq	r3, #1
 8006aa2:	2300      	movne	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	e008      	b.n	8006aba <HAL_TIM_PWM_Start_DMA+0xda>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d024      	beq.n	8006b08 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <HAL_TIM_PWM_Start_DMA+0xee>
 8006ac4:	887b      	ldrh	r3, [r7, #2]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e123      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start_DMA+0xfe>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006adc:	e016      	b.n	8006b0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Start_DMA+0x10e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aec:	e00e      	b.n	8006b0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_PWM_Start_DMA+0x11e>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	e006      	b.n	8006b0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b06:	e001      	b.n	8006b0c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e104      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	f200 80ae 	bhi.w	8006c70 <HAL_TIM_PWM_Start_DMA+0x290>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006c71 	.word	0x08006c71
 8006b24:	08006c71 	.word	0x08006c71
 8006b28:	08006c71 	.word	0x08006c71
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006c71 	.word	0x08006c71
 8006b34:	08006c71 	.word	0x08006c71
 8006b38:	08006c71 	.word	0x08006c71
 8006b3c:	08006be1 	.word	0x08006be1
 8006b40:	08006c71 	.word	0x08006c71
 8006b44:	08006c71 	.word	0x08006c71
 8006b48:	08006c71 	.word	0x08006c71
 8006b4c:	08006c29 	.word	0x08006c29
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	4a72      	ldr	r2, [pc, #456]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006b56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	4a71      	ldr	r2, [pc, #452]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	4a70      	ldr	r2, [pc, #448]	; (8006d28 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3334      	adds	r3, #52	; 0x34
 8006b74:	461a      	mov	r2, r3
 8006b76:	887b      	ldrh	r3, [r7, #2]
 8006b78:	f7fe f88a 	bl	8004c90 <HAL_DMA_Start_IT>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0c7      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b94:	60da      	str	r2, [r3, #12]
      break;
 8006b96:	e06e      	b.n	8006c76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	4a60      	ldr	r2, [pc, #384]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006b9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	4a5f      	ldr	r2, [pc, #380]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	4a5e      	ldr	r2, [pc, #376]	; (8006d28 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006bae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3338      	adds	r3, #56	; 0x38
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	887b      	ldrh	r3, [r7, #2]
 8006bc0:	f7fe f866 	bl	8004c90 <HAL_DMA_Start_IT>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e0a3      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bdc:	60da      	str	r2, [r3, #12]
      break;
 8006bde:	e04a      	b.n	8006c76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a4e      	ldr	r2, [pc, #312]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a4d      	ldr	r2, [pc, #308]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a4c      	ldr	r2, [pc, #304]	; (8006d28 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006bf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	333c      	adds	r3, #60	; 0x3c
 8006c04:	461a      	mov	r2, r3
 8006c06:	887b      	ldrh	r3, [r7, #2]
 8006c08:	f7fe f842 	bl	8004c90 <HAL_DMA_Start_IT>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e07f      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c24:	60da      	str	r2, [r3, #12]
      break;
 8006c26:	e026      	b.n	8006c76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	4a3c      	ldr	r2, [pc, #240]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006c2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	4a3b      	ldr	r2, [pc, #236]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	4a3a      	ldr	r2, [pc, #232]	; (8006d28 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006c3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3340      	adds	r3, #64	; 0x40
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	f7fe f81e 	bl	8004c90 <HAL_DMA_Start_IT>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e05b      	b.n	8006d16 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c6c:	60da      	str	r2, [r3, #12]
      break;
 8006c6e:	e002      	b.n	8006c76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d14b      	bne.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fdfb 	bl	8007880 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a27      	ldr	r2, [pc, #156]	; (8006d2c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d013      	beq.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d111      	bne.n	8006d04 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b06      	cmp	r3, #6
 8006cf0:	d010      	beq.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0201 	orr.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d02:	e007      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007357 	.word	0x08007357
 8006d24:	080073ff 	.word	0x080073ff
 8006d28:	080072c5 	.word	0x080072c5
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40014000 	.word	0x40014000

08006d40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d855      	bhi.n	8006e00 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006e01 	.word	0x08006e01
 8006d64:	08006e01 	.word	0x08006e01
 8006d68:	08006e01 	.word	0x08006e01
 8006d6c:	08006dad 	.word	0x08006dad
 8006d70:	08006e01 	.word	0x08006e01
 8006d74:	08006e01 	.word	0x08006e01
 8006d78:	08006e01 	.word	0x08006e01
 8006d7c:	08006dc9 	.word	0x08006dc9
 8006d80:	08006e01 	.word	0x08006e01
 8006d84:	08006e01 	.word	0x08006e01
 8006d88:	08006e01 	.word	0x08006e01
 8006d8c:	08006de5 	.word	0x08006de5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fd ffcb 	bl	8004d40 <HAL_DMA_Abort_IT>
      break;
 8006daa:	e02c      	b.n	8006e06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fd ffbd 	bl	8004d40 <HAL_DMA_Abort_IT>
      break;
 8006dc6:	e01e      	b.n	8006e06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fd ffaf 	bl	8004d40 <HAL_DMA_Abort_IT>
      break;
 8006de2:	e010      	b.n	8006e06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006df2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fd ffa1 	bl	8004d40 <HAL_DMA_Abort_IT>
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      break;
 8006e04:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d157      	bne.n	8006ebc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fd33 	bl	8007880 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d117      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10f      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10f      	bne.n	8006e84 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e92:	e013      	b.n	8006ebc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d104      	bne.n	8006ea4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea2:	e00b      	b.n	8006ebc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d104      	bne.n	8006eb4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb2:	e003      	b.n	8006ebc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000

08006ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d122      	bne.n	8006f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d11b      	bne.n	8006f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0202 	mvn.w	r2, #2
 8006ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9b0 	bl	8007274 <HAL_TIM_IC_CaptureCallback>
 8006f14:	e005      	b.n	8006f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9a2 	bl	8007260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fd f87b 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d122      	bne.n	8006f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d11b      	bne.n	8006f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0204 	mvn.w	r2, #4
 8006f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f986 	bl	8007274 <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f978 	bl	8007260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fd f851 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d122      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d11b      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0208 	mvn.w	r2, #8
 8006fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f95c 	bl	8007274 <HAL_TIM_IC_CaptureCallback>
 8006fbc:	e005      	b.n	8006fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f94e 	bl	8007260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fd f827 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d122      	bne.n	8007024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d11b      	bne.n	8007024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0210 	mvn.w	r2, #16
 8006ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f932 	bl	8007274 <HAL_TIM_IC_CaptureCallback>
 8007010:	e005      	b.n	800701e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f924 	bl	8007260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fc fffd 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b01      	cmp	r3, #1
 8007030:	d10e      	bne.n	8007050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b01      	cmp	r3, #1
 800703e:	d107      	bne.n	8007050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0201 	mvn.w	r2, #1
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7f9 ff4c 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705a:	2b80      	cmp	r3, #128	; 0x80
 800705c:	d10e      	bne.n	800707c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007068:	2b80      	cmp	r3, #128	; 0x80
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fcf2 	bl	8007a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d10e      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	d107      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8fa 	bl	800729c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d10e      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d107      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0220 	mvn.w	r2, #32
 80070cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fcbc 	bl	8007a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e0ae      	b.n	8007258 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	f200 809f 	bhi.w	8007248 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007145 	.word	0x08007145
 8007114:	08007249 	.word	0x08007249
 8007118:	08007249 	.word	0x08007249
 800711c:	08007249 	.word	0x08007249
 8007120:	08007185 	.word	0x08007185
 8007124:	08007249 	.word	0x08007249
 8007128:	08007249 	.word	0x08007249
 800712c:	08007249 	.word	0x08007249
 8007130:	080071c7 	.word	0x080071c7
 8007134:	08007249 	.word	0x08007249
 8007138:	08007249 	.word	0x08007249
 800713c:	08007249 	.word	0x08007249
 8007140:	08007207 	.word	0x08007207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fa0c 	bl	8007568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0208 	orr.w	r2, r2, #8
 800715e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0204 	bic.w	r2, r2, #4
 800716e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6999      	ldr	r1, [r3, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	619a      	str	r2, [r3, #24]
      break;
 8007182:	e064      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fa52 	bl	8007634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800719e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6999      	ldr	r1, [r3, #24]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	619a      	str	r2, [r3, #24]
      break;
 80071c4:	e043      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa9d 	bl	800770c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0208 	orr.w	r2, r2, #8
 80071e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0204 	bic.w	r2, r2, #4
 80071f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69d9      	ldr	r1, [r3, #28]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]
      break;
 8007204:	e023      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fae7 	bl	80077e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69d9      	ldr	r1, [r3, #28]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	021a      	lsls	r2, r3, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	61da      	str	r2, [r3, #28]
      break;
 8007246:	e002      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
      break;
 800724c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ea:	e02a      	b.n	8007342 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d107      	bne.n	8007306 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2202      	movs	r2, #2
 80072fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007304:	e01d      	b.n	8007342 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d107      	bne.n	8007320 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2204      	movs	r2, #4
 8007314:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800731e:	e010      	b.n	8007342 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d107      	bne.n	800733a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2208      	movs	r2, #8
 800732e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007338:	e003      	b.n	8007342 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff ffb4 	bl	80072b0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	771a      	strb	r2, [r3, #28]
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d10b      	bne.n	8007386 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d136      	bne.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007384:	e031      	b.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d10b      	bne.n	80073a8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2202      	movs	r2, #2
 8007394:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d125      	bne.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a6:	e020      	b.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d10b      	bne.n	80073ca <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2204      	movs	r2, #4
 80073b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d114      	bne.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073c8:	e00f      	b.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d10a      	bne.n	80073ea <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2208      	movs	r2, #8
 80073d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7fc fe14 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	771a      	strb	r2, [r3, #28]
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	429a      	cmp	r2, r3
 8007414:	d103      	bne.n	800741e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	771a      	strb	r2, [r3, #28]
 800741c:	e019      	b.n	8007452 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	429a      	cmp	r2, r3
 8007426:	d103      	bne.n	8007430 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2202      	movs	r2, #2
 800742c:	771a      	strb	r2, [r3, #28]
 800742e:	e010      	b.n	8007452 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d103      	bne.n	8007442 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2204      	movs	r2, #4
 800743e:	771a      	strb	r2, [r3, #28]
 8007440:	e007      	b.n	8007452 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d102      	bne.n	8007452 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2208      	movs	r2, #8
 8007450:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff ff18 	bl	8007288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	771a      	strb	r2, [r3, #28]
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a34      	ldr	r2, [pc, #208]	; (800754c <TIM_Base_SetConfig+0xe4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00f      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d00b      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a31      	ldr	r2, [pc, #196]	; (8007550 <TIM_Base_SetConfig+0xe8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a30      	ldr	r2, [pc, #192]	; (8007554 <TIM_Base_SetConfig+0xec>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0x38>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a2f      	ldr	r2, [pc, #188]	; (8007558 <TIM_Base_SetConfig+0xf0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a25      	ldr	r2, [pc, #148]	; (800754c <TIM_Base_SetConfig+0xe4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a22      	ldr	r2, [pc, #136]	; (8007550 <TIM_Base_SetConfig+0xe8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a21      	ldr	r2, [pc, #132]	; (8007554 <TIM_Base_SetConfig+0xec>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a20      	ldr	r2, [pc, #128]	; (8007558 <TIM_Base_SetConfig+0xf0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a1f      	ldr	r2, [pc, #124]	; (800755c <TIM_Base_SetConfig+0xf4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <TIM_Base_SetConfig+0xf8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x8a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <TIM_Base_SetConfig+0xfc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a08      	ldr	r2, [pc, #32]	; (800754c <TIM_Base_SetConfig+0xe4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d103      	bne.n	8007538 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	615a      	str	r2, [r3, #20]
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800

08007568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0302 	bic.w	r3, r3, #2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1c      	ldr	r2, [pc, #112]	; (8007630 <TIM_OC1_SetConfig+0xc8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10c      	bne.n	80075de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0308 	bic.w	r3, r3, #8
 80075ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f023 0304 	bic.w	r3, r3, #4
 80075dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a13      	ldr	r2, [pc, #76]	; (8007630 <TIM_OC1_SetConfig+0xc8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d111      	bne.n	800760a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40010000 	.word	0x40010000

08007634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f023 0210 	bic.w	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0320 	bic.w	r3, r3, #32
 800767e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <TIM_OC2_SetConfig+0xd4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d10d      	bne.n	80076b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800769a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <TIM_OC2_SetConfig+0xd4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d113      	bne.n	80076e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40010000 	.word	0x40010000

0800770c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <TIM_OC3_SetConfig+0xd0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10d      	bne.n	8007786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a14      	ldr	r2, [pc, #80]	; (80077dc <TIM_OC3_SetConfig+0xd0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d113      	bne.n	80077b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800779c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40010000 	.word	0x40010000

080077e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800782a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a10      	ldr	r2, [pc, #64]	; (800787c <TIM_OC4_SetConfig+0x9c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d109      	bne.n	8007854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	019b      	lsls	r3, r3, #6
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000

08007880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	2201      	movs	r2, #1
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1a      	ldr	r2, [r3, #32]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1a      	ldr	r2, [r3, #32]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f003 031f 	and.w	r3, r3, #31
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	431a      	orrs	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e050      	b.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1c      	ldr	r2, [pc, #112]	; (8007994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d018      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007930:	d013      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a16      	ldr	r2, [pc, #88]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10c      	bne.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4313      	orrs	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40014000 	.word	0x40014000

080079a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e03d      	b.n	8007a40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a86:	2b84      	cmp	r3, #132	; 0x84
 8007a88:	d005      	beq.n	8007a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	3303      	adds	r3, #3
 8007a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007aa8:	f001 f866 	bl	8008b78 <vTaskStartScheduler>
  
  return osOK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab4:	b089      	sub	sp, #36	; 0x24
 8007ab6:	af04      	add	r7, sp, #16
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d020      	beq.n	8007b06 <osThreadCreate+0x54>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01c      	beq.n	8007b06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685c      	ldr	r4, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691e      	ldr	r6, [r3, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ffc8 	bl	8007a74 <makeFreeRtosPriority>
 8007ae4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aee:	9202      	str	r2, [sp, #8]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	9100      	str	r1, [sp, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	4632      	mov	r2, r6
 8007af8:	4629      	mov	r1, r5
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 fde0 	bl	80086c0 <xTaskCreateStatic>
 8007b00:	4603      	mov	r3, r0
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e01c      	b.n	8007b40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685c      	ldr	r4, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b12:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff ffaa 	bl	8007a74 <makeFreeRtosPriority>
 8007b20:	4602      	mov	r2, r0
 8007b22:	f107 030c 	add.w	r3, r7, #12
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9200      	str	r2, [sp, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	4632      	mov	r2, r6
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fe22 	bl	800877a <xTaskCreate>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d001      	beq.n	8007b40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b40:	68fb      	ldr	r3, [r7, #12]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <osDelay+0x16>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	e000      	b.n	8007b62 <osDelay+0x18>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 ffd4 	bl	8008b10 <vTaskDelay>
  
  return osOK;
 8007b68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f103 0208 	add.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f103 0208 	add.w	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f103 0208 	add.w	r2, r3, #8
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d103      	bne.n	8007c34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e00c      	b.n	8007c4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3308      	adds	r3, #8
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	e002      	b.n	8007c42 <vListInsert+0x2e>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d2f6      	bcs.n	8007c3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6892      	ldr	r2, [r2, #8]
 8007c9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6852      	ldr	r2, [r2, #4]
 8007ca6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d103      	bne.n	8007cba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d06:	f001 fe95 	bl	8009a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	3b01      	subs	r3, #1
 8007d38:	68f9      	ldr	r1, [r7, #12]
 8007d3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	22ff      	movs	r2, #255	; 0xff
 8007d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d114      	bne.n	8007d86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01a      	beq.n	8007d9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3310      	adds	r3, #16
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f967 	bl	800903c <xTaskRemoveFromEventList>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d012      	beq.n	8007d9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xQueueGenericReset+0xcc>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	e009      	b.n	8007d9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3310      	adds	r3, #16
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fef1 	bl	8007b72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3324      	adds	r3, #36	; 0x24
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff feec 	bl	8007b72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d9a:	f001 fe7b 	bl	8009a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d9e:	2301      	movs	r3, #1
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	3348      	adds	r3, #72	; 0x48
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 ff07 	bl	8009bf8 <pvPortMalloc>
 8007dea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d011      	beq.n	8007e16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	3348      	adds	r3, #72	; 0x48
 8007dfa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f805 	bl	8007e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e16:	69bb      	ldr	r3, [r7, #24]
	}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3720      	adds	r7, #32
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	e002      	b.n	8007e42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e4e:	2101      	movs	r1, #1
 8007e50:	69b8      	ldr	r0, [r7, #24]
 8007e52:	f7ff ff43 	bl	8007cdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	; 0x38
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericSend+0x32>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <xQueueGenericSend+0x40>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <xQueueGenericSend+0x44>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <xQueueGenericSend+0x46>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <xQueueGenericSend+0x60>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSend+0x6e>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSend+0x72>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSend+0x74>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericSend+0x8e>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eee:	f001 fa55 	bl	800939c <xTaskGetSchedulerState>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <xQueueGenericSend+0x9e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSend+0xa2>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSend+0xa4>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61fb      	str	r3, [r7, #28]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f1e:	f001 fd89 	bl	8009a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <xQueueGenericSend+0xd4>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d129      	bne.n	8007f88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3a:	f000 fab1 	bl	80084a0 <prvCopyDataToQueue>
 8007f3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	3324      	adds	r3, #36	; 0x24
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 f875 	bl	800903c <xTaskRemoveFromEventList>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f58:	4b3f      	ldr	r3, [pc, #252]	; (8008058 <xQueueGenericSend+0x1f8>)
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	e00a      	b.n	8007f80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f70:	4b39      	ldr	r3, [pc, #228]	; (8008058 <xQueueGenericSend+0x1f8>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f80:	f001 fd88 	bl	8009a94 <vPortExitCritical>
				return pdPASS;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e063      	b.n	8008050 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f8e:	f001 fd81 	bl	8009a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e05c      	b.n	8008050 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f9c:	f107 0314 	add.w	r3, r7, #20
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 f8ad 	bl	8009100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007faa:	f001 fd73 	bl	8009a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fae:	f000 fe4d 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb2:	f001 fd3f 	bl	8009a34 <vPortEnterCritical>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fbc:	b25b      	sxtb	r3, r3
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d103      	bne.n	8007fcc <xQueueGenericSend+0x16c>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSend+0x182>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe2:	f001 fd57 	bl	8009a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fe6:	1d3a      	adds	r2, r7, #4
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 f89c 	bl	800912c <xTaskCheckForTimeOut>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d124      	bne.n	8008044 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ffc:	f000 fb48 	bl	8008690 <prvIsQueueFull>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d018      	beq.n	8008038 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	3310      	adds	r3, #16
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fff0 	bl	8008ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008016:	f000 fad3 	bl	80085c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800801a:	f000 fe25 	bl	8008c68 <xTaskResumeAll>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	f47f af7c 	bne.w	8007f1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <xQueueGenericSend+0x1f8>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	e772      	b.n	8007f1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803a:	f000 fac1 	bl	80085c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800803e:	f000 fe13 	bl	8008c68 <xTaskResumeAll>
 8008042:	e76c      	b.n	8007f1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008046:	f000 fabb 	bl	80085c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804a:	f000 fe0d 	bl	8008c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800804e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008050:	4618      	mov	r0, r3
 8008052:	3738      	adds	r7, #56	; 0x38
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008068:	2300      	movs	r3, #0
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <xQueueReceive+0x30>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	623b      	str	r3, [r7, #32]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <xQueueReceive+0x3e>
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <xQueueReceive+0x42>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueReceive+0x44>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueReceive+0x5e>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	61fb      	str	r3, [r7, #28]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ba:	f001 f96f 	bl	800939c <xTaskGetSchedulerState>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <xQueueReceive+0x6e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <xQueueReceive+0x72>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <xQueueReceive+0x74>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueReceive+0x8e>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61bb      	str	r3, [r7, #24]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ea:	f001 fca3 	bl	8009a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01f      	beq.n	800813a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fe:	f000 fa39 	bl	8008574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	3310      	adds	r3, #16
 8008116:	4618      	mov	r0, r3
 8008118:	f000 ff90 	bl	800903c <xTaskRemoveFromEventList>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008122:	4b3d      	ldr	r3, [pc, #244]	; (8008218 <xQueueReceive+0x1bc>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008132:	f001 fcaf 	bl	8009a94 <vPortExitCritical>
				return pdPASS;
 8008136:	2301      	movs	r3, #1
 8008138:	e069      	b.n	800820e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008140:	f001 fca8 	bl	8009a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008144:	2300      	movs	r3, #0
 8008146:	e062      	b.n	800820e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814e:	f107 0310 	add.w	r3, r7, #16
 8008152:	4618      	mov	r0, r3
 8008154:	f000 ffd4 	bl	8009100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008158:	2301      	movs	r3, #1
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815c:	f001 fc9a 	bl	8009a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008160:	f000 fd74 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008164:	f001 fc66 	bl	8009a34 <vPortEnterCritical>
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816e:	b25b      	sxtb	r3, r3
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d103      	bne.n	800817e <xQueueReceive+0x122>
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008184:	b25b      	sxtb	r3, r3
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d103      	bne.n	8008194 <xQueueReceive+0x138>
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008194:	f001 fc7e 	bl	8009a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008198:	1d3a      	adds	r2, r7, #4
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 ffc3 	bl	800912c <xTaskCheckForTimeOut>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d123      	bne.n	80081f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ae:	f000 fa59 	bl	8008664 <prvIsQueueEmpty>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	3324      	adds	r3, #36	; 0x24
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 ff17 	bl	8008ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c8:	f000 f9fa 	bl	80085c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081cc:	f000 fd4c 	bl	8008c68 <xTaskResumeAll>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d189      	bne.n	80080ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <xQueueReceive+0x1bc>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e780      	b.n	80080ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f000 f9e9 	bl	80085c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ee:	f000 fd3b 	bl	8008c68 <xTaskResumeAll>
 80081f2:	e77a      	b.n	80080ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f6:	f000 f9e3 	bl	80085c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fa:	f000 fd35 	bl	8008c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008200:	f000 fa30 	bl	8008664 <prvIsQueueEmpty>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f43f af6f 	beq.w	80080ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800820c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800820e:	4618      	mov	r0, r3
 8008210:	3730      	adds	r7, #48	; 0x30
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08e      	sub	sp, #56	; 0x38
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	623b      	str	r3, [r7, #32]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	61fb      	str	r3, [r7, #28]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800826c:	f001 f896 	bl	800939c <xTaskGetSchedulerState>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <xQueueSemaphoreTake+0x60>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <xQueueSemaphoreTake+0x64>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <xQueueSemaphoreTake+0x66>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61bb      	str	r3, [r7, #24]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800829c:	f001 fbca 	bl	8009a34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d024      	beq.n	80082f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082bc:	f001 fa16 	bl	80096ec <pvTaskIncrementMutexHeldCount>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00f      	beq.n	80082ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	3310      	adds	r3, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 feb2 	bl	800903c <xTaskRemoveFromEventList>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082de:	4b54      	ldr	r3, [pc, #336]	; (8008430 <xQueueSemaphoreTake+0x214>)
 80082e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ee:	f001 fbd1 	bl	8009a94 <vPortExitCritical>
				return pdPASS;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e097      	b.n	8008426 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d111      	bne.n	8008320 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	617b      	str	r3, [r7, #20]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008318:	f001 fbbc 	bl	8009a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800831c:	2300      	movs	r3, #0
 800831e:	e082      	b.n	8008426 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008326:	f107 030c 	add.w	r3, r7, #12
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fee8 	bl	8009100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008334:	f001 fbae 	bl	8009a94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008338:	f000 fc88 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833c:	f001 fb7a 	bl	8009a34 <vPortEnterCritical>
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008346:	b25b      	sxtb	r3, r3
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <xQueueSemaphoreTake+0x13a>
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <xQueueSemaphoreTake+0x150>
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836c:	f001 fb92 	bl	8009a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008370:	463a      	mov	r2, r7
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fed7 	bl	800912c <xTaskCheckForTimeOut>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d132      	bne.n	80083ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008386:	f000 f96d 	bl	8008664 <prvIsQueueEmpty>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d026      	beq.n	80083de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008398:	f001 fb4c 	bl	8009a34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f819 	bl	80093d8 <xTaskPriorityInherit>
 80083a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083a8:	f001 fb74 	bl	8009a94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	3324      	adds	r3, #36	; 0x24
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fe1d 	bl	8008ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083bc:	f000 f900 	bl	80085c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c0:	f000 fc52 	bl	8008c68 <xTaskResumeAll>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f47f af68 	bne.w	800829c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083cc:	4b18      	ldr	r3, [pc, #96]	; (8008430 <xQueueSemaphoreTake+0x214>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	e75e      	b.n	800829c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e0:	f000 f8ee 	bl	80085c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083e4:	f000 fc40 	bl	8008c68 <xTaskResumeAll>
 80083e8:	e758      	b.n	800829c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ec:	f000 f8e8 	bl	80085c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f0:	f000 fc3a 	bl	8008c68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083f6:	f000 f935 	bl	8008664 <prvIsQueueEmpty>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f43f af4d 	beq.w	800829c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00d      	beq.n	8008424 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008408:	f001 fb14 	bl	8009a34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800840c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840e:	f000 f82f 	bl	8008470 <prvGetDisinheritPriorityAfterTimeout>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841a:	4618      	mov	r0, r3
 800841c:	f001 f8d8 	bl	80095d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008420:	f001 fb38 	bl	8009a94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008426:	4618      	mov	r0, r3
 8008428:	3738      	adds	r7, #56	; 0x38
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	e000ed04 	.word	0xe000ed04

08008434 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008458:	f001 faec 	bl	8009a34 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008462:	f001 fb17 	bl	8009a94 <vPortExitCritical>

	return uxReturn;
 8008466:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	d006      	beq.n	800848e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f1c3 0307 	rsb	r3, r3, #7
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e001      	b.n	8008492 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008492:	68fb      	ldr	r3, [r7, #12]
	}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d14d      	bne.n	8008562 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fffa 	bl	80094c4 <xTaskPriorityDisinherit>
 80084d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	e043      	b.n	8008562 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d119      	bne.n	8008514 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6858      	ldr	r0, [r3, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	461a      	mov	r2, r3
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	f001 fdf2 	bl	800a0d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	441a      	add	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d32b      	bcc.n	8008562 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	e026      	b.n	8008562 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68d8      	ldr	r0, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	461a      	mov	r2, r3
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	f001 fdd8 	bl	800a0d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	425b      	negs	r3, r3
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d207      	bcs.n	8008550 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	425b      	negs	r3, r3
 800854a:	441a      	add	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d105      	bne.n	8008562 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	3b01      	subs	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800856a:	697b      	ldr	r3, [r7, #20]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d018      	beq.n	80085b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	441a      	add	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d303      	bcc.n	80085a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68d9      	ldr	r1, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	461a      	mov	r2, r3
 80085b2:	6838      	ldr	r0, [r7, #0]
 80085b4:	f001 fd8e 	bl	800a0d4 <memcpy>
	}
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085c8:	f001 fa34 	bl	8009a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085d4:	e011      	b.n	80085fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fd2a 	bl	800903c <xTaskRemoveFromEventList>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085ee:	f000 fdff 	bl	80091f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dce9      	bgt.n	80085d6 <prvUnlockQueue+0x16>
 8008602:	e000      	b.n	8008606 <prvUnlockQueue+0x46>
					break;
 8008604:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	22ff      	movs	r2, #255	; 0xff
 800860a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800860e:	f001 fa41 	bl	8009a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008612:	f001 fa0f 	bl	8009a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800861e:	e011      	b.n	8008644 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fd05 	bl	800903c <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008638:	f000 fdda 	bl	80091f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	3b01      	subs	r3, #1
 8008640:	b2db      	uxtb	r3, r3
 8008642:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	dce9      	bgt.n	8008620 <prvUnlockQueue+0x60>
 800864c:	e000      	b.n	8008650 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800864e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008658:	f001 fa1c 	bl	8009a94 <vPortExitCritical>
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800866c:	f001 f9e2 	bl	8009a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e001      	b.n	8008682 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008682:	f001 fa07 	bl	8009a94 <vPortExitCritical>

	return xReturn;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008698:	f001 f9cc 	bl	8009a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d102      	bne.n	80086ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e001      	b.n	80086b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f001 f9ef 	bl	8009a94 <vPortExitCritical>

	return xReturn;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08e      	sub	sp, #56	; 0x38
 80086c4:	af04      	add	r7, sp, #16
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	623b      	str	r3, [r7, #32]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xTaskCreateStatic+0x46>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61fb      	str	r3, [r7, #28]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008706:	23a0      	movs	r3, #160	; 0xa0
 8008708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2ba0      	cmp	r3, #160	; 0xa0
 800870e:	d00a      	beq.n	8008726 <xTaskCreateStatic+0x66>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61bb      	str	r3, [r7, #24]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008726:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01e      	beq.n	800876c <xTaskCreateStatic+0xac>
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01b      	beq.n	800876c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800873c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	2202      	movs	r2, #2
 8008742:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008746:	2300      	movs	r3, #0
 8008748:	9303      	str	r3, [sp, #12]
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	f107 0314 	add.w	r3, r7, #20
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f850 	bl	8008804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008766:	f000 f8eb 	bl	8008940 <prvAddNewTaskToReadyList>
 800876a:	e001      	b.n	8008770 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
	}
 8008772:	4618      	mov	r0, r3
 8008774:	3728      	adds	r7, #40	; 0x28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800877a:	b580      	push	{r7, lr}
 800877c:	b08c      	sub	sp, #48	; 0x30
 800877e:	af04      	add	r7, sp, #16
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fa32 	bl	8009bf8 <pvPortMalloc>
 8008794:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00e      	beq.n	80087ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800879c:	20a0      	movs	r0, #160	; 0xa0
 800879e:	f001 fa2b 	bl	8009bf8 <pvPortMalloc>
 80087a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
 80087b0:	e005      	b.n	80087be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087b2:	6978      	ldr	r0, [r7, #20]
 80087b4:	f001 faec 	bl	8009d90 <vPortFree>
 80087b8:	e001      	b.n	80087be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d017      	beq.n	80087f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9303      	str	r3, [sp, #12]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	9302      	str	r3, [sp, #8]
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f80e 	bl	8008804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087e8:	69f8      	ldr	r0, [r7, #28]
 80087ea:	f000 f8a9 	bl	8008940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087ee:	2301      	movs	r3, #1
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	e002      	b.n	80087fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087fa:	69bb      	ldr	r3, [r7, #24]
	}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3720      	adds	r7, #32
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800881c:	3b01      	subs	r3, #1
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	617b      	str	r3, [r7, #20]
}
 8008848:	bf00      	nop
 800884a:	e7fe      	b.n	800884a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d01f      	beq.n	8008892 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	e012      	b.n	800887e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	7819      	ldrb	r1, [r3, #0]
 8008860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	3334      	adds	r3, #52	; 0x34
 8008868:	460a      	mov	r2, r1
 800886a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d006      	beq.n	8008886 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	3301      	adds	r3, #1
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d9e9      	bls.n	8008858 <prvInitialiseNewTask+0x54>
 8008884:	e000      	b.n	8008888 <prvInitialiseNewTask+0x84>
			{
				break;
 8008886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008890:	e003      	b.n	800889a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	2b06      	cmp	r3, #6
 800889e:	d901      	bls.n	80088a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a0:	2306      	movs	r3, #6
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	3304      	adds	r3, #4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff f979 	bl	8007bb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	3318      	adds	r3, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff f974 	bl	8007bb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f1c3 0207 	rsb	r2, r3, #7
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	334c      	adds	r3, #76	; 0x4c
 80088f4:	224c      	movs	r2, #76	; 0x4c
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fb67 	bl	8009fcc <memset>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	4a0c      	ldr	r2, [pc, #48]	; (8008934 <prvInitialiseNewTask+0x130>)
 8008902:	651a      	str	r2, [r3, #80]	; 0x50
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <prvInitialiseNewTask+0x134>)
 8008908:	655a      	str	r2, [r3, #84]	; 0x54
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	4a0b      	ldr	r2, [pc, #44]	; (800893c <prvInitialiseNewTask+0x138>)
 800890e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f000 ff63 	bl	80097e0 <pxPortInitialiseStack>
 800891a:	4602      	mov	r2, r0
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800892c:	bf00      	nop
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20006c4c 	.word	0x20006c4c
 8008938:	20006cb4 	.word	0x20006cb4
 800893c:	20006d1c 	.word	0x20006d1c

08008940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008948:	f001 f874 	bl	8009a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800894c:	4b2a      	ldr	r3, [pc, #168]	; (80089f8 <prvAddNewTaskToReadyList+0xb8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	4a29      	ldr	r2, [pc, #164]	; (80089f8 <prvAddNewTaskToReadyList+0xb8>)
 8008954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008956:	4b29      	ldr	r3, [pc, #164]	; (80089fc <prvAddNewTaskToReadyList+0xbc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800895e:	4a27      	ldr	r2, [pc, #156]	; (80089fc <prvAddNewTaskToReadyList+0xbc>)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <prvAddNewTaskToReadyList+0xb8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d110      	bne.n	800898e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800896c:	f000 fc54 	bl	8009218 <prvInitialiseTaskLists>
 8008970:	e00d      	b.n	800898e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008972:	4b23      	ldr	r3, [pc, #140]	; (8008a00 <prvAddNewTaskToReadyList+0xc0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800897a:	4b20      	ldr	r3, [pc, #128]	; (80089fc <prvAddNewTaskToReadyList+0xbc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	429a      	cmp	r2, r3
 8008986:	d802      	bhi.n	800898e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008988:	4a1c      	ldr	r2, [pc, #112]	; (80089fc <prvAddNewTaskToReadyList+0xbc>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <prvAddNewTaskToReadyList+0xc4>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3301      	adds	r3, #1
 8008994:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <prvAddNewTaskToReadyList+0xc4>)
 8008996:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	2201      	movs	r2, #1
 800899e:	409a      	lsls	r2, r3
 80089a0:	4b19      	ldr	r3, [pc, #100]	; (8008a08 <prvAddNewTaskToReadyList+0xc8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	4a18      	ldr	r2, [pc, #96]	; (8008a08 <prvAddNewTaskToReadyList+0xc8>)
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <prvAddNewTaskToReadyList+0xcc>)
 80089b8:	441a      	add	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7ff f903 	bl	8007bcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089c6:	f001 f865 	bl	8009a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089ca:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <prvAddNewTaskToReadyList+0xc0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00e      	beq.n	80089f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089d2:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <prvAddNewTaskToReadyList+0xbc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	429a      	cmp	r2, r3
 80089de:	d207      	bcs.n	80089f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <prvAddNewTaskToReadyList+0xd0>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001dd8 	.word	0x20001dd8
 80089fc:	20001cd8 	.word	0x20001cd8
 8008a00:	20001de4 	.word	0x20001de4
 8008a04:	20001df4 	.word	0x20001df4
 8008a08:	20001de0 	.word	0x20001de0
 8008a0c:	20001cdc 	.word	0x20001cdc
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <vTaskDelayUntil+0x2a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	617b      	str	r3, [r7, #20]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <vTaskDelayUntil+0x46>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	613b      	str	r3, [r7, #16]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008a5a:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <vTaskDelayUntil+0xf0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <vTaskDelayUntil+0x64>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60fb      	str	r3, [r7, #12]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008a78:	f000 f8e8 	bl	8008c4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008a7c:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <vTaskDelayUntil+0xf4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	4413      	add	r3, r2
 8008a8a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a3a      	ldr	r2, [r7, #32]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d20b      	bcs.n	8008aae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d211      	bcs.n	8008ac4 <vTaskDelayUntil+0xb0>
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d90d      	bls.n	8008ac4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	e00a      	b.n	8008ac4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d303      	bcc.n	8008ac0 <vTaskDelayUntil+0xac>
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d901      	bls.n	8008ac4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fe1b 	bl	8009714 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008ade:	f000 f8c3 	bl	8008c68 <xTaskResumeAll>
 8008ae2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008aea:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <vTaskDelayUntil+0xf8>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008afa:	bf00      	nop
 8008afc:	3728      	adds	r7, #40	; 0x28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20001e00 	.word	0x20001e00
 8008b08:	20001ddc 	.word	0x20001ddc
 8008b0c:	e000ed04 	.word	0xe000ed04

08008b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d017      	beq.n	8008b52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b22:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <vTaskDelay+0x60>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <vTaskDelay+0x30>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	60bb      	str	r3, [r7, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b40:	f000 f884 	bl	8008c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b44:	2100      	movs	r1, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fde4 	bl	8009714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b4c:	f000 f88c 	bl	8008c68 <xTaskResumeAll>
 8008b50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d107      	bne.n	8008b68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <vTaskDelay+0x64>)
 8008b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20001e00 	.word	0x20001e00
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b86:	463a      	mov	r2, r7
 8008b88:	1d39      	adds	r1, r7, #4
 8008b8a:	f107 0308 	add.w	r3, r7, #8
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f7 fec0 	bl	8000914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	9202      	str	r2, [sp, #8]
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	460a      	mov	r2, r1
 8008ba6:	4921      	ldr	r1, [pc, #132]	; (8008c2c <vTaskStartScheduler+0xb4>)
 8008ba8:	4821      	ldr	r0, [pc, #132]	; (8008c30 <vTaskStartScheduler+0xb8>)
 8008baa:	f7ff fd89 	bl	80086c0 <xTaskCreateStatic>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4a20      	ldr	r2, [pc, #128]	; (8008c34 <vTaskStartScheduler+0xbc>)
 8008bb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bb4:	4b1f      	ldr	r3, [pc, #124]	; (8008c34 <vTaskStartScheduler+0xbc>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e001      	b.n	8008bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d11b      	bne.n	8008c04 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	613b      	str	r3, [r7, #16]
}
 8008bde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <vTaskStartScheduler+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	334c      	adds	r3, #76	; 0x4c
 8008be6:	4a15      	ldr	r2, [pc, #84]	; (8008c3c <vTaskStartScheduler+0xc4>)
 8008be8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <vTaskStartScheduler+0xc8>)
 8008bec:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <vTaskStartScheduler+0xcc>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bf8:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <vTaskStartScheduler+0xd0>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bfe:	f000 fe77 	bl	80098f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c02:	e00e      	b.n	8008c22 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d10a      	bne.n	8008c22 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vTaskStartScheduler+0xa8>
}
 8008c22:	bf00      	nop
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800a3ac 	.word	0x0800a3ac
 8008c30:	08009209 	.word	0x08009209
 8008c34:	20001dfc 	.word	0x20001dfc
 8008c38:	20001cd8 	.word	0x20001cd8
 8008c3c:	200000f4 	.word	0x200000f4
 8008c40:	20001df8 	.word	0x20001df8
 8008c44:	20001de4 	.word	0x20001de4
 8008c48:	20001ddc 	.word	0x20001ddc

08008c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <vTaskSuspendAll+0x18>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a03      	ldr	r2, [pc, #12]	; (8008c64 <vTaskSuspendAll+0x18>)
 8008c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c5a:	bf00      	nop
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	20001e00 	.word	0x20001e00

08008c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c76:	4b41      	ldr	r3, [pc, #260]	; (8008d7c <xTaskResumeAll+0x114>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	603b      	str	r3, [r7, #0]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c94:	f000 fece 	bl	8009a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c98:	4b38      	ldr	r3, [pc, #224]	; (8008d7c <xTaskResumeAll+0x114>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a37      	ldr	r2, [pc, #220]	; (8008d7c <xTaskResumeAll+0x114>)
 8008ca0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca2:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <xTaskResumeAll+0x114>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d161      	bne.n	8008d6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008caa:	4b35      	ldr	r3, [pc, #212]	; (8008d80 <xTaskResumeAll+0x118>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d05d      	beq.n	8008d6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cb2:	e02e      	b.n	8008d12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	4b33      	ldr	r3, [pc, #204]	; (8008d84 <xTaskResumeAll+0x11c>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ffe0 	bl	8007c86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe ffdb 	bl	8007c86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	409a      	lsls	r2, r3
 8008cd8:	4b2b      	ldr	r3, [pc, #172]	; (8008d88 <xTaskResumeAll+0x120>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <xTaskResumeAll+0x120>)
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4a27      	ldr	r2, [pc, #156]	; (8008d8c <xTaskResumeAll+0x124>)
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7fe ff67 	bl	8007bcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b23      	ldr	r3, [pc, #140]	; (8008d90 <xTaskResumeAll+0x128>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d302      	bcc.n	8008d12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d0c:	4b21      	ldr	r3, [pc, #132]	; (8008d94 <xTaskResumeAll+0x12c>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d12:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <xTaskResumeAll+0x11c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1cc      	bne.n	8008cb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d20:	f000 fb1c 	bl	800935c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d24:	4b1c      	ldr	r3, [pc, #112]	; (8008d98 <xTaskResumeAll+0x130>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d010      	beq.n	8008d52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d30:	f000 f836 	bl	8008da0 <xTaskIncrementTick>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008d3a:	4b16      	ldr	r3, [pc, #88]	; (8008d94 <xTaskResumeAll+0x12c>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1f1      	bne.n	8008d30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008d4c:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <xTaskResumeAll+0x130>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d52:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <xTaskResumeAll+0x12c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <xTaskResumeAll+0x134>)
 8008d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d6e:	f000 fe91 	bl	8009a94 <vPortExitCritical>

	return xAlreadyYielded;
 8008d72:	68bb      	ldr	r3, [r7, #8]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20001e00 	.word	0x20001e00
 8008d80:	20001dd8 	.word	0x20001dd8
 8008d84:	20001d98 	.word	0x20001d98
 8008d88:	20001de0 	.word	0x20001de0
 8008d8c:	20001cdc 	.word	0x20001cdc
 8008d90:	20001cd8 	.word	0x20001cd8
 8008d94:	20001dec 	.word	0x20001dec
 8008d98:	20001de8 	.word	0x20001de8
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b4e      	ldr	r3, [pc, #312]	; (8008ee4 <xTaskIncrementTick+0x144>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 808e 	bne.w	8008ed0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008db4:	4b4c      	ldr	r3, [pc, #304]	; (8008ee8 <xTaskIncrementTick+0x148>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dbc:	4a4a      	ldr	r2, [pc, #296]	; (8008ee8 <xTaskIncrementTick+0x148>)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d120      	bne.n	8008e0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dc8:	4b48      	ldr	r3, [pc, #288]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	603b      	str	r3, [r7, #0]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xTaskIncrementTick+0x46>
 8008de8:	4b40      	ldr	r3, [pc, #256]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	4b40      	ldr	r3, [pc, #256]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a3e      	ldr	r2, [pc, #248]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	4a3e      	ldr	r2, [pc, #248]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	4b3d      	ldr	r3, [pc, #244]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a3c      	ldr	r2, [pc, #240]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	f000 faa9 	bl	800935c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e0a:	4b3b      	ldr	r3, [pc, #236]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d348      	bcc.n	8008ea6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e14:	4b35      	ldr	r3, [pc, #212]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e1e:	4b36      	ldr	r3, [pc, #216]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	601a      	str	r2, [r3, #0]
					break;
 8008e26:	e03e      	b.n	8008ea6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b30      	ldr	r3, [pc, #192]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d203      	bcs.n	8008e48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e40:	4a2d      	ldr	r2, [pc, #180]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e46:	e02e      	b.n	8008ea6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe ff1a 	bl	8007c86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	3318      	adds	r3, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe ff11 	bl	8007c86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	2201      	movs	r2, #1
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	4b23      	ldr	r3, [pc, #140]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	4a22      	ldr	r2, [pc, #136]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4a1f      	ldr	r2, [pc, #124]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e84:	441a      	add	r2, r3
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	f7fe fe9d 	bl	8007bcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3b9      	bcc.n	8008e14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea4:	e7b6      	b.n	8008e14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ea6:	4b17      	ldr	r3, [pc, #92]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4914      	ldr	r1, [pc, #80]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d901      	bls.n	8008ec2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ec2:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <xTaskIncrementTick+0x168>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e004      	b.n	8008eda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ed0:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <xTaskIncrementTick+0x16c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <xTaskIncrementTick+0x16c>)
 8008ed8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008eda:	697b      	ldr	r3, [r7, #20]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20001e00 	.word	0x20001e00
 8008ee8:	20001ddc 	.word	0x20001ddc
 8008eec:	20001d90 	.word	0x20001d90
 8008ef0:	20001d94 	.word	0x20001d94
 8008ef4:	20001df0 	.word	0x20001df0
 8008ef8:	20001df8 	.word	0x20001df8
 8008efc:	20001de0 	.word	0x20001de0
 8008f00:	20001cdc 	.word	0x20001cdc
 8008f04:	20001cd8 	.word	0x20001cd8
 8008f08:	20001dec 	.word	0x20001dec
 8008f0c:	20001de8 	.word	0x20001de8

08008f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f16:	4b31      	ldr	r3, [pc, #196]	; (8008fdc <vTaskSwitchContext+0xcc>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f1e:	4b30      	ldr	r3, [pc, #192]	; (8008fe0 <vTaskSwitchContext+0xd0>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f24:	e055      	b.n	8008fd2 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8008f26:	4b2e      	ldr	r3, [pc, #184]	; (8008fe0 <vTaskSwitchContext+0xd0>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008f2c:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d808      	bhi.n	8008f4e <vTaskSwitchContext+0x3e>
 8008f3c:	4b29      	ldr	r3, [pc, #164]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3334      	adds	r3, #52	; 0x34
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f7f7 fcd8 	bl	80008fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <vTaskSwitchContext+0xd8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	fab3 f383 	clz	r3, r3
 8008f5a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	f1c3 031f 	rsb	r3, r3, #31
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	4921      	ldr	r1, [pc, #132]	; (8008fec <vTaskSwitchContext+0xdc>)
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <vTaskSwitchContext+0x7e>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	607b      	str	r3, [r7, #4]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <vTaskSwitchContext+0x7c>
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4a14      	ldr	r2, [pc, #80]	; (8008fec <vTaskSwitchContext+0xdc>)
 8008f9a:	4413      	add	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d104      	bne.n	8008fbe <vTaskSwitchContext+0xae>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a07      	ldr	r2, [pc, #28]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008fc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <vTaskSwitchContext+0xd4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	334c      	adds	r3, #76	; 0x4c
 8008fce:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <vTaskSwitchContext+0xe0>)
 8008fd0:	6013      	str	r3, [r2, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20001e00 	.word	0x20001e00
 8008fe0:	20001dec 	.word	0x20001dec
 8008fe4:	20001cd8 	.word	0x20001cd8
 8008fe8:	20001de0 	.word	0x20001de0
 8008fec:	20001cdc 	.word	0x20001cdc
 8008ff0:	200000f4 	.word	0x200000f4

08008ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60fb      	str	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800901a:	4b07      	ldr	r3, [pc, #28]	; (8009038 <vTaskPlaceOnEventList+0x44>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3318      	adds	r3, #24
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fe fdf6 	bl	8007c14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009028:	2101      	movs	r1, #1
 800902a:	6838      	ldr	r0, [r7, #0]
 800902c:	f000 fb72 	bl	8009714 <prvAddCurrentTaskToDelayedList>
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20001cd8 	.word	0x20001cd8

0800903c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	60fb      	str	r3, [r7, #12]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3318      	adds	r3, #24
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fe0a 	bl	8007c86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009072:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <xTaskRemoveFromEventList+0xac>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d11c      	bne.n	80090b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fe01 	bl	8007c86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	2201      	movs	r2, #1
 800908a:	409a      	lsls	r2, r3
 800908c:	4b17      	ldr	r3, [pc, #92]	; (80090ec <xTaskRemoveFromEventList+0xb0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4313      	orrs	r3, r2
 8009092:	4a16      	ldr	r2, [pc, #88]	; (80090ec <xTaskRemoveFromEventList+0xb0>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4a13      	ldr	r2, [pc, #76]	; (80090f0 <xTaskRemoveFromEventList+0xb4>)
 80090a4:	441a      	add	r2, r3
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7fe fd8d 	bl	8007bcc <vListInsertEnd>
 80090b2:	e005      	b.n	80090c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3318      	adds	r3, #24
 80090b8:	4619      	mov	r1, r3
 80090ba:	480e      	ldr	r0, [pc, #56]	; (80090f4 <xTaskRemoveFromEventList+0xb8>)
 80090bc:	f7fe fd86 	bl	8007bcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <xTaskRemoveFromEventList+0xbc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d905      	bls.n	80090da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090ce:	2301      	movs	r3, #1
 80090d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <xTaskRemoveFromEventList+0xc0>)
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e001      	b.n	80090de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090de:	697b      	ldr	r3, [r7, #20]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20001e00 	.word	0x20001e00
 80090ec:	20001de0 	.word	0x20001de0
 80090f0:	20001cdc 	.word	0x20001cdc
 80090f4:	20001d98 	.word	0x20001d98
 80090f8:	20001cd8 	.word	0x20001cd8
 80090fc:	20001dec 	.word	0x20001dec

08009100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009108:	4b06      	ldr	r3, [pc, #24]	; (8009124 <vTaskInternalSetTimeOutState+0x24>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <vTaskInternalSetTimeOutState+0x28>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	605a      	str	r2, [r3, #4]
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20001df0 	.word	0x20001df0
 8009128:	20001ddc 	.word	0x20001ddc

0800912c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	613b      	str	r3, [r7, #16]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	60fb      	str	r3, [r7, #12]
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800916e:	f000 fc61 	bl	8009a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <xTaskCheckForTimeOut+0xbc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918a:	d102      	bne.n	8009192 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	e023      	b.n	80091da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <xTaskCheckForTimeOut+0xc0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d007      	beq.n	80091ae <xTaskCheckForTimeOut+0x82>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d302      	bcc.n	80091ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	e015      	b.n	80091da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d20b      	bcs.n	80091d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff ff9b 	bl	8009100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	e004      	b.n	80091da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091d6:	2301      	movs	r3, #1
 80091d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091da:	f000 fc5b 	bl	8009a94 <vPortExitCritical>

	return xReturn;
 80091de:	69fb      	ldr	r3, [r7, #28]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20001ddc 	.word	0x20001ddc
 80091ec:	20001df0 	.word	0x20001df0

080091f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091f4:	4b03      	ldr	r3, [pc, #12]	; (8009204 <vTaskMissedYield+0x14>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20001dec 	.word	0x20001dec

08009208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009210:	f000 f842 	bl	8009298 <prvCheckTasksWaitingTermination>
 8009214:	e7fc      	b.n	8009210 <prvIdleTask+0x8>
	...

08009218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800921e:	2300      	movs	r3, #0
 8009220:	607b      	str	r3, [r7, #4]
 8009222:	e00c      	b.n	800923e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4a12      	ldr	r2, [pc, #72]	; (8009278 <prvInitialiseTaskLists+0x60>)
 8009230:	4413      	add	r3, r2
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fc9d 	bl	8007b72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3301      	adds	r3, #1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b06      	cmp	r3, #6
 8009242:	d9ef      	bls.n	8009224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009244:	480d      	ldr	r0, [pc, #52]	; (800927c <prvInitialiseTaskLists+0x64>)
 8009246:	f7fe fc94 	bl	8007b72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800924a:	480d      	ldr	r0, [pc, #52]	; (8009280 <prvInitialiseTaskLists+0x68>)
 800924c:	f7fe fc91 	bl	8007b72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009250:	480c      	ldr	r0, [pc, #48]	; (8009284 <prvInitialiseTaskLists+0x6c>)
 8009252:	f7fe fc8e 	bl	8007b72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009256:	480c      	ldr	r0, [pc, #48]	; (8009288 <prvInitialiseTaskLists+0x70>)
 8009258:	f7fe fc8b 	bl	8007b72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800925c:	480b      	ldr	r0, [pc, #44]	; (800928c <prvInitialiseTaskLists+0x74>)
 800925e:	f7fe fc88 	bl	8007b72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009262:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <prvInitialiseTaskLists+0x78>)
 8009264:	4a05      	ldr	r2, [pc, #20]	; (800927c <prvInitialiseTaskLists+0x64>)
 8009266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <prvInitialiseTaskLists+0x7c>)
 800926a:	4a05      	ldr	r2, [pc, #20]	; (8009280 <prvInitialiseTaskLists+0x68>)
 800926c:	601a      	str	r2, [r3, #0]
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20001cdc 	.word	0x20001cdc
 800927c:	20001d68 	.word	0x20001d68
 8009280:	20001d7c 	.word	0x20001d7c
 8009284:	20001d98 	.word	0x20001d98
 8009288:	20001dac 	.word	0x20001dac
 800928c:	20001dc4 	.word	0x20001dc4
 8009290:	20001d90 	.word	0x20001d90
 8009294:	20001d94 	.word	0x20001d94

08009298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800929e:	e019      	b.n	80092d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092a0:	f000 fbc8 	bl	8009a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a4:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <prvCheckTasksWaitingTermination+0x50>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fce8 	bl	8007c86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092b6:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <prvCheckTasksWaitingTermination+0x54>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a0b      	ldr	r2, [pc, #44]	; (80092ec <prvCheckTasksWaitingTermination+0x54>)
 80092be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	4a0a      	ldr	r2, [pc, #40]	; (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092ca:	f000 fbe3 	bl	8009a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f810 	bl	80092f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <prvCheckTasksWaitingTermination+0x58>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e1      	bne.n	80092a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20001dac 	.word	0x20001dac
 80092ec:	20001dd8 	.word	0x20001dd8
 80092f0:	20001dc0 	.word	0x20001dc0

080092f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	334c      	adds	r3, #76	; 0x4c
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fe6b 	bl	8009fdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800930c:	2b00      	cmp	r3, #0
 800930e:	d108      	bne.n	8009322 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fd3b 	bl	8009d90 <vPortFree>
				vPortFree( pxTCB );
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fd38 	bl	8009d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009320:	e018      	b.n	8009354 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009328:	2b01      	cmp	r3, #1
 800932a:	d103      	bne.n	8009334 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fd2f 	bl	8009d90 <vPortFree>
	}
 8009332:	e00f      	b.n	8009354 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800933a:	2b02      	cmp	r3, #2
 800933c:	d00a      	beq.n	8009354 <prvDeleteTCB+0x60>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
}
 8009350:	bf00      	nop
 8009352:	e7fe      	b.n	8009352 <prvDeleteTCB+0x5e>
	}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <prvResetNextTaskUnblockTime+0x38>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d104      	bne.n	8009376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <prvResetNextTaskUnblockTime+0x3c>)
 800936e:	f04f 32ff 	mov.w	r2, #4294967295
 8009372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009374:	e008      	b.n	8009388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009376:	4b07      	ldr	r3, [pc, #28]	; (8009394 <prvResetNextTaskUnblockTime+0x38>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	4a04      	ldr	r2, [pc, #16]	; (8009398 <prvResetNextTaskUnblockTime+0x3c>)
 8009386:	6013      	str	r3, [r2, #0]
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	20001d90 	.word	0x20001d90
 8009398:	20001df8 	.word	0x20001df8

0800939c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <xTaskGetSchedulerState+0x34>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093aa:	2301      	movs	r3, #1
 80093ac:	607b      	str	r3, [r7, #4]
 80093ae:	e008      	b.n	80093c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <xTaskGetSchedulerState+0x38>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093b8:	2302      	movs	r3, #2
 80093ba:	607b      	str	r3, [r7, #4]
 80093bc:	e001      	b.n	80093c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093be:	2300      	movs	r3, #0
 80093c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093c2:	687b      	ldr	r3, [r7, #4]
	}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20001de4 	.word	0x20001de4
 80093d4:	20001e00 	.word	0x20001e00

080093d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d05e      	beq.n	80094ac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f2:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <xTaskPriorityInherit+0xe0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d24e      	bcs.n	800949a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	db06      	blt.n	8009412 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009404:	4b2c      	ldr	r3, [pc, #176]	; (80094b8 <xTaskPriorityInherit+0xe0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	f1c3 0207 	rsb	r2, r3, #7
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6959      	ldr	r1, [r3, #20]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a26      	ldr	r2, [pc, #152]	; (80094bc <xTaskPriorityInherit+0xe4>)
 8009424:	4413      	add	r3, r2
 8009426:	4299      	cmp	r1, r3
 8009428:	d12f      	bne.n	800948a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fc29 	bl	8007c86 <uxListRemove>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	2201      	movs	r2, #1
 8009440:	fa02 f303 	lsl.w	r3, r2, r3
 8009444:	43da      	mvns	r2, r3
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <xTaskPriorityInherit+0xe8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4013      	ands	r3, r2
 800944c:	4a1c      	ldr	r2, [pc, #112]	; (80094c0 <xTaskPriorityInherit+0xe8>)
 800944e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009450:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <xTaskPriorityInherit+0xe0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945e:	2201      	movs	r2, #1
 8009460:	409a      	lsls	r2, r3
 8009462:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <xTaskPriorityInherit+0xe8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4313      	orrs	r3, r2
 8009468:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <xTaskPriorityInherit+0xe8>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4a10      	ldr	r2, [pc, #64]	; (80094bc <xTaskPriorityInherit+0xe4>)
 800947a:	441a      	add	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fba2 	bl	8007bcc <vListInsertEnd>
 8009488:	e004      	b.n	8009494 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800948a:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <xTaskPriorityInherit+0xe0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e008      	b.n	80094ac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800949e:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <xTaskPriorityInherit+0xe0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d201      	bcs.n	80094ac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094ac:	68fb      	ldr	r3, [r7, #12]
	}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20001cd8 	.word	0x20001cd8
 80094bc:	20001cdc 	.word	0x20001cdc
 80094c0:	20001de0 	.word	0x20001de0

080094c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d06e      	beq.n	80095b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094da:	4b3a      	ldr	r3, [pc, #232]	; (80095c4 <xTaskPriorityDisinherit+0x100>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d00a      	beq.n	80094fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	60fb      	str	r3, [r7, #12]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60bb      	str	r3, [r7, #8]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	429a      	cmp	r2, r3
 800952c:	d044      	beq.n	80095b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	2b00      	cmp	r3, #0
 8009534:	d140      	bne.n	80095b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3304      	adds	r3, #4
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fba3 	bl	8007c86 <uxListRemove>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d115      	bne.n	8009572 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954a:	491f      	ldr	r1, [pc, #124]	; (80095c8 <xTaskPriorityDisinherit+0x104>)
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <xTaskPriorityDisinherit+0xae>
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	2201      	movs	r2, #1
 8009562:	fa02 f303 	lsl.w	r3, r2, r3
 8009566:	43da      	mvns	r2, r3
 8009568:	4b18      	ldr	r3, [pc, #96]	; (80095cc <xTaskPriorityDisinherit+0x108>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4013      	ands	r3, r2
 800956e:	4a17      	ldr	r2, [pc, #92]	; (80095cc <xTaskPriorityDisinherit+0x108>)
 8009570:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	f1c3 0207 	rsb	r2, r3, #7
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	2201      	movs	r2, #1
 800958c:	409a      	lsls	r2, r3
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <xTaskPriorityDisinherit+0x108>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4313      	orrs	r3, r2
 8009594:	4a0d      	ldr	r2, [pc, #52]	; (80095cc <xTaskPriorityDisinherit+0x108>)
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <xTaskPriorityDisinherit+0x104>)
 80095a6:	441a      	add	r2, r3
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fe fb0c 	bl	8007bcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095b4:	2301      	movs	r3, #1
 80095b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095b8:	697b      	ldr	r3, [r7, #20]
	}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20001cd8 	.word	0x20001cd8
 80095c8:	20001cdc 	.word	0x20001cdc
 80095cc:	20001de0 	.word	0x20001de0

080095d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80095de:	2301      	movs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d077      	beq.n	80096d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	60fb      	str	r3, [r7, #12]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d902      	bls.n	8009616 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e002      	b.n	800961c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	429a      	cmp	r2, r3
 8009624:	d058      	beq.n	80096d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	429a      	cmp	r2, r3
 800962e:	d153      	bne.n	80096d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009630:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	429a      	cmp	r2, r3
 8009638:	d10a      	bne.n	8009650 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60bb      	str	r3, [r7, #8]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	db04      	blt.n	800966e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f1c3 0207 	rsb	r2, r3, #7
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	6959      	ldr	r1, [r3, #20]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800967e:	4413      	add	r3, r2
 8009680:	4299      	cmp	r1, r3
 8009682:	d129      	bne.n	80096d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	3304      	adds	r3, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fafc 	bl	8007c86 <uxListRemove>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	2201      	movs	r2, #1
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	43da      	mvns	r2, r3
 80096a0:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4013      	ands	r3, r2
 80096a6:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80096a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	2201      	movs	r2, #1
 80096b0:	409a      	lsls	r2, r3
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	4a0b      	ldr	r2, [pc, #44]	; (80096e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a06      	ldr	r2, [pc, #24]	; (80096e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80096ca:	441a      	add	r2, r3
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fa7a 	bl	8007bcc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096d8:	bf00      	nop
 80096da:	3720      	adds	r7, #32
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20001cd8 	.word	0x20001cd8
 80096e4:	20001cdc 	.word	0x20001cdc
 80096e8:	20001de0 	.word	0x20001de0

080096ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <pvTaskIncrementMutexHeldCount+0x24>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <pvTaskIncrementMutexHeldCount+0x24>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096fe:	3201      	adds	r2, #1
 8009700:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009702:	4b03      	ldr	r3, [pc, #12]	; (8009710 <pvTaskIncrementMutexHeldCount+0x24>)
 8009704:	681b      	ldr	r3, [r3, #0]
	}
 8009706:	4618      	mov	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	20001cd8 	.word	0x20001cd8

08009714 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800971e:	4b29      	ldr	r3, [pc, #164]	; (80097c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009724:	4b28      	ldr	r3, [pc, #160]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3304      	adds	r3, #4
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe faab 	bl	8007c86 <uxListRemove>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009736:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	2201      	movs	r2, #1
 800973e:	fa02 f303 	lsl.w	r3, r2, r3
 8009742:	43da      	mvns	r2, r3
 8009744:	4b21      	ldr	r3, [pc, #132]	; (80097cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4013      	ands	r3, r2
 800974a:	4a20      	ldr	r2, [pc, #128]	; (80097cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800974c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009754:	d10a      	bne.n	800976c <prvAddCurrentTaskToDelayedList+0x58>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3304      	adds	r3, #4
 8009762:	4619      	mov	r1, r3
 8009764:	481a      	ldr	r0, [pc, #104]	; (80097d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009766:	f7fe fa31 	bl	8007bcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800976a:	e026      	b.n	80097ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009774:	4b14      	ldr	r3, [pc, #80]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d209      	bcs.n	8009798 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009784:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3304      	adds	r3, #4
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7fe fa3f 	bl	8007c14 <vListInsert>
}
 8009796:	e010      	b.n	80097ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009798:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe fa35 	bl	8007c14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097aa:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d202      	bcs.n	80097ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80097b4:	4a09      	ldr	r2, [pc, #36]	; (80097dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6013      	str	r3, [r2, #0]
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20001ddc 	.word	0x20001ddc
 80097c8:	20001cd8 	.word	0x20001cd8
 80097cc:	20001de0 	.word	0x20001de0
 80097d0:	20001dc4 	.word	0x20001dc4
 80097d4:	20001d94 	.word	0x20001d94
 80097d8:	20001d90 	.word	0x20001d90
 80097dc:	20001df8 	.word	0x20001df8

080097e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3b04      	subs	r3, #4
 80097f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3b04      	subs	r3, #4
 80097fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f023 0201 	bic.w	r2, r3, #1
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3b04      	subs	r3, #4
 800980e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009810:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <pxPortInitialiseStack+0x64>)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3b14      	subs	r3, #20
 800981a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3b04      	subs	r3, #4
 8009826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f06f 0202 	mvn.w	r2, #2
 800982e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3b20      	subs	r3, #32
 8009834:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	08009849 	.word	0x08009849

08009848 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <prvTaskExitError+0x54>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985a:	d00a      	beq.n	8009872 <prvTaskExitError+0x2a>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60fb      	str	r3, [r7, #12]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <prvTaskExitError+0x28>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60bb      	str	r3, [r7, #8]
}
 8009884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009886:	bf00      	nop
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0fc      	beq.n	8009888 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800988e:	bf00      	nop
 8009890:	bf00      	nop
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	200000a4 	.word	0x200000a4

080098a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <pxCurrentTCBConst2>)
 80098a2:	6819      	ldr	r1, [r3, #0]
 80098a4:	6808      	ldr	r0, [r1, #0]
 80098a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098aa:	f380 8809 	msr	PSP, r0
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f04f 0000 	mov.w	r0, #0
 80098b6:	f380 8811 	msr	BASEPRI, r0
 80098ba:	4770      	bx	lr
 80098bc:	f3af 8000 	nop.w

080098c0 <pxCurrentTCBConst2>:
 80098c0:	20001cd8 	.word	0x20001cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop

080098c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098c8:	4808      	ldr	r0, [pc, #32]	; (80098ec <prvPortStartFirstTask+0x24>)
 80098ca:	6800      	ldr	r0, [r0, #0]
 80098cc:	6800      	ldr	r0, [r0, #0]
 80098ce:	f380 8808 	msr	MSP, r0
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	f380 8814 	msr	CONTROL, r0
 80098da:	b662      	cpsie	i
 80098dc:	b661      	cpsie	f
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	df00      	svc	0
 80098e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ea:	bf00      	nop
 80098ec:	e000ed08 	.word	0xe000ed08

080098f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098f6:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <xPortStartScheduler+0x120>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a46      	ldr	r2, [pc, #280]	; (8009a14 <xPortStartScheduler+0x124>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d10a      	bne.n	8009916 <xPortStartScheduler+0x26>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	613b      	str	r3, [r7, #16]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009916:	4b3e      	ldr	r3, [pc, #248]	; (8009a10 <xPortStartScheduler+0x120>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a3f      	ldr	r2, [pc, #252]	; (8009a18 <xPortStartScheduler+0x128>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d10a      	bne.n	8009936 <xPortStartScheduler+0x46>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60fb      	str	r3, [r7, #12]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009936:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <xPortStartScheduler+0x12c>)
 8009938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	22ff      	movs	r2, #255	; 0xff
 8009946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009958:	b2da      	uxtb	r2, r3
 800995a:	4b31      	ldr	r3, [pc, #196]	; (8009a20 <xPortStartScheduler+0x130>)
 800995c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800995e:	4b31      	ldr	r3, [pc, #196]	; (8009a24 <xPortStartScheduler+0x134>)
 8009960:	2207      	movs	r2, #7
 8009962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009964:	e009      	b.n	800997a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009966:	4b2f      	ldr	r3, [pc, #188]	; (8009a24 <xPortStartScheduler+0x134>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3b01      	subs	r3, #1
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <xPortStartScheduler+0x134>)
 800996e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	b2db      	uxtb	r3, r3
 8009978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d0ef      	beq.n	8009966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009986:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <xPortStartScheduler+0x134>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f1c3 0307 	rsb	r3, r3, #7
 800998e:	2b04      	cmp	r3, #4
 8009990:	d00a      	beq.n	80099a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	60bb      	str	r3, [r7, #8]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099a8:	4b1e      	ldr	r3, [pc, #120]	; (8009a24 <xPortStartScheduler+0x134>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <xPortStartScheduler+0x134>)
 80099b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <xPortStartScheduler+0x134>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099ba:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <xPortStartScheduler+0x134>)
 80099bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099c6:	4b18      	ldr	r3, [pc, #96]	; (8009a28 <xPortStartScheduler+0x138>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a17      	ldr	r2, [pc, #92]	; (8009a28 <xPortStartScheduler+0x138>)
 80099cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099d2:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <xPortStartScheduler+0x138>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a14      	ldr	r2, [pc, #80]	; (8009a28 <xPortStartScheduler+0x138>)
 80099d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099de:	f000 f8dd 	bl	8009b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099e2:	4b12      	ldr	r3, [pc, #72]	; (8009a2c <xPortStartScheduler+0x13c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099e8:	f000 f8fc 	bl	8009be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099ec:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <xPortStartScheduler+0x140>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a0f      	ldr	r2, [pc, #60]	; (8009a30 <xPortStartScheduler+0x140>)
 80099f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099f8:	f7ff ff66 	bl	80098c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099fc:	f7ff fa88 	bl	8008f10 <vTaskSwitchContext>
	prvTaskExitError();
 8009a00:	f7ff ff22 	bl	8009848 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000ed00 	.word	0xe000ed00
 8009a14:	410fc271 	.word	0x410fc271
 8009a18:	410fc270 	.word	0x410fc270
 8009a1c:	e000e400 	.word	0xe000e400
 8009a20:	20001e04 	.word	0x20001e04
 8009a24:	20001e08 	.word	0x20001e08
 8009a28:	e000ed20 	.word	0xe000ed20
 8009a2c:	200000a4 	.word	0x200000a4
 8009a30:	e000ef34 	.word	0xe000ef34

08009a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	607b      	str	r3, [r7, #4]
}
 8009a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <vPortEnterCritical+0x58>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3301      	adds	r3, #1
 8009a54:	4a0d      	ldr	r2, [pc, #52]	; (8009a8c <vPortEnterCritical+0x58>)
 8009a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a58:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <vPortEnterCritical+0x58>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d10f      	bne.n	8009a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <vPortEnterCritical+0x5c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	603b      	str	r3, [r7, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <vPortEnterCritical+0x4a>
	}
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	200000a4 	.word	0x200000a4
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a9a:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <vPortExitCritical+0x50>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10a      	bne.n	8009ab8 <vPortExitCritical+0x24>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	607b      	str	r3, [r7, #4]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <vPortExitCritical+0x50>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <vPortExitCritical+0x50>)
 8009ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <vPortExitCritical+0x50>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <vPortExitCritical+0x42>
 8009aca:	2300      	movs	r3, #0
 8009acc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	200000a4 	.word	0x200000a4
	...

08009af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009af0:	f3ef 8009 	mrs	r0, PSP
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <pxCurrentTCBConst>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	f01e 0f10 	tst.w	lr, #16
 8009b00:	bf08      	it	eq
 8009b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0a:	6010      	str	r0, [r2, #0]
 8009b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b14:	f380 8811 	msr	BASEPRI, r0
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f7ff f9f6 	bl	8008f10 <vTaskSwitchContext>
 8009b24:	f04f 0000 	mov.w	r0, #0
 8009b28:	f380 8811 	msr	BASEPRI, r0
 8009b2c:	bc09      	pop	{r0, r3}
 8009b2e:	6819      	ldr	r1, [r3, #0]
 8009b30:	6808      	ldr	r0, [r1, #0]
 8009b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b36:	f01e 0f10 	tst.w	lr, #16
 8009b3a:	bf08      	it	eq
 8009b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b40:	f380 8809 	msr	PSP, r0
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w

08009b50 <pxCurrentTCBConst>:
 8009b50:	20001cd8 	.word	0x20001cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop

08009b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	607b      	str	r3, [r7, #4]
}
 8009b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b72:	f7ff f915 	bl	8008da0 <xTaskIncrementTick>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b7c:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <SysTick_Handler+0x40>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	2300      	movs	r3, #0
 8009b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	f383 8811 	msr	BASEPRI, r3
}
 8009b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	e000ed04 	.word	0xe000ed04

08009b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ba0:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <vPortSetupTimerInterrupt+0x34>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <vPortSetupTimerInterrupt+0x38>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <vPortSetupTimerInterrupt+0x3c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <vPortSetupTimerInterrupt+0x40>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	099b      	lsrs	r3, r3, #6
 8009bb8:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <vPortSetupTimerInterrupt+0x44>)
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bbe:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <vPortSetupTimerInterrupt+0x34>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	e000e010 	.word	0xe000e010
 8009bd4:	e000e018 	.word	0xe000e018
 8009bd8:	20000004 	.word	0x20000004
 8009bdc:	10624dd3 	.word	0x10624dd3
 8009be0:	e000e014 	.word	0xe000e014

08009be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bf4 <vPortEnableVFP+0x10>
 8009be8:	6801      	ldr	r1, [r0, #0]
 8009bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bee:	6001      	str	r1, [r0, #0]
 8009bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bf2:	bf00      	nop
 8009bf4:	e000ed88 	.word	0xe000ed88

08009bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08a      	sub	sp, #40	; 0x28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c04:	f7ff f822 	bl	8008c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c08:	4b5b      	ldr	r3, [pc, #364]	; (8009d78 <pvPortMalloc+0x180>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c10:	f000 f920 	bl	8009e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c14:	4b59      	ldr	r3, [pc, #356]	; (8009d7c <pvPortMalloc+0x184>)
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 8093 	bne.w	8009d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01d      	beq.n	8009c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c28:	2208      	movs	r2, #8
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d014      	beq.n	8009c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f023 0307 	bic.w	r3, r3, #7
 8009c40:	3308      	adds	r3, #8
 8009c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <pvPortMalloc+0x6c>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	617b      	str	r3, [r7, #20]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d06e      	beq.n	8009d48 <pvPortMalloc+0x150>
 8009c6a:	4b45      	ldr	r3, [pc, #276]	; (8009d80 <pvPortMalloc+0x188>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d869      	bhi.n	8009d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c74:	4b43      	ldr	r3, [pc, #268]	; (8009d84 <pvPortMalloc+0x18c>)
 8009c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c78:	4b42      	ldr	r3, [pc, #264]	; (8009d84 <pvPortMalloc+0x18c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c7e:	e004      	b.n	8009c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <pvPortMalloc+0xa4>
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1f1      	bne.n	8009c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c9c:	4b36      	ldr	r3, [pc, #216]	; (8009d78 <pvPortMalloc+0x180>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d050      	beq.n	8009d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2208      	movs	r2, #8
 8009cac:	4413      	add	r3, r2
 8009cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d91f      	bls.n	8009d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	613b      	str	r3, [r7, #16]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d02:	69b8      	ldr	r0, [r7, #24]
 8009d04:	f000 f908 	bl	8009f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d08:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <pvPortMalloc+0x188>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	4a1b      	ldr	r2, [pc, #108]	; (8009d80 <pvPortMalloc+0x188>)
 8009d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <pvPortMalloc+0x188>)
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	; (8009d88 <pvPortMalloc+0x190>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d203      	bcs.n	8009d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d22:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <pvPortMalloc+0x188>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <pvPortMalloc+0x190>)
 8009d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <pvPortMalloc+0x184>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	431a      	orrs	r2, r3
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <pvPortMalloc+0x194>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	4a11      	ldr	r2, [pc, #68]	; (8009d8c <pvPortMalloc+0x194>)
 8009d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d48:	f7fe ff8e 	bl	8008c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <pvPortMalloc+0x174>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60fb      	str	r3, [r7, #12]
}
 8009d68:	bf00      	nop
 8009d6a:	e7fe      	b.n	8009d6a <pvPortMalloc+0x172>
	return pvReturn;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3728      	adds	r7, #40	; 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20006c34 	.word	0x20006c34
 8009d7c:	20006c48 	.word	0x20006c48
 8009d80:	20006c38 	.word	0x20006c38
 8009d84:	20006c2c 	.word	0x20006c2c
 8009d88:	20006c3c 	.word	0x20006c3c
 8009d8c:	20006c40 	.word	0x20006c40

08009d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d04d      	beq.n	8009e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009da2:	2308      	movs	r3, #8
 8009da4:	425b      	negs	r3, r3
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	4413      	add	r3, r2
 8009daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <vPortFree+0xb8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4013      	ands	r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <vPortFree+0x44>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	60fb      	str	r3, [r7, #12]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00a      	beq.n	8009df2 <vPortFree+0x62>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	60bb      	str	r3, [r7, #8]
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <vPortFree+0xb8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01e      	beq.n	8009e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11a      	bne.n	8009e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <vPortFree+0xb8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	43db      	mvns	r3, r3
 8009e12:	401a      	ands	r2, r3
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e18:	f7fe ff18 	bl	8008c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <vPortFree+0xbc>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4413      	add	r3, r2
 8009e26:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <vPortFree+0xbc>)
 8009e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e2a:	6938      	ldr	r0, [r7, #16]
 8009e2c:	f000 f874 	bl	8009f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <vPortFree+0xc0>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	4a06      	ldr	r2, [pc, #24]	; (8009e50 <vPortFree+0xc0>)
 8009e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e3a:	f7fe ff15 	bl	8008c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e3e:	bf00      	nop
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20006c48 	.word	0x20006c48
 8009e4c:	20006c38 	.word	0x20006c38
 8009e50:	20006c44 	.word	0x20006c44

08009e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e60:	4b27      	ldr	r3, [pc, #156]	; (8009f00 <prvHeapInit+0xac>)
 8009e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00c      	beq.n	8009e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3307      	adds	r3, #7
 8009e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <prvHeapInit+0xac>)
 8009e84:	4413      	add	r3, r2
 8009e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e8c:	4a1d      	ldr	r2, [pc, #116]	; (8009f04 <prvHeapInit+0xb0>)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e92:	4b1c      	ldr	r3, [pc, #112]	; (8009f04 <prvHeapInit+0xb0>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0307 	bic.w	r3, r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4a15      	ldr	r2, [pc, #84]	; (8009f08 <prvHeapInit+0xb4>)
 8009eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <prvHeapInit+0xb4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ebe:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <prvHeapInit+0xb4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	1ad2      	subs	r2, r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvHeapInit+0xb4>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <prvHeapInit+0xb8>)
 8009ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <prvHeapInit+0xbc>)
 8009eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <prvHeapInit+0xc0>)
 8009eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ef2:	601a      	str	r2, [r3, #0]
}
 8009ef4:	bf00      	nop
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	20001e0c 	.word	0x20001e0c
 8009f04:	20006c2c 	.word	0x20006c2c
 8009f08:	20006c34 	.word	0x20006c34
 8009f0c:	20006c3c 	.word	0x20006c3c
 8009f10:	20006c38 	.word	0x20006c38
 8009f14:	20006c48 	.word	0x20006c48

08009f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f20:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <prvInsertBlockIntoFreeList+0xac>)
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	e002      	b.n	8009f2c <prvInsertBlockIntoFreeList+0x14>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d8f7      	bhi.n	8009f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d108      	bne.n	8009f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	441a      	add	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	441a      	add	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d118      	bne.n	8009fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d00d      	beq.n	8009f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	441a      	add	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e008      	b.n	8009fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	e003      	b.n	8009fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d002      	beq.n	8009fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20006c2c 	.word	0x20006c2c
 8009fc8:	20006c34 	.word	0x20006c34

08009fcc <memset>:
 8009fcc:	4402      	add	r2, r0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d100      	bne.n	8009fd6 <memset+0xa>
 8009fd4:	4770      	bx	lr
 8009fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fda:	e7f9      	b.n	8009fd0 <memset+0x4>

08009fdc <_reclaim_reent>:
 8009fdc:	4b29      	ldr	r3, [pc, #164]	; (800a084 <_reclaim_reent+0xa8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4283      	cmp	r3, r0
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	d04b      	beq.n	800a080 <_reclaim_reent+0xa4>
 8009fe8:	69c3      	ldr	r3, [r0, #28]
 8009fea:	b143      	cbz	r3, 8009ffe <_reclaim_reent+0x22>
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d144      	bne.n	800a07c <_reclaim_reent+0xa0>
 8009ff2:	69e3      	ldr	r3, [r4, #28]
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	b111      	cbz	r1, 8009ffe <_reclaim_reent+0x22>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 f879 	bl	800a0f0 <_free_r>
 8009ffe:	6961      	ldr	r1, [r4, #20]
 800a000:	b111      	cbz	r1, 800a008 <_reclaim_reent+0x2c>
 800a002:	4620      	mov	r0, r4
 800a004:	f000 f874 	bl	800a0f0 <_free_r>
 800a008:	69e1      	ldr	r1, [r4, #28]
 800a00a:	b111      	cbz	r1, 800a012 <_reclaim_reent+0x36>
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 f86f 	bl	800a0f0 <_free_r>
 800a012:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a014:	b111      	cbz	r1, 800a01c <_reclaim_reent+0x40>
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f86a 	bl	800a0f0 <_free_r>
 800a01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01e:	b111      	cbz	r1, 800a026 <_reclaim_reent+0x4a>
 800a020:	4620      	mov	r0, r4
 800a022:	f000 f865 	bl	800a0f0 <_free_r>
 800a026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a028:	b111      	cbz	r1, 800a030 <_reclaim_reent+0x54>
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 f860 	bl	800a0f0 <_free_r>
 800a030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a032:	b111      	cbz	r1, 800a03a <_reclaim_reent+0x5e>
 800a034:	4620      	mov	r0, r4
 800a036:	f000 f85b 	bl	800a0f0 <_free_r>
 800a03a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a03c:	b111      	cbz	r1, 800a044 <_reclaim_reent+0x68>
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 f856 	bl	800a0f0 <_free_r>
 800a044:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a046:	b111      	cbz	r1, 800a04e <_reclaim_reent+0x72>
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 f851 	bl	800a0f0 <_free_r>
 800a04e:	6a23      	ldr	r3, [r4, #32]
 800a050:	b1b3      	cbz	r3, 800a080 <_reclaim_reent+0xa4>
 800a052:	4620      	mov	r0, r4
 800a054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a058:	4718      	bx	r3
 800a05a:	5949      	ldr	r1, [r1, r5]
 800a05c:	b941      	cbnz	r1, 800a070 <_reclaim_reent+0x94>
 800a05e:	3504      	adds	r5, #4
 800a060:	69e3      	ldr	r3, [r4, #28]
 800a062:	2d80      	cmp	r5, #128	; 0x80
 800a064:	68d9      	ldr	r1, [r3, #12]
 800a066:	d1f8      	bne.n	800a05a <_reclaim_reent+0x7e>
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 f841 	bl	800a0f0 <_free_r>
 800a06e:	e7c0      	b.n	8009ff2 <_reclaim_reent+0x16>
 800a070:	680e      	ldr	r6, [r1, #0]
 800a072:	4620      	mov	r0, r4
 800a074:	f000 f83c 	bl	800a0f0 <_free_r>
 800a078:	4631      	mov	r1, r6
 800a07a:	e7ef      	b.n	800a05c <_reclaim_reent+0x80>
 800a07c:	2500      	movs	r5, #0
 800a07e:	e7ef      	b.n	800a060 <_reclaim_reent+0x84>
 800a080:	bd70      	pop	{r4, r5, r6, pc}
 800a082:	bf00      	nop
 800a084:	200000f4 	.word	0x200000f4

0800a088 <__libc_init_array>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4d0d      	ldr	r5, [pc, #52]	; (800a0c0 <__libc_init_array+0x38>)
 800a08c:	4c0d      	ldr	r4, [pc, #52]	; (800a0c4 <__libc_init_array+0x3c>)
 800a08e:	1b64      	subs	r4, r4, r5
 800a090:	10a4      	asrs	r4, r4, #2
 800a092:	2600      	movs	r6, #0
 800a094:	42a6      	cmp	r6, r4
 800a096:	d109      	bne.n	800a0ac <__libc_init_array+0x24>
 800a098:	4d0b      	ldr	r5, [pc, #44]	; (800a0c8 <__libc_init_array+0x40>)
 800a09a:	4c0c      	ldr	r4, [pc, #48]	; (800a0cc <__libc_init_array+0x44>)
 800a09c:	f000 f880 	bl	800a1a0 <_init>
 800a0a0:	1b64      	subs	r4, r4, r5
 800a0a2:	10a4      	asrs	r4, r4, #2
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	42a6      	cmp	r6, r4
 800a0a8:	d105      	bne.n	800a0b6 <__libc_init_array+0x2e>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b0:	4798      	blx	r3
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	e7ee      	b.n	800a094 <__libc_init_array+0xc>
 800a0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ba:	4798      	blx	r3
 800a0bc:	3601      	adds	r6, #1
 800a0be:	e7f2      	b.n	800a0a6 <__libc_init_array+0x1e>
 800a0c0:	0800a3e4 	.word	0x0800a3e4
 800a0c4:	0800a3e4 	.word	0x0800a3e4
 800a0c8:	0800a3e4 	.word	0x0800a3e4
 800a0cc:	0800a3e8 	.word	0x0800a3e8

0800a0d0 <__retarget_lock_acquire_recursive>:
 800a0d0:	4770      	bx	lr

0800a0d2 <__retarget_lock_release_recursive>:
 800a0d2:	4770      	bx	lr

0800a0d4 <memcpy>:
 800a0d4:	440a      	add	r2, r1
 800a0d6:	4291      	cmp	r1, r2
 800a0d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0dc:	d100      	bne.n	800a0e0 <memcpy+0xc>
 800a0de:	4770      	bx	lr
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ea:	4291      	cmp	r1, r2
 800a0ec:	d1f9      	bne.n	800a0e2 <memcpy+0xe>
 800a0ee:	bd10      	pop	{r4, pc}

0800a0f0 <_free_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d044      	beq.n	800a180 <_free_r+0x90>
 800a0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a102:	bfb8      	it	lt
 800a104:	18e4      	addlt	r4, r4, r3
 800a106:	f000 f83f 	bl	800a188 <__malloc_lock>
 800a10a:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <_free_r+0x94>)
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x30>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a11c:	f000 b83a 	b.w	800a194 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x46>
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1961      	adds	r1, r4, r5
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1949      	addeq	r1, r1, r5
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x22>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x50>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x46>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1855      	adds	r5, r2, r1
 800a144:	42a5      	cmp	r5, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x70>
 800a148:	6824      	ldr	r4, [r4, #0]
 800a14a:	4421      	add	r1, r4
 800a14c:	1854      	adds	r4, r2, r1
 800a14e:	42a3      	cmp	r3, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x26>
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	440c      	add	r4, r1
 800a15c:	6014      	str	r4, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x26>
 800a160:	d902      	bls.n	800a168 <_free_r+0x78>
 800a162:	230c      	movs	r3, #12
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x26>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x26>
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	20006d88 	.word	0x20006d88

0800a188 <__malloc_lock>:
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <__malloc_lock+0x8>)
 800a18a:	f7ff bfa1 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	20006d84 	.word	0x20006d84

0800a194 <__malloc_unlock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_unlock+0x8>)
 800a196:	f7ff bf9c 	b.w	800a0d2 <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	20006d84 	.word	0x20006d84

0800a1a0 <_init>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	bf00      	nop
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr

0800a1ac <_fini>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr
