
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6cc  0800a6cc  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6d4  0800a6d4  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d8  0800a6d8  0001a6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800a6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000098cc  200000f8  0800a7d4  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00001104  200099c4  0800a7d4  000299c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cda  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a9e  00000000  00000000  00039e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001154  00000000  00000000  0003ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a028  00000000  00000000  000410a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da10  00000000  00000000  0005b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f2e  00000000  00000000  00078adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dd0  00000000  00000000  00111a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001177dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a490 	.word	0x0800a490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	0800a490 	.word	0x0800a490

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(500);  // wait for >40ms
 80004e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e4:	f008 fc88 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e8:	2030      	movs	r0, #48	; 0x30
 80004ea:	f000 f835 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ee:	2005      	movs	r0, #5
 80004f0:	f008 fc82 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f4:	2030      	movs	r0, #48	; 0x30
 80004f6:	f000 f82f 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004fa:	2001      	movs	r0, #1
 80004fc:	f008 fc7c 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x30);
 8000500:	2030      	movs	r0, #48	; 0x30
 8000502:	f000 f829 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000506:	200a      	movs	r0, #10
 8000508:	f008 fc76 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050c:	2020      	movs	r0, #32
 800050e:	f000 f823 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000512:	200a      	movs	r0, #10
 8000514:	f008 fc70 	bl	8008df8 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000518:	2028      	movs	r0, #40	; 0x28
 800051a:	f000 f81d 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f008 fc6a 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000524:	2008      	movs	r0, #8
 8000526:	f000 f817 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f008 fc64 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 8000530:	2001      	movs	r0, #1
 8000532:	f000 f811 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000536:	200a      	movs	r0, #10
 8000538:	f008 fc5e 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800053c:	2006      	movs	r0, #6
 800053e:	f000 f80b 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f008 fc58 	bl	8008df8 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000548:	200c      	movs	r0, #12
 800054a:	f000 f805 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f008 fc52 	bl	8008df8 <vTaskDelay>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f005 fac5 	bl	8005b34 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003b4 	.word	0x200003b4

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f005 fa95 	bl	8005b34 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003b4 	.word	0x200003b4

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 10;
 80006d4:	230a      	movs	r3, #10
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <vApplicationGetIdleTaskMemory+0x2c>)
 8000924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <vApplicationGetIdleTaskMemory+0x30>)
 800092a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000114 	.word	0x20000114
 8000944:	200001b4 	.word	0x200001b4

08000948 <game_set_led_output_array>:
void game_set_sensor_reader(sensor_reader_t reader){
    sensor_reader = reader;
    get_sensors = reader;
}

void game_set_led_output_array(led_color output_array[8][8]){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f003 fda1 	bl	8004498 <lighting_set_output>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <game_fsm>:


void game_fsm(){
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

    movement_fsm();
 8000962:	f000 fbcb 	bl	80010fc <movement_fsm>

    lighting_refresh();
 8000966:	f003 ff33 	bl	80047d0 <lighting_refresh>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <game_reset>:

void game_reset(){
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0

    engine_reset();
 8000972:	f002 fb57 	bl	8003024 <engine_reset>

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f004 f927 	bl	8004bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f893 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f9cb 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 f9a9 	bl	8000ce4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000992:	f000 f927 	bl	8000be4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000996:	f000 f8f7 	bl	8000b88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 800099a:	2200      	movs	r2, #0
 800099c:	2118      	movs	r1, #24
 800099e:	2014      	movs	r0, #20
 80009a0:	f007 fb78 	bl	8008094 <xQueueGenericCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <main+0xf0>)
 80009a8:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	2014      	movs	r0, #20
 80009b0:	f007 fb70 	bl	8008094 <xQueueGenericCreate>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <main+0xf4>)
 80009b8:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009ba:	2203      	movs	r2, #3
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f007 fb68 	bl	8008094 <xQueueGenericCreate>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <main+0xf8>)
 80009c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <main+0xfc>)
 80009cc:	1d3c      	adds	r4, r7, #4
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 f9da 	bl	8007d9a <osThreadCreate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <main+0x100>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(t_LCD, "t_LCD",
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <main+0x104>)
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <main+0x108>)
 80009fc:	f008 f831 	bl	8008a62 <xTaskCreate>
	tskIDLE_PRIORITY + 3,
	NULL);



	xTaskCreate(t_Timer, "t_Timer",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2304      	movs	r3, #4
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	491e      	ldr	r1, [pc, #120]	; (8000a88 <main+0x10c>)
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <main+0x110>)
 8000a10:	f008 f827 	bl	8008a62 <xTaskCreate>
	tskIDLE_PRIORITY + 4,
	NULL);



	xTaskCreate(t_Botones, "t_Botones",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	491b      	ldr	r1, [pc, #108]	; (8000a90 <main+0x114>)
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <main+0x118>)
 8000a24:	f008 f81d 	bl	8008a62 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4918      	ldr	r1, [pc, #96]	; (8000a98 <main+0x11c>)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <main+0x120>)
 8000a38:	f008 f813 	bl	8008a62 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_reed_scan_sensors, "t_reed_scan_sensors",
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2306      	movs	r3, #6
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4915      	ldr	r1, [pc, #84]	; (8000aa0 <main+0x124>)
 8000a4a:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <main+0x128>)
 8000a4c:	f008 f809 	bl	8008a62 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 6,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a50:	2300      	movs	r3, #0
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	2301      	movs	r3, #1
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a5e:	4912      	ldr	r1, [pc, #72]	; (8000aa8 <main+0x12c>)
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <main+0x130>)
 8000a62:	f007 fffe 	bl	8008a62 <xTaskCreate>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a66:	f007 f991 	bl	8007d8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000a6a:	e7fe      	b.n	8000a6a <main+0xee>
 8000a6c:	200004b4 	.word	0x200004b4
 8000a70:	200004b8 	.word	0x200004b8
 8000a74:	200004bc 	.word	0x200004bc
 8000a78:	0800a4fc 	.word	0x0800a4fc
 8000a7c:	200004b0 	.word	0x200004b0
 8000a80:	0800a4a8 	.word	0x0800a4a8
 8000a84:	08001881 	.word	0x08001881
 8000a88:	0800a4b0 	.word	0x0800a4b0
 8000a8c:	080017f9 	.word	0x080017f9
 8000a90:	0800a4b8 	.word	0x0800a4b8
 8000a94:	080018f1 	.word	0x080018f1
 8000a98:	0800a4c4 	.word	0x0800a4c4
 8000a9c:	080029b5 	.word	0x080029b5
 8000aa0:	0800a4d0 	.word	0x0800a4d0
 8000aa4:	080048f5 	.word	0x080048f5
 8000aa8:	0800a4e4 	.word	0x0800a4e4
 8000aac:	08001a35 	.word	0x08001a35

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 fbfc 	bl	800a2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <SystemClock_Config+0xd0>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <SystemClock_Config+0xd4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xd4>)
 8000afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SystemClock_Config+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b24:	2310      	movs	r3, #16
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b32:	2307      	movs	r3, #7
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 fb02 	bl	8006144 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f9de 	bl	8000f06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f005 fd64 	bl	8006634 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b72:	f000 f9c8 	bl	8000f06 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_I2C1_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x58>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000baa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc6:	f004 fe71 	bl	80058ac <HAL_I2C_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f999 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200003b4 	.word	0x200003b4
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	000186a0 	.word	0x000186a0

08000be4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b092      	sub	sp, #72	; 0x48
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fb54 	bl	800a2bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c16:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <MX_TIM1_Init+0xfc>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c28:	2268      	movs	r2, #104	; 0x68
 8000c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3e:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c40:	f005 fff2 	bl	8006c28 <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f95c 	bl	8000f06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c5e:	f006 ffa9 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c68:	f000 f94d 	bl	8000f06 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	220c      	movs	r2, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000c8e:	f006 fb99 	bl	80073c4 <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000c98:	f000 f935 	bl	8000f06 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000cc0:	f006 ffe6 	bl	8007c90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000cca:	f000 f91c 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM1_Init+0xf8>)
 8000cd0:	f000 fc88 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3748      	adds	r7, #72	; 0x48
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000408 	.word	0x20000408
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	203c      	movs	r0, #60	; 0x3c
 8000d0c:	f004 f85c 	bl	8004dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d10:	203c      	movs	r0, #60	; 0x3c
 8000d12:	f004 f875 	bl	8004e00 <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a61      	ldr	r2, [pc, #388]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2183      	movs	r1, #131	; 0x83
 8000dae:	4847      	ldr	r0, [pc, #284]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000db0:	f004 fd62 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000dba:	4845      	ldr	r0, [pc, #276]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000dbc:	f004 fd5c 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2141      	movs	r1, #65	; 0x41
 8000dc4:	4843      	ldr	r0, [pc, #268]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000dc6:	f004 fd57 	bl	8005878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	483a      	ldr	r0, [pc, #232]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000de2:	f004 fbad 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000de6:	2383      	movs	r3, #131	; 0x83
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4833      	ldr	r0, [pc, #204]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000dfe:	f004 fb9f 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e02:	2320      	movs	r3, #32
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000e1a:	f004 fb91 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = REED_4_Pin|REED_5_Pin|REED_8_Pin;
 8000e1e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000e38:	f004 fb82 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : REED_D_Pin */
  GPIO_InitStruct.Pin = REED_D_Pin;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REED_D_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481f      	ldr	r0, [pc, #124]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000e50:	f004 fb76 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 8000e54:	2341      	movs	r3, #65	; 0x41
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000e6c:	f004 fb68 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_C_Pin
                           REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_C_Pin
 8000e70:	f246 4330 	movw	r3, #25648	; 0x6430
 8000e74:	617b      	str	r3, [r7, #20]
                          |REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000e86:	f004 fb5b 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
  GPIO_InitStruct.Pin = BOTON_1_Pin|BOTON_2_Pin|BOTON_3_Pin;
 8000e8a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000ea0:	f004 fb4e 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000ea4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000eba:	f004 fb41 	bl	8005540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 ffa6 	bl	8007e32 <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <StartDefaultTask+0x8>

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f003 fe8d 	bl	8004c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0a:	b672      	cpsid	i
}
 8000f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f0e:	e7fe      	b.n	8000f0e <Error_Handler+0x8>

08000f10 <get_last_sensor_change>:

extern uint8_t reed_data[8];

extern game_state_t engine_game_state;

piece_change_t get_last_sensor_change(){
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0

    //get_sensors(new_sensor_state);


    piece_change_t ret = {0, NONE};
 8000f16:	2300      	movs	r3, #0
 8000f18:	713b      	strb	r3, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e054      	b.n	8000fce <get_last_sensor_change+0xbe>
        for (int file = 0; file < 8; file++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e04b      	b.n	8000fc2 <get_last_sensor_change+0xb2>
            char new_state = (reed_data[rank]&(1<<file)) != 0;
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <get_last_sensor_change+0xe4>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa42 f303 	asr.w	r3, r2, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <get_last_sensor_change+0xe8>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	fa42 f303 	asr.w	r3, r2, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f6a:	7afa      	ldrb	r2, [r7, #11]
 8000f6c:	7abb      	ldrb	r3, [r7, #10]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d024      	beq.n	8000fbc <get_last_sensor_change+0xac>
                ret.square_affected = COORD2SQ(rank, file);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <get_last_sensor_change+0x7e>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e000      	b.n	8000f90 <get_last_sensor_change+0x80>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00b      	b.n	8000fb0 <get_last_sensor_change+0xa0>
                    previous_sensor_state[i] = reed_data[i];
 8000f98:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <get_last_sensor_change+0xe4>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <get_last_sensor_change+0xe8>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	ddf0      	ble.n	8000f98 <get_last_sensor_change+0x88>
                }
                return ret;
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	813b      	strh	r3, [r7, #8]
 8000fba:	e00d      	b.n	8000fd8 <get_last_sensor_change+0xc8>
        for (int file = 0; file < 8; file++) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	ddb0      	ble.n	8000f2a <get_last_sensor_change+0x1a>
    for (int rank = 0; rank < 8; rank++) {
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	dda7      	ble.n	8000f24 <get_last_sensor_change+0x14>
            }
        }
    }
    return ret;
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	813b      	strh	r3, [r7, #8]
}
 8000fd8:	2300      	movs	r3, #0
 8000fda:	7a3a      	ldrb	r2, [r7, #8]
 8000fdc:	f362 0307 	bfi	r3, r2, #0, #8
 8000fe0:	7a7a      	ldrb	r2, [r7, #9]
 8000fe2:	f362 230f 	bfi	r3, r2, #8, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20001a24 	.word	0x20001a24
 8000ff8:	200004c0 	.word	0x200004c0

08000ffc <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	e044      	b.n	8001096 <is_board_ok+0x9a>
        for (int file = 0; file < 8; file++) {
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	e03b      	b.n	800108a <is_board_ok+0x8e>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <is_board_ok+0xac>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	fa42 f303 	asr.w	r3, r2, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d010      	beq.n	800104c <is_board_ok+0x50>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f8d4 	bl	80031e8 <engine_get_piece>
 8001040:	4603      	mov	r3, r0
 8001042:	2b06      	cmp	r3, #6
 8001044:	d102      	bne.n	800104c <is_board_ok+0x50>
                board_ok = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e01b      	b.n	8001084 <is_board_ok+0x88>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <is_board_ok+0xac>)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	fa42 f303 	asr.w	r3, r2, r3
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10f      	bne.n	8001084 <is_board_ok+0x88>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	b2da      	uxtb	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f002 f8b7 	bl	80031e8 <engine_get_piece>
 800107a:	4603      	mov	r3, r0
 800107c:	2b06      	cmp	r3, #6
 800107e:	d001      	beq.n	8001084 <is_board_ok+0x88>
                board_ok = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b07      	cmp	r3, #7
 800108e:	ddc0      	ble.n	8001012 <is_board_ok+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3301      	adds	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b07      	cmp	r3, #7
 800109a:	ddb7      	ble.n	800100c <is_board_ok+0x10>
            }
        }
    }
    return board_ok;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001a24 	.word	0x20001a24

080010ac <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e00f      	b.n	80010e4 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d102      	bne.n	80010de <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbeb      	blt.n	80010c4 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <movement_fsm>:

move_t cpu_movement;

char capturing = 0;

void movement_fsm(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 8001102:	f7ff ff05 	bl	8000f10 <get_last_sensor_change>
 8001106:	4603      	mov	r3, r0
 8001108:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 800110a:	4baa      	ldr	r3, [pc, #680]	; (80013b4 <movement_fsm+0x2b8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b09      	cmp	r3, #9
 8001110:	f200 8177 	bhi.w	8001402 <movement_fsm+0x306>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <movement_fsm+0x20>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001145 	.word	0x08001145
 8001120:	080011c5 	.word	0x080011c5
 8001124:	08001403 	.word	0x08001403
 8001128:	08001309 	.word	0x08001309
 800112c:	08001403 	.word	0x08001403
 8001130:	08001325 	.word	0x08001325
 8001134:	0800135b 	.word	0x0800135b
 8001138:	08001397 	.word	0x08001397
 800113c:	080013d5 	.word	0x080013d5
 8001140:	080013fb 	.word	0x080013fb
    {
    case WAIT_STATE:
        if(piece_change.piece_action == REMOVED){
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d131      	bne.n	80011ae <movement_fsm+0xb2>
            movement_state = PIECE_LIFTED_STATE;
 800114a:	4b9a      	ldr	r3, [pc, #616]	; (80013b4 <movement_fsm+0x2b8>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001150:	793a      	ldrb	r2, [r7, #4]
 8001152:	4b99      	ldr	r3, [pc, #612]	; (80013b8 <movement_fsm+0x2bc>)
 8001154:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves, 1);
 8001156:	2101      	movs	r1, #1
 8001158:	4898      	ldr	r0, [pc, #608]	; (80013bc <movement_fsm+0x2c0>)
 800115a:	f001 ff81 	bl	8003060 <engine_list_moves>
 800115e:	4603      	mov	r3, r0
 8001160:	4a97      	ldr	r2, [pc, #604]	; (80013c0 <movement_fsm+0x2c4>)
 8001162:	6013      	str	r3, [r2, #0]



            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 8001164:	4b94      	ldr	r3, [pc, #592]	; (80013b8 <movement_fsm+0x2bc>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4a95      	ldr	r2, [pc, #596]	; (80013c0 <movement_fsm+0x2c4>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4993      	ldr	r1, [pc, #588]	; (80013bc <movement_fsm+0x2c0>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff9c 	bl	80010ac <get_lifted_moves>
 8001174:	60b8      	str	r0, [r7, #8]

            if(lifted_piece_valid_moves == 0){
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <movement_fsm+0x8e>
                movement_state = ERROR_STATE;
 800117c:	4b8d      	ldr	r3, [pc, #564]	; (80013b4 <movement_fsm+0x2b8>)
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001182:	2002      	movs	r0, #2
 8001184:	f003 fac6 	bl	8004714 <lighting_set_state>
        }
        else if(piece_change.piece_action == PLACED){
            movement_state = ERROR_STATE;
            lighting_set_state(LIGHTING_ERROR_STATE);
        }
        break;
 8001188:	e13d      	b.n	8001406 <movement_fsm+0x30a>
                movement_state = PIECE_LIFTED_STATE;
 800118a:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <movement_fsm+0x2b8>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 8001190:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <movement_fsm+0x2bc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f003 facd 	bl	8004734 <lighting_piece_lifted_square>
                lighting_set_valid_moves(valid_moves, total_valid_moves);
 800119a:	4b89      	ldr	r3, [pc, #548]	; (80013c0 <movement_fsm+0x2c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4886      	ldr	r0, [pc, #536]	; (80013bc <movement_fsm+0x2c0>)
 80011a2:	f003 fae7 	bl	8004774 <lighting_set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 80011a6:	2001      	movs	r0, #1
 80011a8:	f003 fab4 	bl	8004714 <lighting_set_state>
        break;
 80011ac:	e12b      	b.n	8001406 <movement_fsm+0x30a>
        else if(piece_change.piece_action == PLACED){
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	f040 8128 	bne.w	8001406 <movement_fsm+0x30a>
            movement_state = ERROR_STATE;
 80011b6:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <movement_fsm+0x2b8>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 80011bc:	2002      	movs	r0, #2
 80011be:	f003 faa9 	bl	8004714 <lighting_set_state>
        break;
 80011c2:	e120      	b.n	8001406 <movement_fsm+0x30a>
    
    case PIECE_LIFTED_STATE:
        if(piece_change.piece_action == PLACED){
 80011c4:	797b      	ldrb	r3, [r7, #5]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d158      	bne.n	800127c <movement_fsm+0x180>
            move_t move_played;
            move_played.from = square_lifted;
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <movement_fsm+0x2bc>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f001 ff31 	bl	800303c <engine_move_piece>
 80011da:	4603      	mov	r3, r0
 80011dc:	73bb      	strb	r3, [r7, #14]
            if(capturing){
 80011de:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <movement_fsm+0x2c8>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d013      	beq.n	800120e <movement_fsm+0x112>
                if(cpu_player == COLOR_EMPTY){
 80011e6:	4b78      	ldr	r3, [pc, #480]	; (80013c8 <movement_fsm+0x2cc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d106      	bne.n	80011fc <movement_fsm+0x100>
                    movement_state = WAIT_STATE;
 80011ee:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <movement_fsm+0x2b8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
                    //printf("Eval: %d\n", engine_negamax_seach(engine_game_state, 1, MIN_EVAL, MAX_EVAL));
                    lighting_set_state(LIGHTING_IDLE_STATE);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f003 fa8d 	bl	8004714 <lighting_set_state>
 80011fa:	e005      	b.n	8001208 <movement_fsm+0x10c>
                }
                else{
                    movement_state = CPU_THINKING_STATE;
 80011fc:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <movement_fsm+0x2b8>)
 80011fe:	2205      	movs	r2, #5
 8001200:	701a      	strb	r2, [r3, #0]
                    lighting_set_state(LIGHTING_CPU_THINKING_STATE);
 8001202:	2004      	movs	r0, #4
 8001204:	f003 fa86 	bl	8004714 <lighting_set_state>
                }
                capturing = 0;
 8001208:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <movement_fsm+0x2c8>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
            }
            if(move_ok){
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d02c      	beq.n	800126e <movement_fsm+0x172>
                total_valid_moves = engine_list_moves(valid_moves, 1);
 8001214:	2101      	movs	r1, #1
 8001216:	4869      	ldr	r0, [pc, #420]	; (80013bc <movement_fsm+0x2c0>)
 8001218:	f001 ff22 	bl	8003060 <engine_list_moves>
 800121c:	4603      	mov	r3, r0
 800121e:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <movement_fsm+0x2c4>)
 8001220:	6013      	str	r3, [r2, #0]
                if(total_valid_moves == 0){
 8001222:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <movement_fsm+0x2c4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <movement_fsm+0x14e>
                    lighting_set_winner(1 - engine_game_state.side_to_move);
 800122a:	4b68      	ldr	r3, [pc, #416]	; (80013cc <movement_fsm+0x2d0>)
 800122c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001230:	f1c3 0301 	rsb	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f003 fa8c 	bl	8004754 <lighting_set_winner>
                    lighting_set_state(LIGHTING_GAME_FINISHED_STATE);
 800123c:	2008      	movs	r0, #8
 800123e:	f003 fa69 	bl	8004714 <lighting_set_state>
                    movement_state = GAME_FINISHED_STATE;
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <movement_fsm+0x2b8>)
 8001244:	2209      	movs	r2, #9
 8001246:	701a      	strb	r2, [r3, #0]
                movement_state = ERROR_STATE;
                lighting_set_state(LIGHTING_ERROR_STATE);
            }
        }
        
        break;
 8001248:	e0df      	b.n	800140a <movement_fsm+0x30e>
                    if(cpu_player == COLOR_EMPTY){
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <movement_fsm+0x2cc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d106      	bne.n	8001260 <movement_fsm+0x164>
                        movement_state = WAIT_STATE;
 8001252:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <movement_fsm+0x2b8>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
                        lighting_set_state(LIGHTING_IDLE_STATE);
 8001258:	2000      	movs	r0, #0
 800125a:	f003 fa5b 	bl	8004714 <lighting_set_state>
        break;
 800125e:	e0d4      	b.n	800140a <movement_fsm+0x30e>
                        movement_state = CPU_THINKING_STATE;
 8001260:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <movement_fsm+0x2b8>)
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
                        lighting_set_state(LIGHTING_CPU_THINKING_STATE);
 8001266:	2004      	movs	r0, #4
 8001268:	f003 fa54 	bl	8004714 <lighting_set_state>
        break;
 800126c:	e0cd      	b.n	800140a <movement_fsm+0x30e>
                movement_state = ERROR_STATE;
 800126e:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <movement_fsm+0x2b8>)
 8001270:	2203      	movs	r2, #3
 8001272:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001274:	2002      	movs	r0, #2
 8001276:	f003 fa4d 	bl	8004714 <lighting_set_state>
        break;
 800127a:	e0c6      	b.n	800140a <movement_fsm+0x30e>
        else if(piece_change.piece_action == REMOVED){
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 80c3 	bne.w	800140a <movement_fsm+0x30e>
            total_valid_moves = engine_list_moves(valid_moves, 1);
 8001284:	2101      	movs	r1, #1
 8001286:	484d      	ldr	r0, [pc, #308]	; (80013bc <movement_fsm+0x2c0>)
 8001288:	f001 feea 	bl	8003060 <engine_list_moves>
 800128c:	4603      	mov	r3, r0
 800128e:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <movement_fsm+0x2c4>)
 8001290:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e025      	b.n	80012e8 <movement_fsm+0x1ec>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 800129c:	4947      	ldr	r1, [pc, #284]	; (80013bc <movement_fsm+0x2c0>)
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <movement_fsm+0x2bc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d117      	bne.n	80012e2 <movement_fsm+0x1e6>
 80012b2:	4942      	ldr	r1, [pc, #264]	; (80013bc <movement_fsm+0x2c0>)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	3301      	adds	r3, #1
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	793b      	ldrb	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10c      	bne.n	80012e2 <movement_fsm+0x1e6>
                    captured_piece_is_valid = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fa30 	bl	8004734 <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 80012d4:	2003      	movs	r0, #3
 80012d6:	f003 fa1d 	bl	8004714 <lighting_set_state>
                    capturing = 1;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <movement_fsm+0x2c8>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
                    break;
 80012e0:	e007      	b.n	80012f2 <movement_fsm+0x1f6>
            for(int i = 0; i < total_valid_moves; i++){
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <movement_fsm+0x2c4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbd4      	blt.n	800129c <movement_fsm+0x1a0>
            if(!captured_piece_is_valid){
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 8088 	bne.w	800140a <movement_fsm+0x30e>
                movement_state = ERROR_STATE;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <movement_fsm+0x2b8>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001300:	2002      	movs	r0, #2
 8001302:	f003 fa07 	bl	8004714 <lighting_set_state>
        break;
 8001306:	e080      	b.n	800140a <movement_fsm+0x30e>

    case ERROR_STATE:
        board_ok = is_board_ok();
 8001308:	f7ff fe78 	bl	8000ffc <is_board_ok>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]

        if(board_ok){
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d07b      	beq.n	800140e <movement_fsm+0x312>
            movement_state = WAIT_STATE;
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <movement_fsm+0x2b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 800131c:	2000      	movs	r0, #0
 800131e:	f003 f9f9 	bl	8004714 <lighting_set_state>
        }
        break;
 8001322:	e074      	b.n	800140e <movement_fsm+0x312>

    case CPU_THINKING_STATE:
        cpu_movement = engine_search();
 8001324:	f002 f9be 	bl	80036a4 <engine_search>
 8001328:	4602      	mov	r2, r0
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <movement_fsm+0x2d4>)
 800132c:	4611      	mov	r1, r2
 800132e:	7019      	strb	r1, [r3, #0]
 8001330:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001334:	7059      	strb	r1, [r3, #1]
 8001336:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800133a:	709a      	strb	r2, [r3, #2]
        movement_state = CPU_LIFT_FROM_STATE;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <movement_fsm+0x2b8>)
 800133e:	2206      	movs	r2, #6
 8001340:	701a      	strb	r2, [r3, #0]
        lighting_set_cpu_movement(cpu_movement.from, cpu_movement.to);
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <movement_fsm+0x2d4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <movement_fsm+0x2d4>)
 8001348:	7852      	ldrb	r2, [r2, #1]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fa27 	bl	80047a0 <lighting_set_cpu_movement>
        lighting_set_state(LIGHTING_CPU_LIFT_FROM_STATE);
 8001352:	2005      	movs	r0, #5
 8001354:	f003 f9de 	bl	8004714 <lighting_set_state>
        /*
        if(engine_finished()){

        }
        */
        break;
 8001358:	e060      	b.n	800141c <movement_fsm+0x320>

    case CPU_LIFT_FROM_STATE:

        //Player must lift cpu piece
        if(piece_change.piece_action == REMOVED){
 800135a:	797b      	ldrb	r3, [r7, #5]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d158      	bne.n	8001412 <movement_fsm+0x316>
            if(piece_change.square_affected == cpu_movement.from){
 8001360:	793a      	ldrb	r2, [r7, #4]
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <movement_fsm+0x2d4>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d153      	bne.n	8001412 <movement_fsm+0x316>
                if(engine_get_piece(cpu_movement.to) != PIECE_EMPTY){
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <movement_fsm+0x2d4>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 ff3a 	bl	80031e8 <engine_get_piece>
 8001374:	4603      	mov	r3, r0
 8001376:	2b06      	cmp	r3, #6
 8001378:	d006      	beq.n	8001388 <movement_fsm+0x28c>
                    movement_state = CPU_LIFT_CAPTURED_STATE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <movement_fsm+0x2b8>)
 800137c:	2207      	movs	r2, #7
 800137e:	701a      	strb	r2, [r3, #0]
                    lighting_set_state(LIGHTING_CPU_LIFT_CAPTURED_STATE);
 8001380:	2006      	movs	r0, #6
 8001382:	f003 f9c7 	bl	8004714 <lighting_set_state>
                    lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
                    movement_state = CPU_PLACE_TO_STATE;
                }
            }
        }
        break;
 8001386:	e044      	b.n	8001412 <movement_fsm+0x316>
                    lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
 8001388:	2007      	movs	r0, #7
 800138a:	f003 f9c3 	bl	8004714 <lighting_set_state>
                    movement_state = CPU_PLACE_TO_STATE;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <movement_fsm+0x2b8>)
 8001390:	2208      	movs	r2, #8
 8001392:	701a      	strb	r2, [r3, #0]
        break;
 8001394:	e03d      	b.n	8001412 <movement_fsm+0x316>

    case CPU_LIFT_CAPTURED_STATE:
        //Player must lift cpu piece
        if(piece_change.piece_action == REMOVED){
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d13c      	bne.n	8001416 <movement_fsm+0x31a>
            if(piece_change.square_affected == cpu_movement.to){
 800139c:	793a      	ldrb	r2, [r7, #4]
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <movement_fsm+0x2d4>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d137      	bne.n	8001416 <movement_fsm+0x31a>
                movement_state = CPU_PLACE_TO_STATE;
 80013a6:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <movement_fsm+0x2b8>)
 80013a8:	2208      	movs	r2, #8
 80013aa:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_CPU_PLACE_TO_STATE);
 80013ac:	2007      	movs	r0, #7
 80013ae:	f003 f9b1 	bl	8004714 <lighting_set_state>
            }
        }
        break;
 80013b2:	e030      	b.n	8001416 <movement_fsm+0x31a>
 80013b4:	200004c8 	.word	0x200004c8
 80013b8:	200004c9 	.word	0x200004c9
 80013bc:	200004d0 	.word	0x200004d0
 80013c0:	200004cc 	.word	0x200004cc
 80013c4:	200007d3 	.word	0x200007d3
 80013c8:	20000000 	.word	0x20000000
 80013cc:	2000083c 	.word	0x2000083c
 80013d0:	200007d0 	.word	0x200007d0

    case CPU_PLACE_TO_STATE:
        //Player must lift cpu piece
        if(piece_change.piece_action == PLACED){
 80013d4:	797b      	ldrb	r3, [r7, #5]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d11f      	bne.n	800141a <movement_fsm+0x31e>
            if(piece_change.square_affected == cpu_movement.to){
 80013da:	793a      	ldrb	r2, [r7, #4]
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <movement_fsm+0x328>)
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d11a      	bne.n	800141a <movement_fsm+0x31e>
                movement_state = WAIT_STATE;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <movement_fsm+0x32c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
                engine_move_piece(cpu_movement);
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <movement_fsm+0x328>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f001 fe25 	bl	800303c <engine_move_piece>
                lighting_set_state(LIGHTING_IDLE_STATE);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f003 f98e 	bl	8004714 <lighting_set_state>
            }
        }
        break;
 80013f8:	e00f      	b.n	800141a <movement_fsm+0x31e>

    case GAME_FINISHED_STATE:
        lighting_set_state(GAME_FINISHED_STATE);
 80013fa:	2009      	movs	r0, #9
 80013fc:	f003 f98a 	bl	8004714 <lighting_set_state>
    break;
 8001400:	e00c      	b.n	800141c <movement_fsm+0x320>

    default:
        break;
 8001402:	bf00      	nop
 8001404:	e00a      	b.n	800141c <movement_fsm+0x320>
        break;
 8001406:	bf00      	nop
 8001408:	e008      	b.n	800141c <movement_fsm+0x320>
        break;
 800140a:	bf00      	nop
 800140c:	e006      	b.n	800141c <movement_fsm+0x320>
        break;
 800140e:	bf00      	nop
 8001410:	e004      	b.n	800141c <movement_fsm+0x320>
        break;
 8001412:	bf00      	nop
 8001414:	e002      	b.n	800141c <movement_fsm+0x320>
        break;
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <movement_fsm+0x320>
        break;
 800141a:	bf00      	nop
    }
}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200007d0 	.word	0x200007d0
 8001428:	200004c8 	.word	0x200004c8

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_MspInit+0x54>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_MspInit+0x54>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_MspInit+0x54>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_MspInit+0x54>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	210f      	movs	r1, #15
 800146e:	f06f 0001 	mvn.w	r0, #1
 8001472:	f003 fca9 	bl	8004dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_I2C_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_I2C_MspInit+0x8c>)
 80014e0:	f004 f82e 	bl	8005540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_I2C_MspInit+0x88>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d151      	bne.n	80015ca <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_TIM_PWM_MspInit+0xc4>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001544:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_TIM_PWM_MspInit+0xcc>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800154a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 8001588:	f003 fc48 	bl	8004e1c <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001592:	f7ff fcb8 	bl	8000f06 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_TIM_PWM_MspInit+0xc8>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2105      	movs	r1, #5
 80015be:	201a      	movs	r0, #26
 80015c0:	f003 fc02 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015c4:	201a      	movs	r0, #26
 80015c6:	f003 fc1b 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	20000450 	.word	0x20000450
 80015e0:	40026470 	.word	0x40026470

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_TIM_MspPostInit+0x68>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d11e      	bne.n	8001644 <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x6c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8001622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_TIM_MspPostInit+0x70>)
 8001640:	f003 ff7e 	bl	8005540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010000 	.word	0x40010000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_InitTick+0xe8>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a33      	ldr	r2, [pc, #204]	; (8001740 <HAL_InitTick+0xe8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_InitTick+0xe8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f005 f9dc 	bl	8006a4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800169e:	f005 f9c1 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 80016a2:	6378      	str	r0, [r7, #52]	; 0x34
 80016a4:	e004      	b.n	80016b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016a6:	f005 f9bd 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <HAL_InitTick+0xec>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	3b01      	subs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_InitTick+0xf0>)
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_InitTick+0xf0>)
 80016c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016cc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_InitTick+0xf0>)
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_InitTick+0xf0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_InitTick+0xf0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_InitTick+0xf0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80016e6:	4818      	ldr	r0, [pc, #96]	; (8001748 <HAL_InitTick+0xf0>)
 80016e8:	f005 f9e2 	bl	8006ab0 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11b      	bne.n	8001732 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80016fa:	4813      	ldr	r0, [pc, #76]	; (8001748 <HAL_InitTick+0xf0>)
 80016fc:	f005 fa32 	bl	8006b64 <HAL_TIM_Base_Start_IT>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800170a:	2b00      	cmp	r3, #0
 800170c:	d111      	bne.n	8001732 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800170e:	201c      	movs	r0, #28
 8001710:	f003 fb76 	bl	8004e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d808      	bhi.n	800172c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800171a:	2200      	movs	r2, #0
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	201c      	movs	r0, #28
 8001720:	f003 fb52 	bl	8004dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_InitTick+0xf4>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e002      	b.n	8001732 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001732:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001736:	4618      	mov	r0, r3
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	431bde83 	.word	0x431bde83
 8001748:	200007d4 	.word	0x200007d4
 800174c:	2000009c 	.word	0x2000009c

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>
	...

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  static volatile int junk = 0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(junk){
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HardFault_Handler+0x1c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d100      	bne.n	8001766 <HardFault_Handler+0xe>
 8001764:	e7fa      	b.n	800175c <HardFault_Handler+0x4>
		  break;
 8001766:	bf00      	nop
	  }
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000081c 	.word	0x2000081c

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800179e:	f005 fd09 	bl	80071b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000408 	.word	0x20000408

080017ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM2_IRQHandler+0x10>)
 80017b2:	f005 fcff 	bl	80071b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200007d4 	.word	0x200007d4

080017c0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA2_Stream4_IRQHandler+0x10>)
 80017c6:	f003 fc51 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000450 	.word	0x20000450

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <t_Timer>:
uint8_t modo_de_juego = 0, mostrar_tiempo = 0, contar = 0, actualizar_display =
		0;

uint32_t segundos_j1 = 0, segundos_j2 = 0, incremento = 0, delay = 0;

void t_Timer() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 1000; //1seg
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	607b      	str	r3, [r7, #4]
	while (1) {
		if (!get_error_position() && modo_de_juego == 1) {
 8001804:	f001 f94e 	bl	8002aa4 <get_error_position>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11b      	bne.n	8001846 <t_Timer+0x4e>
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <t_Timer+0x74>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d117      	bne.n	8001846 <t_Timer+0x4e>
			if (get_side_to_move() == 0) {
 8001816:	f001 f90d 	bl	8002a34 <get_side_to_move>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <t_Timer+0x3c>
				if (segundos_j1 > 0)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <t_Timer+0x78>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <t_Timer+0x4e>
					segundos_j1--;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <t_Timer+0x78>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <t_Timer+0x78>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e008      	b.n	8001846 <t_Timer+0x4e>
			}

			else {
				if (segundos_j2 > 0)
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <t_Timer+0x7c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <t_Timer+0x4e>
					segundos_j2--;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <t_Timer+0x7c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <t_Timer+0x7c>)
 8001844:	6013      	str	r3, [r2, #0]
			}

		}
		if(delay > 0)
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <t_Timer+0x80>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <t_Timer+0x60>
			delay--;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <t_Timer+0x80>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3b01      	subs	r3, #1
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <t_Timer+0x80>)
 8001856:	6013      	str	r3, [r2, #0]
		actualizar_display = 1;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <t_Timer+0x84>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800185e:	463b      	mov	r3, r7
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f007 fa4a 	bl	8008cfc <vTaskDelayUntil>
		if (!get_error_position() && modo_de_juego == 1) {
 8001868:	e7cc      	b.n	8001804 <t_Timer+0xc>
 800186a:	bf00      	nop
 800186c:	20000821 	.word	0x20000821
 8001870:	20000824 	.word	0x20000824
 8001874:	20000828 	.word	0x20000828
 8001878:	20000830 	.word	0x20000830
 800187c:	20000823 	.word	0x20000823

08001880 <t_LCD>:
	}
}

void t_LCD(void*) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <t_LCD+0x6c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <t_LCD+0x16>
		tareas_error_handler(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f001 f8b7 	bl	8002a04 <tareas_error_handler>
	}

	lcd_init();
 8001896:	f7fe fe21 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <t_LCD+0x6c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fd4c 	bl	8008344 <xQueueReceive>
		switch (msg.type) {
 80018ac:	7a3b      	ldrb	r3, [r7, #8]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d014      	beq.n	80018dc <t_LCD+0x5c>
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	dcf1      	bgt.n	800189a <t_LCD+0x1a>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <t_LCD+0x40>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d009      	beq.n	80018d2 <t_LCD+0x52>
 80018be:	e014      	b.n	80018ea <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 80018c0:	7a7b      	ldrb	r3, [r7, #9]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe48 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f007 fa94 	bl	8008df8 <vTaskDelay>
			break;
 80018d0:	e00b      	b.n	80018ea <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 80018d2:	7a7b      	ldrb	r3, [r7, #9]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe6f 	bl	80005b8 <lcd_send_data>
			break;
 80018da:	e006      	b.n	80018ea <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	3301      	adds	r3, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe98 	bl	8000618 <lcd_send_string>
			break;
 80018e8:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80018ea:	e7d6      	b.n	800189a <t_LCD+0x1a>
 80018ec:	200004b4 	.word	0x200004b4

080018f0 <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	2202      	movs	r2, #2
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe ff3c 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 8001906:	f107 0318 	add.w	r3, r7, #24
 800190a:	2202      	movs	r2, #2
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe ff35 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	2202      	movs	r2, #2
 800191a:	2101      	movs	r1, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe ff2e 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 8001922:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <t_Botones+0x13c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <t_Botones+0x40>
		tareas_error_handler(4);
 800192a:	2004      	movs	r0, #4
 800192c:	f001 f86a 	bl	8002a04 <tareas_error_handler>
	}

	uint8_t msg = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001934:	2140      	movs	r1, #64	; 0x40
 8001936:	483e      	ldr	r0, [pc, #248]	; (8001a30 <t_Botones+0x140>)
 8001938:	f003 ff86 	bl	8005848 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ff40 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4837      	ldr	r0, [pc, #220]	; (8001a30 <t_Botones+0x140>)
 8001952:	f003 ff79 	bl	8005848 <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe ff33 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 8001966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196a:	4831      	ldr	r0, [pc, #196]	; (8001a30 <t_Botones+0x140>)
 800196c:	f003 ff6c 	bl	8005848 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ff26 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) { // Boton arriba (no contra el tablero)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe ffa5 	bl	80008d4 <debounce_flank>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <t_Botones+0xc6>
			msg = 1;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <t_Botones+0x13c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f006 febf 	bl	800871c <uxQueueMessagesWaiting>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b13      	cmp	r3, #19
 80019a2:	d808      	bhi.n	80019b6 <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <t_Botones+0x13c>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	f107 010f 	add.w	r1, r7, #15
 80019ac:	2300      	movs	r3, #0
 80019ae:	f04f 32ff 	mov.w	r2, #4294967295
 80019b2:	f006 fbc9 	bl	8008148 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) { // Boton abajo (contra el tablero)
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe ff8a 	bl	80008d4 <debounce_flank>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <t_Botones+0xfc>
			msg = 2;
 80019c6:	2302      	movs	r3, #2
 80019c8:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <t_Botones+0x13c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f006 fea4 	bl	800871c <uxQueueMessagesWaiting>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b13      	cmp	r3, #19
 80019d8:	d808      	bhi.n	80019ec <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <t_Botones+0x13c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f107 010f 	add.w	r1, r7, #15
 80019e2:	2300      	movs	r3, #0
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	f006 fbae 	bl	8008148 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) { // Boton verde
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe ff6f 	bl	80008d4 <debounce_flank>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <t_Botones+0x132>
			msg = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <t_Botones+0x13c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 fe89 	bl	800871c <uxQueueMessagesWaiting>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b13      	cmp	r3, #19
 8001a0e:	d808      	bhi.n	8001a22 <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <t_Botones+0x13c>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	f107 010f 	add.w	r1, r7, #15
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	f006 fb93 	bl	8008148 <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 8001a22:	200a      	movs	r0, #10
 8001a24:	f007 f9e8 	bl	8008df8 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001a28:	e784      	b.n	8001934 <t_Botones+0x44>
 8001a2a:	bf00      	nop
 8001a2c:	200004b8 	.word	0x200004b8
 8001a30:	40020800 	.word	0x40020800

08001a34 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b096      	sub	sp, #88	; 0x58
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001a3c:	4ba3      	ldr	r3, [pc, #652]	; (8001ccc <t_userLoop+0x298>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <t_userLoop+0x16>
		tareas_error_handler(2);
 8001a44:	2002      	movs	r0, #2
 8001a46:	f000 ffdd 	bl	8002a04 <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001a4a:	4ba1      	ldr	r3, [pc, #644]	; (8001cd0 <t_userLoop+0x29c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <t_userLoop+0x24>
		tareas_error_handler(4);
 8001a52:	2004      	movs	r0, #4
 8001a54:	f000 ffd6 	bl	8002a04 <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 8001a58:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <t_userLoop+0x2a0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <t_userLoop+0x32>
		tareas_error_handler(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f000 ffcf 	bl	8002a04 <tareas_error_handler>
	}

	user_htim1 = &htim1;
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <t_userLoop+0x2a4>)
 8001a68:	4a9c      	ldr	r2, [pc, #624]	; (8001cdc <t_userLoop+0x2a8>)
 8001a6a:	601a      	str	r2, [r3, #0]
	user_init();
 8001a6c:	f000 ffd2 	bl	8002a14 <user_init>

	ws2812_init();
 8001a70:	f002 fc58 	bl	8004324 <ws2812_init>

	uint8_t button = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 33; // 30fps aprox
 8001a7a:	2321      	movs	r3, #33	; 0x21
 8001a7c:	653b      	str	r3, [r7, #80]	; 0x50

	LCDQueueItem_t msg = { 0 };
 8001a7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	615a      	str	r2, [r3, #20]

	char msg_tiempo[] = "-> JX - XX:XX    ";
 8001a90:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <t_userLoop+0x2ac>)
 8001a92:	f107 0420 	add.w	r4, r7, #32
 8001a96:	461d      	mov	r5, r3
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	8023      	strh	r3, [r4, #0]

	uint8_t prev_side_to_move = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	xQueueSend(buttons_queue, &button, 0);
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <t_userLoop+0x29c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f006 fb49 	bl	8008148 <xQueueGenericSend>

	while (1) {
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001ab6:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <t_userLoop+0x29c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f006 fc3f 	bl	8008344 <xQueueReceive>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d104      	bne.n	8001ad6 <t_userLoop+0xa2>
			ME_general(button);
 8001acc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f9d1 	bl	8001e78 <ME_general>
		}

		switch (modo_de_juego) {
 8001ad6:	4b83      	ldr	r3, [pc, #524]	; (8001ce4 <t_userLoop+0x2b0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	f200 81b1 	bhi.w	8001e42 <t_userLoop+0x40e>
 8001ae0:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <t_userLoop+0xb4>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001e43 	.word	0x08001e43
 8001aec:	08001af9 	.word	0x08001af9
 8001af0:	08001e11 	.word	0x08001e11
 8001af4:	08001e43 	.word	0x08001e43
		case 0:
			break;
		case 1:
			set_cpu_player(0);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 ffbd 	bl	8002a78 <set_cpu_player>
			user_loop(); // FSM CHESS
 8001afe:	f001 f905 	bl	8002d0c <user_loop>

			// Detecto si hubo un cambio de turno para sumar incremento de tiempo
			if (prev_side_to_move != get_side_to_move()) {
 8001b02:	f000 ff97 	bl	8002a34 <get_side_to_move>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d017      	beq.n	8001b42 <t_userLoop+0x10e>
				prev_side_to_move = get_side_to_move();
 8001b12:	f000 ff8f 	bl	8002a34 <get_side_to_move>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if (prev_side_to_move)
 8001b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <t_userLoop+0x100>
					segundos_j1 += incremento;
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <t_userLoop+0x2b4>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <t_userLoop+0x2b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <t_userLoop+0x2b4>)
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e006      	b.n	8001b42 <t_userLoop+0x10e>
				else
					segundos_j2 += incremento;
 8001b34:	4b6e      	ldr	r3, [pc, #440]	; (8001cf0 <t_userLoop+0x2bc>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <t_userLoop+0x2b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a6c      	ldr	r2, [pc, #432]	; (8001cf0 <t_userLoop+0x2bc>)
 8001b40:	6013      	str	r3, [r2, #0]
			}

			//Imprimo tiempos si tengo que hacerlo
			if (actualizar_display && mostrar_tiempo && delay == 0) {
 8001b42:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <t_userLoop+0x2c0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 814e 	beq.w	8001de8 <t_userLoop+0x3b4>
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <t_userLoop+0x2c4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8149 	beq.w	8001de8 <t_userLoop+0x3b4>
 8001b56:	4b69      	ldr	r3, [pc, #420]	; (8001cfc <t_userLoop+0x2c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8144 	bne.w	8001de8 <t_userLoop+0x3b4>
				actualizar_display = 0;
 8001b60:	4b64      	ldr	r3, [pc, #400]	; (8001cf4 <t_userLoop+0x2c0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
				msg = lcd_msg_first_line();
 8001b66:	463b      	mov	r3, r7
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fdc4 	bl	80006f6 <lcd_msg_first_line>
 8001b6e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001b72:	463d      	mov	r5, r7
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b7c:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b80:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <t_userLoop+0x2a0>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	f006 fadb 	bl	8008148 <xQueueGenericSend>

				if (get_side_to_move() == 0) {
 8001b92:	f000 ff4f 	bl	8002a34 <get_side_to_move>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <t_userLoop+0x176>
					msg_tiempo[0] = '-';
 8001b9c:	232d      	movs	r3, #45	; 0x2d
 8001b9e:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = '>';
 8001ba2:	233e      	movs	r3, #62	; 0x3e
 8001ba4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001ba8:	e005      	b.n	8001bb6 <t_userLoop+0x182>
				} else {
					msg_tiempo[0] = ' ';
 8001baa:	2320      	movs	r3, #32
 8001bac:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = ' ';
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				}

				// char * msg_tiempo = "JX - XX:XX";
				msg_tiempo[4] = '1';
 8001bb6:	2331      	movs	r3, #49	; 0x31
 8001bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				msg_tiempo[8] = ((segundos_j1 / 60) / 10) + 48;
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <t_userLoop+0x2b4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <t_userLoop+0x2cc>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3330      	adds	r3, #48	; 0x30
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[9] = ((segundos_j1 / 60) % 10) + 48;
 8001bd2:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <t_userLoop+0x2b4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <t_userLoop+0x2d0>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0959      	lsrs	r1, r3, #5
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <t_userLoop+0x2d4>)
 8001be0:	fba3 2301 	umull	r2, r3, r3, r1
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	1aca      	subs	r2, r1, r3
 8001bf0:	b2d3      	uxtb	r3, r2
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				msg_tiempo[11] = ((segundos_j1 % 60) / 10) + 48;
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <t_userLoop+0x2b4>)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <t_userLoop+0x2d0>)
 8001c00:	fba3 2301 	umull	r2, r3, r3, r1
 8001c04:	095a      	lsrs	r2, r3, #5
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	1aca      	subs	r2, r1, r3
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <t_userLoop+0x2d4>)
 8001c12:	fba3 2302 	umull	r2, r3, r3, r2
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3330      	adds	r3, #48	; 0x30
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				msg_tiempo[12] = ((segundos_j1 % 60) % 10) + 48;
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <t_userLoop+0x2b4>)
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <t_userLoop+0x2d0>)
 8001c28:	fba3 2301 	umull	r2, r3, r3, r1
 8001c2c:	095a      	lsrs	r2, r3, #5
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	1aca      	subs	r2, r1, r3
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <t_userLoop+0x2d4>)
 8001c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c3e:	08d9      	lsrs	r1, r3, #3
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	1ad1      	subs	r1, r2, r3
 8001c4a:	b2cb      	uxtb	r3, r1
 8001c4c:	3330      	adds	r3, #48	; 0x30
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				msg = lcd_msg_from_string(msg_tiempo);
 8001c54:	463b      	mov	r3, r7
 8001c56:	f107 0220 	add.w	r2, r7, #32
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fcf0 	bl	8000642 <lcd_msg_from_string>
 8001c62:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c66:	463d      	mov	r5, r7
 8001c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c70:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <t_userLoop+0x2a0>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c82:	f006 fa61 	bl	8008148 <xQueueGenericSend>
				msg = lcd_msg_second_line();
 8001c86:	463b      	mov	r3, r7
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fd56 	bl	800073a <lcd_msg_second_line>
 8001c8e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001c92:	463d      	mov	r5, r7
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9c:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <t_userLoop+0x2a0>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cae:	f006 fa4b 	bl	8008148 <xQueueGenericSend>

				if (get_side_to_move() == 1) {
 8001cb2:	f000 febf 	bl	8002a34 <get_side_to_move>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d127      	bne.n	8001d0c <t_userLoop+0x2d8>
					msg_tiempo[0] = '-';
 8001cbc:	232d      	movs	r3, #45	; 0x2d
 8001cbe:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = '>';
 8001cc2:	233e      	movs	r3, #62	; 0x3e
 8001cc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001cc8:	e026      	b.n	8001d18 <t_userLoop+0x2e4>
 8001cca:	bf00      	nop
 8001ccc:	200004bc 	.word	0x200004bc
 8001cd0:	200004b8 	.word	0x200004b8
 8001cd4:	200004b4 	.word	0x200004b4
 8001cd8:	20000838 	.word	0x20000838
 8001cdc:	20000408 	.word	0x20000408
 8001ce0:	0800a518 	.word	0x0800a518
 8001ce4:	20000821 	.word	0x20000821
 8001ce8:	20000824 	.word	0x20000824
 8001cec:	2000082c 	.word	0x2000082c
 8001cf0:	20000828 	.word	0x20000828
 8001cf4:	20000823 	.word	0x20000823
 8001cf8:	20000822 	.word	0x20000822
 8001cfc:	20000830 	.word	0x20000830
 8001d00:	1b4e81b5 	.word	0x1b4e81b5
 8001d04:	88888889 	.word	0x88888889
 8001d08:	cccccccd 	.word	0xcccccccd
				} else {
					msg_tiempo[0] = ' ';
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	f887 3020 	strb.w	r3, [r7, #32]
					msg_tiempo[1] = ' ';
 8001d12:	2320      	movs	r3, #32
 8001d14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				}

				msg_tiempo[4] = '2';
 8001d18:	2332      	movs	r3, #50	; 0x32
 8001d1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				msg_tiempo[8] = ((segundos_j2 / 60) / 10) + 48;
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <t_userLoop+0x424>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <t_userLoop+0x428>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3330      	adds	r3, #48	; 0x30
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[9] = ((segundos_j2 / 60) % 10) + 48;
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <t_userLoop+0x424>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <t_userLoop+0x42c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0959      	lsrs	r1, r3, #5
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <t_userLoop+0x430>)
 8001d42:	fba3 2301 	umull	r2, r3, r3, r1
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	1aca      	subs	r2, r1, r3
 8001d52:	b2d3      	uxtb	r3, r2
 8001d54:	3330      	adds	r3, #48	; 0x30
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				msg_tiempo[11] = ((segundos_j2 % 60) / 10) + 48;
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <t_userLoop+0x424>)
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <t_userLoop+0x42c>)
 8001d62:	fba3 2301 	umull	r2, r3, r3, r1
 8001d66:	095a      	lsrs	r2, r3, #5
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <t_userLoop+0x430>)
 8001d74:	fba3 2302 	umull	r2, r3, r3, r2
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3330      	adds	r3, #48	; 0x30
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				msg_tiempo[12] = ((segundos_j2 % 60) % 10) + 48;
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <t_userLoop+0x424>)
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <t_userLoop+0x42c>)
 8001d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d8e:	095a      	lsrs	r2, r3, #5
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	1aca      	subs	r2, r1, r3
 8001d9a:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <t_userLoop+0x430>)
 8001d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001da0:	08d9      	lsrs	r1, r3, #3
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	1ad1      	subs	r1, r2, r3
 8001dac:	b2cb      	uxtb	r3, r1
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				msg = lcd_msg_from_string(msg_tiempo);
 8001db6:	463b      	mov	r3, r7
 8001db8:	f107 0220 	add.w	r2, r7, #32
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fc3f 	bl	8000642 <lcd_msg_from_string>
 8001dc4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001dc8:	463d      	mov	r5, r7
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd2:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <t_userLoop+0x434>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001dde:	2300      	movs	r3, #0
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	f006 f9b0 	bl	8008148 <xQueueGenericSend>
			}
			if (get_finished_state()) {
 8001de8:	f000 fe36 	bl	8002a58 <get_finished_state>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <t_userLoop+0x408>
				modo_de_juego = 3;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <t_userLoop+0x438>)
 8001df4:	2203      	movs	r2, #3
 8001df6:	701a      	strb	r2, [r3, #0]
				button = 4;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				xQueueSend(buttons_queue, &button, 0);
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <t_userLoop+0x43c>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001e06:	2300      	movs	r3, #0
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f006 f99d 	bl	8008148 <xQueueGenericSend>
			}

			break;
 8001e0e:	e015      	b.n	8001e3c <t_userLoop+0x408>
		case 2:
			user_loop();
 8001e10:	f000 ff7c 	bl	8002d0c <user_loop>
			if (get_finished_state()) {
 8001e14:	f000 fe20 	bl	8002a58 <get_finished_state>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <t_userLoop+0x40c>
				modo_de_juego = 3;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <t_userLoop+0x438>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
				button = 4;
 8001e24:	2304      	movs	r3, #4
 8001e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				xQueueSend(buttons_queue, &button, 0);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <t_userLoop+0x43c>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	f006 f987 	bl	8008148 <xQueueGenericSend>
			}

			break;
 8001e3a:	e001      	b.n	8001e40 <t_userLoop+0x40c>
			break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <t_userLoop+0x40e>
			break;
 8001e40:	bf00      	nop
		case 3:
			break;
		}

		xSemaphoreGive(ws2812_sem);
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <t_userLoop+0x440>)
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f006 f97c 	bl	8008148 <xQueueGenericSend>
		vTaskDelay(33);
 8001e50:	2021      	movs	r0, #33	; 0x21
 8001e52:	f006 ffd1 	bl	8008df8 <vTaskDelay>
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001e56:	e62e      	b.n	8001ab6 <t_userLoop+0x82>
 8001e58:	20000828 	.word	0x20000828
 8001e5c:	1b4e81b5 	.word	0x1b4e81b5
 8001e60:	88888889 	.word	0x88888889
 8001e64:	cccccccd 	.word	0xcccccccd
 8001e68:	200004b4 	.word	0x200004b4
 8001e6c:	20000821 	.word	0x20000821
 8001e70:	200004b8 	.word	0x200004b8
 8001e74:	200004bc 	.word	0x200004bc

08001e78 <ME_general>:
	}
}

static void ME_general(uint8_t button) {
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	77fb      	strb	r3, [r7, #31]
	static int8_t sub_estado = 0;
	LCDQueueItem_t msg = { 0 };
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]

	uint8_t aux_button = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (estado) {
 8001e9a:	4bae      	ldr	r3, [pc, #696]	; (8002154 <ME_general+0x2dc>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	f200 8573 	bhi.w	800298a <ME_general+0xb12>
 8001ea4:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <ME_general+0x34>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001fcd 	.word	0x08001fcd
 8001eb4:	0800217d 	.word	0x0800217d
 8001eb8:	080024b5 	.word	0x080024b5
 8001ebc:	08002741 	.word	0x08002741
 8001ec0:	0800286d 	.word	0x0800286d
	case ME_GENERAL_RESET:
		modo_de_juego = 0;
 8001ec4:	4ba4      	ldr	r3, [pc, #656]	; (8002158 <ME_general+0x2e0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		msg = lcd_msg_clear();
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fbf0 	bl	80006b2 <lcd_msg_clear>
 8001ed2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ed6:	463d      	mov	r5, r7
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ee0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ee4:	4b9d      	ldr	r3, [pc, #628]	; (800215c <ME_general+0x2e4>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001eec:	2300      	movs	r3, #0
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	f006 f929 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fbfc 	bl	80006f6 <lcd_msg_first_line>
 8001efe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f02:	463d      	mov	r5, r7
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f0c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <ME_general+0x2e4>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	f006 f913 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Smart Chess");
 8001f22:	463b      	mov	r3, r7
 8001f24:	498e      	ldr	r1, [pc, #568]	; (8002160 <ME_general+0x2e8>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb8b 	bl	8000642 <lcd_msg_from_string>
 8001f2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f30:	463d      	mov	r5, r7
 8001f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f3a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f3e:	4b87      	ldr	r3, [pc, #540]	; (800215c <ME_general+0x2e4>)
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f46:	2300      	movs	r3, #0
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	f006 f8fc 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001f50:	463b      	mov	r3, r7
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fbf1 	bl	800073a <lcd_msg_second_line>
 8001f58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f5c:	463d      	mov	r5, r7
 8001f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f66:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <ME_general+0x2e4>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f72:	2300      	movs	r3, #0
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	f006 f8e6 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4979      	ldr	r1, [pc, #484]	; (8002164 <ME_general+0x2ec>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fb5e 	bl	8000642 <lcd_msg_from_string>
 8001f86:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f8a:	463d      	mov	r5, r7
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f94:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <ME_general+0x2e4>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa6:	f006 f8cf 	bl	8008148 <xQueueGenericSend>

		if (button == 3) {
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	f040 84e1 	bne.w	8002974 <ME_general+0xafc>
			estado = ME_GENERAL_SELECCION_MODO;
 8001fb2:	4b68      	ldr	r3, [pc, #416]	; (8002154 <ME_general+0x2dc>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <ME_general+0x2f0>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f006 f8c0 	bl	8008148 <xQueueGenericSend>
		}

		break;
 8001fc8:	f000 bcd4 	b.w	8002974 <ME_general+0xafc>
	case ME_GENERAL_SELECCION_MODO:
		msg = lcd_msg_clear();
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fb6f 	bl	80006b2 <lcd_msg_clear>
 8001fd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fd8:	463d      	mov	r5, r7
 8001fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fe2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <ME_general+0x2e4>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	f006 f8a8 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fb7b 	bl	80006f6 <lcd_msg_first_line>
 8002000:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002004:	463d      	mov	r5, r7
 8002006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800200e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <ME_general+0x2e4>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800201a:	2300      	movs	r3, #0
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	f006 f892 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Modo:");
 8002024:	463b      	mov	r3, r7
 8002026:	4951      	ldr	r1, [pc, #324]	; (800216c <ME_general+0x2f4>)
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fb0a 	bl	8000642 <lcd_msg_from_string>
 800202e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002032:	463d      	mov	r5, r7
 8002034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002038:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <ME_general+0x2e4>)
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002048:	2300      	movs	r3, #0
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	f006 f87b 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002052:	463b      	mov	r3, r7
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fb70 	bl	800073a <lcd_msg_second_line>
 800205a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800205e:	463d      	mov	r5, r7
 8002060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002064:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002068:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <ME_general+0x2e4>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002074:	2300      	movs	r3, #0
 8002076:	f04f 32ff 	mov.w	r2, #4294967295
 800207a:	f006 f865 	bl	8008148 <xQueueGenericSend>
		if (sub_estado == 0) {
 800207e:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <ME_general+0x2f8>)
 8002080:	f993 3000 	ldrsb.w	r3, [r3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d116      	bne.n	80020b6 <ME_general+0x23e>
			msg = lcd_msg_from_string("-> Jug vs Jug");
 8002088:	463b      	mov	r3, r7
 800208a:	493a      	ldr	r1, [pc, #232]	; (8002174 <ME_general+0x2fc>)
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fad8 	bl	8000642 <lcd_msg_from_string>
 8002092:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002096:	463d      	mov	r5, r7
 8002098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020a0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <ME_general+0x2e4>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020ac:	2300      	movs	r3, #0
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	f006 f849 	bl	8008148 <xQueueGenericSend>
		}
		if (sub_estado == 1) {
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <ME_general+0x2f8>)
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d116      	bne.n	80020ee <ME_general+0x276>
			msg = lcd_msg_from_string("-> Jug vs Maq");
 80020c0:	463b      	mov	r3, r7
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <ME_general+0x300>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fabc 	bl	8000642 <lcd_msg_from_string>
 80020ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020ce:	463d      	mov	r5, r7
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020d8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <ME_general+0x2e4>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020e4:	2300      	movs	r3, #0
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ea:	f006 f82d 	bl	8008148 <xQueueGenericSend>
		}

		if (button == 3) {
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d116      	bne.n	8002122 <ME_general+0x2aa>
			estado =
					sub_estado == 0 ?
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <ME_general+0x2f8>)
 80020f6:	f993 3000 	ldrsb.w	r3, [r3]
							ME_GENERAL_SELECCION_TIEMPO : ME_GENERAL_JVM;
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <ME_general+0x28a>
 80020fe:	2202      	movs	r2, #2
 8002100:	e000      	b.n	8002104 <ME_general+0x28c>
 8002102:	2204      	movs	r2, #4
			estado =
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <ME_general+0x2dc>)
 8002106:	701a      	strb	r2, [r3, #0]
			sub_estado = 0;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <ME_general+0x2f8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <ME_general+0x2f0>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	f006 f815 	bl	8008148 <xQueueGenericSend>
		} else if (button != 0) {
			sub_estado = !sub_estado;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 800211e:	f000 bc2b 	b.w	8002978 <ME_general+0xb00>
		} else if (button != 0) {
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8427 	beq.w	8002978 <ME_general+0xb00>
			sub_estado = !sub_estado;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <ME_general+0x2f8>)
 800212c:	f993 3000 	ldrsb.w	r3, [r3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	b25a      	sxtb	r2, r3
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <ME_general+0x2f8>)
 800213e:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <ME_general+0x2f0>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f005 fffc 	bl	8008148 <xQueueGenericSend>
		break;
 8002150:	f000 bc12 	b.w	8002978 <ME_general+0xb00>
 8002154:	20000820 	.word	0x20000820
 8002158:	20000821 	.word	0x20000821
 800215c:	200004b4 	.word	0x200004b4
 8002160:	0800a52c 	.word	0x0800a52c
 8002164:	0800a538 	.word	0x0800a538
 8002168:	200004b8 	.word	0x200004b8
 800216c:	0800a548 	.word	0x0800a548
 8002170:	20000834 	.word	0x20000834
 8002174:	0800a558 	.word	0x0800a558
 8002178:	0800a568 	.word	0x0800a568

	case ME_GENERAL_SELECCION_TIEMPO:
		msg = lcd_msg_clear();
 800217c:	463b      	mov	r3, r7
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fa97 	bl	80006b2 <lcd_msg_clear>
 8002184:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002188:	463d      	mov	r5, r7
 800218a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002192:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002196:	4bb8      	ldr	r3, [pc, #736]	; (8002478 <ME_general+0x600>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800219e:	2300      	movs	r3, #0
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	f005 ffd0 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 80021a8:	463b      	mov	r3, r7
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe faa3 	bl	80006f6 <lcd_msg_first_line>
 80021b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021b4:	463d      	mov	r5, r7
 80021b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021be:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80021c2:	4bad      	ldr	r3, [pc, #692]	; (8002478 <ME_general+0x600>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021ca:	2300      	movs	r3, #0
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	f005 ffba 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Tiempo:");
 80021d4:	463b      	mov	r3, r7
 80021d6:	49a9      	ldr	r1, [pc, #676]	; (800247c <ME_general+0x604>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fa32 	bl	8000642 <lcd_msg_from_string>
 80021de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021e2:	463d      	mov	r5, r7
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ec:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80021f0:	4ba1      	ldr	r3, [pc, #644]	; (8002478 <ME_general+0x600>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021f8:	2300      	movs	r3, #0
 80021fa:	f04f 32ff 	mov.w	r2, #4294967295
 80021fe:	f005 ffa3 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002202:	463b      	mov	r3, r7
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fa98 	bl	800073a <lcd_msg_second_line>
 800220a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800220e:	463d      	mov	r5, r7
 8002210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002214:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002218:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800221c:	4b96      	ldr	r3, [pc, #600]	; (8002478 <ME_general+0x600>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002224:	2300      	movs	r3, #0
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	f005 ff8d 	bl	8008148 <xQueueGenericSend>

		switch (sub_estado) {
 800222e:	4b94      	ldr	r3, [pc, #592]	; (8002480 <ME_general+0x608>)
 8002230:	f993 3000 	ldrsb.w	r3, [r3]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d869      	bhi.n	800230c <ME_general+0x494>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <ME_general+0x3c8>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002259 	.word	0x08002259
 8002244:	08002277 	.word	0x08002277
 8002248:	08002295 	.word	0x08002295
 800224c:	080022b3 	.word	0x080022b3
 8002250:	080022d1 	.word	0x080022d1
 8002254:	080022ef 	.word	0x080022ef
		case 0:
			msg = lcd_msg_from_string("5min S/INC");
 8002258:	463b      	mov	r3, r7
 800225a:	498a      	ldr	r1, [pc, #552]	; (8002484 <ME_general+0x60c>)
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f9f0 	bl	8000642 <lcd_msg_from_string>
 8002262:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002266:	463d      	mov	r5, r7
 8002268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002270:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002274:	e04a      	b.n	800230c <ME_general+0x494>
		case 1:
			msg = lcd_msg_from_string("5min +30seg");
 8002276:	463b      	mov	r3, r7
 8002278:	4983      	ldr	r1, [pc, #524]	; (8002488 <ME_general+0x610>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f9e1 	bl	8000642 <lcd_msg_from_string>
 8002280:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002284:	463d      	mov	r5, r7
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800228e:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002292:	e03b      	b.n	800230c <ME_general+0x494>
		case 2:
			msg = lcd_msg_from_string("10min S/INC");
 8002294:	463b      	mov	r3, r7
 8002296:	497d      	ldr	r1, [pc, #500]	; (800248c <ME_general+0x614>)
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f9d2 	bl	8000642 <lcd_msg_from_string>
 800229e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022a2:	463d      	mov	r5, r7
 80022a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ac:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022b0:	e02c      	b.n	800230c <ME_general+0x494>
		case 3:
			msg = lcd_msg_from_string("10min +1min");
 80022b2:	463b      	mov	r3, r7
 80022b4:	4976      	ldr	r1, [pc, #472]	; (8002490 <ME_general+0x618>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f9c3 	bl	8000642 <lcd_msg_from_string>
 80022bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022c0:	463d      	mov	r5, r7
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ca:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022ce:	e01d      	b.n	800230c <ME_general+0x494>
		case 4:
			msg = lcd_msg_from_string("30min S/INC");
 80022d0:	463b      	mov	r3, r7
 80022d2:	4970      	ldr	r1, [pc, #448]	; (8002494 <ME_general+0x61c>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f9b4 	bl	8000642 <lcd_msg_from_string>
 80022da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022de:	463d      	mov	r5, r7
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022e8:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80022ec:	e00e      	b.n	800230c <ME_general+0x494>
		case 5:
			msg = lcd_msg_from_string("30min +3min");
 80022ee:	463b      	mov	r3, r7
 80022f0:	4969      	ldr	r1, [pc, #420]	; (8002498 <ME_general+0x620>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f9a5 	bl	8000642 <lcd_msg_from_string>
 80022f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022fc:	463d      	mov	r5, r7
 80022fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002306:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 800230a:	bf00      	nop
		}

		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800230c:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <ME_general+0x600>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002314:	2300      	movs	r3, #0
 8002316:	f04f 32ff 	mov.w	r2, #4294967295
 800231a:	f005 ff15 	bl	8008148 <xQueueGenericSend>

		if (button == 1) {
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d119      	bne.n	8002358 <ME_general+0x4e0>
			sub_estado--;
 8002324:	4b56      	ldr	r3, [pc, #344]	; (8002480 <ME_general+0x608>)
 8002326:	f993 3000 	ldrsb.w	r3, [r3]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	b25a      	sxtb	r2, r3
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <ME_general+0x608>)
 8002334:	701a      	strb	r2, [r3, #0]
			if (sub_estado < 0)
 8002336:	4b52      	ldr	r3, [pc, #328]	; (8002480 <ME_general+0x608>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da02      	bge.n	8002346 <ME_general+0x4ce>
				sub_estado = 5;
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <ME_general+0x608>)
 8002342:	2205      	movs	r2, #5
 8002344:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002346:	4b55      	ldr	r3, [pc, #340]	; (800249c <ME_general+0x624>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	f005 fef9 	bl	8008148 <xQueueGenericSend>
			}
			sub_estado = 0;
			mostrar_tiempo = 1;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 8002356:	e311      	b.n	800297c <ME_general+0xb04>
		} else if (button == 2) {
 8002358:	7ffb      	ldrb	r3, [r7, #31]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d119      	bne.n	8002392 <ME_general+0x51a>
			sub_estado++;
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <ME_general+0x608>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	b25a      	sxtb	r2, r3
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <ME_general+0x608>)
 800236e:	701a      	strb	r2, [r3, #0]
			if (sub_estado > 5)
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <ME_general+0x608>)
 8002372:	f993 3000 	ldrsb.w	r3, [r3]
 8002376:	2b05      	cmp	r3, #5
 8002378:	dd02      	ble.n	8002380 <ME_general+0x508>
				sub_estado = 0;
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <ME_general+0x608>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <ME_general+0x624>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	f005 fedc 	bl	8008148 <xQueueGenericSend>
		break;
 8002390:	e2f4      	b.n	800297c <ME_general+0xb04>
		} else if (button == 3) {
 8002392:	7ffb      	ldrb	r3, [r7, #31]
 8002394:	2b03      	cmp	r3, #3
 8002396:	f040 82f1 	bne.w	800297c <ME_general+0xb04>
			estado = ME_GENERAL_JVJ;
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <ME_general+0x628>)
 800239c:	2203      	movs	r2, #3
 800239e:	701a      	strb	r2, [r3, #0]
			switch (sub_estado) {
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <ME_general+0x608>)
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d856      	bhi.n	8002458 <ME_general+0x5e0>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <ME_general+0x538>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023e1 	.word	0x080023e1
 80023b8:	080023f9 	.word	0x080023f9
 80023bc:	08002411 	.word	0x08002411
 80023c0:	08002429 	.word	0x08002429
 80023c4:	08002441 	.word	0x08002441
				segundos_j1 = 300;
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <ME_general+0x62c>)
 80023ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ce:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <ME_general+0x630>)
 80023d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d6:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <ME_general+0x634>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
				break;
 80023de:	e03b      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 300;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <ME_general+0x62c>)
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <ME_general+0x630>)
 80023ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ee:	601a      	str	r2, [r3, #0]
				incremento = 30;
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <ME_general+0x634>)
 80023f2:	221e      	movs	r2, #30
 80023f4:	601a      	str	r2, [r3, #0]
				break;
 80023f6:	e02f      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 600;
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <ME_general+0x62c>)
 80023fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023fe:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <ME_general+0x630>)
 8002402:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002406:	601a      	str	r2, [r3, #0]
				incremento = 0;
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <ME_general+0x634>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
				break;
 800240e:	e023      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 600;
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <ME_general+0x62c>)
 8002412:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002416:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <ME_general+0x630>)
 800241a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800241e:	601a      	str	r2, [r3, #0]
				incremento = 60;
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <ME_general+0x634>)
 8002422:	223c      	movs	r2, #60	; 0x3c
 8002424:	601a      	str	r2, [r3, #0]
				break;
 8002426:	e017      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 1800;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <ME_general+0x62c>)
 800242a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800242e:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <ME_general+0x630>)
 8002432:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002436:	601a      	str	r2, [r3, #0]
				incremento = 0;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <ME_general+0x634>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
				break;
 800243e:	e00b      	b.n	8002458 <ME_general+0x5e0>
				segundos_j1 = 1800;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <ME_general+0x62c>)
 8002442:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002446:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <ME_general+0x630>)
 800244a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800244e:	601a      	str	r2, [r3, #0]
				incremento = 180;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <ME_general+0x634>)
 8002452:	22b4      	movs	r2, #180	; 0xb4
 8002454:	601a      	str	r2, [r3, #0]
				break;
 8002456:	bf00      	nop
			sub_estado = 0;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <ME_general+0x608>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			mostrar_tiempo = 1;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <ME_general+0x638>)
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <ME_general+0x624>)
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800246c:	2300      	movs	r3, #0
 800246e:	2200      	movs	r2, #0
 8002470:	f005 fe6a 	bl	8008148 <xQueueGenericSend>
		break;
 8002474:	e282      	b.n	800297c <ME_general+0xb04>
 8002476:	bf00      	nop
 8002478:	200004b4 	.word	0x200004b4
 800247c:	0800a578 	.word	0x0800a578
 8002480:	20000834 	.word	0x20000834
 8002484:	0800a588 	.word	0x0800a588
 8002488:	0800a594 	.word	0x0800a594
 800248c:	0800a5a0 	.word	0x0800a5a0
 8002490:	0800a5ac 	.word	0x0800a5ac
 8002494:	0800a5b8 	.word	0x0800a5b8
 8002498:	0800a5c4 	.word	0x0800a5c4
 800249c:	200004b8 	.word	0x200004b8
 80024a0:	20000820 	.word	0x20000820
 80024a4:	20000824 	.word	0x20000824
 80024a8:	20000828 	.word	0x20000828
 80024ac:	2000082c 	.word	0x2000082c
 80024b0:	20000822 	.word	0x20000822

	case ME_GENERAL_JVJ:
		modo_de_juego = 1;
 80024b4:	4b98      	ldr	r3, [pc, #608]	; (8002718 <ME_general+0x8a0>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
		set_cpu_player(0);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 fadc 	bl	8002a78 <set_cpu_player>

		if (sub_estado == 0) {
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <ME_general+0x8a4>)
 80024c2:	f993 3000 	ldrsb.w	r3, [r3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d170      	bne.n	80025ac <ME_general+0x734>
			msg = lcd_msg_clear();
 80024ca:	463b      	mov	r3, r7
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f8f0 	bl	80006b2 <lcd_msg_clear>
 80024d2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80024d6:	463d      	mov	r5, r7
 80024d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024e0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80024e4:	4b8e      	ldr	r3, [pc, #568]	; (8002720 <ME_general+0x8a8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024ec:	2300      	movs	r3, #0
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	f005 fe29 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80024f6:	463b      	mov	r3, r7
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f8fc 	bl	80006f6 <lcd_msg_first_line>
 80024fe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002502:	463d      	mov	r5, r7
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	e895 0003 	ldmia.w	r5, {r0, r1}
 800250c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <ME_general+0x8a8>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002518:	2300      	movs	r3, #0
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	f005 fe13 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_from_string("Ver Tiempos");
 8002522:	463b      	mov	r3, r7
 8002524:	497f      	ldr	r1, [pc, #508]	; (8002724 <ME_general+0x8ac>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f88b 	bl	8000642 <lcd_msg_from_string>
 800252c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002530:	463d      	mov	r5, r7
 8002532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	e895 0003 	ldmia.w	r5, {r0, r1}
 800253a:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800253e:	4b78      	ldr	r3, [pc, #480]	; (8002720 <ME_general+0x8a8>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002546:	2300      	movs	r3, #0
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	f005 fdfc 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 8002550:	463b      	mov	r3, r7
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f8f1 	bl	800073a <lcd_msg_second_line>
 8002558:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800255c:	463d      	mov	r5, r7
 800255e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002566:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <ME_general+0x8a8>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002572:	2300      	movs	r3, #0
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	f005 fde6 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 800257c:	463b      	mov	r3, r7
 800257e:	496a      	ldr	r1, [pc, #424]	; (8002728 <ME_general+0x8b0>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f85e 	bl	8000642 <lcd_msg_from_string>
 8002586:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800258a:	463d      	mov	r5, r7
 800258c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002590:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002594:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <ME_general+0x8a8>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025a0:	2300      	movs	r3, #0
 80025a2:	f04f 32ff 	mov.w	r2, #4294967295
 80025a6:	f005 fdcf 	bl	8008148 <xQueueGenericSend>
 80025aa:	e072      	b.n	8002692 <ME_general+0x81a>
		} else {
			mostrar_tiempo = 0;
 80025ac:	4b5f      	ldr	r3, [pc, #380]	; (800272c <ME_general+0x8b4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
			msg = lcd_msg_clear();
 80025b2:	463b      	mov	r3, r7
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe f87c 	bl	80006b2 <lcd_msg_clear>
 80025ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025be:	463d      	mov	r5, r7
 80025c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025c8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <ME_general+0x8a8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025d4:	2300      	movs	r3, #0
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295
 80025da:	f005 fdb5 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80025de:	463b      	mov	r3, r7
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f888 	bl	80006f6 <lcd_msg_first_line>
 80025e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025ea:	463d      	mov	r5, r7
 80025ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025f4:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025f8:	4b49      	ldr	r3, [pc, #292]	; (8002720 <ME_general+0x8a8>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002600:	2300      	movs	r3, #0
 8002602:	f04f 32ff 	mov.w	r2, #4294967295
 8002606:	f005 fd9f 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_from_string("Modo Reset");
 800260a:	463b      	mov	r3, r7
 800260c:	4948      	ldr	r1, [pc, #288]	; (8002730 <ME_general+0x8b8>)
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe f817 	bl	8000642 <lcd_msg_from_string>
 8002614:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002618:	463d      	mov	r5, r7
 800261a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800261c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800261e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002622:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <ME_general+0x8a8>)
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	f005 fd88 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 8002638:	463b      	mov	r3, r7
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f87d 	bl	800073a <lcd_msg_second_line>
 8002640:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002644:	463d      	mov	r5, r7
 8002646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800264e:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <ME_general+0x8a8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800265a:	2300      	movs	r3, #0
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	f005 fd72 	bl	8008148 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 8002664:	463b      	mov	r3, r7
 8002666:	4930      	ldr	r1, [pc, #192]	; (8002728 <ME_general+0x8b0>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ffea 	bl	8000642 <lcd_msg_from_string>
 800266e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002672:	463d      	mov	r5, r7
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	e895 0003 	ldmia.w	r5, {r0, r1}
 800267c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <ME_general+0x8a8>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002688:	2300      	movs	r3, #0
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	f005 fd5b 	bl	8008148 <xQueueGenericSend>
		}

		if (button == 3) {
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d116      	bne.n	80026c6 <ME_general+0x84e>
			if (sub_estado == 1) {
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <ME_general+0x8a4>)
 800269a:	f993 3000 	ldrsb.w	r3, [r3]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <ME_general+0x836>
				user_init();
 80026a2:	f000 f9b7 	bl	8002a14 <user_init>
				estado = ME_GENERAL_RESET;
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <ME_general+0x8bc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <ME_general+0x83c>
			} else {
				mostrar_tiempo = 1;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <ME_general+0x8b4>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]

			}

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <ME_general+0x8c0>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80026bc:	2300      	movs	r3, #0
 80026be:	2200      	movs	r2, #0
 80026c0:	f005 fd42 	bl	8008148 <xQueueGenericSend>
 80026c4:	e018      	b.n	80026f8 <ME_general+0x880>
		} else if (button != 0) {
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <ME_general+0x880>
			sub_estado = !sub_estado;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <ME_general+0x8a4>)
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <ME_general+0x8a4>)
 80026e0:	701a      	strb	r2, [r3, #0]
			delay = 5;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <ME_general+0x8c4>)
 80026e4:	2205      	movs	r2, #5
 80026e6:	601a      	str	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <ME_general+0x8c0>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80026f0:	2300      	movs	r3, #0
 80026f2:	2200      	movs	r2, #0
 80026f4:	f005 fd28 	bl	8008148 <xQueueGenericSend>
		}

		if (button == 4) {
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	f040 8140 	bne.w	8002980 <ME_general+0xb08>
			estado = ME_GENERAL_FIN;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <ME_general+0x8bc>)
 8002702:	2205      	movs	r2, #5
 8002704:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <ME_general+0x8c0>)
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800270e:	2300      	movs	r3, #0
 8002710:	2200      	movs	r2, #0
 8002712:	f005 fd19 	bl	8008148 <xQueueGenericSend>
		}
		break;
 8002716:	e133      	b.n	8002980 <ME_general+0xb08>
 8002718:	20000821 	.word	0x20000821
 800271c:	20000834 	.word	0x20000834
 8002720:	200004b4 	.word	0x200004b4
 8002724:	0800a5d0 	.word	0x0800a5d0
 8002728:	0800a5dc 	.word	0x0800a5dc
 800272c:	20000822 	.word	0x20000822
 8002730:	0800a5e8 	.word	0x0800a5e8
 8002734:	20000820 	.word	0x20000820
 8002738:	200004b8 	.word	0x200004b8
 800273c:	20000830 	.word	0x20000830
	case ME_GENERAL_JVM:
		set_cpu_player(1);
 8002740:	2001      	movs	r0, #1
 8002742:	f000 f999 	bl	8002a78 <set_cpu_player>
		modo_de_juego = 2;
 8002746:	4b93      	ldr	r3, [pc, #588]	; (8002994 <ME_general+0xb1c>)
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 800274c:	463b      	mov	r3, r7
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ffaf 	bl	80006b2 <lcd_msg_clear>
 8002754:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002758:	463d      	mov	r5, r7
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002762:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <ME_general+0xb20>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800276e:	2300      	movs	r3, #0
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	f005 fce8 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002778:	463b      	mov	r3, r7
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd ffbb 	bl	80006f6 <lcd_msg_first_line>
 8002780:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002784:	463d      	mov	r5, r7
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800278e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <ME_general+0xb20>)
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800279a:	2300      	movs	r3, #0
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	f005 fcd2 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Jug vs Maq");
 80027a4:	463b      	mov	r3, r7
 80027a6:	497d      	ldr	r1, [pc, #500]	; (800299c <ME_general+0xb24>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd ff4a 	bl	8000642 <lcd_msg_from_string>
 80027ae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027b2:	463d      	mov	r5, r7
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027bc:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027c0:	4b75      	ldr	r3, [pc, #468]	; (8002998 <ME_general+0xb20>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027c8:	2300      	movs	r3, #0
 80027ca:	f04f 32ff 	mov.w	r2, #4294967295
 80027ce:	f005 fcbb 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 80027d2:	463b      	mov	r3, r7
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd ffb0 	bl	800073a <lcd_msg_second_line>
 80027da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027de:	463d      	mov	r5, r7
 80027e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027e8:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <ME_general+0xb20>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027f4:	2300      	movs	r3, #0
 80027f6:	f04f 32ff 	mov.w	r2, #4294967295
 80027fa:	f005 fca5 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Rst");
 80027fe:	463b      	mov	r3, r7
 8002800:	4967      	ldr	r1, [pc, #412]	; (80029a0 <ME_general+0xb28>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd ff1d 	bl	8000642 <lcd_msg_from_string>
 8002808:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800280c:	463d      	mov	r5, r7
 800280e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002816:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800281a:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <ME_general+0xb20>)
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002822:	2300      	movs	r3, #0
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	f005 fc8e 	bl	8008148 <xQueueGenericSend>

		if (button == 3) {
 800282c:	7ffb      	ldrb	r3, [r7, #31]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d10c      	bne.n	800284c <ME_general+0x9d4>
			user_init();
 8002832:	f000 f8ef 	bl	8002a14 <user_init>
			estado = ME_GENERAL_RESET;
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <ME_general+0xb2c>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800283c:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <ME_general+0xb30>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002844:	2300      	movs	r3, #0
 8002846:	2200      	movs	r2, #0
 8002848:	f005 fc7e 	bl	8008148 <xQueueGenericSend>
		}

		if (button == 4) {
 800284c:	7ffb      	ldrb	r3, [r7, #31]
 800284e:	2b04      	cmp	r3, #4
 8002850:	f040 8098 	bne.w	8002984 <ME_general+0xb0c>
			estado = ME_GENERAL_FIN;
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <ME_general+0xb2c>)
 8002856:	2205      	movs	r2, #5
 8002858:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <ME_general+0xb30>)
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002862:	2300      	movs	r3, #0
 8002864:	2200      	movs	r2, #0
 8002866:	f005 fc6f 	bl	8008148 <xQueueGenericSend>
		}
		break;
 800286a:	e08b      	b.n	8002984 <ME_general+0xb0c>
	case ME_GENERAL_FIN:
		modo_de_juego = 3;
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <ME_general+0xb1c>)
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 8002872:	463b      	mov	r3, r7
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd ff1c 	bl	80006b2 <lcd_msg_clear>
 800287a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800287e:	463d      	mov	r5, r7
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002884:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002888:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <ME_general+0xb20>)
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002894:	2300      	movs	r3, #0
 8002896:	f04f 32ff 	mov.w	r2, #4294967295
 800289a:	f005 fc55 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 800289e:	463b      	mov	r3, r7
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd ff28 	bl	80006f6 <lcd_msg_first_line>
 80028a6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028aa:	463d      	mov	r5, r7
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028b4:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <ME_general+0xb20>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028c0:	2300      	movs	r3, #0
 80028c2:	f04f 32ff 	mov.w	r2, #4294967295
 80028c6:	f005 fc3f 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Juego Terminado");
 80028ca:	463b      	mov	r3, r7
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <ME_general+0xb34>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd feb7 	bl	8000642 <lcd_msg_from_string>
 80028d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028d8:	463d      	mov	r5, r7
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028e2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <ME_general+0xb20>)
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028ee:	2300      	movs	r3, #0
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	f005 fc28 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 80028f8:	463b      	mov	r3, r7
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd ff1d 	bl	800073a <lcd_msg_second_line>
 8002900:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002904:	463d      	mov	r5, r7
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800290e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <ME_general+0xb20>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800291a:	2300      	movs	r3, #0
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	f005 fc12 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 8002924:	463b      	mov	r3, r7
 8002926:	4922      	ldr	r1, [pc, #136]	; (80029b0 <ME_general+0xb38>)
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe8a 	bl	8000642 <lcd_msg_from_string>
 800292e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002932:	463d      	mov	r5, r7
 8002934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002938:	e895 0003 	ldmia.w	r5, {r0, r1}
 800293c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <ME_general+0xb20>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002948:	2300      	movs	r3, #0
 800294a:	f04f 32ff 	mov.w	r2, #4294967295
 800294e:	f005 fbfb 	bl	8008148 <xQueueGenericSend>

		if (button == 3) {
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d117      	bne.n	8002988 <ME_general+0xb10>
			user_init();
 8002958:	f000 f85c 	bl	8002a14 <user_init>
			estado = ME_GENERAL_RESET;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <ME_general+0xb2c>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <ME_general+0xb30>)
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800296a:	2300      	movs	r3, #0
 800296c:	2200      	movs	r2, #0
 800296e:	f005 fbeb 	bl	8008148 <xQueueGenericSend>
		}
		break;
 8002972:	e009      	b.n	8002988 <ME_general+0xb10>
		break;
 8002974:	bf00      	nop
 8002976:	e008      	b.n	800298a <ME_general+0xb12>
		break;
 8002978:	bf00      	nop
 800297a:	e006      	b.n	800298a <ME_general+0xb12>
		break;
 800297c:	bf00      	nop
 800297e:	e004      	b.n	800298a <ME_general+0xb12>
		break;
 8002980:	bf00      	nop
 8002982:	e002      	b.n	800298a <ME_general+0xb12>
		break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <ME_general+0xb12>
		break;
 8002988:	bf00      	nop
	}
}
 800298a:	bf00      	nop
 800298c:	3740      	adds	r7, #64	; 0x40
 800298e:	46bd      	mov	sp, r7
 8002990:	bdb0      	pop	{r4, r5, r7, pc}
 8002992:	bf00      	nop
 8002994:	20000821 	.word	0x20000821
 8002998:	200004b4 	.word	0x200004b4
 800299c:	0800a5f4 	.word	0x0800a5f4
 80029a0:	0800a600 	.word	0x0800a600
 80029a4:	20000820 	.word	0x20000820
 80029a8:	200004b8 	.word	0x200004b8
 80029ac:	0800a610 	.word	0x0800a610
 80029b0:	0800a538 	.word	0x0800a538

080029b4 <t_WS2812>:

void t_WS2812(void*) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <t_WS2812+0x44>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <t_WS2812+0x16>
		tareas_error_handler(2);
 80029c4:	2002      	movs	r0, #2
 80029c6:	f000 f81d 	bl	8002a04 <tareas_error_handler>
	}

	ws2812_init();
 80029ca:	f001 fcab 	bl	8004324 <ws2812_init>

	while (1) {
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <t_WS2812+0x44>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 31ff 	mov.w	r1, #4294967295
 80029d6:	4618      	mov	r0, r3
 80029d8:	f005 fd94 	bl	8008504 <xQueueSemaphoreTake>
		ws2812_update_leds_from_data(user_htim1);
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <t_WS2812+0x48>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fd41 	bl	8004468 <ws2812_update_leds_from_data>
		while (!ws2812_finished_dma) {
 80029e6:	e002      	b.n	80029ee <t_WS2812+0x3a>
			vTaskDelay(5);
 80029e8:	2005      	movs	r0, #5
 80029ea:	f006 fa05 	bl	8008df8 <vTaskDelay>
		while (!ws2812_finished_dma) {
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <t_WS2812+0x4c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f8      	beq.n	80029e8 <t_WS2812+0x34>
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 80029f6:	e7ea      	b.n	80029ce <t_WS2812+0x1a>
 80029f8:	200004bc 	.word	0x200004bc
 80029fc:	20000838 	.word	0x20000838
 8002a00:	20001a0c 	.word	0x20001a0c

08002a04 <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(void *error) {
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
	__disable_irq();
	while (1) {
		UNUSED(error);
 8002a10:	e7fe      	b.n	8002a10 <tareas_error_handler+0xc>
	...

08002a14 <user_init>:

extern color_t cpu_player;

extern char movement_state;

void user_init() {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	//game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);

	game_set_led_output_array(ws2812_color_data);
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <user_init+0x18>)
 8002a1a:	f7fd ff95 	bl	8000948 <game_set_led_output_array>

	game_reset();
 8002a1e:	f7fd ffa6 	bl	800096e <game_reset>

	movement_state = WAIT_STATE;
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <user_init+0x1c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000190c 	.word	0x2000190c
 8002a30:	200004c8 	.word	0x200004c8

08002a34 <get_side_to_move>:

uint8_t get_side_to_move()
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return (engine_game_state.side_to_move == WHITE ? 0 : 1);
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <get_side_to_move+0x20>)
 8002a3a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000083c 	.word	0x2000083c

08002a58 <get_finished_state>:



uint8_t get_finished_state()
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	return (movement_state == GAME_FINISHED_STATE ? 1 : 0);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <get_finished_state+0x1c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	200004c8 	.word	0x200004c8

08002a78 <set_cpu_player>:

void set_cpu_player(uint8_t on)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	cpu_player = on ? BLACK : COLOR_EMPTY;
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <set_cpu_player+0x14>
 8002a88:	2201      	movs	r2, #1
 8002a8a:	e000      	b.n	8002a8e <set_cpu_player+0x16>
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <set_cpu_player+0x28>)
 8002a90:	701a      	strb	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <get_error_position>:

uint8_t get_error_position()
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	return (lighting_state == LIGHTING_ERROR_STATE ? 1 : 0);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <get_error_position+0x1c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	20001a0d 	.word	0x20001a0d

08002ac4 <get_promotion>:

piece_t get_promotion() {
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fde2 	bl	80006b2 <lcd_msg_clear>
 8002aee:	f107 041c 	add.w	r4, r7, #28
 8002af2:	463d      	mov	r5, r7
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002afc:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <get_promotion+0x22c>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f107 011c 	add.w	r1, r7, #28
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0e:	f005 fb1b 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002b12:	463b      	mov	r3, r7
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fdee 	bl	80006f6 <lcd_msg_first_line>
 8002b1a:	f107 041c 	add.w	r4, r7, #28
 8002b1e:	463d      	mov	r5, r7
 8002b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b28:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b2c:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <get_promotion+0x22c>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f107 011c 	add.w	r1, r7, #28
 8002b34:	2300      	movs	r3, #0
 8002b36:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3a:	f005 fb05 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 8002b3e:	463b      	mov	r3, r7
 8002b40:	496c      	ldr	r1, [pc, #432]	; (8002cf4 <get_promotion+0x230>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd7d 	bl	8000642 <lcd_msg_from_string>
 8002b48:	f107 041c 	add.w	r4, r7, #28
 8002b4c:	463d      	mov	r5, r7
 8002b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b56:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <get_promotion+0x22c>)
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f107 011c 	add.w	r1, r7, #28
 8002b62:	2300      	movs	r3, #0
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	f005 faee 	bl	8008148 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fde3 	bl	800073a <lcd_msg_second_line>
 8002b74:	f107 041c 	add.w	r4, r7, #28
 8002b78:	463d      	mov	r5, r7
 8002b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b82:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002b86:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <get_promotion+0x22c>)
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	f107 011c 	add.w	r1, r7, #28
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	f005 fad8 	bl	8008148 <xQueueGenericSend>
		switch (piece) {
 8002b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d86a      	bhi.n	8002c78 <get_promotion+0x1b4>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <get_promotion+0xe4>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002be9 	.word	0x08002be9
 8002bb0:	08002c49 	.word	0x08002c49
 8002bb4:	08002c19 	.word	0x08002c19
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 8002bb8:	463b      	mov	r3, r7
 8002bba:	494f      	ldr	r1, [pc, #316]	; (8002cf8 <get_promotion+0x234>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fd40 	bl	8000642 <lcd_msg_from_string>
 8002bc2:	f107 041c 	add.w	r4, r7, #28
 8002bc6:	463d      	mov	r5, r7
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bd0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002bd4:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <get_promotion+0x22c>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	f107 011c 	add.w	r1, r7, #28
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f04f 32ff 	mov.w	r2, #4294967295
 8002be2:	f005 fab1 	bl	8008148 <xQueueGenericSend>
			break;
 8002be6:	e047      	b.n	8002c78 <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 8002be8:	463b      	mov	r3, r7
 8002bea:	4944      	ldr	r1, [pc, #272]	; (8002cfc <get_promotion+0x238>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fd28 	bl	8000642 <lcd_msg_from_string>
 8002bf2:	f107 041c 	add.w	r4, r7, #28
 8002bf6:	463d      	mov	r5, r7
 8002bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c00:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002c04:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <get_promotion+0x22c>)
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	f107 011c 	add.w	r1, r7, #28
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	f005 fa99 	bl	8008148 <xQueueGenericSend>
			break;
 8002c16:	e02f      	b.n	8002c78 <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8002c18:	463b      	mov	r3, r7
 8002c1a:	4939      	ldr	r1, [pc, #228]	; (8002d00 <get_promotion+0x23c>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fd10 	bl	8000642 <lcd_msg_from_string>
 8002c22:	f107 041c 	add.w	r4, r7, #28
 8002c26:	463d      	mov	r5, r7
 8002c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c30:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <get_promotion+0x22c>)
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	f107 011c 	add.w	r1, r7, #28
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c42:	f005 fa81 	bl	8008148 <xQueueGenericSend>
			break;
 8002c46:	e017      	b.n	8002c78 <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8002c48:	463b      	mov	r3, r7
 8002c4a:	492e      	ldr	r1, [pc, #184]	; (8002d04 <get_promotion+0x240>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fcf8 	bl	8000642 <lcd_msg_from_string>
 8002c52:	f107 041c 	add.w	r4, r7, #28
 8002c56:	463d      	mov	r5, r7
 8002c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c60:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <get_promotion+0x22c>)
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	f107 011c 	add.w	r1, r7, #28
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c72:	f005 fa69 	bl	8008148 <xQueueGenericSend>
			break;
 8002c76:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <get_promotion+0x244>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f107 011b 	add.w	r1, r7, #27
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fb5d 	bl	8008344 <xQueueReceive>

		switch (button) {
 8002c8a:	7efb      	ldrb	r3, [r7, #27]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d023      	beq.n	8002cd8 <get_promotion+0x214>
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	dc22      	bgt.n	8002cda <get_promotion+0x216>
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d010      	beq.n	8002cba <get_promotion+0x1f6>
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d11e      	bne.n	8002cda <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8002c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 8002ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d902      	bls.n	8002cb4 <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	76fb      	strb	r3, [r7, #27]
			break;
 8002cb8:	e00f      	b.n	8002cda <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 8002cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 8002cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 8002ccc:	2304      	movs	r3, #4
 8002cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	76fb      	strb	r3, [r7, #27]
			break;
 8002cd6:	e000      	b.n	8002cda <get_promotion+0x216>
			break;
 8002cd8:	bf00      	nop
		}

		if (button)
 8002cda:	7efb      	ldrb	r3, [r7, #27]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d100      	bne.n	8002ce2 <get_promotion+0x21e>
		msg = lcd_msg_clear();
 8002ce0:	e701      	b.n	8002ae6 <get_promotion+0x22>
			break;
 8002ce2:	bf00      	nop
	}

	return piece;
 8002ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3738      	adds	r7, #56	; 0x38
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	200004b4 	.word	0x200004b4
 8002cf4:	0800a620 	.word	0x0800a620
 8002cf8:	0800a630 	.word	0x0800a630
 8002cfc:	0800a63c 	.word	0x0800a63c
 8002d00:	0800a648 	.word	0x0800a648
 8002d04:	0800a654 	.word	0x0800a654
 8002d08:	200004b8 	.word	0x200004b8

08002d0c <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	game_fsm();
 8002d10:	f7fd fe25 	bl	800095e <game_fsm>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <is_attacked>:
#include "./engine/board.h"
#include "./engine/moves.h"
#include <stdint.h>


int is_attacked(game_state_t * state, color_t by_color, square_t sq){
 8002d18:	b480      	push	{r7}
 8002d1a:	b08b      	sub	sp, #44	; 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	4613      	mov	r3, r2
 8002d26:	70bb      	strb	r3, [r7, #2]
    square_t from_square;


    if(by_color == WHITE){
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d12b      	bne.n	8002d86 <is_attacked+0x6e>
        if(SQ2ROW(sq) > 0){
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d052      	beq.n	8002dde <is_attacked+0xc6>
            if(SQ2COL(sq) > 0){
 8002d38:	78bb      	ldrb	r3, [r7, #2]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	dd10      	ble.n	8002d64 <is_attacked+0x4c>
                if( state->pieces[sq - 17] == PAWN &&
 8002d42:	78bb      	ldrb	r3, [r7, #2]
 8002d44:	3b11      	subs	r3, #17
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d10a      	bne.n	8002d64 <is_attacked+0x4c>
                    state->color[sq - 17] == by_color){
 8002d4e:	78bb      	ldrb	r3, [r7, #2]
 8002d50:	3b11      	subs	r3, #17
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
                if( state->pieces[sq - 17] == PAWN &&
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d101      	bne.n	8002d64 <is_attacked+0x4c>
                    return 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0fe      	b.n	8002f62 <is_attacked+0x24a>
                }
            }
            if( state->pieces[sq - 15] == PAWN &&
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	3b0f      	subs	r3, #15
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d136      	bne.n	8002dde <is_attacked+0xc6>
                state->color[sq - 15] == by_color){
 8002d70:	78bb      	ldrb	r3, [r7, #2]
 8002d72:	3b0f      	subs	r3, #15
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
            if( state->pieces[sq - 15] == PAWN &&
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d12d      	bne.n	8002dde <is_attacked+0xc6>
                return 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0ed      	b.n	8002f62 <is_attacked+0x24a>
            }
        }
    }
    else{
        if(SQ2ROW(sq) < 7){
 8002d86:	78bb      	ldrb	r3, [r7, #2]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d826      	bhi.n	8002dde <is_attacked+0xc6>
            if(SQ2COL(sq) < 7){
 8002d90:	78bb      	ldrb	r3, [r7, #2]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	dc10      	bgt.n	8002dbc <is_attacked+0xa4>
                if( state->pieces[sq + 17] == PAWN &&
 8002d9a:	78bb      	ldrb	r3, [r7, #2]
 8002d9c:	3311      	adds	r3, #17
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10a      	bne.n	8002dbc <is_attacked+0xa4>
                    state->color[sq + 17] == by_color){
 8002da6:	78bb      	ldrb	r3, [r7, #2]
 8002da8:	3311      	adds	r3, #17
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
                if( state->pieces[sq + 17] == PAWN &&
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d101      	bne.n	8002dbc <is_attacked+0xa4>
                    return 1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d2      	b.n	8002f62 <is_attacked+0x24a>
                }
            }
            if( state->pieces[sq + 15] == PAWN &&
 8002dbc:	78bb      	ldrb	r3, [r7, #2]
 8002dbe:	330f      	adds	r3, #15
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d10a      	bne.n	8002dde <is_attacked+0xc6>
                state->color[sq + 15] == by_color){
 8002dc8:	78bb      	ldrb	r3, [r7, #2]
 8002dca:	330f      	adds	r3, #15
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
            if( state->pieces[sq + 15] == PAWN &&
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d101      	bne.n	8002dde <is_attacked+0xc6>
                return 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0c1      	b.n	8002f62 <is_attacked+0x24a>
            }
        }        
    }

    //Caballo
    for(int dir = 0; dir < 8; dir++ ){
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	e020      	b.n	8002e26 <is_attacked+0x10e>
        from_square = sq + move_directions[KNIGHT][dir];
 8002de4:	4a62      	ldr	r2, [pc, #392]	; (8002f70 <is_attacked+0x258>)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	4413      	add	r3, r2
 8002dea:	3320      	adds	r3, #32
 8002dec:	f993 3000 	ldrsb.w	r3, [r3]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	78bb      	ldrb	r3, [r7, #2]
 8002df4:	4413      	add	r3, r2
 8002df6:	74bb      	strb	r3, [r7, #18]
        if (IS_VALID(from_square) && state->pieces[from_square] == KNIGHT &&
 8002df8:	7cbb      	ldrb	r3, [r7, #18]
 8002dfa:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10e      	bne.n	8002e20 <is_attacked+0x108>
 8002e02:	7cbb      	ldrb	r3, [r7, #18]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d109      	bne.n	8002e20 <is_attacked+0x108>
            state->color[from_square] == by_color){
 8002e0c:	7cbb      	ldrb	r3, [r7, #18]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
        if (IS_VALID(from_square) && state->pieces[from_square] == KNIGHT &&
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d101      	bne.n	8002e20 <is_attacked+0x108>
            return 1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0a0      	b.n	8002f62 <is_attacked+0x24a>
    for(int dir = 0; dir < 8; dir++ ){
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	3301      	adds	r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	dddb      	ble.n	8002de4 <is_attacked+0xcc>
        }
    }
    

    //Rey
    for(int dir = 0; dir < 8; dir++ ){
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	e01f      	b.n	8002e72 <is_attacked+0x15a>
        from_square = sq + move_directions[KING][dir];
 8002e32:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <is_attacked+0x258>)
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	4413      	add	r3, r2
 8002e38:	f993 3000 	ldrsb.w	r3, [r3]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	78bb      	ldrb	r3, [r7, #2]
 8002e40:	4413      	add	r3, r2
 8002e42:	74bb      	strb	r3, [r7, #18]
        if (IS_VALID(from_square) && state->pieces[from_square] == KING &&
 8002e44:	7cbb      	ldrb	r3, [r7, #18]
 8002e46:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <is_attacked+0x154>
 8002e4e:	7cbb      	ldrb	r3, [r7, #18]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <is_attacked+0x154>
            state->color[from_square] == by_color){
 8002e58:	7cbb      	ldrb	r3, [r7, #18]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
        if (IS_VALID(from_square) && state->pieces[from_square] == KING &&
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d101      	bne.n	8002e6c <is_attacked+0x154>
            return 1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e07a      	b.n	8002f62 <is_attacked+0x24a>
    for(int dir = 0; dir < 8; dir++ ){
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b07      	cmp	r3, #7
 8002e76:	dddc      	ble.n	8002e32 <is_attacked+0x11a>
        }
    }   
    uint8_t straight_dirs[] = {DIR_N, DIR_E, DIR_S, DIR_W};
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <is_attacked+0x25c>)
 8002e7a:	60fb      	str	r3, [r7, #12]

    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e031      	b.n	8002ee6 <is_attacked+0x1ce>
        uint8_t from_square = sq + straight_dirs[dir_n];
 8002e82:	f107 020c 	add.w	r2, r7, #12
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	78bb      	ldrb	r3, [r7, #2]
 8002e8e:	4413      	add	r3, r2
 8002e90:	76fb      	strb	r3, [r7, #27]

        while (IS_VALID(from_square)){
 8002e92:	e020      	b.n	8002ed6 <is_attacked+0x1be>
            if (state->pieces[from_square] != PIECE_EMPTY){
 8002e94:	7efb      	ldrb	r3, [r7, #27]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d013      	beq.n	8002ec6 <is_attacked+0x1ae>
                if ((state->color[from_square] == by_color) 
 8002e9e:	7efb      	ldrb	r3, [r7, #27]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d118      	bne.n	8002ee0 <is_attacked+0x1c8>
                &&  (state->pieces[from_square] == ROOK || state->pieces[from_square] == QUEEN ) )
 8002eae:	7efb      	ldrb	r3, [r7, #27]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d004      	beq.n	8002ec2 <is_attacked+0x1aa>
 8002eb8:	7efb      	ldrb	r3, [r7, #27]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10e      	bne.n	8002ee0 <is_attacked+0x1c8>
                    return 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04d      	b.n	8002f62 <is_attacked+0x24a>
                else{
                    break;
                }
            }
            from_square = from_square + straight_dirs[dir_n];
 8002ec6:	f107 020c 	add.w	r2, r7, #12
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	7efb      	ldrb	r3, [r7, #27]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	76fb      	strb	r3, [r7, #27]
        while (IS_VALID(from_square)){
 8002ed6:	7efb      	ldrb	r3, [r7, #27]
 8002ed8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0d9      	beq.n	8002e94 <is_attacked+0x17c>
    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	ddca      	ble.n	8002e82 <is_attacked+0x16a>
        }
        
    }

    uint8_t diag_dirs[] = {DIR_NE, DIR_SE, DIR_SW, DIR_NW};
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <is_attacked+0x260>)
 8002eee:	60bb      	str	r3, [r7, #8]

    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	e031      	b.n	8002f5a <is_attacked+0x242>
        uint8_t from_square = sq + diag_dirs[dir_n];
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4413      	add	r3, r2
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	78bb      	ldrb	r3, [r7, #2]
 8002f02:	4413      	add	r3, r2
 8002f04:	74fb      	strb	r3, [r7, #19]

        while (IS_VALID(from_square)){
 8002f06:	e020      	b.n	8002f4a <is_attacked+0x232>
            if (state->pieces[from_square] != PIECE_EMPTY){
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d013      	beq.n	8002f3a <is_attacked+0x222>
                if ((state->color[from_square] == by_color) 
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d118      	bne.n	8002f54 <is_attacked+0x23c>
                &&  (state->pieces[from_square] == QUEEN || state->pieces[from_square] == BISHOP ) )
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d004      	beq.n	8002f36 <is_attacked+0x21e>
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d10e      	bne.n	8002f54 <is_attacked+0x23c>
                    return 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e013      	b.n	8002f62 <is_attacked+0x24a>
                else{
                    break;
                }
            }
            from_square = from_square + diag_dirs[dir_n];
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4413      	add	r3, r2
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	4413      	add	r3, r2
 8002f48:	74fb      	strb	r3, [r7, #19]
        while (IS_VALID(from_square)){
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0d9      	beq.n	8002f08 <is_attacked+0x1f0>
    for(int dir_n = 0; dir_n < 4; dir_n++){
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	ddca      	ble.n	8002ef6 <is_attacked+0x1de>
        }
        
    }
    

    return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	372c      	adds	r7, #44	; 0x2c
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000008 	.word	0x20000008
 8002f74:	fff00110 	.word	0xfff00110
 8002f78:	0feff111 	.word	0x0feff111

08002f7c <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e00d      	b.n	8002fa6 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3380      	adds	r3, #128	; 0x80
 8002f92:	2202      	movs	r2, #2
 8002f94:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2206      	movs	r2, #6
 8002f9e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8002faa:	ddee      	ble.n	8002f8a <clear_game_state+0xe>
    }
    return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4603      	mov	r3, r0
 8002fca:	70fb      	strb	r3, [r7, #3]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70bb      	strb	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	78f9      	ldrb	r1, [r7, #3]
 8002fda:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	78ba      	ldrb	r2, [r7, #2]
 8002fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	2106      	movs	r1, #6
 8003008:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <engine_reset>:

game_state_t engine_game_state;

const int8_t engine_piece_scores[] = {0, QUEEN_SCORE, ROOK_SCORE, BISHOP_SCORE, KNIGHT_SCORE, PAWN_SCORE, 0};

void engine_reset(){
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
    load_fen(&engine_game_state, STARTFEN);
 8003028:	4902      	ldr	r1, [pc, #8]	; (8003034 <engine_reset+0x10>)
 800302a:	4803      	ldr	r0, [pc, #12]	; (8003038 <engine_reset+0x14>)
 800302c:	f000 fbd8 	bl	80037e0 <load_fen>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800a660 	.word	0x0800a660
 8003038:	2000083c 	.word	0x2000083c

0800303c <engine_move_piece>:

char engine_move_piece(move_t move){
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    return make_move(&engine_game_state, move, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <engine_move_piece+0x20>)
 800304a:	f000 fd77 	bl	8003b3c <make_move>
 800304e:	4603      	mov	r3, r0
 8003050:	b2db      	uxtb	r3, r3
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000083c 	.word	0x2000083c

08003060 <engine_list_moves>:

move_t pseudo_legal_moves[255] = { 0 };

int engine_list_moves(move_t moves[], char only_legal) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b0c8      	sub	sp, #288	; 0x120
 8003064:	af00      	add	r7, sp, #0
 8003066:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800306a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800306e:	6018      	str	r0, [r3, #0]
 8003070:	460a      	mov	r2, r1
 8003072:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003076:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800307a:	701a      	strb	r2, [r3, #0]
	only_legal = 1;
 800307c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003080:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
	if (only_legal) {
 8003088:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800308c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8096 	beq.w	80031c4 <engine_list_moves+0x164>

		game_state_t test_game_state = engine_game_state;
 8003098:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800309c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030a0:	4a4f      	ldr	r2, [pc, #316]	; (80031e0 <engine_list_moves+0x180>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	4611      	mov	r1, r2
 80030a6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80030aa:	461a      	mov	r2, r3
 80030ac:	f007 f98a 	bl	800a3c4 <memcpy>
		//game_state_t test_game_state;
		//memcpy(&test_game_state, &engine_game_state, sizeof(game_state_t));

		int num_pseudo_legal = generate_moves(&engine_game_state,
 80030b0:	494c      	ldr	r1, [pc, #304]	; (80031e4 <engine_list_moves+0x184>)
 80030b2:	484b      	ldr	r0, [pc, #300]	; (80031e0 <engine_list_moves+0x180>)
 80030b4:	f000 fe5c 	bl	8003d70 <generate_moves>
 80030b8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
				pseudo_legal_moves);

		int num_legal = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for (int i = 0; i < num_pseudo_legal; i++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030c8:	e073      	b.n	80031b2 <engine_list_moves+0x152>

			memcpy(&test_game_state, &engine_game_state, sizeof(game_state_t));
 80030ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030d2:	4a43      	ldr	r2, [pc, #268]	; (80031e0 <engine_list_moves+0x180>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	4611      	mov	r1, r2
 80030d8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80030dc:	461a      	mov	r2, r3
 80030de:	f007 f971 	bl	800a3c4 <memcpy>
			make_move(&test_game_state, pseudo_legal_moves[i], 0);
 80030e2:	4940      	ldr	r1, [pc, #256]	; (80031e4 <engine_list_moves+0x184>)
 80030e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f107 000c 	add.w	r0, r7, #12
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	7859      	ldrb	r1, [r3, #1]
 80030f8:	0209      	lsls	r1, r1, #8
 80030fa:	430a      	orrs	r2, r1
 80030fc:	789b      	ldrb	r3, [r3, #2]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	2300      	movs	r3, #0
 8003104:	f362 0317 	bfi	r3, r2, #0, #24
 8003108:	2200      	movs	r2, #0
 800310a:	4619      	mov	r1, r3
 800310c:	f000 fd16 	bl	8003b3c <make_move>
			uint8_t king_pos = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			while (!(test_game_state.pieces[king_pos] == KING
 8003116:	e004      	b.n	8003122 <engine_list_moves+0xc2>
					&& test_game_state.color[king_pos]
							== engine_game_state.side_to_move)) {
				king_pos++;
 8003118:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800311c:	3301      	adds	r3, #1
 800311e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			while (!(test_game_state.pieces[king_pos] == KING
 8003122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003126:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800312a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f1      	bne.n	8003118 <engine_list_moves+0xb8>
					&& test_game_state.color[king_pos]
 8003134:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003138:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800313c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003140:	4413      	add	r3, r2
 8003142:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
							== engine_game_state.side_to_move)) {
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <engine_list_moves+0x180>)
 8003148:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
			while (!(test_game_state.pieces[king_pos] == KING
 800314c:	429a      	cmp	r2, r3
 800314e:	d1e3      	bne.n	8003118 <engine_list_moves+0xb8>
			}
			if (!is_attacked(&test_game_state, test_game_state.side_to_move,
 8003150:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003154:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003158:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 800315c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fdd7 	bl	8002d18 <is_attacked>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11b      	bne.n	80031a8 <engine_list_moves+0x148>
					king_pos)) {
				moves[num_legal] = pseudo_legal_moves[i];
 8003170:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800317e:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	18d0      	adds	r0, r2, r3
 8003186:	4917      	ldr	r1, [pc, #92]	; (80031e4 <engine_list_moves+0x184>)
 8003188:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	18ca      	adds	r2, r1, r3
 8003194:	4603      	mov	r3, r0
 8003196:	8811      	ldrh	r1, [r2, #0]
 8003198:	7892      	ldrb	r2, [r2, #2]
 800319a:	8019      	strh	r1, [r3, #0]
 800319c:	709a      	strb	r2, [r3, #2]
				num_legal++;
 800319e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031a2:	3301      	adds	r3, #1
 80031a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for (int i = 0; i < num_pseudo_legal; i++) {
 80031a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031ac:	3301      	adds	r3, #1
 80031ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80031b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031ba:	429a      	cmp	r2, r3
 80031bc:	db85      	blt.n	80030ca <engine_list_moves+0x6a>
			}

		}
		return num_legal;
 80031be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c2:	e008      	b.n	80031d6 <engine_list_moves+0x176>
	} else {
		return generate_moves(&engine_game_state, moves);
 80031c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	4804      	ldr	r0, [pc, #16]	; (80031e0 <engine_list_moves+0x180>)
 80031d0:	f000 fdce 	bl	8003d70 <generate_moves>
 80031d4:	4603      	mov	r3, r0
	}
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	2000083c 	.word	0x2000083c
 80031e4:	20000940 	.word	0x20000940

080031e8 <engine_get_piece>:

char engine_get_piece(uint8_t square) {
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
	return engine_game_state.pieces[square];
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <engine_get_piece+0x1c>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	2000083c 	.word	0x2000083c

08003208 <engine_eval>:
int engine_eval(game_state_t * game_state){
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

    //
    int score = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

    for (uint8_t row=0; row < 8; row++){
 8003214:	2300      	movs	r3, #0
 8003216:	74fb      	strb	r3, [r7, #19]
 8003218:	e02f      	b.n	800327a <engine_eval+0x72>
        for (uint8_t col=0; col < 8; col++) {
 800321a:	2300      	movs	r3, #0
 800321c:	74bb      	strb	r3, [r7, #18]
 800321e:	e026      	b.n	800326e <engine_eval+0x66>

            uint8_t sq = COORD2SQ(row, col);
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	b2da      	uxtb	r2, r3
 8003226:	7cbb      	ldrb	r3, [r7, #18]
 8003228:	4413      	add	r3, r2
 800322a:	747b      	strb	r3, [r7, #17]

            if(game_state->color[sq] != COLOR_EMPTY){
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003236:	2b02      	cmp	r3, #2
 8003238:	d016      	beq.n	8003268 <engine_eval+0x60>
                int piece_score = engine_piece_scores[game_state->pieces[sq]];
 800323a:	7c7b      	ldrb	r3, [r7, #17]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	461a      	mov	r2, r3
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <engine_eval+0x98>)
 8003244:	569b      	ldrsb	r3, [r3, r2]
 8003246:	60fb      	str	r3, [r7, #12]
                if(game_state->color[sq] == WHITE)
 8003248:	7c7b      	ldrb	r3, [r7, #17]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <engine_eval+0x58>
                    score += piece_score;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e003      	b.n	8003268 <engine_eval+0x60>
                else
                    score -= piece_score;
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	617b      	str	r3, [r7, #20]
        for (uint8_t col=0; col < 8; col++) {
 8003268:	7cbb      	ldrb	r3, [r7, #18]
 800326a:	3301      	adds	r3, #1
 800326c:	74bb      	strb	r3, [r7, #18]
 800326e:	7cbb      	ldrb	r3, [r7, #18]
 8003270:	2b07      	cmp	r3, #7
 8003272:	d9d5      	bls.n	8003220 <engine_eval+0x18>
    for (uint8_t row=0; row < 8; row++){
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	3301      	adds	r3, #1
 8003278:	74fb      	strb	r3, [r7, #19]
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b07      	cmp	r3, #7
 800327e:	d9cc      	bls.n	800321a <engine_eval+0x12>
        }
    }



    if(game_state->side_to_move == WHITE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <engine_eval+0x86>
        return score;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	e001      	b.n	8003292 <engine_eval+0x8a>
    else
        return -score;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	425b      	negs	r3, r3
}
 8003292:	4618      	mov	r0, r3
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	0800a6bc 	.word	0x0800a6bc

080032a4 <update_pv_table>:
int searching_depth;

move_t pv_table[SEARCH_DEPTH][SEARCH_DEPTH];


void update_pv_table(move_t new_best_move, int ply, char is_leaf_node){
 80032a4:	b490      	push	{r4, r7}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	71fb      	strb	r3, [r7, #7]

    pv_table[ply][ply] = new_best_move;
 80032b2:	4926      	ldr	r1, [pc, #152]	; (800334c <update_pv_table+0xa8>)
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	440b      	add	r3, r1
 80032c0:	461a      	mov	r2, r3
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	8819      	ldrh	r1, [r3, #0]
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	8011      	strh	r1, [r2, #0]
 80032cc:	7093      	strb	r3, [r2, #2]
    if(is_leaf_node){//If node analyzed is a terminal node
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <update_pv_table+0x4e>
        pv_table[ply][ply + 1].from = -1; //If move bitarray is set to -1, this is a terminal node used ony for killer moves.
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3301      	adds	r3, #1
 80032d8:	481c      	ldr	r0, [pc, #112]	; (800334c <update_pv_table+0xa8>)
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	461a      	mov	r2, r3
 80032de:	0052      	lsls	r2, r2, #1
 80032e0:	441a      	add	r2, r3
 80032e2:	460b      	mov	r3, r1
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a5b      	subs	r3, r3, r1
 80032e8:	4413      	add	r3, r2
 80032ea:	4403      	add	r3, r0
 80032ec:	22ff      	movs	r2, #255	; 0xff
 80032ee:	701a      	strb	r2, [r3, #0]
    else{
        for(int j = ply + 1; j < searching_depth; j++){
            pv_table[ply][j] = pv_table[ply+1][j];
        }
    }
}
 80032f0:	e027      	b.n	8003342 <update_pv_table+0x9e>
        for(int j = ply + 1; j < searching_depth; j++){
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e01e      	b.n	8003338 <update_pv_table+0x94>
            pv_table[ply][j] = pv_table[ply+1][j];
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c59      	adds	r1, r3, #1
 80032fe:	4c13      	ldr	r4, [pc, #76]	; (800334c <update_pv_table+0xa8>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	68b8      	ldr	r0, [r7, #8]
 8003304:	461a      	mov	r2, r3
 8003306:	0052      	lsls	r2, r2, #1
 8003308:	441a      	add	r2, r3
 800330a:	4603      	mov	r3, r0
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a1b      	subs	r3, r3, r0
 8003310:	4413      	add	r3, r2
 8003312:	441c      	add	r4, r3
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <update_pv_table+0xa8>)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	461a      	mov	r2, r3
 800331a:	0052      	lsls	r2, r2, #1
 800331c:	441a      	add	r2, r3
 800331e:	460b      	mov	r3, r1
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a5b      	subs	r3, r3, r1
 8003324:	4413      	add	r3, r2
 8003326:	18c2      	adds	r2, r0, r3
 8003328:	4623      	mov	r3, r4
 800332a:	8811      	ldrh	r1, [r2, #0]
 800332c:	7892      	ldrb	r2, [r2, #2]
 800332e:	8019      	strh	r1, [r3, #0]
 8003330:	709a      	strb	r2, [r3, #2]
        for(int j = ply + 1; j < searching_depth; j++){
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <update_pv_table+0xac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	429a      	cmp	r2, r3
 8003340:	dbdb      	blt.n	80032fa <update_pv_table+0x56>
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bc90      	pop	{r4, r7}
 800334a:	4770      	bx	lr
 800334c:	20000c48 	.word	0x20000c48
 8003350:	20000c44 	.word	0x20000c44

08003354 <negamax>:


int negamax(game_state_t prev_node_state, int alpha, int beta, int depth) {
 8003354:	b084      	sub	sp, #16
 8003356:	b590      	push	{r4, r7, lr}
 8003358:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 800335c:	af40      	add	r7, sp, #256	; 0x100
 800335e:	f507 7416 	add.w	r4, r7, #600	; 0x258
 8003362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    x++;
 8003366:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <negamax+0x1d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <negamax+0x1d0>)
 800336e:	6013      	str	r3, [r2, #0]

    //Leaf node conditions

    if(depth == 0){
 8003370:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <negamax+0x30>
        return engine_eval(&prev_node_state);
 8003378:	f507 7016 	add.w	r0, r7, #600	; 0x258
 800337c:	f7ff ff44 	bl	8003208 <engine_eval>
 8003380:	4603      	mov	r3, r0
 8003382:	e0c7      	b.n	8003514 <negamax+0x1c0>
    }


    int ply = searching_depth - depth;
 8003384:	4b68      	ldr	r3, [pc, #416]	; (8003528 <negamax+0x1d4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    int win_score = MIN_EVAL + ply; //Further into the tree, the lower the win_score is
 8003392:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003396:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800339a:	3b10      	subs	r3, #16
 800339c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    //If window is an infinite window, limit the values to win score
    if (alpha < win_score) alpha = win_score;
 80033a0:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80033a4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	da03      	bge.n	80033b4 <negamax+0x60>
 80033ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033b0:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    if (beta > -win_score - 1) beta = -win_score - 1;
 80033b4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033b8:	43db      	mvns	r3, r3
 80033ba:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80033be:	429a      	cmp	r2, r3
 80033c0:	dd04      	ble.n	80033cc <negamax+0x78>
 80033c2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033c6:	43db      	mvns	r3, r3
 80033c8:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
    if (alpha >= beta){
 80033cc:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80033d0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80033d4:	429a      	cmp	r2, r3
 80033d6:	db02      	blt.n	80033de <negamax+0x8a>
        return alpha;
 80033d8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80033dc:	e09a      	b.n	8003514 <negamax+0x1c0>
    }

    //Generate moves
    move_t possible_moves[MAX_POSSIBLE_MOVEMENTS];
    int num_moves = engine_list_moves(possible_moves, 1);
 80033de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fe3b 	bl	8003060 <engine_list_moves>
 80033ea:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238

    if(num_moves == 0){
 80033ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <negamax+0xa6>
        return MIN_EVAL;
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <negamax+0x1d8>)
 80033f8:	e08c      	b.n	8003514 <negamax+0x1c0>
    }



    for(int i = 0; i < num_moves; i++){
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8003400:	e07f      	b.n	8003502 <negamax+0x1ae>
        game_state_t node_state = prev_node_state;
 8003402:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003406:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800340a:	4618      	mov	r0, r3
 800340c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003410:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003414:	4619      	mov	r1, r3
 8003416:	f006 ffd5 	bl	800a3c4 <memcpy>
        make_move(&node_state, possible_moves[i], 1);
 800341a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800341e:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 8003422:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	440b      	add	r3, r1
 800342e:	1d38      	adds	r0, r7, #4
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	7859      	ldrb	r1, [r3, #1]
 8003434:	0209      	lsls	r1, r1, #8
 8003436:	430a      	orrs	r2, r1
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	2300      	movs	r3, #0
 8003440:	f362 0317 	bfi	r3, r2, #0, #24
 8003444:	2201      	movs	r2, #1
 8003446:	4619      	mov	r1, r3
 8003448:	f000 fb78 	bl	8003b3c <make_move>

        int score = -negamax(node_state, -beta, -alpha, depth - 1);
 800344c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8003450:	425b      	negs	r3, r3
 8003452:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8003456:	4252      	negs	r2, r2
 8003458:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 800345c:	3901      	subs	r1, #1
 800345e:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8003462:	f5a0 7411 	sub.w	r4, r0, #580	; 0x244
 8003466:	913f      	str	r1, [sp, #252]	; 0xfc
 8003468:	923e      	str	r2, [sp, #248]	; 0xf8
 800346a:	933d      	str	r3, [sp, #244]	; 0xf4
 800346c:	4668      	mov	r0, sp
 800346e:	f104 0310 	add.w	r3, r4, #16
 8003472:	22f2      	movs	r2, #242	; 0xf2
 8003474:	4619      	mov	r1, r3
 8003476:	f006 ffa5 	bl	800a3c4 <memcpy>
 800347a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800347e:	f7ff ff69 	bl	8003354 <negamax>
 8003482:	4603      	mov	r3, r0
 8003484:	425b      	negs	r3, r3
 8003486:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

        //Update alpha (better child node has been found)
        if(score > alpha){
 800348a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800348e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8003492:	429a      	cmp	r2, r3
 8003494:	dd30      	ble.n	80034f8 <negamax+0x1a4>
            alpha = score;
 8003496:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800349a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

            update_pv_table(possible_moves[i], ply, score == MAX_EVAL);
 800349e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80034a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80034b6:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 80034ba:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	7859      	ldrb	r1, [r3, #1]
 80034ca:	0209      	lsls	r1, r1, #8
 80034cc:	430a      	orrs	r2, r1
 80034ce:	789b      	ldrb	r3, [r3, #2]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	f362 0317 	bfi	r3, r2, #0, #24
 80034da:	4602      	mov	r2, r0
 80034dc:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fedf 	bl	80032a4 <update_pv_table>

            if(score >= beta){
 80034e6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80034ea:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80034ee:	429a      	cmp	r2, r3
 80034f0:	db02      	blt.n	80034f8 <negamax+0x1a4>
                //If condition is met, this node is garanteed to have a score smaller than
                //another previously searched sibling node

                return beta;
 80034f2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80034f6:	e00d      	b.n	8003514 <negamax+0x1c0>
    for(int i = 0; i < num_moves; i++){
 80034f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8003502:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003506:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800350a:	429a      	cmp	r2, r3
 800350c:	f6ff af79 	blt.w	8003402 <negamax+0xae>
            }
        }
    }
    return alpha;
 8003510:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c

}
 8003514:	4618      	mov	r0, r3
 8003516:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003520:	b004      	add	sp, #16
 8003522:	4770      	bx	lr
 8003524:	20000c40 	.word	0x20000c40
 8003528:	20000c44 	.word	0x20000c44
 800352c:	ffffd8f0 	.word	0xffffd8f0

08003530 <root_search>:

int root_search(game_state_t prev_node_state, int depth) {
 8003530:	b084      	sub	sp, #16
 8003532:	b590      	push	{r4, r7, lr}
 8003534:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 8003538:	af40      	add	r7, sp, #256	; 0x100
 800353a:	f507 7418 	add.w	r4, r7, #608	; 0x260
 800353e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    //Leaf node conditions

    int ply = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    int alpha = MIN_EVAL;
 8003548:	4b55      	ldr	r3, [pc, #340]	; (80036a0 <root_search+0x170>)
 800354a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    int beta = MAX_EVAL;
 800354e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003552:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    int win_score = MAX_EVAL - ply; //Further into the tree, the lower the win_score is
 8003556:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800355a:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800355e:	3310      	adds	r3, #16
 8003560:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c


    //Generate moves
    move_t possible_moves[MAX_POSSIBLE_MOVEMENTS];
    int num_moves = engine_list_moves(possible_moves, 1);
 8003564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd78 	bl	8003060 <engine_list_moves>
 8003570:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238

    for(int i = 0; i < num_moves; i++){
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800357a:	e07f      	b.n	800367c <root_search+0x14c>
        game_state_t node_state = prev_node_state;
 800357c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8003584:	4618      	mov	r0, r3
 8003586:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800358a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800358e:	4619      	mov	r1, r3
 8003590:	f006 ff18 	bl	800a3c4 <memcpy>
        make_move(&node_state, possible_moves[i], 1);
 8003594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003598:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 800359c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	1d38      	adds	r0, r7, #4
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	7859      	ldrb	r1, [r3, #1]
 80035ae:	0209      	lsls	r1, r1, #8
 80035b0:	430a      	orrs	r2, r1
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	f362 0317 	bfi	r3, r2, #0, #24
 80035be:	2201      	movs	r2, #1
 80035c0:	4619      	mov	r1, r3
 80035c2:	f000 fabb 	bl	8003b3c <make_move>

        int score = -negamax(node_state, -beta, -alpha, depth - 1);
 80035c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80035ca:	425b      	negs	r3, r3
 80035cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80035d0:	4252      	negs	r2, r2
 80035d2:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 80035d6:	3901      	subs	r1, #1
 80035d8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80035dc:	f5a0 7413 	sub.w	r4, r0, #588	; 0x24c
 80035e0:	913f      	str	r1, [sp, #252]	; 0xfc
 80035e2:	923e      	str	r2, [sp, #248]	; 0xf8
 80035e4:	933d      	str	r3, [sp, #244]	; 0xf4
 80035e6:	4668      	mov	r0, sp
 80035e8:	f104 0310 	add.w	r3, r4, #16
 80035ec:	22f2      	movs	r2, #242	; 0xf2
 80035ee:	4619      	mov	r1, r3
 80035f0:	f006 fee8 	bl	800a3c4 <memcpy>
 80035f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035f8:	f7ff feac 	bl	8003354 <negamax>
 80035fc:	4603      	mov	r3, r0
 80035fe:	425b      	negs	r3, r3
 8003600:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

        //Beta cut-off


        //Update alpha (better child node has been found)
        if(score > alpha){
 8003604:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003608:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800360c:	429a      	cmp	r2, r3
 800360e:	dd30      	ble.n	8003672 <root_search+0x142>
            alpha = score;
 8003610:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003614:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

            update_pv_table(possible_moves[i], ply, score == MAX_EVAL);
 8003618:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800361c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003620:	4293      	cmp	r3, r2
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003630:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 8003634:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	440b      	add	r3, r1
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	7859      	ldrb	r1, [r3, #1]
 8003644:	0209      	lsls	r1, r1, #8
 8003646:	430a      	orrs	r2, r1
 8003648:	789b      	ldrb	r3, [r3, #2]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	431a      	orrs	r2, r3
 800364e:	2300      	movs	r3, #0
 8003650:	f362 0317 	bfi	r3, r2, #0, #24
 8003654:	4602      	mov	r2, r0
 8003656:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fe22 	bl	80032a4 <update_pv_table>

            if(score >= beta){
 8003660:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003664:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003668:	429a      	cmp	r2, r3
 800366a:	db02      	blt.n	8003672 <root_search+0x142>
                //If condition is met, this node is garanteed to have a score smaller than
                //another previously searched sibling node

                return beta;
 800366c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003670:	e00d      	b.n	800368e <root_search+0x15e>
    for(int i = 0; i < num_moves; i++){
 8003672:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003676:	3301      	adds	r3, #1
 8003678:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800367c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003680:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003684:	429a      	cmp	r2, r3
 8003686:	f6ff af79 	blt.w	800357c <root_search+0x4c>
            }
        }
    }
    return alpha;
 800368a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c

}
 800368e:	4618      	mov	r0, r3
 8003690:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800369a:	b004      	add	sp, #16
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	ffffd8f0 	.word	0xffffd8f0

080036a4 <engine_search>:

move_t engine_search(){
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80036aa:	af3e      	add	r7, sp, #248	; 0xf8

    game_state_t state = engine_game_state;
 80036ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80036b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036b4:	4a46      	ldr	r2, [pc, #280]	; (80037d0 <engine_search+0x12c>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	4611      	mov	r1, r2
 80036ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 80036be:	461a      	mov	r2, r3
 80036c0:	f006 fe80 	bl	800a3c4 <memcpy>

    x = 0;
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <engine_search+0x130>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
    move_t possible_moves[MAX_POSSIBLE_MOVEMENTS];


    int score;

    for(int i = 0; i < SEARCH_DEPTH; i++){
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80036d0:	e021      	b.n	8003716 <engine_search+0x72>
        for(int j = 0; j < SEARCH_DEPTH; j++){
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80036d8:	e014      	b.n	8003704 <engine_search+0x60>
            pv_table[i][j].to = -1;
 80036da:	483f      	ldr	r0, [pc, #252]	; (80037d8 <engine_search+0x134>)
 80036dc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80036e0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80036e4:	461a      	mov	r2, r3
 80036e6:	0052      	lsls	r2, r2, #1
 80036e8:	441a      	add	r2, r3
 80036ea:	460b      	mov	r3, r1
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a5b      	subs	r3, r3, r1
 80036f0:	4413      	add	r3, r2
 80036f2:	4403      	add	r3, r0
 80036f4:	3301      	adds	r3, #1
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < SEARCH_DEPTH; j++){
 80036fa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80036fe:	3301      	adds	r3, #1
 8003700:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8003704:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003708:	2b04      	cmp	r3, #4
 800370a:	dde6      	ble.n	80036da <engine_search+0x36>
    for(int i = 0; i < SEARCH_DEPTH; i++){
 800370c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003710:	3301      	adds	r3, #1
 8003712:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8003716:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800371a:	2b04      	cmp	r3, #4
 800371c:	ddd9      	ble.n	80036d2 <engine_search+0x2e>
        }
    }

    for(int depth = 2; depth <= SEARCH_DEPTH; depth++){
 800371e:	2302      	movs	r3, #2
 8003720:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8003724:	e025      	b.n	8003772 <engine_search+0xce>
        //std::cout << "searching depth " << depth << std::endl;
        searching_depth = depth;
 8003726:	4a2d      	ldr	r2, [pc, #180]	; (80037dc <engine_search+0x138>)
 8003728:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800372c:	6013      	str	r3, [r2, #0]
        score =  root_search(state, depth);
 800372e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003732:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8003736:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800373a:	933d      	str	r3, [sp, #244]	; 0xf4
 800373c:	4668      	mov	r0, sp
 800373e:	f104 0310 	add.w	r3, r4, #16
 8003742:	22f2      	movs	r2, #242	; 0xf2
 8003744:	4619      	mov	r1, r3
 8003746:	f006 fe3d 	bl	800a3c4 <memcpy>
 800374a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800374e:	f7ff feef 	bl	8003530 <root_search>
 8003752:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
        if(abs(score) > MAX_EVAL - 100){
 8003756:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	425b      	neglt	r3, r3
 8003760:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8003764:	4293      	cmp	r3, r2
 8003766:	dc09      	bgt.n	800377c <engine_search+0xd8>
    for(int depth = 2; depth <= SEARCH_DEPTH; depth++){
 8003768:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800376c:	3301      	adds	r3, #1
 800376e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8003772:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003776:	2b05      	cmp	r3, #5
 8003778:	ddd5      	ble.n	8003726 <engine_search+0x82>
 800377a:	e000      	b.n	800377e <engine_search+0xda>
            break;
 800377c:	bf00      	nop
        }
    }


    move_t best_move = pv_table[0][0];
 800377e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003782:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <engine_search+0x134>)
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4611      	mov	r1, r2
 800378c:	8019      	strh	r1, [r3, #0]
 800378e:	3302      	adds	r3, #2
 8003790:	0c12      	lsrs	r2, r2, #16
 8003792:	701a      	strb	r2, [r3, #0]

    //std::cout << "pv: ";
    return best_move;
 8003794:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003798:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800379c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4611      	mov	r1, r2
 80037a4:	8019      	strh	r1, [r3, #0]
 80037a6:	3302      	adds	r3, #2
 80037a8:	0c12      	lsrs	r2, r2, #16
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	f897 2234 	ldrb.w	r2, [r7, #564]	; 0x234
 80037b2:	f362 0307 	bfi	r3, r2, #0, #8
 80037b6:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 80037ba:	f362 230f 	bfi	r3, r2, #8, #8
 80037be:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 80037c2:	f362 4317 	bfi	r3, r2, #16, #8

}
 80037c6:	4618      	mov	r0, r3
 80037c8:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	2000083c 	.word	0x2000083c
 80037d4:	20000c40 	.word	0x20000c40
 80037d8:	20000c48 	.word	0x20000c48
 80037dc:	20000c44 	.word	0x20000c44

080037e0 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fbc6 	bl	8002f7c <clear_game_state>

    char * f = (char *)fen;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

    char col = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 80037f8:	2307      	movs	r3, #7
 80037fa:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	3b2f      	subs	r3, #47	; 0x2f
 8003802:	2b43      	cmp	r3, #67	; 0x43
 8003804:	f200 8166 	bhi.w	8003ad4 <load_fen+0x2f4>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <load_fen+0x30>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003a89 	.word	0x08003a89
 8003814:	08003ad5 	.word	0x08003ad5
 8003818:	08003a95 	.word	0x08003a95
 800381c:	08003a9d 	.word	0x08003a9d
 8003820:	08003aa5 	.word	0x08003aa5
 8003824:	08003aad 	.word	0x08003aad
 8003828:	08003ab5 	.word	0x08003ab5
 800382c:	08003abd 	.word	0x08003abd
 8003830:	08003ac5 	.word	0x08003ac5
 8003834:	08003acd 	.word	0x08003acd
 8003838:	08003ad5 	.word	0x08003ad5
 800383c:	08003ad5 	.word	0x08003ad5
 8003840:	08003ad5 	.word	0x08003ad5
 8003844:	08003ad5 	.word	0x08003ad5
 8003848:	08003ad5 	.word	0x08003ad5
 800384c:	08003ad5 	.word	0x08003ad5
 8003850:	08003ad5 	.word	0x08003ad5
 8003854:	08003ad5 	.word	0x08003ad5
 8003858:	08003ad5 	.word	0x08003ad5
 800385c:	0800397b 	.word	0x0800397b
 8003860:	08003ad5 	.word	0x08003ad5
 8003864:	08003ad5 	.word	0x08003ad5
 8003868:	08003ad5 	.word	0x08003ad5
 800386c:	08003ad5 	.word	0x08003ad5
 8003870:	08003ad5 	.word	0x08003ad5
 8003874:	08003ad5 	.word	0x08003ad5
 8003878:	08003ad5 	.word	0x08003ad5
 800387c:	08003ad5 	.word	0x08003ad5
 8003880:	08003921 	.word	0x08003921
 8003884:	08003ad5 	.word	0x08003ad5
 8003888:	08003ad5 	.word	0x08003ad5
 800388c:	08003999 	.word	0x08003999
 8003890:	08003ad5 	.word	0x08003ad5
 8003894:	080039b7 	.word	0x080039b7
 8003898:	0800393f 	.word	0x0800393f
 800389c:	0800395d 	.word	0x0800395d
 80038a0:	08003ad5 	.word	0x08003ad5
 80038a4:	08003ad5 	.word	0x08003ad5
 80038a8:	08003ad5 	.word	0x08003ad5
 80038ac:	08003ad5 	.word	0x08003ad5
 80038b0:	08003ad5 	.word	0x08003ad5
 80038b4:	08003ad5 	.word	0x08003ad5
 80038b8:	08003ad5 	.word	0x08003ad5
 80038bc:	08003ad5 	.word	0x08003ad5
 80038c0:	08003ad5 	.word	0x08003ad5
 80038c4:	08003ad5 	.word	0x08003ad5
 80038c8:	08003ad5 	.word	0x08003ad5
 80038cc:	08003ad5 	.word	0x08003ad5
 80038d0:	08003ad5 	.word	0x08003ad5
 80038d4:	08003ad5 	.word	0x08003ad5
 80038d8:	08003ad5 	.word	0x08003ad5
 80038dc:	08003a2f 	.word	0x08003a2f
 80038e0:	08003ad5 	.word	0x08003ad5
 80038e4:	08003ad5 	.word	0x08003ad5
 80038e8:	08003ad5 	.word	0x08003ad5
 80038ec:	08003ad5 	.word	0x08003ad5
 80038f0:	08003ad5 	.word	0x08003ad5
 80038f4:	08003ad5 	.word	0x08003ad5
 80038f8:	08003ad5 	.word	0x08003ad5
 80038fc:	08003ad5 	.word	0x08003ad5
 8003900:	080039d5 	.word	0x080039d5
 8003904:	08003ad5 	.word	0x08003ad5
 8003908:	08003ad5 	.word	0x08003ad5
 800390c:	08003a4d 	.word	0x08003a4d
 8003910:	08003ad5 	.word	0x08003ad5
 8003914:	08003a6b 	.word	0x08003a6b
 8003918:	080039f3 	.word	0x080039f3
 800391c:	08003a11 	.word	0x08003a11
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8003920:	7abb      	ldrb	r3, [r7, #10]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	b2da      	uxtb	r2, r3
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	4413      	add	r3, r2
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fb42 	bl	8002fba <place_piece>
            col++;
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	3301      	adds	r3, #1
 800393a:	72fb      	strb	r3, [r7, #11]
            break;
 800393c:	e0ca      	b.n	8003ad4 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 800393e:	7abb      	ldrb	r3, [r7, #10]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	b2da      	uxtb	r2, r3
 8003944:	7afb      	ldrb	r3, [r7, #11]
 8003946:	4413      	add	r3, r2
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fb33 	bl	8002fba <place_piece>
            col++;
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	3301      	adds	r3, #1
 8003958:	72fb      	strb	r3, [r7, #11]
            break;
 800395a:	e0bb      	b.n	8003ad4 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 800395c:	7abb      	ldrb	r3, [r7, #10]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	b2da      	uxtb	r2, r3
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	4413      	add	r3, r2
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2200      	movs	r2, #0
 800396a:	2102      	movs	r1, #2
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fb24 	bl	8002fba <place_piece>
            col++;
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	3301      	adds	r3, #1
 8003976:	72fb      	strb	r3, [r7, #11]
            break;
 8003978:	e0ac      	b.n	8003ad4 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 800397a:	7abb      	ldrb	r3, [r7, #10]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	b2da      	uxtb	r2, r3
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	4413      	add	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2200      	movs	r2, #0
 8003988:	2103      	movs	r1, #3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fb15 	bl	8002fba <place_piece>
            col++;
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	3301      	adds	r3, #1
 8003994:	72fb      	strb	r3, [r7, #11]
            break;
 8003996:	e09d      	b.n	8003ad4 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8003998:	7abb      	ldrb	r3, [r7, #10]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	b2da      	uxtb	r2, r3
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	4413      	add	r3, r2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	2104      	movs	r1, #4
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fb06 	bl	8002fba <place_piece>
            col++;
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	3301      	adds	r3, #1
 80039b2:	72fb      	strb	r3, [r7, #11]
            break;
 80039b4:	e08e      	b.n	8003ad4 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 80039b6:	7abb      	ldrb	r3, [r7, #10]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	4413      	add	r3, r2
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	2105      	movs	r1, #5
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff faf7 	bl	8002fba <place_piece>
            col++;
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	3301      	adds	r3, #1
 80039d0:	72fb      	strb	r3, [r7, #11]
            break;
 80039d2:	e07f      	b.n	8003ad4 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 80039d4:	7abb      	ldrb	r3, [r7, #10]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	4413      	add	r3, r2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2201      	movs	r2, #1
 80039e2:	2100      	movs	r1, #0
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fae8 	bl	8002fba <place_piece>
            col++;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	3301      	adds	r3, #1
 80039ee:	72fb      	strb	r3, [r7, #11]
            break;
 80039f0:	e070      	b.n	8003ad4 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 80039f2:	7abb      	ldrb	r3, [r7, #10]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	4413      	add	r3, r2
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	2101      	movs	r1, #1
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fad9 	bl	8002fba <place_piece>
            col++;
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	72fb      	strb	r3, [r7, #11]
            break;
 8003a0e:	e061      	b.n	8003ad4 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8003a10:	7abb      	ldrb	r3, [r7, #10]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	4413      	add	r3, r2
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2102      	movs	r1, #2
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff faca 	bl	8002fba <place_piece>
            col++;
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	72fb      	strb	r3, [r7, #11]
            break;
 8003a2c:	e052      	b.n	8003ad4 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 8003a2e:	7abb      	ldrb	r3, [r7, #10]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	4413      	add	r3, r2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fabb 	bl	8002fba <place_piece>
            col++;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
 8003a46:	3301      	adds	r3, #1
 8003a48:	72fb      	strb	r3, [r7, #11]
            break;
 8003a4a:	e043      	b.n	8003ad4 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8003a4c:	7abb      	ldrb	r3, [r7, #10]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	4413      	add	r3, r2
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff faac 	bl	8002fba <place_piece>
            col++;
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	3301      	adds	r3, #1
 8003a66:	72fb      	strb	r3, [r7, #11]
            break;
 8003a68:	e034      	b.n	8003ad4 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 8003a6a:	7abb      	ldrb	r3, [r7, #10]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	4413      	add	r3, r2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2201      	movs	r2, #1
 8003a78:	2105      	movs	r1, #5
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fa9d 	bl	8002fba <place_piece>
            col++;
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	3301      	adds	r3, #1
 8003a84:	72fb      	strb	r3, [r7, #11]
            break;
 8003a86:	e025      	b.n	8003ad4 <load_fen+0x2f4>
        case '/':
            row--;
 8003a88:	7abb      	ldrb	r3, [r7, #10]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	72bb      	strb	r3, [r7, #10]
            col=0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	72fb      	strb	r3, [r7, #11]
            break;
 8003a92:	e01f      	b.n	8003ad4 <load_fen+0x2f4>
        case '1':
            col+=1;
 8003a94:	7afb      	ldrb	r3, [r7, #11]
 8003a96:	3301      	adds	r3, #1
 8003a98:	72fb      	strb	r3, [r7, #11]
            break;
 8003a9a:	e01b      	b.n	8003ad4 <load_fen+0x2f4>
        case '2':
            col+=2;
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	72fb      	strb	r3, [r7, #11]
            break;
 8003aa2:	e017      	b.n	8003ad4 <load_fen+0x2f4>
        case '3':
            col+=3;
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	3303      	adds	r3, #3
 8003aa8:	72fb      	strb	r3, [r7, #11]
            break;
 8003aaa:	e013      	b.n	8003ad4 <load_fen+0x2f4>
        case '4':
            col+=4;
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	72fb      	strb	r3, [r7, #11]
            break;
 8003ab2:	e00f      	b.n	8003ad4 <load_fen+0x2f4>
        case '5':
            col+=5;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	3305      	adds	r3, #5
 8003ab8:	72fb      	strb	r3, [r7, #11]
            break;
 8003aba:	e00b      	b.n	8003ad4 <load_fen+0x2f4>
        case '6':
            col+=6;
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	3306      	adds	r3, #6
 8003ac0:	72fb      	strb	r3, [r7, #11]
            break;
 8003ac2:	e007      	b.n	8003ad4 <load_fen+0x2f4>
        case '7':
            col+=7;
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	3307      	adds	r3, #7
 8003ac8:	72fb      	strb	r3, [r7, #11]
            break;
 8003aca:	e003      	b.n	8003ad4 <load_fen+0x2f4>
        case '8':
            col+=8;
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	72fb      	strb	r3, [r7, #11]
            break;
 8003ad2:	bf00      	nop
        };

        f++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	f47f ae8c 	bne.w	80037fc <load_fen+0x1c>

    f++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b77      	cmp	r3, #119	; 0x77
 8003af0:	d104      	bne.n	8003afc <load_fen+0x31c>
        state->side_to_move = WHITE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003afa:	e003      	b.n	8003b04 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3302      	adds	r3, #2
 8003b08:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d1f8      	bne.n	8003b0a <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d1f8      	bne.n	8003b1e <load_fen+0x33e>
    f++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b48:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b52:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003b56:	6019      	str	r1, [r3, #0]
 8003b58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b5c:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8003b60:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8003b62:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b66:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b70:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d101      	bne.n	8003b7e <make_move+0x42>
        return 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e0eb      	b.n	8003d56 <make_move+0x21a>

    if(safe){
 8003b7e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b82:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05d      	beq.n	8003c48 <make_move+0x10c>
        uint8_t move_ok = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8003b92:	f107 0214 	add.w	r2, r7, #20
 8003b96:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003b9a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f000 f8e5 	bl	8003d70 <generate_moves>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8003bb2:	e03d      	b.n	8003c30 <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8003bb4:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8003bb8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003bbc:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003bce:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d126      	bne.n	8003c26 <make_move+0xea>
 8003bd8:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8003bdc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003be0:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	3301      	adds	r3, #1
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003bf4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d113      	bne.n	8003c26 <make_move+0xea>
                move_ok = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 8003c04:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8003c08:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c0c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	440b      	add	r3, r1
 8003c18:	3302      	adds	r3, #2
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c20:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003c24:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 8003c26:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8003c30:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8003c34:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3bb      	bcc.n	8003bb4 <make_move+0x78>
            }
        }
        if(!move_ok){
 8003c3c:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <make_move+0x10c>
            return 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e086      	b.n	8003d56 <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8003c48:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c4c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003c56:	f1c3 0301 	rsb	r3, r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c60:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8003c6a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c6e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c7a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	5c9b      	ldrb	r3, [r3, r2]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d00c      	beq.n	8003ca0 <make_move+0x164>
        remove_piece(state, move.to);
 8003c86:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c8a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003c8e:	785a      	ldrb	r2, [r3, #1]
 8003c90:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003c94:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003c98:	4611      	mov	r1, r2
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	f7ff f9ab 	bl	8002ff6 <remove_piece>

    if(move.promotion != 0)
 8003ca0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003ca4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003ca8:	789b      	ldrb	r3, [r3, #2]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 8003cae:	f000 f857 	bl	8003d60 <check_promotion>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003cba:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003cc6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003cd2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003cd6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8003ce0:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	6800      	ldr	r0, [r0, #0]
 8003ce8:	f7ff f967 	bl	8002fba <place_piece>
 8003cec:	e025      	b.n	8003d3a <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8003cee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003cf2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003cfe:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	5c99      	ldrb	r1, [r3, r2]
 8003d06:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d0a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d16:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003d22:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d26:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8003d30:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8003d34:	6800      	ldr	r0, [r0, #0]
 8003d36:	f7ff f940 	bl	8002fba <place_piece>
    }

    remove_piece(state, move.from);
 8003d3a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d3e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8003d48:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	f7ff f951 	bl	8002ff6 <remove_piece>
    return 1;
 8003d54:	2301      	movs	r3, #1
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd90      	pop	{r4, r7, pc}

08003d60 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
    return get_promotion();
 8003d64:	f7fe feae 	bl	8002ac4 <get_promotion>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e29f      	b.n	80042c4 <generate_moves+0x554>

        uint8_t piece_type = state->pieces[square];
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	f000 8291 	beq.w	80042b8 <generate_moves+0x548>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3380      	adds	r3, #128	; 0x80
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f040 8288 	bne.w	80042bc <generate_moves+0x54c>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 8003dac:	7b7b      	ldrb	r3, [r7, #13]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	f040 81fa 	bne.w	80041a8 <generate_moves+0x438>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 80fa 	bne.w	8003fb4 <generate_moves+0x244>
                if(IS_VALID(square + DIR_N)){
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3310      	adds	r3, #16
 8003dc4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d168      	bne.n	8003e9e <generate_moves+0x12e>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	3310      	adds	r3, #16
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d162      	bne.n	8003e9e <generate_moves+0x12e>
                        moves[n_moves].from = square;
 8003dd8:	8afa      	ldrh	r2, [r7, #22]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	b2d9      	uxtb	r1, r3
 8003dee:	8afa      	ldrh	r2, [r7, #22]
 8003df0:	4613      	mov	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f101 0210 	add.w	r2, r1, #16
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003e02:	8afa      	ldrh	r2, [r7, #22]
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003e12:	8afa      	ldrh	r2, [r7, #22]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d107      	bne.n	8003e38 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8003e28:	8afa      	ldrh	r2, [r7, #22]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	2201      	movs	r2, #1
 8003e36:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003e38:	8afb      	ldrh	r3, [r7, #22]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	82fa      	strh	r2, [r7, #22]
 8003e3e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e40:	f200 8245 	bhi.w	80042ce <generate_moves+0x55e>
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	111b      	asrs	r3, r3, #4
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d128      	bne.n	8003e9e <generate_moves+0x12e>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3320      	adds	r3, #32
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d122      	bne.n	8003e9e <generate_moves+0x12e>
                            moves[n_moves].from = square;
 8003e58:	8afa      	ldrh	r2, [r7, #22]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	b2d9      	uxtb	r1, r3
 8003e6e:	8afa      	ldrh	r2, [r7, #22]
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f101 0220 	add.w	r2, r1, #32
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 8003e82:	8afa      	ldrh	r2, [r7, #22]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 8003e92:	8afb      	ldrh	r3, [r7, #22]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	82fa      	strh	r2, [r7, #22]
 8003e98:	2bfe      	cmp	r3, #254	; 0xfe
 8003e9a:	f200 821a 	bhi.w	80042d2 <generate_moves+0x562>
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3311      	adds	r3, #17
 8003ea2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d13d      	bne.n	8003f26 <generate_moves+0x1b6>
                    if(state->color[square + DIR_NE] == BLACK){
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3311      	adds	r3, #17
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d135      	bne.n	8003f26 <generate_moves+0x1b6>
                        moves[n_moves].from = square;
 8003eba:	8afa      	ldrh	r2, [r7, #22]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	b2d9      	uxtb	r1, r3
 8003ed0:	8afa      	ldrh	r2, [r7, #22]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	f101 0211 	add.w	r2, r1, #17
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003ee4:	8afa      	ldrh	r2, [r7, #22]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003ef4:	8afa      	ldrh	r2, [r7, #22]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b07      	cmp	r3, #7
 8003f08:	d107      	bne.n	8003f1a <generate_moves+0x1aa>
                            moves[n_moves].promotion = 1;
 8003f0a:	8afa      	ldrh	r2, [r7, #22]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	2201      	movs	r2, #1
 8003f18:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	82fa      	strh	r2, [r7, #22]
 8003f20:	2bfe      	cmp	r3, #254	; 0xfe
 8003f22:	f200 81d8 	bhi.w	80042d6 <generate_moves+0x566>
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	330f      	adds	r3, #15
 8003f2a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 81c5 	bne.w	80042be <generate_moves+0x54e>
                    if(state->color[square + DIR_NW] == BLACK){
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	330f      	adds	r3, #15
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 81bc 	bne.w	80042be <generate_moves+0x54e>
                        moves[n_moves].from = square;
 8003f46:	8afa      	ldrh	r2, [r7, #22]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	b2d9      	uxtb	r1, r3
 8003f5c:	8afa      	ldrh	r2, [r7, #22]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	f101 020f 	add.w	r2, r1, #15
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003f70:	8afa      	ldrh	r2, [r7, #22]
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003f80:	8afa      	ldrh	r2, [r7, #22]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b07      	cmp	r3, #7
 8003f94:	d107      	bne.n	8003fa6 <generate_moves+0x236>
                            moves[n_moves].promotion = 1;
 8003f96:	8afa      	ldrh	r2, [r7, #22]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8003fa6:	8afb      	ldrh	r3, [r7, #22]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	82fa      	strh	r2, [r7, #22]
 8003fac:	2bfe      	cmp	r3, #254	; 0xfe
 8003fae:	f240 8186 	bls.w	80042be <generate_moves+0x54e>
 8003fb2:	e197      	b.n	80042e4 <generate_moves+0x574>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3b10      	subs	r3, #16
 8003fb8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d168      	bne.n	8004092 <generate_moves+0x322>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3b10      	subs	r3, #16
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d162      	bne.n	8004092 <generate_moves+0x322>
                        moves[n_moves].from = square;
 8003fcc:	8afa      	ldrh	r2, [r7, #22]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	b2d9      	uxtb	r1, r3
 8003fe2:	8afa      	ldrh	r2, [r7, #22]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	f1a1 0210 	sub.w	r2, r1, #16
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003ff6:	8afa      	ldrh	r2, [r7, #22]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8004006:	8afa      	ldrh	r2, [r7, #22]
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4413      	add	r3, r2
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <generate_moves+0x2bc>
                            moves[n_moves].promotion = 1;
 800401c:	8afa      	ldrh	r2, [r7, #22]
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	4413      	add	r3, r2
 8004028:	2201      	movs	r2, #1
 800402a:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 800402c:	8afb      	ldrh	r3, [r7, #22]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	82fa      	strh	r2, [r7, #22]
 8004032:	2bfe      	cmp	r3, #254	; 0xfe
 8004034:	f200 8151 	bhi.w	80042da <generate_moves+0x56a>
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	111b      	asrs	r3, r3, #4
 800403c:	2b06      	cmp	r3, #6
 800403e:	d128      	bne.n	8004092 <generate_moves+0x322>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	3b20      	subs	r3, #32
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d122      	bne.n	8004092 <generate_moves+0x322>
                            moves[n_moves].from = square;
 800404c:	8afa      	ldrh	r2, [r7, #22]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	4413      	add	r3, r2
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	8afa      	ldrh	r2, [r7, #22]
 8004064:	4613      	mov	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4413      	add	r3, r2
 800406e:	f1a1 0220 	sub.w	r2, r1, #32
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8004076:	8afa      	ldrh	r2, [r7, #22]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	4413      	add	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 8004086:	8afb      	ldrh	r3, [r7, #22]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	82fa      	strh	r2, [r7, #22]
 800408c:	2bfe      	cmp	r3, #254	; 0xfe
 800408e:	f200 8126 	bhi.w	80042de <generate_moves+0x56e>
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3b0f      	subs	r3, #15
 8004096:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13d      	bne.n	800411a <generate_moves+0x3aa>
                    if(state->color[square + DIR_SE] == WHITE){
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	3b0f      	subs	r3, #15
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d135      	bne.n	800411a <generate_moves+0x3aa>
                        moves[n_moves].from = square;
 80040ae:	8afa      	ldrh	r2, [r7, #22]
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	8afa      	ldrh	r2, [r7, #22]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	f1a1 020f 	sub.w	r2, r1, #15
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80040d8:	8afa      	ldrh	r2, [r7, #22]
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	2200      	movs	r2, #0
 80040e6:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80040e8:	8afa      	ldrh	r2, [r7, #22]
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <generate_moves+0x39e>
                            moves[n_moves].promotion = 1;
 80040fe:	8afa      	ldrh	r2, [r7, #22]
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	4413      	add	r3, r2
 800410a:	2201      	movs	r2, #1
 800410c:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	82fa      	strh	r2, [r7, #22]
 8004114:	2bfe      	cmp	r3, #254	; 0xfe
 8004116:	f200 80e4 	bhi.w	80042e2 <generate_moves+0x572>
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3b11      	subs	r3, #17
 800411e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 80cb 	bne.w	80042be <generate_moves+0x54e>
                    if(state->color[square + DIR_SW] == WHITE){
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3b11      	subs	r3, #17
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 80c2 	bne.w	80042be <generate_moves+0x54e>
                        moves[n_moves].from = square;
 800413a:	8afa      	ldrh	r2, [r7, #22]
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	4413      	add	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	b2d9      	uxtb	r1, r3
 8004150:	8afa      	ldrh	r2, [r7, #22]
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4413      	add	r3, r2
 800415c:	f1a1 0211 	sub.w	r2, r1, #17
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8004164:	8afa      	ldrh	r2, [r7, #22]
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	4413      	add	r3, r2
 8004170:	2200      	movs	r2, #0
 8004172:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8004174:	8afa      	ldrh	r2, [r7, #22]
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	4413      	add	r3, r2
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <generate_moves+0x42a>
                            moves[n_moves].promotion = 1;
 800418a:	8afa      	ldrh	r2, [r7, #22]
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4413      	add	r3, r2
 8004196:	2201      	movs	r2, #1
 8004198:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 800419a:	8afb      	ldrh	r3, [r7, #22]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	82fa      	strh	r2, [r7, #22]
 80041a0:	2bfe      	cmp	r3, #254	; 0xfe
 80041a2:	f240 808c 	bls.w	80042be <generate_moves+0x54e>
 80041a6:	e09d      	b.n	80042e4 <generate_moves+0x574>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e07b      	b.n	80042a6 <generate_moves+0x536>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 80041ae:	7b7a      	ldrb	r2, [r7, #13]
 80041b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b4:	494f      	ldr	r1, [pc, #316]	; (80042f4 <generate_moves+0x584>)
 80041b6:	00d2      	lsls	r2, r2, #3
 80041b8:	440a      	add	r2, r1
 80041ba:	4413      	add	r3, r2
 80041bc:	f993 3000 	ldrsb.w	r3, [r3]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 80041ca:	e05d      	b.n	8004288 <generate_moves+0x518>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 80041cc:	7bbb      	ldrb	r3, [r7, #14]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d11e      	bne.n	8004214 <generate_moves+0x4a4>
                        moves[n_moves].from = square;
 80041d6:	8afa      	ldrh	r2, [r7, #22]
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 80041e8:	8afa      	ldrh	r2, [r7, #22]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	7bba      	ldrb	r2, [r7, #14]
 80041f6:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80041f8:	8afa      	ldrh	r2, [r7, #22]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4413      	add	r3, r2
 8004204:	2200      	movs	r2, #0
 8004206:	709a      	strb	r2, [r3, #2]
                        if(n_moves++ >= 255) break;
 8004208:	8afb      	ldrh	r3, [r7, #22]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	82fa      	strh	r2, [r7, #22]
 800420e:	2bfe      	cmp	r3, #254	; 0xfe
 8004210:	d928      	bls.n	8004264 <generate_moves+0x4f4>
 8004212:	e042      	b.n	800429a <generate_moves+0x52a>
                    }
                    else{
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004224:	429a      	cmp	r2, r3
 8004226:	d035      	beq.n	8004294 <generate_moves+0x524>
                            moves[n_moves].from = square;
 8004228:	8afa      	ldrh	r2, [r7, #22]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	4413      	add	r3, r2
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 800423a:	8afa      	ldrh	r2, [r7, #22]
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4413      	add	r3, r2
 8004246:	7bba      	ldrb	r2, [r7, #14]
 8004248:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 800424a:	8afa      	ldrh	r2, [r7, #22]
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4413      	add	r3, r2
 8004256:	2200      	movs	r2, #0
 8004258:	709a      	strb	r2, [r3, #2]
                            if(n_moves++ >= 255) break;
 800425a:	8afb      	ldrh	r3, [r7, #22]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	82fa      	strh	r2, [r7, #22]
 8004260:	2bfe      	cmp	r3, #254	; 0xfe
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8004262:	e017      	b.n	8004294 <generate_moves+0x524>

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 8004264:	7b7b      	ldrb	r3, [r7, #13]
 8004266:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <generate_moves+0x588>)
 8004268:	5cd3      	ldrb	r3, [r2, r3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <generate_moves+0x528>
                        break;
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 800426e:	7b7a      	ldrb	r2, [r7, #13]
 8004270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004274:	491f      	ldr	r1, [pc, #124]	; (80042f4 <generate_moves+0x584>)
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	440a      	add	r2, r1
 800427a:	4413      	add	r3, r2
 800427c:	f993 3000 	ldrsb.w	r3, [r3]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	7bbb      	ldrb	r3, [r7, #14]
 8004284:	4413      	add	r3, r2
 8004286:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800428e:	2b00      	cmp	r3, #0
 8004290:	d09c      	beq.n	80041cc <generate_moves+0x45c>
 8004292:	e002      	b.n	800429a <generate_moves+0x52a>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <generate_moves+0x52a>
                        break;
 8004298:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 800429a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	7b7a      	ldrb	r2, [r7, #13]
 80042ac:	4913      	ldr	r1, [pc, #76]	; (80042fc <generate_moves+0x58c>)
 80042ae:	5c8a      	ldrb	r2, [r1, r2]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f6ff af7c 	blt.w	80041ae <generate_moves+0x43e>
 80042b6:	e002      	b.n	80042be <generate_moves+0x54e>
            continue;
 80042b8:	bf00      	nop
 80042ba:	e000      	b.n	80042be <generate_moves+0x54e>
            continue;
 80042bc:	bf00      	nop
    for(int square = 0; square < 128; square++){
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3301      	adds	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b7f      	cmp	r3, #127	; 0x7f
 80042c8:	f77f ad5c 	ble.w	8003d84 <generate_moves+0x14>
 80042cc:	e00a      	b.n	80042e4 <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 80042ce:	bf00      	nop
 80042d0:	e008      	b.n	80042e4 <generate_moves+0x574>
                            if(n_moves++ >= 255) break;
 80042d2:	bf00      	nop
 80042d4:	e006      	b.n	80042e4 <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 80042d6:	bf00      	nop
 80042d8:	e004      	b.n	80042e4 <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <generate_moves+0x574>
                            if(n_moves++ >= 255) break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <generate_moves+0x574>
                        if(n_moves++ >= 255) break;
 80042e2:	bf00      	nop
                }
            }
        }
    }
    return n_moves;
 80042e4:	8afb      	ldrh	r3, [r7, #22]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000008 	.word	0x20000008
 80042f8:	20000038 	.word	0x20000038
 80042fc:	20000030 	.word	0x20000030

08004300 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8004308:	210c      	movs	r1, #12
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f002 fe8c 	bl	8007028 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20001a0c 	.word	0x20001a0c

08004324 <ws2812_init>:

void ws2812_init(){
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	e010      	b.n	8004352 <ws2812_init+0x2e>
		if(i < 60)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b3b      	cmp	r3, #59	; 0x3b
 8004334:	dc05      	bgt.n	8004342 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 8004336:	4a0d      	ldr	r2, [pc, #52]	; (800436c <ws2812_init+0x48>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2100      	movs	r1, #0
 800433c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004340:	e004      	b.n	800434c <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <ws2812_init+0x48>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	211c      	movs	r1, #28
 8004348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f240 623b 	movw	r2, #1595	; 0x63b
 8004358:	4293      	cmp	r3, r2
 800435a:	dde9      	ble.n	8004330 <ws2812_init+0xc>
	}
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000c94 	.word	0x20000c94

08004370 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e065      	b.n	8004448 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e05c      	b.n	800443c <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 800438c:	4933      	ldr	r1, [pc, #204]	; (800445c <ws2812_update_pwm_data+0xec>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	00da      	lsls	r2, r3, #3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 80043a0:	482e      	ldr	r0, [pc, #184]	; (800445c <ws2812_update_pwm_data+0xec>)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	00d9      	lsls	r1, r3, #3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	440b      	add	r3, r1
 80043aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80043b4:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 80043b6:	4829      	ldr	r0, [pc, #164]	; (800445c <ws2812_update_pwm_data+0xec>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	00d9      	lsls	r1, r3, #3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	440b      	add	r3, r1
 80043c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043c4:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80043c6:	4313      	orrs	r3, r2
 80043c8:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e02f      	b.n	8004430 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 80043d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	fa42 f303 	asr.w	r3, r2, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <ws2812_update_pwm_data+0xf0>)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	4a19      	ldr	r2, [pc, #100]	; (8004464 <ws2812_update_pwm_data+0xf4>)
 8004400:	214c      	movs	r1, #76	; 0x4c
 8004402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004406:	e010      	b.n	800442a <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <ws2812_update_pwm_data+0xf0>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <ws2812_update_pwm_data+0xf4>)
 8004424:	211c      	movs	r1, #28
 8004426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b17      	cmp	r3, #23
 8004434:	ddcc      	ble.n	80043d0 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b07      	cmp	r3, #7
 8004440:	dd9f      	ble.n	8004382 <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b07      	cmp	r3, #7
 800444c:	dd96      	ble.n	800437c <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	2000190c 	.word	0x2000190c
 8004460:	20000040 	.word	0x20000040
 8004464:	20000c94 	.word	0x20000c94

08004468 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8004470:	f7ff ff7e 	bl	8004370 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <ws2812_update_leds_from_data+0x28>)
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 800447a:	f240 633c 	movw	r3, #1596	; 0x63c
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <ws2812_update_leds_from_data+0x2c>)
 8004480:	210c      	movs	r1, #12
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f002 fc20 	bl	8006cc8 <HAL_TIM_PWM_Start_DMA>
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20001a0c 	.word	0x20001a0c
 8004494:	20000c94 	.word	0x20000c94

08004498 <lighting_set_output>:
led_color * output_array = (led_color *)0;

color_t game_finished_winner = COLOR_EMPTY;

//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <lighting_set_output+0x1c>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20001a10 	.word	0x20001a10

080044b8 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 80044c6:	79fa      	ldrb	r2, [r7, #7]
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <set_color+0x34>)
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	00d8      	lsls	r0, r3, #3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4403      	add	r3, r0
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	4905      	ldr	r1, [pc, #20]	; (80044f0 <set_color+0x38>)
 80044da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20001a10 	.word	0x20001a10
 80044f0:	20000080 	.word	0x20000080

080044f4 <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e01a      	b.n	8004536 <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 8004500:	2300      	movs	r3, #0
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	e011      	b.n	800452a <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4053      	eors	r3, r2
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffca 	bl	80044b8 <set_color>
    for (int file = 0; file < 8; file++) {
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b07      	cmp	r3, #7
 800452e:	ddea      	ble.n	8004506 <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3301      	adds	r3, #1
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b07      	cmp	r3, #7
 800453a:	dde1      	ble.n	8004500 <paint_board+0xc>
    }
  }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

    //total_valid_moves = engine_list_moves(valid_moves, 1);
    for(int i = 0; i < total_valid_moves; i++){
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e026      	b.n	80045ac <paint_valid_moves+0x66>
        if(valid_moves[i].from == square_lifted){
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	429a      	cmp	r2, r3
 8004570:	d119      	bne.n	80045a6 <paint_valid_moves+0x60>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	2202      	movs	r2, #2
 800459a:	4619      	mov	r1, r3
 800459c:	f7ff ff8c 	bl	80044b8 <set_color>
            lifted_piece_valid_moves ++;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	dbd4      	blt.n	800455e <paint_valid_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80045b4:	697b      	ldr	r3, [r7, #20]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	e04e      	b.n	800466e <paint_differences+0xae>
        for (int file = 0; file < 8; file++) {
 80045d0:	2300      	movs	r3, #0
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	e045      	b.n	8004662 <paint_differences+0xa2>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 80045d6:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <paint_differences+0xc0>)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4413      	add	r3, r2
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	fa42 f303 	asr.w	r3, r2, r3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <paint_differences+0x5a>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fdf2 	bl	80031e8 <engine_get_piece>
 8004604:	4603      	mov	r3, r0
 8004606:	2b06      	cmp	r3, #6
 8004608:	d107      	bne.n	800461a <paint_differences+0x5a>
                set_color(rank, file, INVALID_ID);
 800460a:	2205      	movs	r2, #5
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f7ff ff52 	bl	80044b8 <set_color>
                board_ok = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
 8004618:	e020      	b.n	800465c <paint_differences+0x9c>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800461a:	4a19      	ldr	r2, [pc, #100]	; (8004680 <paint_differences+0xc0>)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4413      	add	r3, r2
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	fa42 f303 	asr.w	r3, r2, r3
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d114      	bne.n	800465c <paint_differences+0x9c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	b2da      	uxtb	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4413      	add	r3, r2
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fdd0 	bl	80031e8 <engine_get_piece>
 8004648:	4603      	mov	r3, r0
 800464a:	2b06      	cmp	r3, #6
 800464c:	d006      	beq.n	800465c <paint_differences+0x9c>
                set_color(rank, file, MISSING_ID);
 800464e:	2204      	movs	r2, #4
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f7ff ff30 	bl	80044b8 <set_color>
                board_ok = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3301      	adds	r3, #1
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b07      	cmp	r3, #7
 8004666:	ddb6      	ble.n	80045d6 <paint_differences+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b07      	cmp	r3, #7
 8004672:	ddad      	ble.n	80045d0 <paint_differences+0x10>
            }
        }
    }
    return board_ok;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20001a24 	.word	0x20001a24

08004684 <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 800468e:	2202      	movs	r2, #2
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ff10 	bl	80044b8 <set_color>
    return 1;
 8004698:	2301      	movs	r3, #1
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <paint_winner>:

char paint_winner(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
    for (int rank = 0; rank < 8; rank++) {
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	e027      	b.n	8004700 <paint_winner+0x5c>
        for (int file = 0; file < 8; file++) {
 80046b0:	2300      	movs	r3, #0
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	e01e      	b.n	80046f4 <paint_winner+0x50>
            if((rank < 4) == (game_finished_winner == WHITE))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	bfcc      	ite	gt
 80046bc:	2301      	movgt	r3, #1
 80046be:	2300      	movle	r3, #0
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <paint_winner+0x6c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	4053      	eors	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <paint_winner+0x40>
                set_color(rank, file, VALID_ID);
 80046d8:	2202      	movs	r2, #2
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff feeb 	bl	80044b8 <set_color>
 80046e2:	e004      	b.n	80046ee <paint_winner+0x4a>
            else
                set_color(rank, file, INVALID_ID);
 80046e4:	2205      	movs	r2, #5
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fee5 	bl	80044b8 <set_color>
        for (int file = 0; file < 8; file++) {
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b07      	cmp	r3, #7
 80046f8:	dddd      	ble.n	80046b6 <paint_winner+0x12>
    for (int rank = 0; rank < 8; rank++) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3301      	adds	r3, #1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b07      	cmp	r3, #7
 8004704:	ddd4      	ble.n	80046b0 <paint_winner+0xc>
        }
    }
    return 1;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000098 	.word	0x20000098

08004714 <lighting_set_state>:
int total_valid_moves_lighting;

uint8_t square_cpu_from_lighting;
uint8_t square_cpu_to_lighting;

void lighting_set_state(char state){
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <lighting_set_state+0x1c>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	7013      	strb	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20001a0d 	.word	0x20001a0d

08004734 <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 800473e:	4a04      	ldr	r2, [pc, #16]	; (8004750 <lighting_piece_lifted_square+0x1c>)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	7013      	strb	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20001a14 	.word	0x20001a14

08004754 <lighting_set_winner>:

void lighting_set_winner(char winner){
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
    game_finished_winner = winner;
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <lighting_set_winner+0x1c>)
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	7013      	strb	r3, [r2, #0]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000098 	.word	0x20000098

08004774 <lighting_set_valid_moves>:

void lighting_set_valid_moves(move_t * moves, int total_valid_moves){
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 800477e:	4a06      	ldr	r2, [pc, #24]	; (8004798 <lighting_set_valid_moves+0x24>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8004784:	4a05      	ldr	r2, [pc, #20]	; (800479c <lighting_set_valid_moves+0x28>)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6013      	str	r3, [r2, #0]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20001a18 	.word	0x20001a18
 800479c:	20001a1c 	.word	0x20001a1c

080047a0 <lighting_set_cpu_movement>:

void lighting_set_cpu_movement(uint8_t from, uint8_t to){
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	460a      	mov	r2, r1
 80047aa:	71fb      	strb	r3, [r7, #7]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71bb      	strb	r3, [r7, #6]
    square_cpu_from_lighting = from;
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <lighting_set_cpu_movement+0x28>)
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	7013      	strb	r3, [r2, #0]
    square_cpu_to_lighting = to;
 80047b6:	4a05      	ldr	r2, [pc, #20]	; (80047cc <lighting_set_cpu_movement+0x2c>)
 80047b8:	79bb      	ldrb	r3, [r7, #6]
 80047ba:	7013      	strb	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	20001a20 	.word	0x20001a20
 80047cc:	20001a21 	.word	0x20001a21

080047d0 <lighting_refresh>:
void set_valid_moves(move_t * moves, int total_valid_moves){
    valid_moves_lighting = moves;
    total_valid_moves_lighting = total_valid_moves;
}

void lighting_refresh(){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 80047d4:	4b41      	ldr	r3, [pc, #260]	; (80048dc <lighting_refresh+0x10c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d87c      	bhi.n	80048d6 <lighting_refresh+0x106>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <lighting_refresh+0x14>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004809 	.word	0x08004809
 80047e8:	0800480f 	.word	0x0800480f
 80047ec:	08004841 	.word	0x08004841
 80047f0:	0800484b 	.word	0x0800484b
 80047f4:	0800486b 	.word	0x0800486b
 80047f8:	08004871 	.word	0x08004871
 80047fc:	08004891 	.word	0x08004891
 8004800:	080048b1 	.word	0x080048b1
 8004804:	080048d1 	.word	0x080048d1
        case LIGHTING_IDLE_STATE:
            paint_board();
 8004808:	f7ff fe74 	bl	80044f4 <paint_board>
                        set_color(y, x, INVALID_ID);
                    }
                }
            }
            */
        break;
 800480c:	e063      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 800480e:	f7ff fe71 	bl	80044f4 <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <lighting_refresh+0x110>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <lighting_refresh+0x110>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	2203      	movs	r2, #3
 8004826:	4619      	mov	r1, r3
 8004828:	f7ff fe46 	bl	80044b8 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 800482c:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <lighting_refresh+0x110>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <lighting_refresh+0x114>)
 8004832:	6811      	ldr	r1, [r2, #0]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <lighting_refresh+0x118>)
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fe84 	bl	8004546 <paint_valid_moves>
        break;
 800483e:	e04a      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_ERROR_STATE:
            paint_board();
 8004840:	f7ff fe58 	bl	80044f4 <paint_board>
            paint_differences();
 8004844:	f7ff febc 	bl	80045c0 <paint_differences>
        break;
 8004848:	e045      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 800484a:	f7ff fe53 	bl	80044f4 <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <lighting_refresh+0x110>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <lighting_refresh+0x110>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f7ff ff0e 	bl	8004684 <paint_capture>
        break;
 8004868:	e035      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_CPU_THINKING_STATE:
            paint_board();
 800486a:	f7ff fe43 	bl	80044f4 <paint_board>
        break;
 800486e:	e032      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_CPU_LIFT_FROM_STATE:
            paint_board();
 8004870:	f7ff fe40 	bl	80044f4 <paint_board>
            set_color(SQ2ROW(square_cpu_from_lighting), SQ2COL(square_cpu_from_lighting), INVALID_ID);
 8004874:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <lighting_refresh+0x11c>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	b2db      	uxtb	r3, r3
 800487c:	4618      	mov	r0, r3
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <lighting_refresh+0x11c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2205      	movs	r2, #5
 8004888:	4619      	mov	r1, r3
 800488a:	f7ff fe15 	bl	80044b8 <set_color>
        break;
 800488e:	e022      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_CPU_LIFT_CAPTURED_STATE:
            paint_board();
 8004890:	f7ff fe30 	bl	80044f4 <paint_board>
            set_color(SQ2ROW(square_cpu_to_lighting), SQ2COL(square_cpu_to_lighting), INVALID_ID);
 8004894:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <lighting_refresh+0x120>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4618      	mov	r0, r3
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <lighting_refresh+0x120>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	2205      	movs	r2, #5
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff fe05 	bl	80044b8 <set_color>
        break;
 80048ae:	e012      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_CPU_PLACE_TO_STATE:
            paint_board();
 80048b0:	f7ff fe20 	bl	80044f4 <paint_board>
            set_color(SQ2ROW(square_cpu_to_lighting), SQ2COL(square_cpu_to_lighting), VALID_ID);
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <lighting_refresh+0x120>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4618      	mov	r0, r3
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <lighting_refresh+0x120>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2202      	movs	r2, #2
 80048c8:	4619      	mov	r1, r3
 80048ca:	f7ff fdf5 	bl	80044b8 <set_color>
        break;
 80048ce:	e002      	b.n	80048d6 <lighting_refresh+0x106>

        case LIGHTING_GAME_FINISHED_STATE:
            paint_winner();
 80048d0:	f7ff fee8 	bl	80046a4 <paint_winner>
        break;
 80048d4:	bf00      	nop
    }
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20001a0d 	.word	0x20001a0d
 80048e0:	20001a14 	.word	0x20001a14
 80048e4:	20001a18 	.word	0x20001a18
 80048e8:	20001a1c 	.word	0x20001a1c
 80048ec:	20001a20 	.word	0x20001a20
 80048f0:	20001a21 	.word	0x20001a21

080048f4 <t_reed_scan_sensors>:

volatile uint8_t reed_data[8] = { 0 };



void t_reed_scan_sensors() {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0

	while (1) {
		for (int row = 0; row < 8; row++) {
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	e131      	b.n	8004b64 <t_reed_scan_sensors+0x270>
			HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	2101      	movs	r1, #1
 8004910:	4897      	ldr	r0, [pc, #604]	; (8004b70 <t_reed_scan_sensors+0x27c>)
 8004912:	f000 ffb1 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	2102      	movs	r1, #2
 8004926:	4892      	ldr	r0, [pc, #584]	; (8004b70 <t_reed_scan_sensors+0x27c>)
 8004928:	f000 ffa6 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	2101      	movs	r1, #1
 800493c:	488d      	ldr	r0, [pc, #564]	; (8004b74 <t_reed_scan_sensors+0x280>)
 800493e:	f000 ff9b 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b03      	cmp	r3, #3
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	4889      	ldr	r0, [pc, #548]	; (8004b78 <t_reed_scan_sensors+0x284>)
 8004954:	f000 ff90 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	2180      	movs	r1, #128	; 0x80
 8004968:	4883      	ldr	r0, [pc, #524]	; (8004b78 <t_reed_scan_sensors+0x284>)
 800496a:	f000 ff85 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b05      	cmp	r3, #5
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	487d      	ldr	r0, [pc, #500]	; (8004b74 <t_reed_scan_sensors+0x280>)
 8004980:	f000 ff7a 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b06      	cmp	r3, #6
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	4876      	ldr	r0, [pc, #472]	; (8004b70 <t_reed_scan_sensors+0x27c>)
 8004996:	f000 ff6f 	bl	8005878 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b07      	cmp	r3, #7
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049ac:	4872      	ldr	r0, [pc, #456]	; (8004b78 <t_reed_scan_sensors+0x284>)
 80049ae:	f000 ff63 	bl	8005878 <HAL_GPIO_WritePin>

			//for(int i = 0; i < 100; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
			vTaskDelay(10); // Lo uso para hacer más lenta toda la lectura
 80049b2:	200a      	movs	r0, #10
 80049b4:	f004 fa20 	bl	8008df8 <vTaskDelay>

			reed_data[row] = 0;
 80049b8:	4a70      	ldr	r2, [pc, #448]	; (8004b7c <t_reed_scan_sensors+0x288>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 80049c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049c6:	486c      	ldr	r0, [pc, #432]	; (8004b78 <t_reed_scan_sensors+0x284>)
 80049c8:	f000 ff3e 	bl	8005848 <HAL_GPIO_ReadPin>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4619      	mov	r1, r3
 80049da:	4a68      	ldr	r2, [pc, #416]	; (8004b7c <t_reed_scan_sensors+0x288>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	b25a      	sxtb	r2, r3
 80049e6:	b24b      	sxtb	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b25b      	sxtb	r3, r3
 80049ec:	b2d9      	uxtb	r1, r3
 80049ee:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <t_reed_scan_sensors+0x288>)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	460a      	mov	r2, r1
 80049f6:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 80049f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049fc:	485d      	ldr	r0, [pc, #372]	; (8004b74 <t_reed_scan_sensors+0x280>)
 80049fe:	f000 ff23 	bl	8005848 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <t_reed_scan_sensors+0x118>
 8004a08:	2102      	movs	r1, #2
 8004a0a:	e000      	b.n	8004a0e <t_reed_scan_sensors+0x11a>
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4a5b      	ldr	r2, [pc, #364]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	b25a      	sxtb	r2, r3
 8004a1a:	b24b      	sxtb	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	b25b      	sxtb	r3, r3
 8004a20:	b2d9      	uxtb	r1, r3
 8004a22:	4a56      	ldr	r2, [pc, #344]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	460a      	mov	r2, r1
 8004a2a:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8004a2c:	2110      	movs	r1, #16
 8004a2e:	4851      	ldr	r0, [pc, #324]	; (8004b74 <t_reed_scan_sensors+0x280>)
 8004a30:	f000 ff0a 	bl	8005848 <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <t_reed_scan_sensors+0x14a>
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	e000      	b.n	8004a40 <t_reed_scan_sensors+0x14c>
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4a4e      	ldr	r2, [pc, #312]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	b25a      	sxtb	r2, r3
 8004a4c:	b24b      	sxtb	r3, r1
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	b2d9      	uxtb	r1, r3
 8004a54:	4a49      	ldr	r2, [pc, #292]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8004a5e:	2110      	movs	r1, #16
 8004a60:	4843      	ldr	r0, [pc, #268]	; (8004b70 <t_reed_scan_sensors+0x27c>)
 8004a62:	f000 fef1 	bl	8005848 <HAL_GPIO_ReadPin>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <t_reed_scan_sensors+0x17c>
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	e000      	b.n	8004a72 <t_reed_scan_sensors+0x17e>
 8004a70:	2100      	movs	r1, #0
 8004a72:	4a42      	ldr	r2, [pc, #264]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	b25a      	sxtb	r2, r3
 8004a7e:	b24b      	sxtb	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	b2d9      	uxtb	r1, r3
 8004a86:	4a3d      	ldr	r2, [pc, #244]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8004a90:	2120      	movs	r1, #32
 8004a92:	4838      	ldr	r0, [pc, #224]	; (8004b74 <t_reed_scan_sensors+0x280>)
 8004a94:	f000 fed8 	bl	8005848 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <t_reed_scan_sensors+0x1ae>
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	e000      	b.n	8004aa4 <t_reed_scan_sensors+0x1b0>
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	b25a      	sxtb	r2, r3
 8004ab0:	b24b      	sxtb	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	b2d9      	uxtb	r1, r3
 8004ab8:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	460a      	mov	r2, r1
 8004ac0:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8004ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ac6:	482c      	ldr	r0, [pc, #176]	; (8004b78 <t_reed_scan_sensors+0x284>)
 8004ac8:	f000 febe 	bl	8005848 <HAL_GPIO_ReadPin>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <t_reed_scan_sensors+0x1e2>
 8004ad2:	2120      	movs	r1, #32
 8004ad4:	e000      	b.n	8004ad8 <t_reed_scan_sensors+0x1e4>
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	b25a      	sxtb	r2, r3
 8004ae4:	b24b      	sxtb	r3, r1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	b2d9      	uxtb	r1, r3
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	460a      	mov	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8004af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004afa:	481e      	ldr	r0, [pc, #120]	; (8004b74 <t_reed_scan_sensors+0x280>)
 8004afc:	f000 fea4 	bl	8005848 <HAL_GPIO_ReadPin>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <t_reed_scan_sensors+0x216>
 8004b06:	2140      	movs	r1, #64	; 0x40
 8004b08:	e000      	b.n	8004b0c <t_reed_scan_sensors+0x218>
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	b24b      	sxtb	r3, r1
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	b2d9      	uxtb	r1, r3
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	460a      	mov	r2, r1
 8004b28:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8004b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b2e:	4811      	ldr	r0, [pc, #68]	; (8004b74 <t_reed_scan_sensors+0x280>)
 8004b30:	f000 fe8a 	bl	8005848 <HAL_GPIO_ReadPin>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <t_reed_scan_sensors+0x24a>
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	e000      	b.n	8004b40 <t_reed_scan_sensors+0x24c>
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	b24b      	sxtb	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	b2d9      	uxtb	r1, r3
 8004b54:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <t_reed_scan_sensors+0x288>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < 8; row++) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3301      	adds	r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b07      	cmp	r3, #7
 8004b68:	f77f aeca 	ble.w	8004900 <t_reed_scan_sensors+0xc>
 8004b6c:	e6c5      	b.n	80048fa <t_reed_scan_sensors+0x6>
 8004b6e:	bf00      	nop
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020400 	.word	0x40020400
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	20001a24 	.word	0x20001a24

08004b80 <Reset_Handler>:
 8004b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb8 <LoopFillZerobss+0x12>
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <LoopFillZerobss+0x16>)
 8004b86:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <LoopFillZerobss+0x1a>)
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <LoopFillZerobss+0x1e>)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e002      	b.n	8004b94 <LoopCopyDataInit>

08004b8e <CopyDataInit>:
 8004b8e:	58d4      	ldr	r4, [r2, r3]
 8004b90:	50c4      	str	r4, [r0, r3]
 8004b92:	3304      	adds	r3, #4

08004b94 <LoopCopyDataInit>:
 8004b94:	18c4      	adds	r4, r0, r3
 8004b96:	428c      	cmp	r4, r1
 8004b98:	d3f9      	bcc.n	8004b8e <CopyDataInit>
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <LoopFillZerobss+0x22>)
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <LoopFillZerobss+0x26>)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e001      	b.n	8004ba6 <LoopFillZerobss>

08004ba2 <FillZerobss>:
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	3204      	adds	r2, #4

08004ba6 <LoopFillZerobss>:
 8004ba6:	42a2      	cmp	r2, r4
 8004ba8:	d3fb      	bcc.n	8004ba2 <FillZerobss>
 8004baa:	f7fc fe13 	bl	80017d4 <SystemInit>
 8004bae:	f005 fbe3 	bl	800a378 <__libc_init_array>
 8004bb2:	f7fb fee3 	bl	800097c <main>
 8004bb6:	4770      	bx	lr
 8004bb8:	20018000 	.word	0x20018000
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	200000f8 	.word	0x200000f8
 8004bc4:	0800a6dc 	.word	0x0800a6dc
 8004bc8:	200000f8 	.word	0x200000f8
 8004bcc:	200099c4 	.word	0x200099c4

08004bd0 <ADC_IRQHandler>:
 8004bd0:	e7fe      	b.n	8004bd0 <ADC_IRQHandler>
	...

08004bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_Init+0x40>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <HAL_Init+0x40>)
 8004bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_Init+0x40>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_Init+0x40>)
 8004bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_Init+0x40>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	f000 f8d8 	bl	8004db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c02:	200f      	movs	r0, #15
 8004c04:	f7fc fd28 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c08:	f7fc fc10 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_IncTick+0x20>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_IncTick+0x24>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4413      	add	r3, r2
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <HAL_IncTick+0x24>)
 8004c2a:	6013      	str	r3, [r2, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200000a0 	.word	0x200000a0
 8004c3c:	20001a2c 	.word	0x20001a2c

08004c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return uwTick;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_GetTick+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20001a2c 	.word	0x20001a2c

08004c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <__NVIC_SetPriorityGrouping+0x44>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c74:	4013      	ands	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c8a:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <__NVIC_SetPriorityGrouping+0x44>)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	60d3      	str	r3, [r2, #12]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	f003 0307 	and.w	r3, r3, #7
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db0b      	blt.n	8004ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <__NVIC_EnableIRQ+0x38>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	db0a      	blt.n	8004d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	490c      	ldr	r1, [pc, #48]	; (8004d44 <__NVIC_SetPriority+0x4c>)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	0112      	lsls	r2, r2, #4
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d20:	e00a      	b.n	8004d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4908      	ldr	r1, [pc, #32]	; (8004d48 <__NVIC_SetPriority+0x50>)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	0112      	lsls	r2, r2, #4
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	761a      	strb	r2, [r3, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000e100 	.word	0xe000e100
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f1c3 0307 	rsb	r3, r3, #7
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	bf28      	it	cs
 8004d6a:	2304      	movcs	r3, #4
 8004d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d902      	bls.n	8004d7c <NVIC_EncodePriority+0x30>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	3b03      	subs	r3, #3
 8004d7a:	e000      	b.n	8004d7e <NVIC_EncodePriority+0x32>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	401a      	ands	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d94:	f04f 31ff 	mov.w	r1, #4294967295
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	43d9      	mvns	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	4313      	orrs	r3, r2
         );
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	; 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff4c 	bl	8004c58 <__NVIC_SetPriorityGrouping>
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dda:	f7ff ff61 	bl	8004ca0 <__NVIC_GetPriorityGrouping>
 8004dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7ff ffb1 	bl	8004d4c <NVIC_EncodePriority>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff80 	bl	8004cf8 <__NVIC_SetPriority>
}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff54 	bl	8004cbc <__NVIC_EnableIRQ>
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e28:	f7ff ff0a 	bl	8004c40 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e099      	b.n	8004f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e58:	e00f      	b.n	8004e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5a:	f7ff fef1 	bl	8004c40 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d908      	bls.n	8004e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2203      	movs	r2, #3
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e078      	b.n	8004f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e8      	bne.n	8004e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_DMA_Init+0x158>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d107      	bne.n	8004ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	4313      	orrs	r3, r2
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d117      	bne.n	8004f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa91 	bl	8005448 <DMA_CheckFifoParam>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e016      	b.n	8004f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa48 	bl	80053dc <DMA_CalcBaseAndBitshift>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	223f      	movs	r2, #63	; 0x3f
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	f010803f 	.word	0xf010803f

08004f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_DMA_Start_IT+0x26>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e040      	b.n	8005020 <HAL_DMA_Start_IT+0xa8>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d12f      	bne.n	8005012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f9da 	bl	8005380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	223f      	movs	r2, #63	; 0x3f
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0216 	orr.w	r2, r2, #22
 8004fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e005      	b.n	800501e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800501a:	2302      	movs	r3, #2
 800501c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e00c      	b.n	8005060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2205      	movs	r2, #5
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005078:	4b8e      	ldr	r3, [pc, #568]	; (80052b4 <HAL_DMA_IRQHandler+0x248>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a8e      	ldr	r2, [pc, #568]	; (80052b8 <HAL_DMA_IRQHandler+0x24c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	2208      	movs	r2, #8
 8005098:	409a      	lsls	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c4:	2208      	movs	r2, #8
 80050c6:	409a      	lsls	r2, r3
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0201 	orr.w	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	2201      	movs	r2, #1
 80050fc:	409a      	lsls	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005112:	2204      	movs	r2, #4
 8005114:	409a      	lsls	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d012      	beq.n	8005144 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005130:	2204      	movs	r2, #4
 8005132:	409a      	lsls	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	2210      	movs	r2, #16
 800514a:	409a      	lsls	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d043      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d03c      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	2210      	movs	r2, #16
 8005168:	409a      	lsls	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d018      	beq.n	80051ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d024      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
 800519a:	e01f      	b.n	80051dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
 80051ac:	e016      	b.n	80051dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0208 	bic.w	r2, r2, #8
 80051ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2220      	movs	r2, #32
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 808f 	beq.w	800530c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8087 	beq.w	800530c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	2220      	movs	r2, #32
 8005204:	409a      	lsls	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b05      	cmp	r3, #5
 8005214:	d136      	bne.n	8005284 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0216 	bic.w	r2, r2, #22
 8005224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_DMA_IRQHandler+0x1da>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0208 	bic.w	r2, r2, #8
 8005254:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	223f      	movs	r2, #63	; 0x3f
 800525c:	409a      	lsls	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	2b00      	cmp	r3, #0
 8005278:	d07e      	beq.n	8005378 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
        }
        return;
 8005282:	e079      	b.n	8005378 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d031      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
 80052b0:	e02c      	b.n	800530c <HAL_DMA_IRQHandler+0x2a0>
 80052b2:	bf00      	nop
 80052b4:	20000004 	.word	0x20000004
 80052b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	e01e      	b.n	800530c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10f      	bne.n	80052fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0210 	bic.w	r2, r2, #16
 80052ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	2b00      	cmp	r3, #0
 8005312:	d032      	beq.n	800537a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d022      	beq.n	8005366 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2205      	movs	r2, #5
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3301      	adds	r3, #1
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	429a      	cmp	r2, r3
 8005342:	d307      	bcc.n	8005354 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f2      	bne.n	8005338 <HAL_DMA_IRQHandler+0x2cc>
 8005352:	e000      	b.n	8005356 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005354:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
 8005376:	e000      	b.n	800537a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005378:	bf00      	nop
    }
  }
}
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800539c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d108      	bne.n	80053c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053be:	e007      	b.n	80053d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	3b10      	subs	r3, #16
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <DMA_CalcBaseAndBitshift+0x64>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <DMA_CalcBaseAndBitshift+0x68>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d909      	bls.n	800541e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	659a      	str	r2, [r3, #88]	; 0x58
 800541c:	e007      	b.n	800542e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	aaaaaaab 	.word	0xaaaaaaab
 8005444:	0800a6c4 	.word	0x0800a6c4

08005448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11f      	bne.n	80054a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d856      	bhi.n	8005516 <DMA_CheckFifoParam+0xce>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <DMA_CheckFifoParam+0x28>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005481 	.word	0x08005481
 8005474:	08005493 	.word	0x08005493
 8005478:	08005481 	.word	0x08005481
 800547c:	08005517 	.word	0x08005517
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d046      	beq.n	800551a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005490:	e043      	b.n	800551a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800549a:	d140      	bne.n	800551e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a0:	e03d      	b.n	800551e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054aa:	d121      	bne.n	80054f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d837      	bhi.n	8005522 <DMA_CheckFifoParam+0xda>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <DMA_CheckFifoParam+0x70>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054cf 	.word	0x080054cf
 80054c0:	080054c9 	.word	0x080054c9
 80054c4:	080054e1 	.word	0x080054e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e030      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d025      	beq.n	8005526 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054de:	e022      	b.n	8005526 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054e8:	d11f      	bne.n	800552a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ee:	e01c      	b.n	800552a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d903      	bls.n	80054fe <DMA_CheckFifoParam+0xb6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d003      	beq.n	8005504 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054fc:	e018      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      break;
 8005502:	e015      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00e      	beq.n	800552e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e00b      	b.n	800552e <DMA_CheckFifoParam+0xe6>
      break;
 8005516:	bf00      	nop
 8005518:	e00a      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800551a:	bf00      	nop
 800551c:	e008      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800551e:	bf00      	nop
 8005520:	e006      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 8005522:	bf00      	nop
 8005524:	e004      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;   
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <DMA_CheckFifoParam+0xe8>
      break;
 800552e:	bf00      	nop
    }
  } 
  
  return status; 
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	e159      	b.n	8005810 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800555c:	2201      	movs	r2, #1
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	f040 8148 	bne.w	800580a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d005      	beq.n	8005592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800558e:	2b02      	cmp	r3, #2
 8005590:	d130      	bne.n	80055f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	2203      	movs	r2, #3
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055c8:	2201      	movs	r2, #1
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 0201 	and.w	r2, r3, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d017      	beq.n	8005630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	2203      	movs	r2, #3
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d123      	bne.n	8005684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	08da      	lsrs	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3208      	adds	r2, #8
 8005644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	220f      	movs	r2, #15
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	08da      	lsrs	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3208      	adds	r2, #8
 800567e:	69b9      	ldr	r1, [r7, #24]
 8005680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	2203      	movs	r2, #3
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 0203 	and.w	r2, r3, #3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a2 	beq.w	800580a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	4b57      	ldr	r3, [pc, #348]	; (8005828 <HAL_GPIO_Init+0x2e8>)
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	4a56      	ldr	r2, [pc, #344]	; (8005828 <HAL_GPIO_Init+0x2e8>)
 80056d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056d4:	6453      	str	r3, [r2, #68]	; 0x44
 80056d6:	4b54      	ldr	r3, [pc, #336]	; (8005828 <HAL_GPIO_Init+0x2e8>)
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e2:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_GPIO_Init+0x2ec>)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	220f      	movs	r2, #15
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a49      	ldr	r2, [pc, #292]	; (8005830 <HAL_GPIO_Init+0x2f0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d019      	beq.n	8005742 <HAL_GPIO_Init+0x202>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a48      	ldr	r2, [pc, #288]	; (8005834 <HAL_GPIO_Init+0x2f4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_GPIO_Init+0x1fe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a47      	ldr	r2, [pc, #284]	; (8005838 <HAL_GPIO_Init+0x2f8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00d      	beq.n	800573a <HAL_GPIO_Init+0x1fa>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a46      	ldr	r2, [pc, #280]	; (800583c <HAL_GPIO_Init+0x2fc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d007      	beq.n	8005736 <HAL_GPIO_Init+0x1f6>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a45      	ldr	r2, [pc, #276]	; (8005840 <HAL_GPIO_Init+0x300>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <HAL_GPIO_Init+0x1f2>
 800572e:	2304      	movs	r3, #4
 8005730:	e008      	b.n	8005744 <HAL_GPIO_Init+0x204>
 8005732:	2307      	movs	r3, #7
 8005734:	e006      	b.n	8005744 <HAL_GPIO_Init+0x204>
 8005736:	2303      	movs	r3, #3
 8005738:	e004      	b.n	8005744 <HAL_GPIO_Init+0x204>
 800573a:	2302      	movs	r3, #2
 800573c:	e002      	b.n	8005744 <HAL_GPIO_Init+0x204>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_GPIO_Init+0x204>
 8005742:	2300      	movs	r3, #0
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	f002 0203 	and.w	r2, r2, #3
 800574a:	0092      	lsls	r2, r2, #2
 800574c:	4093      	lsls	r3, r2
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4313      	orrs	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005754:	4935      	ldr	r1, [pc, #212]	; (800582c <HAL_GPIO_Init+0x2ec>)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	3302      	adds	r3, #2
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005762:	4b38      	ldr	r3, [pc, #224]	; (8005844 <HAL_GPIO_Init+0x304>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	43db      	mvns	r3, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4013      	ands	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <HAL_GPIO_Init+0x304>)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800578c:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_GPIO_Init+0x304>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057b0:	4a24      	ldr	r2, [pc, #144]	; (8005844 <HAL_GPIO_Init+0x304>)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <HAL_GPIO_Init+0x304>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_GPIO_Init+0x304>)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057e0:	4b18      	ldr	r3, [pc, #96]	; (8005844 <HAL_GPIO_Init+0x304>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005804:	4a0f      	ldr	r2, [pc, #60]	; (8005844 <HAL_GPIO_Init+0x304>)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3301      	adds	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b0f      	cmp	r3, #15
 8005814:	f67f aea2 	bls.w	800555c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800
 800582c:	40013800 	.word	0x40013800
 8005830:	40020000 	.word	0x40020000
 8005834:	40020400 	.word	0x40020400
 8005838:	40020800 	.word	0x40020800
 800583c:	40020c00 	.word	0x40020c00
 8005840:	40021000 	.word	0x40021000
 8005844:	40013c00 	.word	0x40013c00

08005848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e001      	b.n	800586a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
 8005884:	4613      	mov	r3, r2
 8005886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005888:	787b      	ldrb	r3, [r7, #1]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005894:	e003      	b.n	800589e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	041a      	lsls	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	619a      	str	r2, [r3, #24]
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e12b      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb fdd6 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800590e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005910:	f001 f888 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 8005914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a81      	ldr	r2, [pc, #516]	; (8005b20 <HAL_I2C_Init+0x274>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d807      	bhi.n	8005930 <HAL_I2C_Init+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a80      	ldr	r2, [pc, #512]	; (8005b24 <HAL_I2C_Init+0x278>)
 8005924:	4293      	cmp	r3, r2
 8005926:	bf94      	ite	ls
 8005928:	2301      	movls	r3, #1
 800592a:	2300      	movhi	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e006      	b.n	800593e <HAL_I2C_Init+0x92>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a7d      	ldr	r2, [pc, #500]	; (8005b28 <HAL_I2C_Init+0x27c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	bf94      	ite	ls
 8005938:	2301      	movls	r3, #1
 800593a:	2300      	movhi	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e0e7      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a78      	ldr	r2, [pc, #480]	; (8005b2c <HAL_I2C_Init+0x280>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0c9b      	lsrs	r3, r3, #18
 8005950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a6a      	ldr	r2, [pc, #424]	; (8005b20 <HAL_I2C_Init+0x274>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d802      	bhi.n	8005980 <HAL_I2C_Init+0xd4>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3301      	adds	r3, #1
 800597e:	e009      	b.n	8005994 <HAL_I2C_Init+0xe8>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	4a69      	ldr	r2, [pc, #420]	; (8005b30 <HAL_I2C_Init+0x284>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	3301      	adds	r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	430b      	orrs	r3, r1
 800599a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	495c      	ldr	r1, [pc, #368]	; (8005b20 <HAL_I2C_Init+0x274>)
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d819      	bhi.n	80059e8 <HAL_I2C_Init+0x13c>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1e59      	subs	r1, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059c8:	400b      	ands	r3, r1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_I2C_Init+0x138>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e59      	subs	r1, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059dc:	3301      	adds	r3, #1
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	e051      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e4:	2304      	movs	r3, #4
 80059e6:	e04f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d111      	bne.n	8005a14 <HAL_I2C_Init+0x168>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1e58      	subs	r0, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e012      	b.n	8005a3a <HAL_I2C_Init+0x18e>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1e58      	subs	r0, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6859      	ldr	r1, [r3, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	0099      	lsls	r1, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_Init+0x196>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e022      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10e      	bne.n	8005a68 <HAL_I2C_Init+0x1bc>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e58      	subs	r0, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	440b      	add	r3, r1
 8005a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	0099      	lsls	r1, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	6809      	ldr	r1, [r1, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6911      	ldr	r1, [r2, #16]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68d2      	ldr	r2, [r2, #12]
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	000186a0 	.word	0x000186a0
 8005b24:	001e847f 	.word	0x001e847f
 8005b28:	003d08ff 	.word	0x003d08ff
 8005b2c:	431bde83 	.word	0x431bde83
 8005b30:	10624dd3 	.word	0x10624dd3

08005b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	817b      	strh	r3, [r7, #10]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7ff f87a 	bl	8004c40 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 80e0 	bne.w	8005d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2319      	movs	r3, #25
 8005b62:	2201      	movs	r2, #1
 8005b64:	4970      	ldr	r1, [pc, #448]	; (8005d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f964 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0d3      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x50>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0cc      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a50      	ldr	r2, [pc, #320]	; (8005d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f89c 	bl	8005d30 <I2C_MasterRequestWrite>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e08d      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c18:	e066      	b.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6a39      	ldr	r1, [r7, #32]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f9de 	bl	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d107      	bne.n	8005c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e06b      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d11b      	bne.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	6a39      	ldr	r1, [r7, #32]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f9ce 	bl	8006062 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d107      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01a      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d194      	bne.n	8005c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	00100002 	.word	0x00100002
 8005d2c:	ffff0000 	.word	0xffff0000

08005d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d006      	beq.n	8005d5a <I2C_MasterRequestWrite+0x2a>
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d003      	beq.n	8005d5a <I2C_MasterRequestWrite+0x2a>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d58:	d108      	bne.n	8005d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e00b      	b.n	8005d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b12      	cmp	r3, #18
 8005d72:	d107      	bne.n	8005d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f84f 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00d      	beq.n	8005db8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005daa:	d103      	bne.n	8005db4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e035      	b.n	8005e24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc0:	d108      	bne.n	8005dd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	e01b      	b.n	8005e0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dd4:	897b      	ldrh	r3, [r7, #10]
 8005dd6:	11db      	asrs	r3, r3, #7
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0306 	and.w	r3, r3, #6
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f063 030f 	orn	r3, r3, #15
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	490e      	ldr	r1, [pc, #56]	; (8005e2c <I2C_MasterRequestWrite+0xfc>)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f875 	bl	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e010      	b.n	8005e24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e02:	897b      	ldrh	r3, [r7, #10]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4907      	ldr	r1, [pc, #28]	; (8005e30 <I2C_MasterRequestWrite+0x100>)
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f865 	bl	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	00010008 	.word	0x00010008
 8005e30:	00010002 	.word	0x00010002

08005e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e44:	e025      	b.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d021      	beq.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fe fef7 	bl	8004c40 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0220 	orr.w	r2, r3, #32
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e023      	b.n	8005eda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d10d      	bne.n	8005eb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	43da      	mvns	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	e00c      	b.n	8005ed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d0b6      	beq.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef0:	e051      	b.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f00:	d123      	bne.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0204 	orr.w	r2, r3, #4
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e046      	b.n	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d021      	beq.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fe fe75 	bl	8004c40 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e020      	b.n	8005fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d10c      	bne.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf14      	ite	ne
 8005fb2:	2301      	movne	r3, #1
 8005fb4:	2300      	moveq	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	e00b      	b.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	43da      	mvns	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d18d      	bne.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fec:	e02d      	b.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f878 	bl	80060e4 <I2C_IsAcknowledgeFailed>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e02d      	b.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d021      	beq.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006006:	f7fe fe1b 	bl	8004c40 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	d302      	bcc.n	800601c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d116      	bne.n	800604a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e007      	b.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d1ca      	bne.n	8005fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606e:	e02d      	b.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f837 	bl	80060e4 <I2C_IsAcknowledgeFailed>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e02d      	b.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d021      	beq.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006088:	f7fe fdda 	bl	8004c40 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d116      	bne.n	80060cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e007      	b.n	80060dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d1ca      	bne.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fa:	d11b      	bne.n	8006134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f043 0204 	orr.w	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e267      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d075      	beq.n	800624e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006162:	4b88      	ldr	r3, [pc, #544]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b04      	cmp	r3, #4
 800616c:	d00c      	beq.n	8006188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800616e:	4b85      	ldr	r3, [pc, #532]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006176:	2b08      	cmp	r3, #8
 8006178:	d112      	bne.n	80061a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800617a:	4b82      	ldr	r3, [pc, #520]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006186:	d10b      	bne.n	80061a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	4b7e      	ldr	r3, [pc, #504]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05b      	beq.n	800624c <HAL_RCC_OscConfig+0x108>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d157      	bne.n	800624c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e242      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a8:	d106      	bne.n	80061b8 <HAL_RCC_OscConfig+0x74>
 80061aa:	4b76      	ldr	r3, [pc, #472]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a75      	ldr	r2, [pc, #468]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e01d      	b.n	80061f4 <HAL_RCC_OscConfig+0xb0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061c0:	d10c      	bne.n	80061dc <HAL_RCC_OscConfig+0x98>
 80061c2:	4b70      	ldr	r3, [pc, #448]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a6f      	ldr	r2, [pc, #444]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	4b6d      	ldr	r3, [pc, #436]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a6c      	ldr	r2, [pc, #432]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e00b      	b.n	80061f4 <HAL_RCC_OscConfig+0xb0>
 80061dc:	4b69      	ldr	r3, [pc, #420]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a68      	ldr	r2, [pc, #416]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	4b66      	ldr	r3, [pc, #408]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a65      	ldr	r2, [pc, #404]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80061ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fe fd20 	bl	8004c40 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006204:	f7fe fd1c 	bl	8004c40 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b64      	cmp	r3, #100	; 0x64
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e207      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0xc0>
 8006222:	e014      	b.n	800624e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fe fd0c 	bl	8004c40 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800622c:	f7fe fd08 	bl	8004c40 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b64      	cmp	r3, #100	; 0x64
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e1f3      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800623e:	4b51      	ldr	r3, [pc, #324]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0xe8>
 800624a:	e000      	b.n	800624e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d063      	beq.n	8006322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800625a:	4b4a      	ldr	r3, [pc, #296]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006266:	4b47      	ldr	r3, [pc, #284]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800626e:	2b08      	cmp	r3, #8
 8006270:	d11c      	bne.n	80062ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006272:	4b44      	ldr	r3, [pc, #272]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d116      	bne.n	80062ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800627e:	4b41      	ldr	r3, [pc, #260]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_RCC_OscConfig+0x152>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d001      	beq.n	8006296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e1c7      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006296:	4b3b      	ldr	r3, [pc, #236]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4937      	ldr	r1, [pc, #220]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062aa:	e03a      	b.n	8006322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d020      	beq.n	80062f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062b4:	4b34      	ldr	r3, [pc, #208]	; (8006388 <HAL_RCC_OscConfig+0x244>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fe fcc1 	bl	8004c40 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062c2:	f7fe fcbd 	bl	8004c40 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e1a8      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4925      	ldr	r1, [pc, #148]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	600b      	str	r3, [r1, #0]
 80062f4:	e015      	b.n	8006322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <HAL_RCC_OscConfig+0x244>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fe fca0 	bl	8004c40 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006304:	f7fe fc9c 	bl	8004c40 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e187      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006316:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d036      	beq.n	800639c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006336:	4b15      	ldr	r3, [pc, #84]	; (800638c <HAL_RCC_OscConfig+0x248>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633c:	f7fe fc80 	bl	8004c40 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006344:	f7fe fc7c 	bl	8004c40 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e167      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_OscConfig+0x240>)
 8006358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x200>
 8006362:	e01b      	b.n	800639c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <HAL_RCC_OscConfig+0x248>)
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636a:	f7fe fc69 	bl	8004c40 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006370:	e00e      	b.n	8006390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006372:	f7fe fc65 	bl	8004c40 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d907      	bls.n	8006390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e150      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
 8006384:	40023800 	.word	0x40023800
 8006388:	42470000 	.word	0x42470000
 800638c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ea      	bne.n	8006372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8097 	beq.w	80064d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ae:	4b81      	ldr	r3, [pc, #516]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	4b7d      	ldr	r3, [pc, #500]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a7c      	ldr	r2, [pc, #496]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b7a      	ldr	r3, [pc, #488]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063da:	4b77      	ldr	r3, [pc, #476]	; (80065b8 <HAL_RCC_OscConfig+0x474>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d118      	bne.n	8006418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063e6:	4b74      	ldr	r3, [pc, #464]	; (80065b8 <HAL_RCC_OscConfig+0x474>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a73      	ldr	r2, [pc, #460]	; (80065b8 <HAL_RCC_OscConfig+0x474>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063f2:	f7fe fc25 	bl	8004c40 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063fa:	f7fe fc21 	bl	8004c40 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e10c      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640c:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <HAL_RCC_OscConfig+0x474>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d106      	bne.n	800642e <HAL_RCC_OscConfig+0x2ea>
 8006420:	4b64      	ldr	r3, [pc, #400]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	4a63      	ldr	r2, [pc, #396]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	6713      	str	r3, [r2, #112]	; 0x70
 800642c:	e01c      	b.n	8006468 <HAL_RCC_OscConfig+0x324>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b05      	cmp	r3, #5
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0x30c>
 8006436:	4b5f      	ldr	r3, [pc, #380]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	4a5e      	ldr	r2, [pc, #376]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 800643c:	f043 0304 	orr.w	r3, r3, #4
 8006440:	6713      	str	r3, [r2, #112]	; 0x70
 8006442:	4b5c      	ldr	r3, [pc, #368]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	4a5b      	ldr	r2, [pc, #364]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6713      	str	r3, [r2, #112]	; 0x70
 800644e:	e00b      	b.n	8006468 <HAL_RCC_OscConfig+0x324>
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006454:	4a57      	ldr	r2, [pc, #348]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	6713      	str	r3, [r2, #112]	; 0x70
 800645c:	4b55      	ldr	r3, [pc, #340]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	4a54      	ldr	r2, [pc, #336]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006462:	f023 0304 	bic.w	r3, r3, #4
 8006466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d015      	beq.n	800649c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fe fbe6 	bl	8004c40 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006476:	e00a      	b.n	800648e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006478:	f7fe fbe2 	bl	8004c40 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f241 3288 	movw	r2, #5000	; 0x1388
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e0cb      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648e:	4b49      	ldr	r3, [pc, #292]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0ee      	beq.n	8006478 <HAL_RCC_OscConfig+0x334>
 800649a:	e014      	b.n	80064c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649c:	f7fe fbd0 	bl	8004c40 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a4:	f7fe fbcc 	bl	8004c40 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e0b5      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ba:	4b3e      	ldr	r3, [pc, #248]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1ee      	bne.n	80064a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d105      	bne.n	80064d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064cc:	4b39      	ldr	r3, [pc, #228]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80064d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a1 	beq.w	8006624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064e2:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d05c      	beq.n	80065a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d141      	bne.n	800657a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f6:	4b31      	ldr	r3, [pc, #196]	; (80065bc <HAL_RCC_OscConfig+0x478>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fe fba0 	bl	8004c40 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006504:	f7fe fb9c 	bl	8004c40 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e087      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006516:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69da      	ldr	r2, [r3, #28]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	019b      	lsls	r3, r3, #6
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	3b01      	subs	r3, #1
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	061b      	lsls	r3, r3, #24
 8006546:	491b      	ldr	r1, [pc, #108]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800654c:	4b1b      	ldr	r3, [pc, #108]	; (80065bc <HAL_RCC_OscConfig+0x478>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fe fb75 	bl	8004c40 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655a:	f7fe fb71 	bl	8004c40 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e05c      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x416>
 8006578:	e054      	b.n	8006624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <HAL_RCC_OscConfig+0x478>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006580:	f7fe fb5e 	bl	8004c40 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006588:	f7fe fb5a 	bl	8004c40 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e045      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <HAL_RCC_OscConfig+0x470>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x444>
 80065a6:	e03d      	b.n	8006624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e038      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40007000 	.word	0x40007000
 80065bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_RCC_OscConfig+0x4ec>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d028      	beq.n	8006620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065d8:	429a      	cmp	r2, r3
 80065da:	d121      	bne.n	8006620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d11a      	bne.n	8006620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065f0:	4013      	ands	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d111      	bne.n	8006620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	3b01      	subs	r3, #1
 800660a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800660c:	429a      	cmp	r2, r3
 800660e:	d107      	bne.n	8006620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800661c:	429a      	cmp	r2, r3
 800661e:	d001      	beq.n	8006624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800

08006634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0cc      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006648:	4b68      	ldr	r3, [pc, #416]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d90c      	bls.n	8006670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006656:	4b65      	ldr	r3, [pc, #404]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b63      	ldr	r3, [pc, #396]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e0b8      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006688:	4b59      	ldr	r3, [pc, #356]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4a58      	ldr	r2, [pc, #352]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066a0:	4b53      	ldr	r3, [pc, #332]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066ac:	4b50      	ldr	r3, [pc, #320]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	494d      	ldr	r1, [pc, #308]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d044      	beq.n	8006754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d107      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	4b47      	ldr	r3, [pc, #284]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d119      	bne.n	8006712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e07f      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d003      	beq.n	80066f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d107      	bne.n	8006702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f2:	4b3f      	ldr	r3, [pc, #252]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e06f      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e067      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006712:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f023 0203 	bic.w	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4934      	ldr	r1, [pc, #208]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	4313      	orrs	r3, r2
 8006722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006724:	f7fe fa8c 	bl	8004c40 <HAL_GetTick>
 8006728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672a:	e00a      	b.n	8006742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672c:	f7fe fa88 	bl	8004c40 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e04f      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 020c 	and.w	r2, r3, #12
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	429a      	cmp	r2, r3
 8006752:	d1eb      	bne.n	800672c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d20c      	bcs.n	800677c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b22      	ldr	r3, [pc, #136]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d001      	beq.n	800677c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e032      	b.n	80067e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006788:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4916      	ldr	r1, [pc, #88]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	490e      	ldr	r1, [pc, #56]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ba:	f000 f821 	bl	8006800 <HAL_RCC_GetSysClockFreq>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	490a      	ldr	r1, [pc, #40]	; (80067f4 <HAL_RCC_ClockConfig+0x1c0>)
 80067cc:	5ccb      	ldrb	r3, [r1, r3]
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <HAL_RCC_ClockConfig+0x1c4>)
 80067d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCC_ClockConfig+0x1c8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa ff3c 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40023c00 	.word	0x40023c00
 80067f0:	40023800 	.word	0x40023800
 80067f4:	0800a6a4 	.word	0x0800a6a4
 80067f8:	20000004 	.word	0x20000004
 80067fc:	2000009c 	.word	0x2000009c

08006800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006804:	b094      	sub	sp, #80	; 0x50
 8006806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
 800680c:	2300      	movs	r3, #0
 800680e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006810:	2300      	movs	r3, #0
 8006812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006818:	4b79      	ldr	r3, [pc, #484]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 030c 	and.w	r3, r3, #12
 8006820:	2b08      	cmp	r3, #8
 8006822:	d00d      	beq.n	8006840 <HAL_RCC_GetSysClockFreq+0x40>
 8006824:	2b08      	cmp	r3, #8
 8006826:	f200 80e1 	bhi.w	80069ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_RCC_GetSysClockFreq+0x34>
 800682e:	2b04      	cmp	r3, #4
 8006830:	d003      	beq.n	800683a <HAL_RCC_GetSysClockFreq+0x3a>
 8006832:	e0db      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006834:	4b73      	ldr	r3, [pc, #460]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006838:	e0db      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800683a:	4b73      	ldr	r3, [pc, #460]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800683c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800683e:	e0d8      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006840:	4b6f      	ldr	r3, [pc, #444]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800684a:	4b6d      	ldr	r3, [pc, #436]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d063      	beq.n	800691e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006856:	4b6a      	ldr	r3, [pc, #424]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	099b      	lsrs	r3, r3, #6
 800685c:	2200      	movs	r2, #0
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006868:	633b      	str	r3, [r7, #48]	; 0x30
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
 800686e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	f04f 0000 	mov.w	r0, #0
 800687a:	f04f 0100 	mov.w	r1, #0
 800687e:	0159      	lsls	r1, r3, #5
 8006880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006884:	0150      	lsls	r0, r2, #5
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4621      	mov	r1, r4
 800688c:	1a51      	subs	r1, r2, r1
 800688e:	6139      	str	r1, [r7, #16]
 8006890:	4629      	mov	r1, r5
 8006892:	eb63 0301 	sbc.w	r3, r3, r1
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068a4:	4659      	mov	r1, fp
 80068a6:	018b      	lsls	r3, r1, #6
 80068a8:	4651      	mov	r1, sl
 80068aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ae:	4651      	mov	r1, sl
 80068b0:	018a      	lsls	r2, r1, #6
 80068b2:	4651      	mov	r1, sl
 80068b4:	ebb2 0801 	subs.w	r8, r2, r1
 80068b8:	4659      	mov	r1, fp
 80068ba:	eb63 0901 	sbc.w	r9, r3, r1
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068d2:	4690      	mov	r8, r2
 80068d4:	4699      	mov	r9, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	eb18 0303 	adds.w	r3, r8, r3
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	462b      	mov	r3, r5
 80068e0:	eb49 0303 	adc.w	r3, r9, r3
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068f2:	4629      	mov	r1, r5
 80068f4:	024b      	lsls	r3, r1, #9
 80068f6:	4621      	mov	r1, r4
 80068f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068fc:	4621      	mov	r1, r4
 80068fe:	024a      	lsls	r2, r1, #9
 8006900:	4610      	mov	r0, r2
 8006902:	4619      	mov	r1, r3
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	2200      	movs	r2, #0
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006910:	f7f9 fc66 	bl	80001e0 <__aeabi_uldivmod>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4613      	mov	r3, r2
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691c:	e058      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800691e:	4b38      	ldr	r3, [pc, #224]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	099b      	lsrs	r3, r3, #6
 8006924:	2200      	movs	r2, #0
 8006926:	4618      	mov	r0, r3
 8006928:	4611      	mov	r1, r2
 800692a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
 8006934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	f04f 0000 	mov.w	r0, #0
 8006940:	f04f 0100 	mov.w	r1, #0
 8006944:	0159      	lsls	r1, r3, #5
 8006946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800694a:	0150      	lsls	r0, r2, #5
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4641      	mov	r1, r8
 8006952:	ebb2 0a01 	subs.w	sl, r2, r1
 8006956:	4649      	mov	r1, r9
 8006958:	eb63 0b01 	sbc.w	fp, r3, r1
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800696c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006970:	ebb2 040a 	subs.w	r4, r2, sl
 8006974:	eb63 050b 	sbc.w	r5, r3, fp
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	00eb      	lsls	r3, r5, #3
 8006982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006986:	00e2      	lsls	r2, r4, #3
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	4643      	mov	r3, r8
 800698e:	18e3      	adds	r3, r4, r3
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	464b      	mov	r3, r9
 8006994:	eb45 0303 	adc.w	r3, r5, r3
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069a6:	4629      	mov	r1, r5
 80069a8:	028b      	lsls	r3, r1, #10
 80069aa:	4621      	mov	r1, r4
 80069ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069b0:	4621      	mov	r1, r4
 80069b2:	028a      	lsls	r2, r1, #10
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ba:	2200      	movs	r2, #0
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	61fa      	str	r2, [r7, #28]
 80069c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c4:	f7f9 fc0c 	bl	80001e0 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	3301      	adds	r3, #1
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80069e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069ea:	e002      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80069ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3750      	adds	r7, #80	; 0x50
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069fe:	bf00      	nop
 8006a00:	40023800 	.word	0x40023800
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	007a1200 	.word	0x007a1200

08006a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000004 	.word	0x20000004

08006a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a28:	f7ff fff0 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0a9b      	lsrs	r3, r3, #10
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0800a6b4 	.word	0x0800a6b4

08006a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	220f      	movs	r2, #15
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0203 	and.w	r2, r3, #3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <HAL_RCC_GetClockConfig+0x60>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40023c00 	.word	0x40023c00

08006ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f839 	bl	8006b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fe2e 	bl	8007750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d001      	beq.n	8006b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e044      	b.n	8006c06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba6:	d013      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	; (8006c18 <HAL_TIM_Base_Start_IT+0xb4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <HAL_TIM_Base_Start_IT+0xb8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a17      	ldr	r2, [pc, #92]	; (8006c20 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <HAL_TIM_Base_Start_IT+0xc0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d111      	bne.n	8006bf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b06      	cmp	r3, #6
 8006be0:	d010      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	e007      	b.n	8006c04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40000400 	.word	0x40000400
 8006c1c:	40000800 	.word	0x40000800
 8006c20:	40000c00 	.word	0x40000c00
 8006c24:	40014000 	.word	0x40014000

08006c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e041      	b.n	8006cbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fa fc60 	bl	8001514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f000 fd72 	bl	8007750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e022      	b.n	8006d3a <HAL_TIM_PWM_Start_DMA+0x72>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d109      	bne.n	8006d0e <HAL_TIM_PWM_Start_DMA+0x46>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e015      	b.n	8006d3a <HAL_TIM_PWM_Start_DMA+0x72>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d109      	bne.n	8006d28 <HAL_TIM_PWM_Start_DMA+0x60>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e008      	b.n	8006d3a <HAL_TIM_PWM_Start_DMA+0x72>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e15d      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_TIM_PWM_Start_DMA+0x94>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e022      	b.n	8006da2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d109      	bne.n	8006d76 <HAL_TIM_PWM_Start_DMA+0xae>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	bf0c      	ite	eq
 8006d6e:	2301      	moveq	r3, #1
 8006d70:	2300      	movne	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	e015      	b.n	8006da2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d109      	bne.n	8006d90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e008      	b.n	8006da2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d024      	beq.n	8006df0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start_DMA+0xee>
 8006dac:	887b      	ldrh	r3, [r7, #2]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e123      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc4:	e016      	b.n	8006df4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd4:	e00e      	b.n	8006df4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de4:	e006      	b.n	8006df4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dee:	e001      	b.n	8006df4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e104      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b0c      	cmp	r3, #12
 8006df8:	f200 80ae 	bhi.w	8006f58 <HAL_TIM_PWM_Start_DMA+0x290>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006f59 	.word	0x08006f59
 8006e0c:	08006f59 	.word	0x08006f59
 8006e10:	08006f59 	.word	0x08006f59
 8006e14:	08006e81 	.word	0x08006e81
 8006e18:	08006f59 	.word	0x08006f59
 8006e1c:	08006f59 	.word	0x08006f59
 8006e20:	08006f59 	.word	0x08006f59
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006f59 	.word	0x08006f59
 8006e2c:	08006f59 	.word	0x08006f59
 8006e30:	08006f59 	.word	0x08006f59
 8006e34:	08006f11 	.word	0x08006f11
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	4a72      	ldr	r2, [pc, #456]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	4a71      	ldr	r2, [pc, #452]	; (800700c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	4a70      	ldr	r2, [pc, #448]	; (8007010 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006e4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3334      	adds	r3, #52	; 0x34
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	f7fe f88a 	bl	8004f78 <HAL_DMA_Start_IT>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e0c7      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7c:	60da      	str	r2, [r3, #12]
      break;
 8006e7e:	e06e      	b.n	8006f5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	4a60      	ldr	r2, [pc, #384]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006e86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	4a5f      	ldr	r2, [pc, #380]	; (800700c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	4a5e      	ldr	r2, [pc, #376]	; (8007010 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006e96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3338      	adds	r3, #56	; 0x38
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	887b      	ldrh	r3, [r7, #2]
 8006ea8:	f7fe f866 	bl	8004f78 <HAL_DMA_Start_IT>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0a3      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ec4:	60da      	str	r2, [r3, #12]
      break;
 8006ec6:	e04a      	b.n	8006f5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a4e      	ldr	r2, [pc, #312]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a4d      	ldr	r2, [pc, #308]	; (800700c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	4a4c      	ldr	r2, [pc, #304]	; (8007010 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006ede:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	333c      	adds	r3, #60	; 0x3c
 8006eec:	461a      	mov	r2, r3
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	f7fe f842 	bl	8004f78 <HAL_DMA_Start_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e07f      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f0c:	60da      	str	r2, [r3, #12]
      break;
 8006f0e:	e026      	b.n	8006f5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006f16:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	4a3b      	ldr	r2, [pc, #236]	; (800700c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	4a3a      	ldr	r2, [pc, #232]	; (8007010 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006f26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3340      	adds	r3, #64	; 0x40
 8006f34:	461a      	mov	r2, r3
 8006f36:	887b      	ldrh	r3, [r7, #2]
 8006f38:	f7fe f81e 	bl	8004f78 <HAL_DMA_Start_IT>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e05b      	b.n	8006ffe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f54:	60da      	str	r2, [r3, #12]
      break;
 8006f56:	e002      	b.n	8006f5e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d14b      	bne.n	8006ffc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fdfb 	bl	8007b68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a27      	ldr	r2, [pc, #156]	; (8007014 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d107      	bne.n	8006f8c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a20      	ldr	r2, [pc, #128]	; (8007014 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d013      	beq.n	8006fc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1c      	ldr	r2, [pc, #112]	; (8007018 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1b      	ldr	r2, [pc, #108]	; (800701c <HAL_TIM_PWM_Start_DMA+0x354>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a19      	ldr	r2, [pc, #100]	; (8007020 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a18      	ldr	r2, [pc, #96]	; (8007024 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d111      	bne.n	8006fec <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b06      	cmp	r3, #6
 8006fd8:	d010      	beq.n	8006ffc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0201 	orr.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fea:	e007      	b.n	8006ffc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	0800763f 	.word	0x0800763f
 800700c:	080076e7 	.word	0x080076e7
 8007010:	080075ad 	.word	0x080075ad
 8007014:	40010000 	.word	0x40010000
 8007018:	40000400 	.word	0x40000400
 800701c:	40000800 	.word	0x40000800
 8007020:	40000c00 	.word	0x40000c00
 8007024:	40014000 	.word	0x40014000

08007028 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b0c      	cmp	r3, #12
 800703a:	d855      	bhi.n	80070e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007079 	.word	0x08007079
 8007048:	080070e9 	.word	0x080070e9
 800704c:	080070e9 	.word	0x080070e9
 8007050:	080070e9 	.word	0x080070e9
 8007054:	08007095 	.word	0x08007095
 8007058:	080070e9 	.word	0x080070e9
 800705c:	080070e9 	.word	0x080070e9
 8007060:	080070e9 	.word	0x080070e9
 8007064:	080070b1 	.word	0x080070b1
 8007068:	080070e9 	.word	0x080070e9
 800706c:	080070e9 	.word	0x080070e9
 8007070:	080070e9 	.word	0x080070e9
 8007074:	080070cd 	.word	0x080070cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007086:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	4618      	mov	r0, r3
 800708e:	f7fd ffcb 	bl	8005028 <HAL_DMA_Abort_IT>
      break;
 8007092:	e02c      	b.n	80070ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd ffbd 	bl	8005028 <HAL_DMA_Abort_IT>
      break;
 80070ae:	e01e      	b.n	80070ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd ffaf 	bl	8005028 <HAL_DMA_Abort_IT>
      break;
 80070ca:	e010      	b.n	80070ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fd ffa1 	bl	8005028 <HAL_DMA_Abort_IT>
      break;
 80070e6:	e002      	b.n	80070ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
      break;
 80070ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d157      	bne.n	80071a4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fd33 	bl	8007b68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d117      	bne.n	800713c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	f241 1311 	movw	r3, #4369	; 0x1111
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10f      	bne.n	800713c <HAL_TIM_PWM_Stop_DMA+0x114>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	f240 4344 	movw	r3, #1092	; 0x444
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <HAL_TIM_PWM_Stop_DMA+0x114>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800713a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f241 1311 	movw	r3, #4369	; 0x1111
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10f      	bne.n	800716c <HAL_TIM_PWM_Stop_DMA+0x144>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f240 4344 	movw	r3, #1092	; 0x444
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <HAL_TIM_PWM_Stop_DMA+0x144>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_TIM_PWM_Stop_DMA+0x154>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800717a:	e013      	b.n	80071a4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d104      	bne.n	800718c <HAL_TIM_PWM_Stop_DMA+0x164>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718a:	e00b      	b.n	80071a4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d104      	bne.n	800719c <HAL_TIM_PWM_Stop_DMA+0x174>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800719a:	e003      	b.n	80071a4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000

080071b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0202 	mvn.w	r2, #2
 80071e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9b0 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9a2 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fd f87b 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b04      	cmp	r3, #4
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0204 	mvn.w	r2, #4
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f986 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f978 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fd f851 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b08      	cmp	r3, #8
 8007270:	d122      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d11b      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0208 	mvn.w	r2, #8
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2204      	movs	r2, #4
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f95c 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f94e 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fd f827 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d122      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d11b      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0210 	mvn.w	r2, #16
 80072dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2208      	movs	r2, #8
 80072e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f932 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f924 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fc fffd 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b01      	cmp	r3, #1
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0201 	mvn.w	r2, #1
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7f9 fdd8 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	2b80      	cmp	r3, #128	; 0x80
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fcf2 	bl	8007d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f8fa 	bl	8007584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b20      	cmp	r3, #32
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0220 	mvn.w	r2, #32
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fcbc 	bl	8007d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073de:	2302      	movs	r3, #2
 80073e0:	e0ae      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	f200 809f 	bhi.w	8007530 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	0800742d 	.word	0x0800742d
 80073fc:	08007531 	.word	0x08007531
 8007400:	08007531 	.word	0x08007531
 8007404:	08007531 	.word	0x08007531
 8007408:	0800746d 	.word	0x0800746d
 800740c:	08007531 	.word	0x08007531
 8007410:	08007531 	.word	0x08007531
 8007414:	08007531 	.word	0x08007531
 8007418:	080074af 	.word	0x080074af
 800741c:	08007531 	.word	0x08007531
 8007420:	08007531 	.word	0x08007531
 8007424:	08007531 	.word	0x08007531
 8007428:	080074ef 	.word	0x080074ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fa0c 	bl	8007850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0208 	orr.w	r2, r2, #8
 8007446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0204 	bic.w	r2, r2, #4
 8007456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6999      	ldr	r1, [r3, #24]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	619a      	str	r2, [r3, #24]
      break;
 800746a:	e064      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fa52 	bl	800791c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6999      	ldr	r1, [r3, #24]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	021a      	lsls	r2, r3, #8
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	619a      	str	r2, [r3, #24]
      break;
 80074ac:	e043      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fa9d 	bl	80079f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69da      	ldr	r2, [r3, #28]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0208 	orr.w	r2, r2, #8
 80074c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69da      	ldr	r2, [r3, #28]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0204 	bic.w	r2, r2, #4
 80074d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69d9      	ldr	r1, [r3, #28]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	61da      	str	r2, [r3, #28]
      break;
 80074ec:	e023      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fae7 	bl	8007ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69d9      	ldr	r1, [r3, #28]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	021a      	lsls	r2, r3, #8
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	61da      	str	r2, [r3, #28]
      break;
 800752e:	e002      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d107      	bne.n	80075d4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d2:	e02a      	b.n	800762a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d107      	bne.n	80075ee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2202      	movs	r2, #2
 80075e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ec:	e01d      	b.n	800762a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d107      	bne.n	8007608 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2204      	movs	r2, #4
 80075fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007606:	e010      	b.n	800762a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	429a      	cmp	r2, r3
 8007610:	d107      	bne.n	8007622 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2208      	movs	r2, #8
 8007616:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007620:	e003      	b.n	800762a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff ffb4 	bl	8007598 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	771a      	strb	r2, [r3, #28]
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d10b      	bne.n	800766e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d136      	bne.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	e031      	b.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	429a      	cmp	r2, r3
 8007676:	d10b      	bne.n	8007690 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2202      	movs	r2, #2
 800767c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d125      	bne.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800768e:	e020      	b.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d10b      	bne.n	80076b2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2204      	movs	r2, #4
 800769e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d114      	bne.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076b0:	e00f      	b.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d10a      	bne.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2208      	movs	r2, #8
 80076c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7fc fe14 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	771a      	strb	r2, [r3, #28]
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d103      	bne.n	8007706 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	771a      	strb	r2, [r3, #28]
 8007704:	e019      	b.n	800773a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d103      	bne.n	8007718 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2202      	movs	r2, #2
 8007714:	771a      	strb	r2, [r3, #28]
 8007716:	e010      	b.n	800773a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d103      	bne.n	800772a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2204      	movs	r2, #4
 8007726:	771a      	strb	r2, [r3, #28]
 8007728:	e007      	b.n	800773a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d102      	bne.n	800773a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2208      	movs	r2, #8
 8007738:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff ff18 	bl	8007570 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	771a      	strb	r2, [r3, #28]
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a34      	ldr	r2, [pc, #208]	; (8007834 <TIM_Base_SetConfig+0xe4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_Base_SetConfig+0x38>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d00b      	beq.n	8007788 <TIM_Base_SetConfig+0x38>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a31      	ldr	r2, [pc, #196]	; (8007838 <TIM_Base_SetConfig+0xe8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_Base_SetConfig+0x38>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a30      	ldr	r2, [pc, #192]	; (800783c <TIM_Base_SetConfig+0xec>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_Base_SetConfig+0x38>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a2f      	ldr	r2, [pc, #188]	; (8007840 <TIM_Base_SetConfig+0xf0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d108      	bne.n	800779a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a25      	ldr	r2, [pc, #148]	; (8007834 <TIM_Base_SetConfig+0xe4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01b      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a8:	d017      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a22      	ldr	r2, [pc, #136]	; (8007838 <TIM_Base_SetConfig+0xe8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a21      	ldr	r2, [pc, #132]	; (800783c <TIM_Base_SetConfig+0xec>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00f      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a20      	ldr	r2, [pc, #128]	; (8007840 <TIM_Base_SetConfig+0xf0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00b      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <TIM_Base_SetConfig+0xf4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d007      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <TIM_Base_SetConfig+0xf8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d003      	beq.n	80077da <TIM_Base_SetConfig+0x8a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1d      	ldr	r2, [pc, #116]	; (800784c <TIM_Base_SetConfig+0xfc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d108      	bne.n	80077ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a08      	ldr	r2, [pc, #32]	; (8007834 <TIM_Base_SetConfig+0xe4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d103      	bne.n	8007820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	615a      	str	r2, [r3, #20]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40010000 	.word	0x40010000
 8007838:	40000400 	.word	0x40000400
 800783c:	40000800 	.word	0x40000800
 8007840:	40000c00 	.word	0x40000c00
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800

08007850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0201 	bic.w	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 0302 	bic.w	r3, r3, #2
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a1c      	ldr	r2, [pc, #112]	; (8007918 <TIM_OC1_SetConfig+0xc8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10c      	bne.n	80078c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0308 	bic.w	r3, r3, #8
 80078b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f023 0304 	bic.w	r3, r3, #4
 80078c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a13      	ldr	r2, [pc, #76]	; (8007918 <TIM_OC1_SetConfig+0xc8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d111      	bne.n	80078f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	621a      	str	r2, [r3, #32]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40010000 	.word	0x40010000

0800791c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f023 0210 	bic.w	r2, r3, #16
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 0320 	bic.w	r3, r3, #32
 8007966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <TIM_OC2_SetConfig+0xd4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10d      	bne.n	8007998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <TIM_OC2_SetConfig+0xd4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d113      	bne.n	80079c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40010000 	.word	0x40010000

080079f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <TIM_OC3_SetConfig+0xd0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10d      	bne.n	8007a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <TIM_OC3_SetConfig+0xd0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d113      	bne.n	8007a9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40010000 	.word	0x40010000

08007ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	031b      	lsls	r3, r3, #12
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <TIM_OC4_SetConfig+0x9c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d109      	bne.n	8007b3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	019b      	lsls	r3, r3, #6
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000

08007b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 031f 	and.w	r3, r3, #31
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1a      	ldr	r2, [r3, #32]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	401a      	ands	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e050      	b.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d018      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c18:	d013      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00e      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a15      	ldr	r2, [pc, #84]	; (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d10c      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40014000 	.word	0x40014000

08007c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e03d      	b.n	8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d6e:	2b84      	cmp	r3, #132	; 0x84
 8007d70:	d005      	beq.n	8007d7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	3303      	adds	r3, #3
 8007d7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d90:	f001 f866 	bl	8008e60 <vTaskStartScheduler>
  
  return osOK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9c:	b089      	sub	sp, #36	; 0x24
 8007d9e:	af04      	add	r7, sp, #16
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d020      	beq.n	8007dee <osThreadCreate+0x54>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01c      	beq.n	8007dee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685c      	ldr	r4, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691e      	ldr	r6, [r3, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ffc8 	bl	8007d5c <makeFreeRtosPriority>
 8007dcc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dd6:	9202      	str	r2, [sp, #8]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	9100      	str	r1, [sp, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	4632      	mov	r2, r6
 8007de0:	4629      	mov	r1, r5
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 fde0 	bl	80089a8 <xTaskCreateStatic>
 8007de8:	4603      	mov	r3, r0
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e01c      	b.n	8007e28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685c      	ldr	r4, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dfa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff ffaa 	bl	8007d5c <makeFreeRtosPriority>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	f107 030c 	add.w	r3, r7, #12
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	9200      	str	r2, [sp, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	4632      	mov	r2, r6
 8007e16:	4629      	mov	r1, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fe22 	bl	8008a62 <xTaskCreate>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d001      	beq.n	8007e28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e28:	68fb      	ldr	r3, [r7, #12]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <osDelay+0x16>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	e000      	b.n	8007e4a <osDelay+0x18>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 ffd4 	bl	8008df8 <vTaskDelay>
  
  return osOK;
 8007e50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f103 0208 	add.w	r2, r3, #8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	601a      	str	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d103      	bne.n	8007f1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e00c      	b.n	8007f36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e002      	b.n	8007f2a <vListInsert+0x2e>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d2f6      	bcs.n	8007f24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	601a      	str	r2, [r3, #0]
}
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6892      	ldr	r2, [r2, #8]
 8007f84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6852      	ldr	r2, [r2, #4]
 8007f8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d103      	bne.n	8007fa2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fee:	f001 fe99 	bl	8009d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	441a      	add	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	3b01      	subs	r3, #1
 8008020:	68f9      	ldr	r1, [r7, #12]
 8008022:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d114      	bne.n	800806e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01a      	beq.n	8008082 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3310      	adds	r3, #16
 8008050:	4618      	mov	r0, r3
 8008052:	f001 f967 	bl	8009324 <xTaskRemoveFromEventList>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <xQueueGenericReset+0xcc>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	e009      	b.n	8008082 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3310      	adds	r3, #16
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fef1 	bl	8007e5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3324      	adds	r3, #36	; 0x24
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff feec 	bl	8007e5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008082:	f001 fe7f 	bl	8009d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008086:	2301      	movs	r3, #1
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueGenericCreate+0x2a>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	613b      	str	r3, [r7, #16]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3348      	adds	r3, #72	; 0x48
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 ff0b 	bl	8009ee8 <pvPortMalloc>
 80080d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d011      	beq.n	80080fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	3348      	adds	r3, #72	; 0x48
 80080e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f805 	bl	8008108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080fe:	69bb      	ldr	r3, [r7, #24]
	}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d103      	bne.n	8008124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	e002      	b.n	800812a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008136:	2101      	movs	r1, #1
 8008138:	69b8      	ldr	r0, [r7, #24]
 800813a:	f7ff ff43 	bl	8007fc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08e      	sub	sp, #56	; 0x38
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008156:	2300      	movs	r3, #0
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueGenericSend+0x32>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <xQueueGenericSend+0x40>
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <xQueueGenericSend+0x44>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <xQueueGenericSend+0x46>
 800818c:	2300      	movs	r3, #0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <xQueueGenericSend+0x60>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d103      	bne.n	80081b6 <xQueueGenericSend+0x6e>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <xQueueGenericSend+0x72>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericSend+0x74>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	623b      	str	r3, [r7, #32]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081d6:	f001 fa55 	bl	8009684 <xTaskGetSchedulerState>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <xQueueGenericSend+0x9e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <xQueueGenericSend+0xa2>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <xQueueGenericSend+0xa4>
 80081ea:	2300      	movs	r3, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xQueueGenericSend+0xbe>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	61fb      	str	r3, [r7, #28]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008206:	f001 fd8d 	bl	8009d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <xQueueGenericSend+0xd4>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d129      	bne.n	8008270 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008222:	f000 fab1 	bl	8008788 <prvCopyDataToQueue>
 8008226:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	d010      	beq.n	8008252 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	3324      	adds	r3, #36	; 0x24
 8008234:	4618      	mov	r0, r3
 8008236:	f001 f875 	bl	8009324 <xTaskRemoveFromEventList>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d013      	beq.n	8008268 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008240:	4b3f      	ldr	r3, [pc, #252]	; (8008340 <xQueueGenericSend+0x1f8>)
 8008242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	e00a      	b.n	8008268 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008258:	4b39      	ldr	r3, [pc, #228]	; (8008340 <xQueueGenericSend+0x1f8>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008268:	f001 fd8c 	bl	8009d84 <vPortExitCritical>
				return pdPASS;
 800826c:	2301      	movs	r3, #1
 800826e:	e063      	b.n	8008338 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008276:	f001 fd85 	bl	8009d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800827a:	2300      	movs	r3, #0
 800827c:	e05c      	b.n	8008338 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008284:	f107 0314 	add.w	r3, r7, #20
 8008288:	4618      	mov	r0, r3
 800828a:	f001 f8ad 	bl	80093e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008292:	f001 fd77 	bl	8009d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008296:	f000 fe4d 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800829a:	f001 fd43 	bl	8009d24 <vPortEnterCritical>
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082aa:	d103      	bne.n	80082b4 <xQueueGenericSend+0x16c>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ba:	b25b      	sxtb	r3, r3
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d103      	bne.n	80082ca <xQueueGenericSend+0x182>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ca:	f001 fd5b 	bl	8009d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ce:	1d3a      	adds	r2, r7, #4
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f89c 	bl	8009414 <xTaskCheckForTimeOut>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d124      	bne.n	800832c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e4:	f000 fb48 	bl	8008978 <prvIsQueueFull>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d018      	beq.n	8008320 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	3310      	adds	r3, #16
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fff0 	bl	80092dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082fe:	f000 fad3 	bl	80088a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008302:	f000 fe25 	bl	8008f50 <xTaskResumeAll>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	f47f af7c 	bne.w	8008206 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <xQueueGenericSend+0x1f8>)
 8008310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	e772      	b.n	8008206 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008322:	f000 fac1 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008326:	f000 fe13 	bl	8008f50 <xTaskResumeAll>
 800832a:	e76c      	b.n	8008206 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800832c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800832e:	f000 fabb 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008332:	f000 fe0d 	bl	8008f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008336:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008338:	4618      	mov	r0, r3
 800833a:	3738      	adds	r7, #56	; 0x38
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xQueueReceive+0x30>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	623b      	str	r3, [r7, #32]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x3e>
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <xQueueReceive+0x42>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueReceive+0x44>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueReceive+0x5e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61fb      	str	r3, [r7, #28]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a2:	f001 f96f 	bl	8009684 <xTaskGetSchedulerState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xQueueReceive+0x6e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueReceive+0x72>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueReceive+0x74>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueReceive+0x8e>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61bb      	str	r3, [r7, #24]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d2:	f001 fca7 	bl	8009d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01f      	beq.n	8008422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 fa39 	bl	800885c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3310      	adds	r3, #16
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 ff90 	bl	8009324 <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <xQueueReceive+0x1bc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800841a:	f001 fcb3 	bl	8009d84 <vPortExitCritical>
				return pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	e069      	b.n	80084f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008428:	f001 fcac 	bl	8009d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800842c:	2300      	movs	r3, #0
 800842e:	e062      	b.n	80084f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ffd4 	bl	80093e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008444:	f001 fc9e 	bl	8009d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008448:	f000 fd74 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844c:	f001 fc6a 	bl	8009d24 <vPortEnterCritical>
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d103      	bne.n	8008466 <xQueueReceive+0x122>
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d103      	bne.n	800847c <xQueueReceive+0x138>
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	f001 fc82 	bl	8009d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008480:	1d3a      	adds	r2, r7, #4
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 ffc3 	bl	8009414 <xTaskCheckForTimeOut>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d123      	bne.n	80084dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 fa59 	bl	800894c <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	3324      	adds	r3, #36	; 0x24
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 ff17 	bl	80092dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b0:	f000 f9fa 	bl	80088a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084b4:	f000 fd4c 	bl	8008f50 <xTaskResumeAll>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d189      	bne.n	80083d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <xQueueReceive+0x1bc>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	e780      	b.n	80083d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 f9e9 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d6:	f000 fd3b 	bl	8008f50 <xTaskResumeAll>
 80084da:	e77a      	b.n	80083d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084de:	f000 f9e3 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e2:	f000 fd35 	bl	8008f50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e8:	f000 fa30 	bl	800894c <prvIsQueueEmpty>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f af6f 	beq.w	80083d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08e      	sub	sp, #56	; 0x38
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	623b      	str	r3, [r7, #32]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	61fb      	str	r3, [r7, #28]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008554:	f001 f896 	bl	8009684 <xTaskGetSchedulerState>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <xQueueSemaphoreTake+0x60>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <xQueueSemaphoreTake+0x64>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <xQueueSemaphoreTake+0x66>
 8008568:	2300      	movs	r3, #0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	61bb      	str	r3, [r7, #24]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008584:	f001 fbce 	bl	8009d24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d024      	beq.n	80085de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	1e5a      	subs	r2, r3, #1
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085a4:	f001 fa16 	bl	80099d4 <pvTaskIncrementMutexHeldCount>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	3310      	adds	r3, #16
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 feb2 	bl	8009324 <xTaskRemoveFromEventList>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085c6:	4b54      	ldr	r3, [pc, #336]	; (8008718 <xQueueSemaphoreTake+0x214>)
 80085c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085d6:	f001 fbd5 	bl	8009d84 <vPortExitCritical>
				return pdPASS;
 80085da:	2301      	movs	r3, #1
 80085dc:	e097      	b.n	800870e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d111      	bne.n	8008608 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	617b      	str	r3, [r7, #20]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008600:	f001 fbc0 	bl	8009d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008604:	2300      	movs	r3, #0
 8008606:	e082      	b.n	800870e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860e:	f107 030c 	add.w	r3, r7, #12
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fee8 	bl	80093e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861c:	f001 fbb2 	bl	8009d84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008620:	f000 fc88 	bl	8008f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008624:	f001 fb7e 	bl	8009d24 <vPortEnterCritical>
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <xQueueSemaphoreTake+0x13a>
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d103      	bne.n	8008654 <xQueueSemaphoreTake+0x150>
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008654:	f001 fb96 	bl	8009d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008658:	463a      	mov	r2, r7
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fed7 	bl	8009414 <xTaskCheckForTimeOut>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d132      	bne.n	80086d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800866c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800866e:	f000 f96d 	bl	800894c <prvIsQueueEmpty>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d026      	beq.n	80086c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008680:	f001 fb50 	bl	8009d24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f819 	bl	80096c0 <xTaskPriorityInherit>
 800868e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008690:	f001 fb78 	bl	8009d84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe1d 	bl	80092dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086a4:	f000 f900 	bl	80088a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086a8:	f000 fc52 	bl	8008f50 <xTaskResumeAll>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f af68 	bne.w	8008584 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80086b4:	4b18      	ldr	r3, [pc, #96]	; (8008718 <xQueueSemaphoreTake+0x214>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	e75e      	b.n	8008584 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c8:	f000 f8ee 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086cc:	f000 fc40 	bl	8008f50 <xTaskResumeAll>
 80086d0:	e758      	b.n	8008584 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086d4:	f000 f8e8 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086d8:	f000 fc3a 	bl	8008f50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086de:	f000 f935 	bl	800894c <prvIsQueueEmpty>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f43f af4d 	beq.w	8008584 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80086f0:	f001 fb18 	bl	8009d24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f6:	f000 f82f 	bl	8008758 <prvGetDisinheritPriorityAfterTimeout>
 80086fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f8d8 	bl	80098b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008708:	f001 fb3c 	bl	8009d84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800870c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800870e:	4618      	mov	r0, r3
 8008710:	3738      	adds	r7, #56	; 0x38
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	60bb      	str	r3, [r7, #8]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008740:	f001 faf0 	bl	8009d24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800874a:	f001 fb1b 	bl	8009d84 <vPortExitCritical>

	return uxReturn;
 800874e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1c3 0307 	rsb	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e001      	b.n	800877a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800877a:	68fb      	ldr	r3, [r7, #12]
	}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10d      	bne.n	80087c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d14d      	bne.n	800884a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fffa 	bl	80097ac <xTaskPriorityDisinherit>
 80087b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e043      	b.n	800884a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d119      	bne.n	80087fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6858      	ldr	r0, [r3, #4]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	461a      	mov	r2, r3
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	f001 fdf6 	bl	800a3c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d32b      	bcc.n	800884a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	e026      	b.n	800884a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68d8      	ldr	r0, [r3, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	461a      	mov	r2, r3
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	f001 fddc 	bl	800a3c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	425b      	negs	r3, r3
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d207      	bcs.n	8008838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	425b      	negs	r3, r3
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d105      	bne.n	800884a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3b01      	subs	r3, #1
 8008848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008852:	697b      	ldr	r3, [r7, #20]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d018      	beq.n	80088a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	441a      	add	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	429a      	cmp	r2, r3
 8008886:	d303      	bcc.n	8008890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68d9      	ldr	r1, [r3, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	461a      	mov	r2, r3
 800889a:	6838      	ldr	r0, [r7, #0]
 800889c:	f001 fd92 	bl	800a3c4 <memcpy>
	}
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088b0:	f001 fa38 	bl	8009d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088bc:	e011      	b.n	80088e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fd2a 	bl	8009324 <xTaskRemoveFromEventList>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088d6:	f000 fdff 	bl	80094d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	3b01      	subs	r3, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dce9      	bgt.n	80088be <prvUnlockQueue+0x16>
 80088ea:	e000      	b.n	80088ee <prvUnlockQueue+0x46>
					break;
 80088ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088f6:	f001 fa45 	bl	8009d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088fa:	f001 fa13 	bl	8009d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008906:	e011      	b.n	800892c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d012      	beq.n	8008936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3310      	adds	r3, #16
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fd05 	bl	8009324 <xTaskRemoveFromEventList>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008920:	f000 fdda 	bl	80094d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	3b01      	subs	r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800892c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dce9      	bgt.n	8008908 <prvUnlockQueue+0x60>
 8008934:	e000      	b.n	8008938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	22ff      	movs	r2, #255	; 0xff
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008940:	f001 fa20 	bl	8009d84 <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008954:	f001 f9e6 	bl	8009d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e001      	b.n	800896a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800896a:	f001 fa0b 	bl	8009d84 <vPortExitCritical>

	return xReturn;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008980:	f001 f9d0 	bl	8009d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	429a      	cmp	r2, r3
 800898e:	d102      	bne.n	8008996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e001      	b.n	800899a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800899a:	f001 f9f3 	bl	8009d84 <vPortExitCritical>

	return xReturn;
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	; 0x38
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	623b      	str	r3, [r7, #32]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <xTaskCreateStatic+0x46>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	61fb      	str	r3, [r7, #28]
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089ee:	23a0      	movs	r3, #160	; 0xa0
 80089f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2ba0      	cmp	r3, #160	; 0xa0
 80089f6:	d00a      	beq.n	8008a0e <xTaskCreateStatic+0x66>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	61bb      	str	r3, [r7, #24]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01e      	beq.n	8008a54 <xTaskCreateStatic+0xac>
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f850 	bl	8008aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a4e:	f000 f8eb 	bl	8008c28 <prvAddNewTaskToReadyList>
 8008a52:	e001      	b.n	8008a58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a58:	697b      	ldr	r3, [r7, #20]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3728      	adds	r7, #40	; 0x28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b08c      	sub	sp, #48	; 0x30
 8008a66:	af04      	add	r7, sp, #16
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 fa36 	bl	8009ee8 <pvPortMalloc>
 8008a7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a84:	20a0      	movs	r0, #160	; 0xa0
 8008a86:	f001 fa2f 	bl	8009ee8 <pvPortMalloc>
 8008a8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
 8008a98:	e005      	b.n	8008aa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a9a:	6978      	ldr	r0, [r7, #20]
 8008a9c:	f001 faf0 	bl	800a080 <vPortFree>
 8008aa0:	e001      	b.n	8008aa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d017      	beq.n	8008adc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f80e 	bl	8008aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ad0:	69f8      	ldr	r0, [r7, #28]
 8008ad2:	f000 f8a9 	bl	8008c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	e002      	b.n	8008ae2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b04:	3b01      	subs	r3, #1
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	617b      	str	r3, [r7, #20]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01f      	beq.n	8008b7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e012      	b.n	8008b66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	7819      	ldrb	r1, [r3, #0]
 8008b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3334      	adds	r3, #52	; 0x34
 8008b50:	460a      	mov	r2, r1
 8008b52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b0f      	cmp	r3, #15
 8008b6a:	d9e9      	bls.n	8008b40 <prvInitialiseNewTask+0x54>
 8008b6c:	e000      	b.n	8008b70 <prvInitialiseNewTask+0x84>
			{
				break;
 8008b6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b78:	e003      	b.n	8008b82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	d901      	bls.n	8008b8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b88:	2306      	movs	r3, #6
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff f979 	bl	8007e9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	3318      	adds	r3, #24
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f974 	bl	8007e9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	f1c3 0207 	rsb	r2, r3, #7
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	334c      	adds	r3, #76	; 0x4c
 8008bdc:	224c      	movs	r2, #76	; 0x4c
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 fb6b 	bl	800a2bc <memset>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <prvInitialiseNewTask+0x130>)
 8008bea:	651a      	str	r2, [r3, #80]	; 0x50
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	4a0c      	ldr	r2, [pc, #48]	; (8008c20 <prvInitialiseNewTask+0x134>)
 8008bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <prvInitialiseNewTask+0x138>)
 8008bf6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f000 ff63 	bl	8009ac8 <pxPortInitialiseStack>
 8008c02:	4602      	mov	r2, r0
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c14:	bf00      	nop
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20009884 	.word	0x20009884
 8008c20:	200098ec 	.word	0x200098ec
 8008c24:	20009954 	.word	0x20009954

08008c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c30:	f001 f878 	bl	8009d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c34:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <prvAddNewTaskToReadyList+0xb8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a29      	ldr	r2, [pc, #164]	; (8008ce0 <prvAddNewTaskToReadyList+0xb8>)
 8008c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c3e:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <prvAddNewTaskToReadyList+0xbc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c46:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <prvAddNewTaskToReadyList+0xbc>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c4c:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <prvAddNewTaskToReadyList+0xb8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d110      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c54:	f000 fc54 	bl	8009500 <prvInitialiseTaskLists>
 8008c58:	e00d      	b.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <prvAddNewTaskToReadyList+0xc0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c62:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <prvAddNewTaskToReadyList+0xbc>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d802      	bhi.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c70:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <prvAddNewTaskToReadyList+0xbc>)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c76:	4b1d      	ldr	r3, [pc, #116]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	2201      	movs	r2, #1
 8008c86:	409a      	lsls	r2, r3
 8008c88:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	4a18      	ldr	r2, [pc, #96]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <prvAddNewTaskToReadyList+0xcc>)
 8008ca0:	441a      	add	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7ff f903 	bl	8007eb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cae:	f001 f869 	bl	8009d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <prvAddNewTaskToReadyList+0xc0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00e      	beq.n	8008cd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cba:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <prvAddNewTaskToReadyList+0xbc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d207      	bcs.n	8008cd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20001b30 	.word	0x20001b30
 8008ce4:	20001a30 	.word	0x20001a30
 8008ce8:	20001b3c 	.word	0x20001b3c
 8008cec:	20001b4c 	.word	0x20001b4c
 8008cf0:	20001b38 	.word	0x20001b38
 8008cf4:	20001a34 	.word	0x20001a34
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	617b      	str	r3, [r7, #20]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <vTaskDelayUntil+0x46>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	613b      	str	r3, [r7, #16]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008d42:	4b2a      	ldr	r3, [pc, #168]	; (8008dec <vTaskDelayUntil+0xf0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <vTaskDelayUntil+0x64>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	60fb      	str	r3, [r7, #12]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008d60:	f000 f8e8 	bl	8008f34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <vTaskDelayUntil+0xf4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4413      	add	r3, r2
 8008d72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6a3a      	ldr	r2, [r7, #32]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d20b      	bcs.n	8008d96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d211      	bcs.n	8008dac <vTaskDelayUntil+0xb0>
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d90d      	bls.n	8008dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
 8008d94:	e00a      	b.n	8008dac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d303      	bcc.n	8008da8 <vTaskDelayUntil+0xac>
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d901      	bls.n	8008dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d006      	beq.n	8008dc6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008db8:	69fa      	ldr	r2, [r7, #28]
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fe1b 	bl	80099fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008dc6:	f000 f8c3 	bl	8008f50 <xTaskResumeAll>
 8008dca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <vTaskDelayUntil+0xf8>)
 8008dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008de2:	bf00      	nop
 8008de4:	3728      	adds	r7, #40	; 0x28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001b58 	.word	0x20001b58
 8008df0:	20001b34 	.word	0x20001b34
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d017      	beq.n	8008e3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e0a:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <vTaskDelay+0x60>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <vTaskDelay+0x30>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e28:	f000 f884 	bl	8008f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fde4 	bl	80099fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e34:	f000 f88c 	bl	8008f50 <xTaskResumeAll>
 8008e38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d107      	bne.n	8008e50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <vTaskDelay+0x64>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20001b58 	.word	0x20001b58
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e6e:	463a      	mov	r2, r7
 8008e70:	1d39      	adds	r1, r7, #4
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7f7 fd4c 	bl	8000914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	9202      	str	r2, [sp, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	4921      	ldr	r1, [pc, #132]	; (8008f14 <vTaskStartScheduler+0xb4>)
 8008e90:	4821      	ldr	r0, [pc, #132]	; (8008f18 <vTaskStartScheduler+0xb8>)
 8008e92:	f7ff fd89 	bl	80089a8 <xTaskCreateStatic>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e9c:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <vTaskStartScheduler+0xbc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e001      	b.n	8008eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d11b      	bne.n	8008eec <vTaskStartScheduler+0x8c>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <vTaskStartScheduler+0xc0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	334c      	adds	r3, #76	; 0x4c
 8008ece:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <vTaskStartScheduler+0xc4>)
 8008ed0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <vTaskStartScheduler+0xc8>)
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eda:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <vTaskStartScheduler+0xcc>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ee0:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <vTaskStartScheduler+0xd0>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ee6:	f000 fe7b 	bl	8009be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eea:	e00e      	b.n	8008f0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d10a      	bne.n	8008f0a <vTaskStartScheduler+0xaa>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <vTaskStartScheduler+0xa8>
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	0800a69c 	.word	0x0800a69c
 8008f18:	080094f1 	.word	0x080094f1
 8008f1c:	20001b54 	.word	0x20001b54
 8008f20:	20001a30 	.word	0x20001a30
 8008f24:	200000f4 	.word	0x200000f4
 8008f28:	20001b50 	.word	0x20001b50
 8008f2c:	20001b3c 	.word	0x20001b3c
 8008f30:	20001b34 	.word	0x20001b34

08008f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <vTaskSuspendAll+0x18>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a03      	ldr	r2, [pc, #12]	; (8008f4c <vTaskSuspendAll+0x18>)
 8008f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f42:	bf00      	nop
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20001b58 	.word	0x20001b58

08008f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f5e:	4b41      	ldr	r3, [pc, #260]	; (8009064 <xTaskResumeAll+0x114>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	603b      	str	r3, [r7, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f7c:	f000 fed2 	bl	8009d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f80:	4b38      	ldr	r3, [pc, #224]	; (8009064 <xTaskResumeAll+0x114>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	4a37      	ldr	r2, [pc, #220]	; (8009064 <xTaskResumeAll+0x114>)
 8008f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f8a:	4b36      	ldr	r3, [pc, #216]	; (8009064 <xTaskResumeAll+0x114>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d161      	bne.n	8009056 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f92:	4b35      	ldr	r3, [pc, #212]	; (8009068 <xTaskResumeAll+0x118>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d05d      	beq.n	8009056 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f9a:	e02e      	b.n	8008ffa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9c:	4b33      	ldr	r3, [pc, #204]	; (800906c <xTaskResumeAll+0x11c>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3318      	adds	r3, #24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe ffe0 	bl	8007f6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe ffdb 	bl	8007f6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	409a      	lsls	r2, r3
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <xTaskResumeAll+0x120>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <xTaskResumeAll+0x120>)
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4a27      	ldr	r2, [pc, #156]	; (8009074 <xTaskResumeAll+0x124>)
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f7fe ff67 	bl	8007eb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	4b23      	ldr	r3, [pc, #140]	; (8009078 <xTaskResumeAll+0x128>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008ff4:	4b21      	ldr	r3, [pc, #132]	; (800907c <xTaskResumeAll+0x12c>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ffa:	4b1c      	ldr	r3, [pc, #112]	; (800906c <xTaskResumeAll+0x11c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1cc      	bne.n	8008f9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009008:	f000 fb1c 	bl	8009644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800900c:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <xTaskResumeAll+0x130>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009018:	f000 f836 	bl	8009088 <xTaskIncrementTick>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009022:	4b16      	ldr	r3, [pc, #88]	; (800907c <xTaskResumeAll+0x12c>)
 8009024:	2201      	movs	r2, #1
 8009026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3b01      	subs	r3, #1
 800902c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f1      	bne.n	8009018 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009034:	4b12      	ldr	r3, [pc, #72]	; (8009080 <xTaskResumeAll+0x130>)
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <xTaskResumeAll+0x12c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009042:	2301      	movs	r3, #1
 8009044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <xTaskResumeAll+0x134>)
 8009048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009056:	f000 fe95 	bl	8009d84 <vPortExitCritical>

	return xAlreadyYielded;
 800905a:	68bb      	ldr	r3, [r7, #8]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20001b58 	.word	0x20001b58
 8009068:	20001b30 	.word	0x20001b30
 800906c:	20001af0 	.word	0x20001af0
 8009070:	20001b38 	.word	0x20001b38
 8009074:	20001a34 	.word	0x20001a34
 8009078:	20001a30 	.word	0x20001a30
 800907c:	20001b44 	.word	0x20001b44
 8009080:	20001b40 	.word	0x20001b40
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009092:	4b4e      	ldr	r3, [pc, #312]	; (80091cc <xTaskIncrementTick+0x144>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 808e 	bne.w	80091b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800909c:	4b4c      	ldr	r3, [pc, #304]	; (80091d0 <xTaskIncrementTick+0x148>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090a4:	4a4a      	ldr	r2, [pc, #296]	; (80091d0 <xTaskIncrementTick+0x148>)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d120      	bne.n	80090f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090b0:	4b48      	ldr	r3, [pc, #288]	; (80091d4 <xTaskIncrementTick+0x14c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	603b      	str	r3, [r7, #0]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xTaskIncrementTick+0x46>
 80090d0:	4b40      	ldr	r3, [pc, #256]	; (80091d4 <xTaskIncrementTick+0x14c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	4b40      	ldr	r3, [pc, #256]	; (80091d8 <xTaskIncrementTick+0x150>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a3e      	ldr	r2, [pc, #248]	; (80091d4 <xTaskIncrementTick+0x14c>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4a3e      	ldr	r2, [pc, #248]	; (80091d8 <xTaskIncrementTick+0x150>)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	4b3d      	ldr	r3, [pc, #244]	; (80091dc <xTaskIncrementTick+0x154>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a3c      	ldr	r2, [pc, #240]	; (80091dc <xTaskIncrementTick+0x154>)
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	f000 faa9 	bl	8009644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090f2:	4b3b      	ldr	r3, [pc, #236]	; (80091e0 <xTaskIncrementTick+0x158>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d348      	bcc.n	800918e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fc:	4b35      	ldr	r3, [pc, #212]	; (80091d4 <xTaskIncrementTick+0x14c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d104      	bne.n	8009110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009106:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <xTaskIncrementTick+0x158>)
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	601a      	str	r2, [r3, #0]
					break;
 800910e:	e03e      	b.n	800918e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009110:	4b30      	ldr	r3, [pc, #192]	; (80091d4 <xTaskIncrementTick+0x14c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	429a      	cmp	r2, r3
 8009126:	d203      	bcs.n	8009130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009128:	4a2d      	ldr	r2, [pc, #180]	; (80091e0 <xTaskIncrementTick+0x158>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800912e:	e02e      	b.n	800918e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	3304      	adds	r3, #4
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe ff1a 	bl	8007f6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d004      	beq.n	800914c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3318      	adds	r3, #24
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe ff11 	bl	8007f6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	2201      	movs	r2, #1
 8009152:	409a      	lsls	r2, r3
 8009154:	4b23      	ldr	r3, [pc, #140]	; (80091e4 <xTaskIncrementTick+0x15c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4313      	orrs	r3, r2
 800915a:	4a22      	ldr	r2, [pc, #136]	; (80091e4 <xTaskIncrementTick+0x15c>)
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <xTaskIncrementTick+0x160>)
 800916c:	441a      	add	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3304      	adds	r3, #4
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7fe fe9d 	bl	8007eb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <xTaskIncrementTick+0x164>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d3b9      	bcc.n	80090fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800918c:	e7b6      	b.n	80090fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800918e:	4b17      	ldr	r3, [pc, #92]	; (80091ec <xTaskIncrementTick+0x164>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009194:	4914      	ldr	r1, [pc, #80]	; (80091e8 <xTaskIncrementTick+0x160>)
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d901      	bls.n	80091aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091aa:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <xTaskIncrementTick+0x168>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d007      	beq.n	80091c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	e004      	b.n	80091c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091b8:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <xTaskIncrementTick+0x16c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a0d      	ldr	r2, [pc, #52]	; (80091f4 <xTaskIncrementTick+0x16c>)
 80091c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20001b58 	.word	0x20001b58
 80091d0:	20001b34 	.word	0x20001b34
 80091d4:	20001ae8 	.word	0x20001ae8
 80091d8:	20001aec 	.word	0x20001aec
 80091dc:	20001b48 	.word	0x20001b48
 80091e0:	20001b50 	.word	0x20001b50
 80091e4:	20001b38 	.word	0x20001b38
 80091e8:	20001a34 	.word	0x20001a34
 80091ec:	20001a30 	.word	0x20001a30
 80091f0:	20001b44 	.word	0x20001b44
 80091f4:	20001b40 	.word	0x20001b40

080091f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091fe:	4b31      	ldr	r3, [pc, #196]	; (80092c4 <vTaskSwitchContext+0xcc>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009206:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <vTaskSwitchContext+0xd0>)
 8009208:	2201      	movs	r2, #1
 800920a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800920c:	e055      	b.n	80092ba <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800920e:	4b2e      	ldr	r3, [pc, #184]	; (80092c8 <vTaskSwitchContext+0xd0>)
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009214:	4b2d      	ldr	r3, [pc, #180]	; (80092cc <vTaskSwitchContext+0xd4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <vTaskSwitchContext+0xd4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	429a      	cmp	r2, r3
 8009222:	d808      	bhi.n	8009236 <vTaskSwitchContext+0x3e>
 8009224:	4b29      	ldr	r3, [pc, #164]	; (80092cc <vTaskSwitchContext+0xd4>)
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	4b28      	ldr	r3, [pc, #160]	; (80092cc <vTaskSwitchContext+0xd4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3334      	adds	r3, #52	; 0x34
 800922e:	4619      	mov	r1, r3
 8009230:	4610      	mov	r0, r2
 8009232:	f7f7 fb64 	bl	80008fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009236:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <vTaskSwitchContext+0xd8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	fab3 f383 	clz	r3, r3
 8009242:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	f1c3 031f 	rsb	r3, r3, #31
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	4921      	ldr	r1, [pc, #132]	; (80092d4 <vTaskSwitchContext+0xdc>)
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <vTaskSwitchContext+0x7e>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	607b      	str	r3, [r7, #4]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <vTaskSwitchContext+0x7c>
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4a14      	ldr	r2, [pc, #80]	; (80092d4 <vTaskSwitchContext+0xdc>)
 8009282:	4413      	add	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3308      	adds	r3, #8
 8009298:	429a      	cmp	r2, r3
 800929a:	d104      	bne.n	80092a6 <vTaskSwitchContext+0xae>
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a07      	ldr	r2, [pc, #28]	; (80092cc <vTaskSwitchContext+0xd4>)
 80092ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092b0:	4b06      	ldr	r3, [pc, #24]	; (80092cc <vTaskSwitchContext+0xd4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	334c      	adds	r3, #76	; 0x4c
 80092b6:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <vTaskSwitchContext+0xe0>)
 80092b8:	6013      	str	r3, [r2, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20001b58 	.word	0x20001b58
 80092c8:	20001b44 	.word	0x20001b44
 80092cc:	20001a30 	.word	0x20001a30
 80092d0:	20001b38 	.word	0x20001b38
 80092d4:	20001a34 	.word	0x20001a34
 80092d8:	200000f4 	.word	0x200000f4

080092dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	60fb      	str	r3, [r7, #12]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009302:	4b07      	ldr	r3, [pc, #28]	; (8009320 <vTaskPlaceOnEventList+0x44>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3318      	adds	r3, #24
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7fe fdf6 	bl	8007efc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009310:	2101      	movs	r1, #1
 8009312:	6838      	ldr	r0, [r7, #0]
 8009314:	f000 fb72 	bl	80099fc <prvAddCurrentTaskToDelayedList>
}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20001a30 	.word	0x20001a30

08009324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60fb      	str	r3, [r7, #12]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	3318      	adds	r3, #24
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fe0a 	bl	8007f6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800935a:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <xTaskRemoveFromEventList+0xac>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d11c      	bne.n	800939c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3304      	adds	r3, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fe01 	bl	8007f6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	2201      	movs	r2, #1
 8009372:	409a      	lsls	r2, r3
 8009374:	4b17      	ldr	r3, [pc, #92]	; (80093d4 <xTaskRemoveFromEventList+0xb0>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4313      	orrs	r3, r2
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <xTaskRemoveFromEventList+0xb0>)
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <xTaskRemoveFromEventList+0xb4>)
 800938c:	441a      	add	r2, r3
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3304      	adds	r3, #4
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fe fd8d 	bl	8007eb4 <vListInsertEnd>
 800939a:	e005      	b.n	80093a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3318      	adds	r3, #24
 80093a0:	4619      	mov	r1, r3
 80093a2:	480e      	ldr	r0, [pc, #56]	; (80093dc <xTaskRemoveFromEventList+0xb8>)
 80093a4:	f7fe fd86 	bl	8007eb4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <xTaskRemoveFromEventList+0xbc>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d905      	bls.n	80093c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093b6:	2301      	movs	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093ba:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <xTaskRemoveFromEventList+0xc0>)
 80093bc:	2201      	movs	r2, #1
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	e001      	b.n	80093c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093c6:	697b      	ldr	r3, [r7, #20]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001b58 	.word	0x20001b58
 80093d4:	20001b38 	.word	0x20001b38
 80093d8:	20001a34 	.word	0x20001a34
 80093dc:	20001af0 	.word	0x20001af0
 80093e0:	20001a30 	.word	0x20001a30
 80093e4:	20001b44 	.word	0x20001b44

080093e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <vTaskInternalSetTimeOutState+0x24>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <vTaskInternalSetTimeOutState+0x28>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	605a      	str	r2, [r3, #4]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20001b48 	.word	0x20001b48
 8009410:	20001b34 	.word	0x20001b34

08009414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	613b      	str	r3, [r7, #16]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009456:	f000 fc65 	bl	8009d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800945a:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <xTaskCheckForTimeOut+0xbc>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d102      	bne.n	800947a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	e023      	b.n	80094c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <xTaskCheckForTimeOut+0xc0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d007      	beq.n	8009496 <xTaskCheckForTimeOut+0x82>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	429a      	cmp	r2, r3
 800948e:	d302      	bcc.n	8009496 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009490:	2301      	movs	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e015      	b.n	80094c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	429a      	cmp	r2, r3
 800949e:	d20b      	bcs.n	80094b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff9b 	bl	80093e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	e004      	b.n	80094c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094c2:	f000 fc5f 	bl	8009d84 <vPortExitCritical>

	return xReturn;
 80094c6:	69fb      	ldr	r3, [r7, #28]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3720      	adds	r7, #32
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20001b34 	.word	0x20001b34
 80094d4:	20001b48 	.word	0x20001b48

080094d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094dc:	4b03      	ldr	r3, [pc, #12]	; (80094ec <vTaskMissedYield+0x14>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
}
 80094e2:	bf00      	nop
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20001b44 	.word	0x20001b44

080094f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094f8:	f000 f842 	bl	8009580 <prvCheckTasksWaitingTermination>
 80094fc:	e7fc      	b.n	80094f8 <prvIdleTask+0x8>
	...

08009500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	e00c      	b.n	8009526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4a12      	ldr	r2, [pc, #72]	; (8009560 <prvInitialiseTaskLists+0x60>)
 8009518:	4413      	add	r3, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fc9d 	bl	8007e5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3301      	adds	r3, #1
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b06      	cmp	r3, #6
 800952a:	d9ef      	bls.n	800950c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800952c:	480d      	ldr	r0, [pc, #52]	; (8009564 <prvInitialiseTaskLists+0x64>)
 800952e:	f7fe fc94 	bl	8007e5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009532:	480d      	ldr	r0, [pc, #52]	; (8009568 <prvInitialiseTaskLists+0x68>)
 8009534:	f7fe fc91 	bl	8007e5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009538:	480c      	ldr	r0, [pc, #48]	; (800956c <prvInitialiseTaskLists+0x6c>)
 800953a:	f7fe fc8e 	bl	8007e5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800953e:	480c      	ldr	r0, [pc, #48]	; (8009570 <prvInitialiseTaskLists+0x70>)
 8009540:	f7fe fc8b 	bl	8007e5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009544:	480b      	ldr	r0, [pc, #44]	; (8009574 <prvInitialiseTaskLists+0x74>)
 8009546:	f7fe fc88 	bl	8007e5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <prvInitialiseTaskLists+0x78>)
 800954c:	4a05      	ldr	r2, [pc, #20]	; (8009564 <prvInitialiseTaskLists+0x64>)
 800954e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <prvInitialiseTaskLists+0x7c>)
 8009552:	4a05      	ldr	r2, [pc, #20]	; (8009568 <prvInitialiseTaskLists+0x68>)
 8009554:	601a      	str	r2, [r3, #0]
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001a34 	.word	0x20001a34
 8009564:	20001ac0 	.word	0x20001ac0
 8009568:	20001ad4 	.word	0x20001ad4
 800956c:	20001af0 	.word	0x20001af0
 8009570:	20001b04 	.word	0x20001b04
 8009574:	20001b1c 	.word	0x20001b1c
 8009578:	20001ae8 	.word	0x20001ae8
 800957c:	20001aec 	.word	0x20001aec

08009580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009586:	e019      	b.n	80095bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009588:	f000 fbcc 	bl	8009d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958c:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <prvCheckTasksWaitingTermination+0x50>)
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fce8 	bl	8007f6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800959e:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <prvCheckTasksWaitingTermination+0x54>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	4a0b      	ldr	r2, [pc, #44]	; (80095d4 <prvCheckTasksWaitingTermination+0x54>)
 80095a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095a8:	4b0b      	ldr	r3, [pc, #44]	; (80095d8 <prvCheckTasksWaitingTermination+0x58>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a0a      	ldr	r2, [pc, #40]	; (80095d8 <prvCheckTasksWaitingTermination+0x58>)
 80095b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095b2:	f000 fbe7 	bl	8009d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f810 	bl	80095dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <prvCheckTasksWaitingTermination+0x58>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e1      	bne.n	8009588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20001b04 	.word	0x20001b04
 80095d4:	20001b30 	.word	0x20001b30
 80095d8:	20001b18 	.word	0x20001b18

080095dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	334c      	adds	r3, #76	; 0x4c
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fe6f 	bl	800a2cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d108      	bne.n	800960a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 fd3f 	bl	800a080 <vPortFree>
				vPortFree( pxTCB );
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd3c 	bl	800a080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009608:	e018      	b.n	800963c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009610:	2b01      	cmp	r3, #1
 8009612:	d103      	bne.n	800961c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fd33 	bl	800a080 <vPortFree>
	}
 800961a:	e00f      	b.n	800963c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009622:	2b02      	cmp	r3, #2
 8009624:	d00a      	beq.n	800963c <prvDeleteTCB+0x60>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60fb      	str	r3, [r7, #12]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <prvDeleteTCB+0x5e>
	}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <prvResetNextTaskUnblockTime+0x38>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d104      	bne.n	800965e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvResetNextTaskUnblockTime+0x3c>)
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800965c:	e008      	b.n	8009670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <prvResetNextTaskUnblockTime+0x38>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4a04      	ldr	r2, [pc, #16]	; (8009680 <prvResetNextTaskUnblockTime+0x3c>)
 800966e:	6013      	str	r3, [r2, #0]
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20001ae8 	.word	0x20001ae8
 8009680:	20001b50 	.word	0x20001b50

08009684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800968a:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <xTaskGetSchedulerState+0x34>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009692:	2301      	movs	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	e008      	b.n	80096aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <xTaskGetSchedulerState+0x38>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096a0:	2302      	movs	r3, #2
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e001      	b.n	80096aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096aa:	687b      	ldr	r3, [r7, #4]
	}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20001b3c 	.word	0x20001b3c
 80096bc:	20001b58 	.word	0x20001b58

080096c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d05e      	beq.n	8009794 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	4b31      	ldr	r3, [pc, #196]	; (80097a0 <xTaskPriorityInherit+0xe0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d24e      	bcs.n	8009782 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	db06      	blt.n	80096fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ec:	4b2c      	ldr	r3, [pc, #176]	; (80097a0 <xTaskPriorityInherit+0xe0>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	f1c3 0207 	rsb	r2, r3, #7
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6959      	ldr	r1, [r3, #20]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4a26      	ldr	r2, [pc, #152]	; (80097a4 <xTaskPriorityInherit+0xe4>)
 800970c:	4413      	add	r3, r2
 800970e:	4299      	cmp	r1, r3
 8009710:	d12f      	bne.n	8009772 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fc29 	bl	8007f6e <uxListRemove>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009726:	2201      	movs	r2, #1
 8009728:	fa02 f303 	lsl.w	r3, r2, r3
 800972c:	43da      	mvns	r2, r3
 800972e:	4b1e      	ldr	r3, [pc, #120]	; (80097a8 <xTaskPriorityInherit+0xe8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4013      	ands	r3, r2
 8009734:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <xTaskPriorityInherit+0xe8>)
 8009736:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009738:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <xTaskPriorityInherit+0xe0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	2201      	movs	r2, #1
 8009748:	409a      	lsls	r2, r3
 800974a:	4b17      	ldr	r3, [pc, #92]	; (80097a8 <xTaskPriorityInherit+0xe8>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4313      	orrs	r3, r2
 8009750:	4a15      	ldr	r2, [pc, #84]	; (80097a8 <xTaskPriorityInherit+0xe8>)
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4a10      	ldr	r2, [pc, #64]	; (80097a4 <xTaskPriorityInherit+0xe4>)
 8009762:	441a      	add	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3304      	adds	r3, #4
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7fe fba2 	bl	8007eb4 <vListInsertEnd>
 8009770:	e004      	b.n	800977c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <xTaskPriorityInherit+0xe0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e008      	b.n	8009794 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009786:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <xTaskPriorityInherit+0xe0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	429a      	cmp	r2, r3
 800978e:	d201      	bcs.n	8009794 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009794:	68fb      	ldr	r3, [r7, #12]
	}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20001a30 	.word	0x20001a30
 80097a4:	20001a34 	.word	0x20001a34
 80097a8:	20001b38 	.word	0x20001b38

080097ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d06e      	beq.n	80098a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097c2:	4b3a      	ldr	r3, [pc, #232]	; (80098ac <xTaskPriorityDisinherit+0x100>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d00a      	beq.n	80097e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	60bb      	str	r3, [r7, #8]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009804:	1e5a      	subs	r2, r3, #1
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	429a      	cmp	r2, r3
 8009814:	d044      	beq.n	80098a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981a:	2b00      	cmp	r3, #0
 800981c:	d140      	bne.n	80098a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	3304      	adds	r3, #4
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fba3 	bl	8007f6e <uxListRemove>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d115      	bne.n	800985a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009832:	491f      	ldr	r1, [pc, #124]	; (80098b0 <xTaskPriorityDisinherit+0x104>)
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	440b      	add	r3, r1
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <xTaskPriorityDisinherit+0xae>
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	2201      	movs	r2, #1
 800984a:	fa02 f303 	lsl.w	r3, r2, r3
 800984e:	43da      	mvns	r2, r3
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <xTaskPriorityDisinherit+0x108>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4013      	ands	r3, r2
 8009856:	4a17      	ldr	r2, [pc, #92]	; (80098b4 <xTaskPriorityDisinherit+0x108>)
 8009858:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	f1c3 0207 	rsb	r2, r3, #7
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	2201      	movs	r2, #1
 8009874:	409a      	lsls	r2, r3
 8009876:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <xTaskPriorityDisinherit+0x108>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4313      	orrs	r3, r2
 800987c:	4a0d      	ldr	r2, [pc, #52]	; (80098b4 <xTaskPriorityDisinherit+0x108>)
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <xTaskPriorityDisinherit+0x104>)
 800988e:	441a      	add	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe fb0c 	bl	8007eb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800989c:	2301      	movs	r3, #1
 800989e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098a0:	697b      	ldr	r3, [r7, #20]
	}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20001a30 	.word	0x20001a30
 80098b0:	20001a34 	.word	0x20001a34
 80098b4:	20001b38 	.word	0x20001b38

080098b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098c6:	2301      	movs	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d077      	beq.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	60fb      	str	r3, [r7, #12]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d902      	bls.n	80098fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	e002      	b.n	8009904 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009902:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	429a      	cmp	r2, r3
 800990c:	d058      	beq.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	429a      	cmp	r2, r3
 8009916:	d153      	bne.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009918:	4b2b      	ldr	r3, [pc, #172]	; (80099c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	429a      	cmp	r2, r3
 8009920:	d10a      	bne.n	8009938 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	db04      	blt.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f1c3 0207 	rsb	r2, r3, #7
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	6959      	ldr	r1, [r3, #20]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4a19      	ldr	r2, [pc, #100]	; (80099cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009966:	4413      	add	r3, r2
 8009968:	4299      	cmp	r1, r3
 800996a:	d129      	bne.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	3304      	adds	r3, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fafc 	bl	8007f6e <uxListRemove>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	2201      	movs	r2, #1
 8009982:	fa02 f303 	lsl.w	r3, r2, r3
 8009986:	43da      	mvns	r2, r3
 8009988:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4013      	ands	r3, r2
 800998e:	4a10      	ldr	r2, [pc, #64]	; (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009990:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	2201      	movs	r2, #1
 8009998:	409a      	lsls	r2, r3
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	4a0b      	ldr	r2, [pc, #44]	; (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a06      	ldr	r2, [pc, #24]	; (80099cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80099b2:	441a      	add	r2, r3
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fa7a 	bl	8007eb4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099c0:	bf00      	nop
 80099c2:	3720      	adds	r7, #32
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20001a30 	.word	0x20001a30
 80099cc:	20001a34 	.word	0x20001a34
 80099d0:	20001b38 	.word	0x20001b38

080099d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099d8:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099e6:	3201      	adds	r2, #1
 80099e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ec:	681b      	ldr	r3, [r3, #0]
	}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	20001a30 	.word	0x20001a30

080099fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a06:	4b29      	ldr	r3, [pc, #164]	; (8009aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a0c:	4b28      	ldr	r3, [pc, #160]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe faab 	bl	8007f6e <uxListRemove>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10b      	bne.n	8009a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a1e:	4b24      	ldr	r3, [pc, #144]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	2201      	movs	r2, #1
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43da      	mvns	r2, r3
 8009a2c:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4013      	ands	r3, r2
 8009a32:	4a20      	ldr	r2, [pc, #128]	; (8009ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d10a      	bne.n	8009a54 <prvAddCurrentTaskToDelayedList+0x58>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d007      	beq.n	8009a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a44:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	481a      	ldr	r0, [pc, #104]	; (8009ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a4e:	f7fe fa31 	bl	8007eb4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a52:	e026      	b.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a5c:	4b14      	ldr	r3, [pc, #80]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d209      	bcs.n	8009a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a6c:	4b13      	ldr	r3, [pc, #76]	; (8009abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7fe fa3f 	bl	8007efc <vListInsert>
}
 8009a7e:	e010      	b.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a80:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7fe fa35 	bl	8007efc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a92:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d202      	bcs.n	8009aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a9c:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6013      	str	r3, [r2, #0]
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20001b34 	.word	0x20001b34
 8009ab0:	20001a30 	.word	0x20001a30
 8009ab4:	20001b38 	.word	0x20001b38
 8009ab8:	20001b1c 	.word	0x20001b1c
 8009abc:	20001aec 	.word	0x20001aec
 8009ac0:	20001ae8 	.word	0x20001ae8
 8009ac4:	20001b50 	.word	0x20001b50

08009ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3b04      	subs	r3, #4
 8009ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3b04      	subs	r3, #4
 8009af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009af8:	4a0c      	ldr	r2, [pc, #48]	; (8009b2c <pxPortInitialiseStack+0x64>)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3b14      	subs	r3, #20
 8009b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f06f 0202 	mvn.w	r2, #2
 8009b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3b20      	subs	r3, #32
 8009b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	08009b31 	.word	0x08009b31

08009b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b3a:	4b12      	ldr	r3, [pc, #72]	; (8009b84 <prvTaskExitError+0x54>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d00a      	beq.n	8009b5a <prvTaskExitError+0x2a>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <prvTaskExitError+0x28>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	60bb      	str	r3, [r7, #8]
}
 8009b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b6e:	bf00      	nop
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0fc      	beq.n	8009b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	200000a4 	.word	0x200000a4
	...

08009b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b90:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <pxCurrentTCBConst2>)
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	f380 8809 	msr	PSP, r0
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f380 8811 	msr	BASEPRI, r0
 8009baa:	4770      	bx	lr
 8009bac:	f3af 8000 	nop.w

08009bb0 <pxCurrentTCBConst2>:
 8009bb0:	20001a30 	.word	0x20001a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop

08009bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bb8:	4808      	ldr	r0, [pc, #32]	; (8009bdc <prvPortStartFirstTask+0x24>)
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	f380 8808 	msr	MSP, r0
 8009bc2:	f04f 0000 	mov.w	r0, #0
 8009bc6:	f380 8814 	msr	CONTROL, r0
 8009bca:	b662      	cpsie	i
 8009bcc:	b661      	cpsie	f
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	df00      	svc	0
 8009bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bda:	bf00      	nop
 8009bdc:	e000ed08 	.word	0xe000ed08

08009be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009be6:	4b46      	ldr	r3, [pc, #280]	; (8009d00 <xPortStartScheduler+0x120>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a46      	ldr	r2, [pc, #280]	; (8009d04 <xPortStartScheduler+0x124>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d10a      	bne.n	8009c06 <xPortStartScheduler+0x26>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c06:	4b3e      	ldr	r3, [pc, #248]	; (8009d00 <xPortStartScheduler+0x120>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a3f      	ldr	r2, [pc, #252]	; (8009d08 <xPortStartScheduler+0x128>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d10a      	bne.n	8009c26 <xPortStartScheduler+0x46>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c26:	4b39      	ldr	r3, [pc, #228]	; (8009d0c <xPortStartScheduler+0x12c>)
 8009c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	22ff      	movs	r2, #255	; 0xff
 8009c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	4b31      	ldr	r3, [pc, #196]	; (8009d10 <xPortStartScheduler+0x130>)
 8009c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c4e:	4b31      	ldr	r3, [pc, #196]	; (8009d14 <xPortStartScheduler+0x134>)
 8009c50:	2207      	movs	r2, #7
 8009c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c54:	e009      	b.n	8009c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c56:	4b2f      	ldr	r3, [pc, #188]	; (8009d14 <xPortStartScheduler+0x134>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	4a2d      	ldr	r2, [pc, #180]	; (8009d14 <xPortStartScheduler+0x134>)
 8009c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b80      	cmp	r3, #128	; 0x80
 8009c74:	d0ef      	beq.n	8009c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <xPortStartScheduler+0x134>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f1c3 0307 	rsb	r3, r3, #7
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d00a      	beq.n	8009c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60bb      	str	r3, [r7, #8]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c98:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <xPortStartScheduler+0x134>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <xPortStartScheduler+0x134>)
 8009ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <xPortStartScheduler+0x134>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009caa:	4a1a      	ldr	r2, [pc, #104]	; (8009d14 <xPortStartScheduler+0x134>)
 8009cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cb6:	4b18      	ldr	r3, [pc, #96]	; (8009d18 <xPortStartScheduler+0x138>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a17      	ldr	r2, [pc, #92]	; (8009d18 <xPortStartScheduler+0x138>)
 8009cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cc2:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <xPortStartScheduler+0x138>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <xPortStartScheduler+0x138>)
 8009cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cce:	f000 f8dd 	bl	8009e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <xPortStartScheduler+0x13c>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cd8:	f000 f8fc 	bl	8009ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <xPortStartScheduler+0x140>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a0f      	ldr	r2, [pc, #60]	; (8009d20 <xPortStartScheduler+0x140>)
 8009ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ce8:	f7ff ff66 	bl	8009bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cec:	f7ff fa84 	bl	80091f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009cf0:	f7ff ff1e 	bl	8009b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	e000ed00 	.word	0xe000ed00
 8009d04:	410fc271 	.word	0x410fc271
 8009d08:	410fc270 	.word	0x410fc270
 8009d0c:	e000e400 	.word	0xe000e400
 8009d10:	20001b5c 	.word	0x20001b5c
 8009d14:	20001b60 	.word	0x20001b60
 8009d18:	e000ed20 	.word	0xe000ed20
 8009d1c:	200000a4 	.word	0x200000a4
 8009d20:	e000ef34 	.word	0xe000ef34

08009d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	607b      	str	r3, [r7, #4]
}
 8009d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <vPortEnterCritical+0x58>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	4a0d      	ldr	r2, [pc, #52]	; (8009d7c <vPortEnterCritical+0x58>)
 8009d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d48:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <vPortEnterCritical+0x58>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d10f      	bne.n	8009d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <vPortEnterCritical+0x5c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	603b      	str	r3, [r7, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <vPortEnterCritical+0x4a>
	}
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	200000a4 	.word	0x200000a4
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d8a:	4b12      	ldr	r3, [pc, #72]	; (8009dd4 <vPortExitCritical+0x50>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10a      	bne.n	8009da8 <vPortExitCritical+0x24>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	607b      	str	r3, [r7, #4]
}
 8009da4:	bf00      	nop
 8009da6:	e7fe      	b.n	8009da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <vPortExitCritical+0x50>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <vPortExitCritical+0x50>)
 8009db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <vPortExitCritical+0x50>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <vPortExitCritical+0x42>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	200000a4 	.word	0x200000a4
	...

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f01e 0f10 	tst.w	lr, #16
 8009df0:	bf08      	it	eq
 8009df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e04:	f380 8811 	msr	BASEPRI, r0
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f7ff f9f2 	bl	80091f8 <vTaskSwitchContext>
 8009e14:	f04f 0000 	mov.w	r0, #0
 8009e18:	f380 8811 	msr	BASEPRI, r0
 8009e1c:	bc09      	pop	{r0, r3}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e26:	f01e 0f10 	tst.w	lr, #16
 8009e2a:	bf08      	it	eq
 8009e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e30:	f380 8809 	msr	PSP, r0
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst>:
 8009e40:	20001a30 	.word	0x20001a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	607b      	str	r3, [r7, #4]
}
 8009e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e62:	f7ff f911 	bl	8009088 <xTaskIncrementTick>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6c:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <SysTick_Handler+0x40>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	2300      	movs	r3, #0
 8009e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	f383 8811 	msr	BASEPRI, r3
}
 8009e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <vPortSetupTimerInterrupt+0x34>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <vPortSetupTimerInterrupt+0x38>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <vPortSetupTimerInterrupt+0x3c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <vPortSetupTimerInterrupt+0x40>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	099b      	lsrs	r3, r3, #6
 8009ea8:	4a09      	ldr	r2, [pc, #36]	; (8009ed0 <vPortSetupTimerInterrupt+0x44>)
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eae:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <vPortSetupTimerInterrupt+0x34>)
 8009eb0:	2207      	movs	r2, #7
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	e000e010 	.word	0xe000e010
 8009ec4:	e000e018 	.word	0xe000e018
 8009ec8:	20000004 	.word	0x20000004
 8009ecc:	10624dd3 	.word	0x10624dd3
 8009ed0:	e000e014 	.word	0xe000e014

08009ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ee4 <vPortEnableVFP+0x10>
 8009ed8:	6801      	ldr	r1, [r0, #0]
 8009eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ede:	6001      	str	r1, [r0, #0]
 8009ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ee2:	bf00      	nop
 8009ee4:	e000ed88 	.word	0xe000ed88

08009ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	; 0x28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef4:	f7ff f81e 	bl	8008f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef8:	4b5b      	ldr	r3, [pc, #364]	; (800a068 <pvPortMalloc+0x180>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f00:	f000 f920 	bl	800a144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f04:	4b59      	ldr	r3, [pc, #356]	; (800a06c <pvPortMalloc+0x184>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f040 8093 	bne.w	800a038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01d      	beq.n	8009f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f18:	2208      	movs	r2, #8
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d014      	beq.n	8009f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f023 0307 	bic.w	r3, r3, #7
 8009f30:	3308      	adds	r3, #8
 8009f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <pvPortMalloc+0x6c>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	617b      	str	r3, [r7, #20]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d06e      	beq.n	800a038 <pvPortMalloc+0x150>
 8009f5a:	4b45      	ldr	r3, [pc, #276]	; (800a070 <pvPortMalloc+0x188>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d869      	bhi.n	800a038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f64:	4b43      	ldr	r3, [pc, #268]	; (800a074 <pvPortMalloc+0x18c>)
 8009f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f68:	4b42      	ldr	r3, [pc, #264]	; (800a074 <pvPortMalloc+0x18c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f6e:	e004      	b.n	8009f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d903      	bls.n	8009f8c <pvPortMalloc+0xa4>
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1f1      	bne.n	8009f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f8c:	4b36      	ldr	r3, [pc, #216]	; (800a068 <pvPortMalloc+0x180>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d050      	beq.n	800a038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	4413      	add	r3, r2
 8009f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d91f      	bls.n	8009ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	613b      	str	r3, [r7, #16]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	1ad2      	subs	r2, r2, r3
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ff2:	69b8      	ldr	r0, [r7, #24]
 8009ff4:	f000 f908 	bl	800a208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ff8:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <pvPortMalloc+0x188>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	4a1b      	ldr	r2, [pc, #108]	; (800a070 <pvPortMalloc+0x188>)
 800a004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a006:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <pvPortMalloc+0x188>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <pvPortMalloc+0x190>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d203      	bcs.n	800a01a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a012:	4b17      	ldr	r3, [pc, #92]	; (800a070 <pvPortMalloc+0x188>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <pvPortMalloc+0x190>)
 800a018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <pvPortMalloc+0x184>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	431a      	orrs	r2, r3
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a02e:	4b13      	ldr	r3, [pc, #76]	; (800a07c <pvPortMalloc+0x194>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	4a11      	ldr	r2, [pc, #68]	; (800a07c <pvPortMalloc+0x194>)
 800a036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a038:	f7fe ff8a 	bl	8008f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00a      	beq.n	800a05c <pvPortMalloc+0x174>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60fb      	str	r3, [r7, #12]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <pvPortMalloc+0x172>
	return pvReturn;
 800a05c:	69fb      	ldr	r3, [r7, #28]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3728      	adds	r7, #40	; 0x28
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2000986c 	.word	0x2000986c
 800a06c:	20009880 	.word	0x20009880
 800a070:	20009870 	.word	0x20009870
 800a074:	20009864 	.word	0x20009864
 800a078:	20009874 	.word	0x20009874
 800a07c:	20009878 	.word	0x20009878

0800a080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d04d      	beq.n	800a12e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a092:	2308      	movs	r3, #8
 800a094:	425b      	negs	r3, r3
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	4413      	add	r3, r2
 800a09a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	4b24      	ldr	r3, [pc, #144]	; (800a138 <vPortFree+0xb8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <vPortFree+0x44>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <vPortFree+0x62>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	60bb      	str	r3, [r7, #8]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <vPortFree+0xb8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01e      	beq.n	800a12e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11a      	bne.n	800a12e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <vPortFree+0xb8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	43db      	mvns	r3, r3
 800a102:	401a      	ands	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a108:	f7fe ff14 	bl	8008f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <vPortFree+0xbc>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4413      	add	r3, r2
 800a116:	4a09      	ldr	r2, [pc, #36]	; (800a13c <vPortFree+0xbc>)
 800a118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a11a:	6938      	ldr	r0, [r7, #16]
 800a11c:	f000 f874 	bl	800a208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <vPortFree+0xc0>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	4a06      	ldr	r2, [pc, #24]	; (800a140 <vPortFree+0xc0>)
 800a128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a12a:	f7fe ff11 	bl	8008f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a12e:	bf00      	nop
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20009880 	.word	0x20009880
 800a13c:	20009870 	.word	0x20009870
 800a140:	2000987c 	.word	0x2000987c

0800a144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a14a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a14e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a150:	4b27      	ldr	r3, [pc, #156]	; (800a1f0 <prvHeapInit+0xac>)
 800a152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00c      	beq.n	800a178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3307      	adds	r3, #7
 800a162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0307 	bic.w	r3, r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	4a1f      	ldr	r2, [pc, #124]	; (800a1f0 <prvHeapInit+0xac>)
 800a174:	4413      	add	r3, r2
 800a176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a17c:	4a1d      	ldr	r2, [pc, #116]	; (800a1f4 <prvHeapInit+0xb0>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a182:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <prvHeapInit+0xb0>)
 800a184:	2200      	movs	r2, #0
 800a186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a190:	2208      	movs	r2, #8
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0307 	bic.w	r3, r3, #7
 800a19e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1a6:	4b14      	ldr	r3, [pc, #80]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4a0a      	ldr	r2, [pc, #40]	; (800a1fc <prvHeapInit+0xb8>)
 800a1d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4a09      	ldr	r2, [pc, #36]	; (800a200 <prvHeapInit+0xbc>)
 800a1da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <prvHeapInit+0xc0>)
 800a1de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1e2:	601a      	str	r2, [r3, #0]
}
 800a1e4:	bf00      	nop
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	20001b64 	.word	0x20001b64
 800a1f4:	20009864 	.word	0x20009864
 800a1f8:	2000986c 	.word	0x2000986c
 800a1fc:	20009874 	.word	0x20009874
 800a200:	20009870 	.word	0x20009870
 800a204:	20009880 	.word	0x20009880

0800a208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <prvInsertBlockIntoFreeList+0xac>)
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e002      	b.n	800a21c <prvInsertBlockIntoFreeList+0x14>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d8f7      	bhi.n	800a216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4413      	add	r3, r2
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	d108      	bne.n	800a24a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d118      	bne.n	800a290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d00d      	beq.n	800a286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	441a      	add	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	e008      	b.n	800a298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a286:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e003      	b.n	800a298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d002      	beq.n	800a2a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2a6:	bf00      	nop
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20009864 	.word	0x20009864
 800a2b8:	2000986c 	.word	0x2000986c

0800a2bc <memset>:
 800a2bc:	4402      	add	r2, r0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d100      	bne.n	800a2c6 <memset+0xa>
 800a2c4:	4770      	bx	lr
 800a2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ca:	e7f9      	b.n	800a2c0 <memset+0x4>

0800a2cc <_reclaim_reent>:
 800a2cc:	4b29      	ldr	r3, [pc, #164]	; (800a374 <_reclaim_reent+0xa8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	b570      	push	{r4, r5, r6, lr}
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	d04b      	beq.n	800a370 <_reclaim_reent+0xa4>
 800a2d8:	69c3      	ldr	r3, [r0, #28]
 800a2da:	b143      	cbz	r3, 800a2ee <_reclaim_reent+0x22>
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d144      	bne.n	800a36c <_reclaim_reent+0xa0>
 800a2e2:	69e3      	ldr	r3, [r4, #28]
 800a2e4:	6819      	ldr	r1, [r3, #0]
 800a2e6:	b111      	cbz	r1, 800a2ee <_reclaim_reent+0x22>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 f879 	bl	800a3e0 <_free_r>
 800a2ee:	6961      	ldr	r1, [r4, #20]
 800a2f0:	b111      	cbz	r1, 800a2f8 <_reclaim_reent+0x2c>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 f874 	bl	800a3e0 <_free_r>
 800a2f8:	69e1      	ldr	r1, [r4, #28]
 800a2fa:	b111      	cbz	r1, 800a302 <_reclaim_reent+0x36>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 f86f 	bl	800a3e0 <_free_r>
 800a302:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a304:	b111      	cbz	r1, 800a30c <_reclaim_reent+0x40>
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f86a 	bl	800a3e0 <_free_r>
 800a30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30e:	b111      	cbz	r1, 800a316 <_reclaim_reent+0x4a>
 800a310:	4620      	mov	r0, r4
 800a312:	f000 f865 	bl	800a3e0 <_free_r>
 800a316:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a318:	b111      	cbz	r1, 800a320 <_reclaim_reent+0x54>
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 f860 	bl	800a3e0 <_free_r>
 800a320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a322:	b111      	cbz	r1, 800a32a <_reclaim_reent+0x5e>
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f85b 	bl	800a3e0 <_free_r>
 800a32a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a32c:	b111      	cbz	r1, 800a334 <_reclaim_reent+0x68>
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 f856 	bl	800a3e0 <_free_r>
 800a334:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a336:	b111      	cbz	r1, 800a33e <_reclaim_reent+0x72>
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 f851 	bl	800a3e0 <_free_r>
 800a33e:	6a23      	ldr	r3, [r4, #32]
 800a340:	b1b3      	cbz	r3, 800a370 <_reclaim_reent+0xa4>
 800a342:	4620      	mov	r0, r4
 800a344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a348:	4718      	bx	r3
 800a34a:	5949      	ldr	r1, [r1, r5]
 800a34c:	b941      	cbnz	r1, 800a360 <_reclaim_reent+0x94>
 800a34e:	3504      	adds	r5, #4
 800a350:	69e3      	ldr	r3, [r4, #28]
 800a352:	2d80      	cmp	r5, #128	; 0x80
 800a354:	68d9      	ldr	r1, [r3, #12]
 800a356:	d1f8      	bne.n	800a34a <_reclaim_reent+0x7e>
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 f841 	bl	800a3e0 <_free_r>
 800a35e:	e7c0      	b.n	800a2e2 <_reclaim_reent+0x16>
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f83c 	bl	800a3e0 <_free_r>
 800a368:	4631      	mov	r1, r6
 800a36a:	e7ef      	b.n	800a34c <_reclaim_reent+0x80>
 800a36c:	2500      	movs	r5, #0
 800a36e:	e7ef      	b.n	800a350 <_reclaim_reent+0x84>
 800a370:	bd70      	pop	{r4, r5, r6, pc}
 800a372:	bf00      	nop
 800a374:	200000f4 	.word	0x200000f4

0800a378 <__libc_init_array>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	4d0d      	ldr	r5, [pc, #52]	; (800a3b0 <__libc_init_array+0x38>)
 800a37c:	4c0d      	ldr	r4, [pc, #52]	; (800a3b4 <__libc_init_array+0x3c>)
 800a37e:	1b64      	subs	r4, r4, r5
 800a380:	10a4      	asrs	r4, r4, #2
 800a382:	2600      	movs	r6, #0
 800a384:	42a6      	cmp	r6, r4
 800a386:	d109      	bne.n	800a39c <__libc_init_array+0x24>
 800a388:	4d0b      	ldr	r5, [pc, #44]	; (800a3b8 <__libc_init_array+0x40>)
 800a38a:	4c0c      	ldr	r4, [pc, #48]	; (800a3bc <__libc_init_array+0x44>)
 800a38c:	f000 f880 	bl	800a490 <_init>
 800a390:	1b64      	subs	r4, r4, r5
 800a392:	10a4      	asrs	r4, r4, #2
 800a394:	2600      	movs	r6, #0
 800a396:	42a6      	cmp	r6, r4
 800a398:	d105      	bne.n	800a3a6 <__libc_init_array+0x2e>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3a0:	4798      	blx	r3
 800a3a2:	3601      	adds	r6, #1
 800a3a4:	e7ee      	b.n	800a384 <__libc_init_array+0xc>
 800a3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3aa:	4798      	blx	r3
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	e7f2      	b.n	800a396 <__libc_init_array+0x1e>
 800a3b0:	0800a6d4 	.word	0x0800a6d4
 800a3b4:	0800a6d4 	.word	0x0800a6d4
 800a3b8:	0800a6d4 	.word	0x0800a6d4
 800a3bc:	0800a6d8 	.word	0x0800a6d8

0800a3c0 <__retarget_lock_acquire_recursive>:
 800a3c0:	4770      	bx	lr

0800a3c2 <__retarget_lock_release_recursive>:
 800a3c2:	4770      	bx	lr

0800a3c4 <memcpy>:
 800a3c4:	440a      	add	r2, r1
 800a3c6:	4291      	cmp	r1, r2
 800a3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3cc:	d100      	bne.n	800a3d0 <memcpy+0xc>
 800a3ce:	4770      	bx	lr
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	d1f9      	bne.n	800a3d2 <memcpy+0xe>
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d044      	beq.n	800a470 <_free_r+0x90>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f000 f83f 	bl	800a478 <__malloc_lock>
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <_free_r+0x94>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	b933      	cbnz	r3, 800a410 <_free_r+0x30>
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40c:	f000 b83a 	b.w	800a484 <__malloc_unlock>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d908      	bls.n	800a426 <_free_r+0x46>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1961      	adds	r1, r4, r5
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	e7ed      	b.n	800a402 <_free_r+0x22>
 800a426:	461a      	mov	r2, r3
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b10b      	cbz	r3, 800a430 <_free_r+0x50>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d9fa      	bls.n	800a426 <_free_r+0x46>
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	1855      	adds	r5, r2, r1
 800a434:	42a5      	cmp	r5, r4
 800a436:	d10b      	bne.n	800a450 <_free_r+0x70>
 800a438:	6824      	ldr	r4, [r4, #0]
 800a43a:	4421      	add	r1, r4
 800a43c:	1854      	adds	r4, r2, r1
 800a43e:	42a3      	cmp	r3, r4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	d1e0      	bne.n	800a406 <_free_r+0x26>
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	440c      	add	r4, r1
 800a44c:	6014      	str	r4, [r2, #0]
 800a44e:	e7da      	b.n	800a406 <_free_r+0x26>
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	e7d6      	b.n	800a406 <_free_r+0x26>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf04      	itt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	bf04      	itt	eq
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	e7ca      	b.n	800a406 <_free_r+0x26>
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
 800a474:	200099c0 	.word	0x200099c0

0800a478 <__malloc_lock>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__malloc_lock+0x8>)
 800a47a:	f7ff bfa1 	b.w	800a3c0 <__retarget_lock_acquire_recursive>
 800a47e:	bf00      	nop
 800a480:	200099bc 	.word	0x200099bc

0800a484 <__malloc_unlock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__malloc_unlock+0x8>)
 800a486:	f7ff bf9c 	b.w	800a3c2 <__retarget_lock_release_recursive>
 800a48a:	bf00      	nop
 800a48c:	200099bc 	.word	0x200099bc

0800a490 <_init>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr

0800a49c <_fini>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr
