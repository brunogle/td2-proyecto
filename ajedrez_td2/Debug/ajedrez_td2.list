
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad4  08004ad4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e20  20000060  08004b3c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e80  08004b3c  00024e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127c1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000388d  00000000  00000000  00032894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  00037250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017848  00000000  00000000  00037f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014885  00000000  00000000  0004f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095102  00000000  00000000  0006402b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004570  00000000  00000000  000f9130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fd6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a28 	.word	0x08004a28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004a28 	.word	0x08004a28

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  DWT->CTRL|= DWT_CTRL_CYCCNTENA_Msk;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <DWT_Delay_us+0x48>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <DWT_Delay_us+0x48>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <DWT_Delay_us+0x48>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80004f6:	f002 fab3 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <DWT_Delay_us+0x4c>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9b      	lsrs	r3, r3, #18
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while (DWT->CYCCNT < microseconds);
 800050c:	bf00      	nop
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <DWT_Delay_us+0x48>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3fa      	bcc.n	800050e <DWT_Delay_us+0x32>
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	e0001000 	.word	0xe0001000
 8000528:	431bde83 	.word	0x431bde83

0800052c <LCD_Init>:


void LCD_InternalDelay(uint32_t delay);

//Inicializa el display.
void LCD_Init() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	LCD_InternalDelay(100000);
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <LCD_Init+0x5c>)
 8000532:	f000 f8b6 	bl	80006a2 <LCD_InternalDelay>
	LCD_Write(0x03);
 8000536:	2003      	movs	r0, #3
 8000538:	f000 f828 	bl	800058c <LCD_Write>
	LCD_InternalDelay(5000);
 800053c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000540:	f000 f8af 	bl	80006a2 <LCD_InternalDelay>
	LCD_Write(0x03);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f821 	bl	800058c <LCD_Write>
	LCD_InternalDelay(200);
 800054a:	20c8      	movs	r0, #200	; 0xc8
 800054c:	f000 f8a9 	bl	80006a2 <LCD_InternalDelay>
	LCD_Write(0x03);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f81b 	bl	800058c <LCD_Write>
	// Modo de 4 bits
	LCD_Write(0x02);
 8000556:	2002      	movs	r0, #2
 8000558:	f000 f818 	bl	800058c <LCD_Write>
	// Modo de 4 bits, 2 l�neas, caracter de 5x7
	LCD_Send(0x28, LCD_COMANDO);
 800055c:	2100      	movs	r1, #0
 800055e:	2028      	movs	r0, #40	; 0x28
 8000560:	f000 f858 	bl	8000614 <LCD_Send>
	// Apagar display
	LCD_Send(0x08, LCD_COMANDO);
 8000564:	2100      	movs	r1, #0
 8000566:	2008      	movs	r0, #8
 8000568:	f000 f854 	bl	8000614 <LCD_Send>
	// Borrar display
	LCD_Send(0x01, LCD_COMANDO);
 800056c:	2100      	movs	r1, #0
 800056e:	2001      	movs	r0, #1
 8000570:	f000 f850 	bl	8000614 <LCD_Send>
	// Display encendido, sin cursor, sin titilar el cursor
	LCD_Send(0x0C, LCD_COMANDO);
 8000574:	2100      	movs	r1, #0
 8000576:	200c      	movs	r0, #12
 8000578:	f000 f84c 	bl	8000614 <LCD_Send>
	// Incremental, sin scrollear
	LCD_Send(0x06, LCD_COMANDO);
 800057c:	2100      	movs	r1, #0
 800057e:	2006      	movs	r0, #6
 8000580:	f000 f848 	bl	8000614 <LCD_Send>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	000186a0 	.word	0x000186a0

0800058c <LCD_Write>:

//Escribe 4 bits en el display.
void LCD_Write(uint8_t data) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	LCD_DB4_Set(data & 0x01);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	2108      	movs	r1, #8
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <LCD_Write+0x80>)
 80005a4:	f001 fdde 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_DB5_Set(data & 0x02);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	2104      	movs	r1, #4
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <LCD_Write+0x80>)
 80005b6:	f001 fdd5 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_DB6_Set(data & 0x04);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <LCD_Write+0x84>)
 80005ca:	f001 fdcb 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_DB7_Set(data & 0x08);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	2102      	movs	r1, #2
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <LCD_Write+0x84>)
 80005dc:	f001 fdc2 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_E_Set(1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <LCD_Write+0x80>)
 80005e8:	f001 fdbc 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_InternalDelay(50);
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f000 f858 	bl	80006a2 <LCD_InternalDelay>
	LCD_E_Set(0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <LCD_Write+0x80>)
 80005fa:	f001 fdb3 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_InternalDelay(50);
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 f84f 	bl	80006a2 <LCD_InternalDelay>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020000 	.word	0x40020000
 8000610:	40020400 	.word	0x40020400

08000614 <LCD_Send>:

//Escribe un dato o un comando.
void LCD_Send(uint8_t data, uint8_t operation) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
	LCD_RS_Set(operation);
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	461a      	mov	r2, r3
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <LCD_Send+0x50>)
 800062c:	f001 fd9a 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_Write((data & 0xF0) >> 4);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	091b      	lsrs	r3, r3, #4
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffa8 	bl	800058c <LCD_Write>
	LCD_Write(data & 0x0F);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffa1 	bl	800058c <LCD_Write>
	LCD_RS_Set(0);
 800064a:	2200      	movs	r2, #0
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <LCD_Send+0x50>)
 8000650:	f001 fd88 	bl	8002164 <HAL_GPIO_WritePin>
	LCD_InternalDelay(10000);
 8000654:	f242 7010 	movw	r0, #10000	; 0x2710
 8000658:	f000 f823 	bl	80006a2 <LCD_InternalDelay>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020400 	.word	0x40020400

08000668 <LCD_PrintString>:

//Imprime un string. Necesita previamente haber posicionado el cursor.
void LCD_PrintString(char* string) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	while (string[i] != '\0') {
 8000674:	e00a      	b.n	800068c <LCD_PrintString+0x24>
		LCD_Send(string[i], LCD_DATO);
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffc7 	bl	8000614 <LCD_Send>
		i++;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
	while (string[i] != '\0') {
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1ee      	bne.n	8000676 <LCD_PrintString+0xe>
	}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <LCD_InternalDelay>:

void LCD_InternalDelay(uint32_t delay) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	DWT_Delay_us(delay * 10);
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff11 	bl	80004dc <DWT_Delay_us>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <game_set_sensor_reader+0x20>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <game_set_sensor_reader+0x24>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	2000012c 	.word	0x2000012c

080006ec <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fdf1 	bl	80012dc <lighting_set_output>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <game_reset>:

    lighting_refresh();

}

void game_reset(){
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0

    engine_reset();
 8000706:	f000 fbf7 	bl	8000ef8 <engine_reset>

 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 ff59 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f831 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f93b 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 8000722:	f000 f919 	bl	8000958 <MX_DMA_Init>
  MX_TIM1_Init();
 8000726:	f000 f897 	bl	8000858 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <main+0x5c>)
 800072c:	1d3c      	adds	r4, r7, #4
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f8b7 	bl	80038b4 <osThreadCreate>
 8000746:	4603      	mov	r3, r0
 8000748:	4a09      	ldr	r2, [pc, #36]	; (8000770 <main+0x60>)
 800074a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  user_htim1 = &htim1;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <main+0x64>)
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <main+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  user_init();
 8000752:	f000 fb81 	bl	8000e58 <user_init>

  LCD_Init();
 8000756:	f7ff fee9 	bl	800052c <LCD_Init>
  LCD_Send(LCD_POSICION_RENGLON_1, LCD_COMANDO);
 800075a:	2100      	movs	r1, #0
 800075c:	2080      	movs	r0, #128	; 0x80
 800075e:	f7ff ff59 	bl	8000614 <LCD_Send>
  LCD_PrintString("Hola");
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <main+0x6c>)
 8000764:	f7ff ff80 	bl	8000668 <LCD_PrintString>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x58>
 800076a:	bf00      	nop
 800076c:	08004a54 	.word	0x08004a54
 8000770:	20000128 	.word	0x20000128
 8000774:	20000178 	.word	0x20000178
 8000778:	20000080 	.word	0x20000080
 800077c:	08004a40 	.word	0x08004a40

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 f91e 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <SystemClock_Config+0xd0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd4>)
 80007ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000802:	2307      	movs	r3, #7
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fcc4 	bl	8002198 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000816:	f000 f98a 	bl	8000b2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 ff26 	bl	8002688 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000842:	f000 f974 	bl	8000b2e <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b092      	sub	sp, #72	; 0x48
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f8a4 	bl	80049d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_TIM1_Init+0xf8>)
 800088a:	4a32      	ldr	r2, [pc, #200]	; (8000954 <MX_TIM1_Init+0xfc>)
 800088c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_TIM1_Init+0xf8>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_TIM1_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_TIM1_Init+0xf8>)
 800089c:	2268      	movs	r2, #104	; 0x68
 800089e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_TIM1_Init+0xf8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_TIM1_Init+0xf8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_TIM1_Init+0xf8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b2:	4827      	ldr	r0, [pc, #156]	; (8000950 <MX_TIM1_Init+0xf8>)
 80008b4:	f002 f9e2 	bl	8002c7c <HAL_TIM_PWM_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f936 	bl	8000b2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ce:	4619      	mov	r1, r3
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <MX_TIM1_Init+0xf8>)
 80008d2:	f002 ff03 	bl	80036dc <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80008dc:	f000 f927 	bl	8000b2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	220c      	movs	r2, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM1_Init+0xf8>)
 8000902:	f002 fbd9 	bl	80030b8 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800090c:	f000 f90f 	bl	8000b2e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM1_Init+0xf8>)
 8000934:	f002 ff40 	bl	80037b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800093e:	f000 f8f6 	bl	8000b2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM1_Init+0xf8>)
 8000944:	f000 f98c 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3748      	adds	r7, #72	; 0x48
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000080 	.word	0x20000080
 8000954:	40010000 	.word	0x40010000

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <MX_DMA_Init+0x3c>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_DMA_Init+0x3c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	203c      	movs	r0, #60	; 0x3c
 8000980:	f000 ff1e 	bl	80017c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000984:	203c      	movs	r0, #60	; 0x3c
 8000986:	f000 ff37 	bl	80017f8 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x158>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a39      	ldr	r2, [pc, #228]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x158>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2183      	movs	r1, #131	; 0x83
 8000a22:	4834      	ldr	r0, [pc, #208]	; (8000af4 <MX_GPIO_Init+0x15c>)
 8000a24:	f001 fb9e 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D5_Pin|LCD_D4_Pin|LD2_Pin|REED_4_Pin
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f248 21ec 	movw	r1, #33516	; 0x82ec
 8000a2e:	4832      	ldr	r0, [pc, #200]	; (8000af8 <MX_GPIO_Init+0x160>)
 8000a30:	f001 fb98 	bl	8002164 <HAL_GPIO_WritePin>
                          |REED_5_Pin|REED_8_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|LCD_D7_Pin|LCD_D6_Pin|REED_6_Pin
 8000a34:	2200      	movs	r2, #0
 8000a36:	f248 01c3 	movw	r1, #32963	; 0x80c3
 8000a3a:	4830      	ldr	r0, [pc, #192]	; (8000afc <MX_GPIO_Init+0x164>)
 8000a3c:	f001 fb92 	bl	8002164 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4827      	ldr	r0, [pc, #156]	; (8000af4 <MX_GPIO_Init+0x15c>)
 8000a58:	f001 f9e8 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000a5c:	2383      	movs	r3, #131	; 0x83
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <MX_GPIO_Init+0x15c>)
 8000a74:	f001 f9da 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D5_Pin LCD_D4_Pin LD2_Pin REED_4_Pin
                           REED_5_Pin REED_8_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_D4_Pin|LD2_Pin|REED_4_Pin
 8000a78:	f248 23ec 	movw	r3, #33516	; 0x82ec
 8000a7c:	617b      	str	r3, [r7, #20]
                          |REED_5_Pin|REED_8_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <MX_GPIO_Init+0x160>)
 8000a92:	f001 f9cb 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin LCD_D7_Pin LCD_D6_Pin REED_6_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|LCD_D7_Pin|LCD_D6_Pin|REED_6_Pin
 8000a96:	f248 03c3 	movw	r3, #32963	; 0x80c3
 8000a9a:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0x164>)
 8000ab0:	f001 f9bc 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
                           REED_C_Pin REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_D_Pin
 8000ab4:	f246 4338 	movw	r3, #25656	; 0x6438
 8000ab8:	617b      	str	r3, [r7, #20]
                          |REED_C_Pin|REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MX_GPIO_Init+0x164>)
 8000aca:	f001 f9af 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000ace:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_GPIO_Init+0x160>)
 8000ae4:	f001 f9a2 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400

08000b00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f002 ff1f 	bl	800394c <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartDefaultTask+0x8>

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 fd75 	bl	8001610 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b32:	b672      	cpsid	i
}
 8000b34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_MspInit+0x54>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_MspInit+0x54>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fe1f 	bl	80017c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <HAL_TIM_PWM_MspInit+0xc0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d151      	bne.n	8000c46 <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_TIM_PWM_MspInit+0xc4>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <HAL_TIM_PWM_MspInit+0xc4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_TIM_PWM_MspInit+0xc4>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_TIM_PWM_MspInit+0xcc>)
 8000bc2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bc6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000bca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c04:	f000 fe06 	bl	8001814 <HAL_DMA_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000c0e:	f7ff ff8e 	bl	8000b2e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <HAL_TIM_PWM_MspInit+0xc8>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	201a      	movs	r0, #26
 8000c3c:	f000 fdc0 	bl	80017c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c40:	201a      	movs	r0, #26
 8000c42:	f000 fdd9 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40010000 	.word	0x40010000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	200000c8 	.word	0x200000c8
 8000c5c:	40026470 	.word	0x40026470

08000c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d11e      	bne.n	8000cc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8000c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_TIM_MspPostInit+0x70>)
 8000cbc:	f001 f8b6 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_InitTick+0xe8>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <HAL_InitTick+0xe8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <HAL_InitTick+0xe8>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fec8 	bl	8002aa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d1a:	f001 fead 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8000d1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d22:	f001 fea9 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8000d26:	4603      	mov	r3, r0
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	0c9b      	lsrs	r3, r3, #18
 8000d36:	3b01      	subs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d64:	f001 fece 	bl	8002b04 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d11b      	bne.n	8000dae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d78:	f001 ff1e 	bl	8002bb8 <HAL_TIM_Base_Start_IT>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d111      	bne.n	8000dae <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8a:	201c      	movs	r0, #28
 8000d8c:	f000 fd34 	bl	80017f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d808      	bhi.n	8000da8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d96:	2200      	movs	r2, #0
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	201c      	movs	r0, #28
 8000d9c:	f000 fd10 	bl	80017c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_InitTick+0xf4>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e002      	b.n	8000dae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3738      	adds	r7, #56	; 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	20000130 	.word	0x20000130
 8000dc8:	20000004 	.word	0x20000004

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dfe:	f002 f853 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000080 	.word	0x20000080

08000e0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM2_IRQHandler+0x10>)
 8000e12:	f002 f849 	bl	8002ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000130 	.word	0x20000130

08000e20 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA2_Stream4_IRQHandler+0x10>)
 8000e26:	f000 fdc5 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000c8 	.word	0x200000c8

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <user_init>:

TIM_HandleTypeDef * user_htim1;



void user_init(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	ws2812_init();
 8000e5c:	f000 fa18 	bl	8001290 <ws2812_init>

	game_set_sensor_reader((sensor_reader_t)reed_scan_sensors);
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <user_init+0x1c>)
 8000e62:	f7ff fc2f 	bl	80006c4 <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <user_init+0x20>)
 8000e68:	f7ff fc40 	bl	80006ec <game_set_led_output_array>

	game_reset();
 8000e6c:	f7ff fc49 	bl	8000702 <game_reset>

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	080012fd 	.word	0x080012fd
 8000e78:	20000ef8 	.word	0x20000ef8

08000e7c <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	e00d      	b.n	8000ea6 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	3380      	adds	r3, #128	; 0x80
 8000e92:	2202      	movs	r2, #2
 8000e94:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eaa:	ddee      	ble.n	8000e8a <clear_game_state+0xe>
    }
    return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	70fb      	strb	r3, [r7, #3]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70bb      	strb	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
 8000eda:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	78ba      	ldrb	r2, [r7, #2]
 8000ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8000efc:	4902      	ldr	r1, [pc, #8]	; (8000f08 <engine_reset+0x10>)
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <engine_reset+0x14>)
 8000f00:	f000 f806 	bl	8000f10 <load_fen>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08004a70 	.word	0x08004a70
 8000f0c:	2000017c 	.word	0x2000017c

08000f10 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffae 	bl	8000e7c <clear_game_state>

    char * f = (char *)fen;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3b2f      	subs	r3, #47	; 0x2f
 8000f32:	2b43      	cmp	r3, #67	; 0x43
 8000f34:	f200 8166 	bhi.w	8001204 <load_fen+0x2f4>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <load_fen+0x30>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	080011b9 	.word	0x080011b9
 8000f44:	08001205 	.word	0x08001205
 8000f48:	080011c5 	.word	0x080011c5
 8000f4c:	080011cd 	.word	0x080011cd
 8000f50:	080011d5 	.word	0x080011d5
 8000f54:	080011dd 	.word	0x080011dd
 8000f58:	080011e5 	.word	0x080011e5
 8000f5c:	080011ed 	.word	0x080011ed
 8000f60:	080011f5 	.word	0x080011f5
 8000f64:	080011fd 	.word	0x080011fd
 8000f68:	08001205 	.word	0x08001205
 8000f6c:	08001205 	.word	0x08001205
 8000f70:	08001205 	.word	0x08001205
 8000f74:	08001205 	.word	0x08001205
 8000f78:	08001205 	.word	0x08001205
 8000f7c:	08001205 	.word	0x08001205
 8000f80:	08001205 	.word	0x08001205
 8000f84:	08001205 	.word	0x08001205
 8000f88:	08001205 	.word	0x08001205
 8000f8c:	080010ab 	.word	0x080010ab
 8000f90:	08001205 	.word	0x08001205
 8000f94:	08001205 	.word	0x08001205
 8000f98:	08001205 	.word	0x08001205
 8000f9c:	08001205 	.word	0x08001205
 8000fa0:	08001205 	.word	0x08001205
 8000fa4:	08001205 	.word	0x08001205
 8000fa8:	08001205 	.word	0x08001205
 8000fac:	08001205 	.word	0x08001205
 8000fb0:	08001051 	.word	0x08001051
 8000fb4:	08001205 	.word	0x08001205
 8000fb8:	08001205 	.word	0x08001205
 8000fbc:	080010c9 	.word	0x080010c9
 8000fc0:	08001205 	.word	0x08001205
 8000fc4:	080010e7 	.word	0x080010e7
 8000fc8:	0800106f 	.word	0x0800106f
 8000fcc:	0800108d 	.word	0x0800108d
 8000fd0:	08001205 	.word	0x08001205
 8000fd4:	08001205 	.word	0x08001205
 8000fd8:	08001205 	.word	0x08001205
 8000fdc:	08001205 	.word	0x08001205
 8000fe0:	08001205 	.word	0x08001205
 8000fe4:	08001205 	.word	0x08001205
 8000fe8:	08001205 	.word	0x08001205
 8000fec:	08001205 	.word	0x08001205
 8000ff0:	08001205 	.word	0x08001205
 8000ff4:	08001205 	.word	0x08001205
 8000ff8:	08001205 	.word	0x08001205
 8000ffc:	08001205 	.word	0x08001205
 8001000:	08001205 	.word	0x08001205
 8001004:	08001205 	.word	0x08001205
 8001008:	08001205 	.word	0x08001205
 800100c:	0800115f 	.word	0x0800115f
 8001010:	08001205 	.word	0x08001205
 8001014:	08001205 	.word	0x08001205
 8001018:	08001205 	.word	0x08001205
 800101c:	08001205 	.word	0x08001205
 8001020:	08001205 	.word	0x08001205
 8001024:	08001205 	.word	0x08001205
 8001028:	08001205 	.word	0x08001205
 800102c:	08001205 	.word	0x08001205
 8001030:	08001105 	.word	0x08001105
 8001034:	08001205 	.word	0x08001205
 8001038:	08001205 	.word	0x08001205
 800103c:	0800117d 	.word	0x0800117d
 8001040:	08001205 	.word	0x08001205
 8001044:	0800119b 	.word	0x0800119b
 8001048:	08001123 	.word	0x08001123
 800104c:	08001141 	.word	0x08001141
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8001050:	7abb      	ldrb	r3, [r7, #10]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	4413      	add	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff2a 	bl	8000eba <place_piece>
            col++;
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	3301      	adds	r3, #1
 800106a:	72fb      	strb	r3, [r7, #11]
            break;
 800106c:	e0ca      	b.n	8001204 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 800106e:	7abb      	ldrb	r3, [r7, #10]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	4413      	add	r3, r2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2200      	movs	r2, #0
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff1b 	bl	8000eba <place_piece>
            col++;
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	3301      	adds	r3, #1
 8001088:	72fb      	strb	r3, [r7, #11]
            break;
 800108a:	e0bb      	b.n	8001204 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 800108c:	7abb      	ldrb	r3, [r7, #10]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	b2da      	uxtb	r2, r3
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	4413      	add	r3, r2
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff0c 	bl	8000eba <place_piece>
            col++;
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	3301      	adds	r3, #1
 80010a6:	72fb      	strb	r3, [r7, #11]
            break;
 80010a8:	e0ac      	b.n	8001204 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 80010aa:	7abb      	ldrb	r3, [r7, #10]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	2103      	movs	r1, #3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fefd 	bl	8000eba <place_piece>
            col++;
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	3301      	adds	r3, #1
 80010c4:	72fb      	strb	r3, [r7, #11]
            break;
 80010c6:	e09d      	b.n	8001204 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff feee 	bl	8000eba <place_piece>
            col++;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	3301      	adds	r3, #1
 80010e2:	72fb      	strb	r3, [r7, #11]
            break;
 80010e4:	e08e      	b.n	8001204 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fedf 	bl	8000eba <place_piece>
            col++;
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	3301      	adds	r3, #1
 8001100:	72fb      	strb	r3, [r7, #11]
            break;
 8001102:	e07f      	b.n	8001204 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8001104:	7abb      	ldrb	r3, [r7, #10]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	b2da      	uxtb	r2, r3
 800110a:	7afb      	ldrb	r3, [r7, #11]
 800110c:	4413      	add	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2201      	movs	r2, #1
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff fed0 	bl	8000eba <place_piece>
            col++;
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	3301      	adds	r3, #1
 800111e:	72fb      	strb	r3, [r7, #11]
            break;
 8001120:	e070      	b.n	8001204 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 8001122:	7abb      	ldrb	r3, [r7, #10]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b2da      	uxtb	r2, r3
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	4413      	add	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fec1 	bl	8000eba <place_piece>
            col++;
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	3301      	adds	r3, #1
 800113c:	72fb      	strb	r3, [r7, #11]
            break;
 800113e:	e061      	b.n	8001204 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	b2da      	uxtb	r2, r3
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2201      	movs	r2, #1
 800114e:	2102      	movs	r1, #2
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff feb2 	bl	8000eba <place_piece>
            col++;
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	3301      	adds	r3, #1
 800115a:	72fb      	strb	r3, [r7, #11]
            break;
 800115c:	e052      	b.n	8001204 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 800115e:	7abb      	ldrb	r3, [r7, #10]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	4413      	add	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2201      	movs	r2, #1
 800116c:	2103      	movs	r1, #3
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fea3 	bl	8000eba <place_piece>
            col++;
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	3301      	adds	r3, #1
 8001178:	72fb      	strb	r3, [r7, #11]
            break;
 800117a:	e043      	b.n	8001204 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 800117c:	7abb      	ldrb	r3, [r7, #10]
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	b2da      	uxtb	r2, r3
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	4413      	add	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2201      	movs	r2, #1
 800118a:	2104      	movs	r1, #4
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fe94 	bl	8000eba <place_piece>
            col++;
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	3301      	adds	r3, #1
 8001196:	72fb      	strb	r3, [r7, #11]
            break;
 8001198:	e034      	b.n	8001204 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2201      	movs	r2, #1
 80011a8:	2105      	movs	r1, #5
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fe85 	bl	8000eba <place_piece>
            col++;
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	3301      	adds	r3, #1
 80011b4:	72fb      	strb	r3, [r7, #11]
            break;
 80011b6:	e025      	b.n	8001204 <load_fen+0x2f4>
        case '/':
            row--;
 80011b8:	7abb      	ldrb	r3, [r7, #10]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	72bb      	strb	r3, [r7, #10]
            col=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	72fb      	strb	r3, [r7, #11]
            break;
 80011c2:	e01f      	b.n	8001204 <load_fen+0x2f4>
        case '1':
            col+=1;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	3301      	adds	r3, #1
 80011c8:	72fb      	strb	r3, [r7, #11]
            break;
 80011ca:	e01b      	b.n	8001204 <load_fen+0x2f4>
        case '2':
            col+=2;
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	3302      	adds	r3, #2
 80011d0:	72fb      	strb	r3, [r7, #11]
            break;
 80011d2:	e017      	b.n	8001204 <load_fen+0x2f4>
        case '3':
            col+=3;
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	3303      	adds	r3, #3
 80011d8:	72fb      	strb	r3, [r7, #11]
            break;
 80011da:	e013      	b.n	8001204 <load_fen+0x2f4>
        case '4':
            col+=4;
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3304      	adds	r3, #4
 80011e0:	72fb      	strb	r3, [r7, #11]
            break;
 80011e2:	e00f      	b.n	8001204 <load_fen+0x2f4>
        case '5':
            col+=5;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	3305      	adds	r3, #5
 80011e8:	72fb      	strb	r3, [r7, #11]
            break;
 80011ea:	e00b      	b.n	8001204 <load_fen+0x2f4>
        case '6':
            col+=6;
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	3306      	adds	r3, #6
 80011f0:	72fb      	strb	r3, [r7, #11]
            break;
 80011f2:	e007      	b.n	8001204 <load_fen+0x2f4>
        case '7':
            col+=7;
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	3307      	adds	r3, #7
 80011f8:	72fb      	strb	r3, [r7, #11]
            break;
 80011fa:	e003      	b.n	8001204 <load_fen+0x2f4>
        case '8':
            col+=8;
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	3308      	adds	r3, #8
 8001200:	72fb      	strb	r3, [r7, #11]
            break;
 8001202:	bf00      	nop
        };

        f++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b20      	cmp	r3, #32
 8001210:	f47f ae8c 	bne.w	8000f2c <load_fen+0x1c>

    f++;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b77      	cmp	r3, #119	; 0x77
 8001220:	d104      	bne.n	800122c <load_fen+0x31c>
        state->side_to_move = WHITE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800122a:	e003      	b.n	8001234 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3302      	adds	r3, #2
 8001238:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b20      	cmp	r3, #32
 8001246:	d1f8      	bne.n	800123a <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b20      	cmp	r3, #32
 800125a:	d1f8      	bne.n	800124e <load_fen+0x33e>
    f++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8001274:	210c      	movs	r1, #12
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 fd50 	bl	8002d1c <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000ff8 	.word	0x20000ff8

08001290 <ws2812_init>:

void ws2812_init(){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e010      	b.n	80012be <ws2812_init+0x2e>
		if(i < 60)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b3b      	cmp	r3, #59	; 0x3b
 80012a0:	dc05      	bgt.n	80012ae <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <ws2812_init+0x48>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2100      	movs	r1, #0
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012ac:	e004      	b.n	80012b8 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <ws2812_init+0x48>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	211c      	movs	r1, #28
 80012b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f240 623b 	movw	r2, #1595	; 0x63b
 80012c4:	4293      	cmp	r3, r2
 80012c6:	dde9      	ble.n	800129c <ws2812_init+0xc>
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000280 	.word	0x20000280

080012dc <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <lighting_set_output+0x1c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000ffc 	.word	0x20000ffc

080012fc <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e127      	b.n	800155a <reed_scan_sensors+0x25e>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	2101      	movs	r1, #1
 800131a:	4894      	ldr	r0, [pc, #592]	; (800156c <reed_scan_sensors+0x270>)
 800131c:	f000 ff22 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	2102      	movs	r1, #2
 8001330:	488e      	ldr	r0, [pc, #568]	; (800156c <reed_scan_sensors+0x270>)
 8001332:	f000 ff17 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b02      	cmp	r3, #2
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	2101      	movs	r1, #1
 8001346:	488a      	ldr	r0, [pc, #552]	; (8001570 <reed_scan_sensors+0x274>)
 8001348:	f000 ff0c 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b03      	cmp	r3, #3
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	4885      	ldr	r0, [pc, #532]	; (8001574 <reed_scan_sensors+0x278>)
 800135e:	f000 ff01 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b04      	cmp	r3, #4
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	4880      	ldr	r0, [pc, #512]	; (8001574 <reed_scan_sensors+0x278>)
 8001374:	f000 fef6 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b05      	cmp	r3, #5
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4879      	ldr	r0, [pc, #484]	; (8001570 <reed_scan_sensors+0x274>)
 800138a:	f000 feeb 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b06      	cmp	r3, #6
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4873      	ldr	r0, [pc, #460]	; (800156c <reed_scan_sensors+0x270>)
 80013a0:	f000 fee0 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	486f      	ldr	r0, [pc, #444]	; (8001574 <reed_scan_sensors+0x278>)
 80013b8:	f000 fed4 	bl	8002164 <HAL_GPIO_WritePin>

	for(int i = 0; i < 10; i++){ } //Delay chico para dejar que la señal se propage
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	e002      	b.n	80013c8 <reed_scan_sensors+0xcc>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3301      	adds	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	ddf9      	ble.n	80013c2 <reed_scan_sensors+0xc6>


    data[row] = 0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	4865      	ldr	r0, [pc, #404]	; (8001574 <reed_scan_sensors+0x278>)
 80013de:	f000 fea9 	bl	8002134 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf14      	ite	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	2300      	moveq	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	b24b      	sxtb	r3, r1
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b259      	sxtb	r1, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	4858      	ldr	r0, [pc, #352]	; (8001570 <reed_scan_sensors+0x274>)
 8001410:	f000 fe90 	bl	8002134 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <reed_scan_sensors+0x122>
 800141a:	2102      	movs	r1, #2
 800141c:	e000      	b.n	8001420 <reed_scan_sensors+0x124>
 800141e:	2100      	movs	r1, #0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25a      	sxtb	r2, r3
 800142a:	b24b      	sxtb	r3, r1
 800142c:	4313      	orrs	r3, r2
 800142e:	b259      	sxtb	r1, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	b2ca      	uxtb	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 800143a:	2110      	movs	r1, #16
 800143c:	484c      	ldr	r0, [pc, #304]	; (8001570 <reed_scan_sensors+0x274>)
 800143e:	f000 fe79 	bl	8002134 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <reed_scan_sensors+0x150>
 8001448:	2104      	movs	r1, #4
 800144a:	e000      	b.n	800144e <reed_scan_sensors+0x152>
 800144c:	2100      	movs	r1, #0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b25a      	sxtb	r2, r3
 8001458:	b24b      	sxtb	r3, r1
 800145a:	4313      	orrs	r3, r2
 800145c:	b259      	sxtb	r1, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	b2ca      	uxtb	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8001468:	2108      	movs	r1, #8
 800146a:	4841      	ldr	r0, [pc, #260]	; (8001570 <reed_scan_sensors+0x274>)
 800146c:	f000 fe62 	bl	8002134 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <reed_scan_sensors+0x17e>
 8001476:	2108      	movs	r1, #8
 8001478:	e000      	b.n	800147c <reed_scan_sensors+0x180>
 800147a:	2100      	movs	r1, #0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25a      	sxtb	r2, r3
 8001486:	b24b      	sxtb	r3, r1
 8001488:	4313      	orrs	r3, r2
 800148a:	b259      	sxtb	r1, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8001496:	2120      	movs	r1, #32
 8001498:	4835      	ldr	r0, [pc, #212]	; (8001570 <reed_scan_sensors+0x274>)
 800149a:	f000 fe4b 	bl	8002134 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <reed_scan_sensors+0x1ac>
 80014a4:	2110      	movs	r1, #16
 80014a6:	e000      	b.n	80014aa <reed_scan_sensors+0x1ae>
 80014a8:	2100      	movs	r1, #0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	b24b      	sxtb	r3, r1
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b259      	sxtb	r1, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 80014c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c8:	482a      	ldr	r0, [pc, #168]	; (8001574 <reed_scan_sensors+0x278>)
 80014ca:	f000 fe33 	bl	8002134 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <reed_scan_sensors+0x1dc>
 80014d4:	2120      	movs	r1, #32
 80014d6:	e000      	b.n	80014da <reed_scan_sensors+0x1de>
 80014d8:	2100      	movs	r1, #0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	b24b      	sxtb	r3, r1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b259      	sxtb	r1, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	b2ca      	uxtb	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <reed_scan_sensors+0x274>)
 80014fa:	f000 fe1b 	bl	8002134 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <reed_scan_sensors+0x20c>
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	e000      	b.n	800150a <reed_scan_sensors+0x20e>
 8001508:	2100      	movs	r1, #0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b25a      	sxtb	r2, r3
 8001514:	b24b      	sxtb	r3, r1
 8001516:	4313      	orrs	r3, r2
 8001518:	b259      	sxtb	r1, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	b2ca      	uxtb	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8001524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <reed_scan_sensors+0x274>)
 800152a:	f000 fe03 	bl	8002134 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <reed_scan_sensors+0x23c>
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	e000      	b.n	800153a <reed_scan_sensors+0x23e>
 8001538:	2100      	movs	r1, #0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25a      	sxtb	r2, r3
 8001544:	b24b      	sxtb	r3, r1
 8001546:	4313      	orrs	r3, r2
 8001548:	b259      	sxtb	r1, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b07      	cmp	r3, #7
 800155e:	f77f aed4 	ble.w	800130a <reed_scan_sensors+0xe>

  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40020800 	.word	0x40020800
 8001570:	40020400 	.word	0x40020400
 8001574:	40020000 	.word	0x40020000

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a2:	f7ff fc47 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 fa1b 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f8b1 	bl	8000710 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015bc:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 80015c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015c4:	20004e80 	.word	0x20004e80

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f8d8 	bl	80017aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f7ff fb6a 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fa9a 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008
 8001634:	20001000 	.word	0x20001000

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20001000 	.word	0x20001000

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff4c 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d2:	f7ff ff61 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80017d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7ff ffb1 	bl	8001744 <NVIC_EncodePriority>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff80 	bl	80016f0 <__NVIC_SetPriority>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff54 	bl	80016b4 <__NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ff0a 	bl	8001638 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e099      	b.n	8001964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001850:	e00f      	b.n	8001872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001852:	f7ff fef1 	bl	8001638 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b05      	cmp	r3, #5
 800185e:	d908      	bls.n	8001872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2220      	movs	r2, #32
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e078      	b.n	8001964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e8      	bne.n	8001852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_DMA_Init+0x158>)
 800188c:	4013      	ands	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d107      	bne.n	80018dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4313      	orrs	r3, r2
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f023 0307 	bic.w	r3, r3, #7
 80018f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2b04      	cmp	r3, #4
 8001904:	d117      	bne.n	8001936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00e      	beq.n	8001936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fa0b 	bl	8001d34 <DMA_CheckFifoParam>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001932:	2301      	movs	r3, #1
 8001934:	e016      	b.n	8001964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f9c2 	bl	8001cc8 <DMA_CalcBaseAndBitshift>
 8001944:	4603      	mov	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	223f      	movs	r2, #63	; 0x3f
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	f010803f 	.word	0xf010803f

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00c      	b.n	80019a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2205      	movs	r2, #5
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <HAL_DMA_IRQHandler+0x248>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <HAL_DMA_IRQHandler+0x24c>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a9b      	lsrs	r3, r3, #10
 80019cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2208      	movs	r2, #8
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01a      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2204      	movs	r2, #4
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2210      	movs	r2, #16
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d043      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03c      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2210      	movs	r2, #16
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e01f      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e016      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2220      	movs	r2, #32
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 808f 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8087 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d136      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0216 	bic.w	r2, r2, #22
 8001b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x1da>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0208 	bic.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	223f      	movs	r2, #63	; 0x3f
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d07e      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
        }
        return;
 8001bca:	e079      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01d      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d031      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e02c      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e01e      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0210 	bic.w	r2, r2, #16
 8001c32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d032      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d307      	bcc.n	8001c9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f2      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x2cc>
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e000      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cc0:	bf00      	nop
    }
  }
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3b10      	subs	r3, #16
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <DMA_CalcBaseAndBitshift+0x64>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d909      	bls.n	8001d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	1d1a      	adds	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58
 8001d08:	e007      	b.n	8001d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	aaaaaaab 	.word	0xaaaaaaab
 8001d30:	08004ac4 	.word	0x08004ac4

08001d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11f      	bne.n	8001d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d856      	bhi.n	8001e02 <DMA_CheckFifoParam+0xce>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x28>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d7f 	.word	0x08001d7f
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001e03 	.word	0x08001e03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d046      	beq.n	8001e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7c:	e043      	b.n	8001e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d86:	d140      	bne.n	8001e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d8c:	e03d      	b.n	8001e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d96:	d121      	bne.n	8001ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d837      	bhi.n	8001e0e <DMA_CheckFifoParam+0xda>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x70>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dbb 	.word	0x08001dbb
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001dcd 	.word	0x08001dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      break;
 8001db8:	e030      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d025      	beq.n	8001e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dca:	e022      	b.n	8001e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd4:	d11f      	bne.n	8001e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dda:	e01c      	b.n	8001e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d903      	bls.n	8001dea <DMA_CheckFifoParam+0xb6>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d003      	beq.n	8001df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de8:	e018      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
      break;
 8001dee:	e015      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e00b      	b.n	8001e1a <DMA_CheckFifoParam+0xe6>
      break;
 8001e02:	bf00      	nop
 8001e04:	e00a      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e008      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e006      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e004      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e002      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e159      	b.n	80020fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8148 	bne.w	80020f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a2 	beq.w	80020f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b54      	ldr	r3, [pc, #336]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_GPIO_Init+0x2ec>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2f0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x202>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2f4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x1fe>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_GPIO_Init+0x2f8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x1fa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a46      	ldr	r2, [pc, #280]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x1f6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a45      	ldr	r2, [pc, #276]	; (800212c <HAL_GPIO_Init+0x300>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x1f2>
 800201a:	2304      	movs	r3, #4
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800201e:	2307      	movs	r3, #7
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <HAL_GPIO_Init+0x2ec>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b38      	ldr	r3, [pc, #224]	; (8002130 <HAL_GPIO_Init+0x304>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <HAL_GPIO_Init+0x304>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_GPIO_Init+0x304>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_GPIO_Init+0x304>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_GPIO_Init+0x304>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_GPIO_Init+0x304>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f aea2 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e267      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d075      	beq.n	80022a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d00c      	beq.n	80021dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d112      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ce:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	4b7e      	ldr	r3, [pc, #504]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05b      	beq.n	80022a0 <HAL_RCC_OscConfig+0x108>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d157      	bne.n	80022a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e242      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d106      	bne.n	800220c <HAL_RCC_OscConfig+0x74>
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a75      	ldr	r2, [pc, #468]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xb0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x98>
 8002216:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6f      	ldr	r2, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6c      	ldr	r2, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xb0>
 8002230:	4b69      	ldr	r3, [pc, #420]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a68      	ldr	r2, [pc, #416]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff f9f2 	bl	8001638 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff f9ee 	bl	8001638 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e207      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xc0>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f9de 	bl	8001638 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f9da 	bl	8001638 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1f3      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0xe8>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d063      	beq.n	8002376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d11c      	bne.n	8002300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x152>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1c7      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4937      	ldr	r1, [pc, #220]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	e03a      	b.n	8002376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_RCC_OscConfig+0x244>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f993 	bl	8001638 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002316:	f7ff f98f 	bl	8001638 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1a8      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4925      	ldr	r1, [pc, #148]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_OscConfig+0x244>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f972 	bl	8001638 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002358:	f7ff f96e 	bl	8001638 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e187      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d036      	beq.n	80023f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_RCC_OscConfig+0x248>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff f952 	bl	8001638 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff f94e 	bl	8001638 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e167      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x240>)
 80023ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x200>
 80023b6:	e01b      	b.n	80023f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x248>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff f93b 	bl	8001638 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	e00e      	b.n	80023e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c6:	f7ff f937 	bl	8001638 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d907      	bls.n	80023e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e150      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ea      	bne.n	80023c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8097 	beq.w	800252c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002402:	4b81      	ldr	r3, [pc, #516]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a7c      	ldr	r2, [pc, #496]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b77      	ldr	r3, [pc, #476]	; (800260c <HAL_RCC_OscConfig+0x474>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b74      	ldr	r3, [pc, #464]	; (800260c <HAL_RCC_OscConfig+0x474>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a73      	ldr	r2, [pc, #460]	; (800260c <HAL_RCC_OscConfig+0x474>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7ff f8f7 	bl	8001638 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff f8f3 	bl	8001638 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e10c      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x474>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x2ea>
 8002474:	4b64      	ldr	r3, [pc, #400]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e01c      	b.n	80024bc <HAL_RCC_OscConfig+0x324>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x30c>
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x324>
 80024a4:	4b58      	ldr	r3, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a57      	ldr	r2, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a54      	ldr	r2, [pc, #336]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff f8b8 	bl	8001638 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff f8b4 	bl	8001638 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0cb      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ee      	beq.n	80024cc <HAL_RCC_OscConfig+0x334>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff f8a2 	bl	8001638 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7ff f89e 	bl	8001638 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0b5      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ee      	bne.n	80024f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a1 	beq.w	8002678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002536:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d05c      	beq.n	80025fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d141      	bne.n	80025ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x478>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff f872 	bl	8001638 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7ff f86e 	bl	8001638 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e087      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	3b01      	subs	r3, #1
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x478>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff f847 	bl	8001638 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff f843 	bl	8001638 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e05c      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x416>
 80025cc:	e054      	b.n	8002678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7ff f830 	bl	8001638 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f82c 	bl	8001638 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e045      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x444>
 80025fa:	e03d      	b.n	8002678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e038      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
 8002610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4ec>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d028      	beq.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d121      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d11a      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800264c:	4293      	cmp	r3, r2
 800264e:	d111      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0cc      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b68      	ldr	r3, [pc, #416]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d90c      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b65      	ldr	r3, [pc, #404]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d044      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d119      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	2b03      	cmp	r3, #3
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e067      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4934      	ldr	r1, [pc, #208]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe ff5e 	bl	8001638 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe ff5a 	bl	8001638 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e04f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d20c      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fa50 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00
 8002844:	40023800 	.word	0x40023800
 8002848:	08004aac 	.word	0x08004aac
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002858:	b094      	sub	sp, #80	; 0x50
 800285a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
 8002860:	2300      	movs	r3, #0
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	2300      	movs	r3, #0
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286c:	4b79      	ldr	r3, [pc, #484]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d00d      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x40>
 8002878:	2b08      	cmp	r3, #8
 800287a:	f200 80e1 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x34>
 8002882:	2b04      	cmp	r3, #4
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x3a>
 8002886:	e0db      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x204>)
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800288c:	e0db      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002892:	e0d8      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	2200      	movs	r2, #0
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028bc:	633b      	str	r3, [r7, #48]	; 0x30
 80028be:	2300      	movs	r3, #0
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
 80028c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028c6:	4622      	mov	r2, r4
 80028c8:	462b      	mov	r3, r5
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	0159      	lsls	r1, r3, #5
 80028d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d8:	0150      	lsls	r0, r2, #5
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4621      	mov	r1, r4
 80028e0:	1a51      	subs	r1, r2, r1
 80028e2:	6139      	str	r1, [r7, #16]
 80028e4:	4629      	mov	r1, r5
 80028e6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f8:	4659      	mov	r1, fp
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002902:	4651      	mov	r1, sl
 8002904:	018a      	lsls	r2, r1, #6
 8002906:	4651      	mov	r1, sl
 8002908:	ebb2 0801 	subs.w	r8, r2, r1
 800290c:	4659      	mov	r1, fp
 800290e:	eb63 0901 	sbc.w	r9, r3, r1
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800291e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002926:	4690      	mov	r8, r2
 8002928:	4699      	mov	r9, r3
 800292a:	4623      	mov	r3, r4
 800292c:	eb18 0303 	adds.w	r3, r8, r3
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	462b      	mov	r3, r5
 8002934:	eb49 0303 	adc.w	r3, r9, r3
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002946:	4629      	mov	r1, r5
 8002948:	024b      	lsls	r3, r1, #9
 800294a:	4621      	mov	r1, r4
 800294c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002950:	4621      	mov	r1, r4
 8002952:	024a      	lsls	r2, r1, #9
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295a:	2200      	movs	r2, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
 800295e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002964:	f7fd fc3c 	bl	80001e0 <__aeabi_uldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4613      	mov	r3, r2
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	e058      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	2200      	movs	r2, #0
 800297a:	4618      	mov	r0, r3
 800297c:	4611      	mov	r1, r2
 800297e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4641      	mov	r1, r8
 80029a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c4:	ebb2 040a 	subs.w	r4, r2, sl
 80029c8:	eb63 050b 	sbc.w	r5, r3, fp
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	464b      	mov	r3, r9
 80029e8:	eb45 0303 	adc.w	r3, r5, r3
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	61fa      	str	r2, [r7, #28]
 8002a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a18:	f7fd fbe2 	bl	80001e0 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3750      	adds	r7, #80	; 0x50
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08004abc 	.word	0x08004abc

08002aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	220f      	movs	r2, #15
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0203 	and.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_RCC_GetClockConfig+0x60>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0207 	and.w	r2, r3, #7
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e041      	b.n	8002b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f839 	bl	8002ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 fb98 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e044      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d018      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d013      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40014000 	.word	0x40014000

08002c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e041      	b.n	8002d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd ff74 	bl	8000b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fadc 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d855      	bhi.n	8002ddc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002ddd 	.word	0x08002ddd
 8002d40:	08002ddd 	.word	0x08002ddd
 8002d44:	08002ddd 	.word	0x08002ddd
 8002d48:	08002d89 	.word	0x08002d89
 8002d4c:	08002ddd 	.word	0x08002ddd
 8002d50:	08002ddd 	.word	0x08002ddd
 8002d54:	08002ddd 	.word	0x08002ddd
 8002d58:	08002da5 	.word	0x08002da5
 8002d5c:	08002ddd 	.word	0x08002ddd
 8002d60:	08002ddd 	.word	0x08002ddd
 8002d64:	08002ddd 	.word	0x08002ddd
 8002d68:	08002dc1 	.word	0x08002dc1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fdf5 	bl	8001970 <HAL_DMA_Abort_IT>
      break;
 8002d86:	e02c      	b.n	8002de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fde7 	bl	8001970 <HAL_DMA_Abort_IT>
      break;
 8002da2:	e01e      	b.n	8002de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fdd9 	bl	8001970 <HAL_DMA_Abort_IT>
      break;
 8002dbe:	e010      	b.n	8002de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fdcb 	bl	8001970 <HAL_DMA_Abort_IT>
      break;
 8002dda:	e002      	b.n	8002de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc4d 	bl	8003690 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d117      	bne.n	8002e30 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	f240 4344 	movw	r3, #1092	; 0x444
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	f240 4344 	movw	r3, #1092	; 0x444
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6e:	e013      	b.n	8002e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d104      	bne.n	8002e80 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7e:	e00b      	b.n	8002e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d104      	bne.n	8002e90 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8e:	e003      	b.n	8002e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000

08002ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0202 	mvn.w	r2, #2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9b0 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9a2 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fe f9b7 	bl	800126c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0204 	mvn.w	r2, #4
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f986 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f978 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7fe f98d 	bl	800126c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0208 	mvn.w	r2, #8
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f95c 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f94e 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe f963 	bl	800126c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0210 	mvn.w	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f932 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f924 	bl	800323c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f939 	bl	800126c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10e      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0201 	mvn.w	r2, #1
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fd72 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b80      	cmp	r3, #128	; 0x80
 8003038:	d10e      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fc0c 	bl	8003870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d10e      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d107      	bne.n	8003084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8f0 	bl	8003264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b20      	cmp	r3, #32
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0220 	mvn.w	r2, #32
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fbd6 	bl	800385c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0ae      	b.n	8003234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	f200 809f 	bhi.w	8003224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003225 	.word	0x08003225
 80030f4:	08003225 	.word	0x08003225
 80030f8:	08003225 	.word	0x08003225
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003225 	.word	0x08003225
 8003104:	08003225 	.word	0x08003225
 8003108:	08003225 	.word	0x08003225
 800310c:	080031a3 	.word	0x080031a3
 8003110:	08003225 	.word	0x08003225
 8003114:	08003225 	.word	0x08003225
 8003118:	08003225 	.word	0x08003225
 800311c:	080031e3 	.word	0x080031e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f926 	bl	8003378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
      break;
 800315e:	e064      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f96c 	bl	8003444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
      break;
 80031a0:	e043      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f9b7 	bl	800351c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
      break;
 80031e0:	e023      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa01 	bl	80035f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e002      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <TIM_Base_SetConfig+0xe4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a31      	ldr	r2, [pc, #196]	; (8003360 <TIM_Base_SetConfig+0xe8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <TIM_Base_SetConfig+0xec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <TIM_Base_SetConfig+0xf0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <TIM_Base_SetConfig+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01b      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d017      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <TIM_Base_SetConfig+0xe8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a21      	ldr	r2, [pc, #132]	; (8003364 <TIM_Base_SetConfig+0xec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a20      	ldr	r2, [pc, #128]	; (8003368 <TIM_Base_SetConfig+0xf0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <TIM_Base_SetConfig+0xf4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <TIM_Base_SetConfig+0xf8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_Base_SetConfig+0xfc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <TIM_Base_SetConfig+0xe4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0308 	bic.w	r3, r3, #8
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40010000 	.word	0x40010000

08003444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0210 	bic.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0320 	bic.w	r3, r3, #32
 800348e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <TIM_OC2_SetConfig+0xd4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10d      	bne.n	80034c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <TIM_OC2_SetConfig+0xd4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d113      	bne.n	80034f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000

0800351c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <TIM_OC3_SetConfig+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10d      	bne.n	8003596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <TIM_OC3_SetConfig+0xd0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40010000 	.word	0x40010000

080035f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <TIM_OC4_SetConfig+0x9c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d109      	bne.n	8003664 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000

08003690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	401a      	ands	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e050      	b.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d013      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10c      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40014000 	.word	0x40014000

080037b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e03d      	b.n	8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003896:	2b84      	cmp	r3, #132	; 0x84
 8003898:	d005      	beq.n	80038a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800389a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	3303      	adds	r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af04      	add	r7, sp, #16
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d020      	beq.n	8003908 <osThreadCreate+0x54>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01c      	beq.n	8003908 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685c      	ldr	r4, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691e      	ldr	r6, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffcf 	bl	8003884 <makeFreeRtosPriority>
 80038e6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038f0:	9202      	str	r2, [sp, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	9100      	str	r1, [sp, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	4632      	mov	r2, r6
 80038fa:	4629      	mov	r1, r5
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 f8ed 	bl	8003adc <xTaskCreateStatic>
 8003902:	4603      	mov	r3, r0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e01c      	b.n	8003942 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685c      	ldr	r4, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003914:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ffb1 	bl	8003884 <makeFreeRtosPriority>
 8003922:	4602      	mov	r2, r0
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4632      	mov	r2, r6
 8003930:	4629      	mov	r1, r5
 8003932:	4620      	mov	r0, r4
 8003934:	f000 f92f 	bl	8003b96 <xTaskCreate>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <osDelay+0x16>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	e000      	b.n	8003964 <osDelay+0x18>
 8003962:	2301      	movs	r3, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fa63 	bl	8003e30 <vTaskDelay>
  
  return osOK;
 800396a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f103 0208 	add.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f103 0208 	add.w	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 0208 	add.w	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d103      	bne.n	8003a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e00c      	b.n	8003a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e002      	b.n	8003a44 <vListInsert+0x2e>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d2f6      	bcs.n	8003a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d103      	bne.n	8003abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1e5a      	subs	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	61fb      	str	r3, [r7, #28]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b22:	23a0      	movs	r3, #160	; 0xa0
 8003b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2ba0      	cmp	r3, #160	; 0xa0
 8003b2a:	d00a      	beq.n	8003b42 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01e      	beq.n	8003b88 <xTaskCreateStatic+0xac>
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b62:	2300      	movs	r3, #0
 8003b64:	9303      	str	r3, [sp, #12]
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	9302      	str	r3, [sp, #8]
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f850 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b82:	f000 f8eb 	bl	8003d5c <prvAddNewTaskToReadyList>
 8003b86:	e001      	b.n	8003b8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b8c:	697b      	ldr	r3, [r7, #20]
	}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3728      	adds	r7, #40	; 0x28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08c      	sub	sp, #48	; 0x30
 8003b9a:	af04      	add	r7, sp, #16
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fd26 	bl	80045fc <pvPortMalloc>
 8003bb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bb8:	20a0      	movs	r0, #160	; 0xa0
 8003bba:	f000 fd1f 	bl	80045fc <pvPortMalloc>
 8003bbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
 8003bcc:	e005      	b.n	8003bda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f000 fde0 	bl	8004794 <vPortFree>
 8003bd4:	e001      	b.n	8003bda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f80e 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f000 f8a9 	bl	8003d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e002      	b.n	8003c16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c16:	69bb      	ldr	r3, [r7, #24]
	}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	617b      	str	r3, [r7, #20]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01f      	beq.n	8003cae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e012      	b.n	8003c9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	7819      	ldrb	r1, [r3, #0]
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	3334      	adds	r3, #52	; 0x34
 8003c84:	460a      	mov	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	d9e9      	bls.n	8003c74 <prvInitialiseNewTask+0x54>
 8003ca0:	e000      	b.n	8003ca4 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ca2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cac:	e003      	b.n	8003cb6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d901      	bls.n	8003cc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cbc:	2306      	movs	r3, #6
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	2200      	movs	r2, #0
 8003cd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fe6c 	bl	80039b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	3318      	adds	r3, #24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fe67 	bl	80039b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	f1c3 0207 	rsb	r2, r3, #7
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	334c      	adds	r3, #76	; 0x4c
 8003d10:	224c      	movs	r2, #76	; 0x4c
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fe5b 	bl	80049d0 <memset>
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <prvInitialiseNewTask+0x130>)
 8003d1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <prvInitialiseNewTask+0x134>)
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <prvInitialiseNewTask+0x138>)
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f000 fb3b 	bl	80043ac <pxPortInitialiseStack>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20004d48 	.word	0x20004d48
 8003d54:	20004db0 	.word	0x20004db0
 8003d58:	20004e18 	.word	0x20004e18

08003d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d64:	f000 fb98 	bl	8004498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <prvAddNewTaskToReadyList+0xb8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <prvAddNewTaskToReadyList+0xb8>)
 8003d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <prvAddNewTaskToReadyList+0xbc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d7a:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <prvAddNewTaskToReadyList+0xbc>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <prvAddNewTaskToReadyList+0xb8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d110      	bne.n	8003daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d88:	f000 fa4a 	bl	8004220 <prvInitialiseTaskLists>
 8003d8c:	e00d      	b.n	8003daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <prvAddNewTaskToReadyList+0xc0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <prvAddNewTaskToReadyList+0xbc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d802      	bhi.n	8003daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <prvAddNewTaskToReadyList+0xbc>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <prvAddNewTaskToReadyList+0xc4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <prvAddNewTaskToReadyList+0xc4>)
 8003db2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <prvAddNewTaskToReadyList+0xc8>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <prvAddNewTaskToReadyList+0xcc>)
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7ff fdf6 	bl	80039ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de2:	f000 fb89 	bl	80044f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <prvAddNewTaskToReadyList+0xc0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvAddNewTaskToReadyList+0xbc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d207      	bcs.n	8003e0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <prvAddNewTaskToReadyList+0xd0>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20001100 	.word	0x20001100
 8003e18:	20001004 	.word	0x20001004
 8003e1c:	2000110c 	.word	0x2000110c
 8003e20:	2000111c 	.word	0x2000111c
 8003e24:	20001108 	.word	0x20001108
 8003e28:	20001008 	.word	0x20001008
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <vTaskDelay+0x60>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <vTaskDelay+0x30>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e60:	f000 f81a 	bl	8003e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e64:	2100      	movs	r1, #0
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa3a 	bl	80042e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e6c:	f000 f822 	bl	8003eb4 <xTaskResumeAll>
 8003e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <vTaskDelay+0x64>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20001124 	.word	0x20001124
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <vTaskSuspendAll+0x18>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <vTaskSuspendAll+0x18>)
 8003ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20001124 	.word	0x20001124

08003eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <xTaskResumeAll+0x114>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	603b      	str	r3, [r7, #0]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ee0:	f000 fada 	bl	8004498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ee4:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <xTaskResumeAll+0x114>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <xTaskResumeAll+0x114>)
 8003eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <xTaskResumeAll+0x114>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d161      	bne.n	8003fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <xTaskResumeAll+0x118>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d05d      	beq.n	8003fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efe:	e02e      	b.n	8003f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <xTaskResumeAll+0x11c>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3318      	adds	r3, #24
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fdbb 	bl	8003a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fdb6 	bl	8003a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <xTaskResumeAll+0x120>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <xTaskResumeAll+0x120>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <xTaskResumeAll+0x124>)
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7ff fd42 	bl	80039ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <xTaskResumeAll+0x128>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <xTaskResumeAll+0x12c>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <xTaskResumeAll+0x11c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1cc      	bne.n	8003f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f6c:	f000 f998 	bl	80042a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xTaskResumeAll+0x130>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f7c:	f000 f836 	bl	8003fec <xTaskIncrementTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <xTaskResumeAll+0x12c>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f1      	bne.n	8003f7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <xTaskResumeAll+0x130>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <xTaskResumeAll+0x12c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <xTaskResumeAll+0x134>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f000 fa9d 	bl	80044f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20001124 	.word	0x20001124
 8003fcc:	20001100 	.word	0x20001100
 8003fd0:	200010c4 	.word	0x200010c4
 8003fd4:	20001108 	.word	0x20001108
 8003fd8:	20001008 	.word	0x20001008
 8003fdc:	20001004 	.word	0x20001004
 8003fe0:	20001114 	.word	0x20001114
 8003fe4:	20001110 	.word	0x20001110
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <xTaskIncrementTick+0x144>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 808e 	bne.w	800411c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004000:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <xTaskIncrementTick+0x148>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004008:	4a4a      	ldr	r2, [pc, #296]	; (8004134 <xTaskIncrementTick+0x148>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d120      	bne.n	8004056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004014:	4b48      	ldr	r3, [pc, #288]	; (8004138 <xTaskIncrementTick+0x14c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <xTaskIncrementTick+0x48>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	603b      	str	r3, [r7, #0]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <xTaskIncrementTick+0x46>
 8004034:	4b40      	ldr	r3, [pc, #256]	; (8004138 <xTaskIncrementTick+0x14c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b40      	ldr	r3, [pc, #256]	; (800413c <xTaskIncrementTick+0x150>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3e      	ldr	r2, [pc, #248]	; (8004138 <xTaskIncrementTick+0x14c>)
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4a3e      	ldr	r2, [pc, #248]	; (800413c <xTaskIncrementTick+0x150>)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <xTaskIncrementTick+0x154>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	4a3c      	ldr	r2, [pc, #240]	; (8004140 <xTaskIncrementTick+0x154>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	f000 f925 	bl	80042a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <xTaskIncrementTick+0x158>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	429a      	cmp	r2, r3
 800405e:	d348      	bcc.n	80040f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <xTaskIncrementTick+0x14c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406a:	4b36      	ldr	r3, [pc, #216]	; (8004144 <xTaskIncrementTick+0x158>)
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	601a      	str	r2, [r3, #0]
					break;
 8004072:	e03e      	b.n	80040f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <xTaskIncrementTick+0x14c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d203      	bcs.n	8004094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <xTaskIncrementTick+0x158>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004092:	e02e      	b.n	80040f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fcf5 	bl	8003a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3318      	adds	r3, #24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fcec 	bl	8003a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <xTaskIncrementTick+0x15c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <xTaskIncrementTick+0x15c>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a1f      	ldr	r2, [pc, #124]	; (800414c <xTaskIncrementTick+0x160>)
 80040d0:	441a      	add	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7ff fc78 	bl	80039ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <xTaskIncrementTick+0x164>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3b9      	bcc.n	8004060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f0:	e7b6      	b.n	8004060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <xTaskIncrementTick+0x164>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4914      	ldr	r1, [pc, #80]	; (800414c <xTaskIncrementTick+0x160>)
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d901      	bls.n	800410e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <xTaskIncrementTick+0x168>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e004      	b.n	8004126 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <xTaskIncrementTick+0x16c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a0d      	ldr	r2, [pc, #52]	; (8004158 <xTaskIncrementTick+0x16c>)
 8004124:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004126:	697b      	ldr	r3, [r7, #20]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20001124 	.word	0x20001124
 8004134:	20001104 	.word	0x20001104
 8004138:	200010bc 	.word	0x200010bc
 800413c:	200010c0 	.word	0x200010c0
 8004140:	20001118 	.word	0x20001118
 8004144:	20001120 	.word	0x20001120
 8004148:	20001108 	.word	0x20001108
 800414c:	20001008 	.word	0x20001008
 8004150:	20001004 	.word	0x20001004
 8004154:	20001114 	.word	0x20001114
 8004158:	20001110 	.word	0x20001110

0800415c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <vTaskSwitchContext+0xac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800416a:	4b28      	ldr	r3, [pc, #160]	; (800420c <vTaskSwitchContext+0xb0>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004170:	e044      	b.n	80041fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <vTaskSwitchContext+0xb0>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <vTaskSwitchContext+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	f1c3 031f 	rsb	r3, r3, #31
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	4921      	ldr	r1, [pc, #132]	; (8004214 <vTaskSwitchContext+0xb8>)
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <vTaskSwitchContext+0x5a>
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <vTaskSwitchContext+0xb8>)
 80041c4:	4413      	add	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3308      	adds	r3, #8
 80041da:	429a      	cmp	r2, r3
 80041dc:	d104      	bne.n	80041e8 <vTaskSwitchContext+0x8c>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <vTaskSwitchContext+0xbc>)
 80041f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <vTaskSwitchContext+0xbc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	334c      	adds	r3, #76	; 0x4c
 80041f8:	4a08      	ldr	r2, [pc, #32]	; (800421c <vTaskSwitchContext+0xc0>)
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	20001124 	.word	0x20001124
 800420c:	20001114 	.word	0x20001114
 8004210:	20001108 	.word	0x20001108
 8004214:	20001008 	.word	0x20001008
 8004218:	20001004 	.word	0x20001004
 800421c:	2000005c 	.word	0x2000005c

08004220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	e00c      	b.n	8004246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <prvInitialiseTaskLists+0x60>)
 8004238:	4413      	add	r3, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fb9a 	bl	8003974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d9ef      	bls.n	800422c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800424c:	480d      	ldr	r0, [pc, #52]	; (8004284 <prvInitialiseTaskLists+0x64>)
 800424e:	f7ff fb91 	bl	8003974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004252:	480d      	ldr	r0, [pc, #52]	; (8004288 <prvInitialiseTaskLists+0x68>)
 8004254:	f7ff fb8e 	bl	8003974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004258:	480c      	ldr	r0, [pc, #48]	; (800428c <prvInitialiseTaskLists+0x6c>)
 800425a:	f7ff fb8b 	bl	8003974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800425e:	480c      	ldr	r0, [pc, #48]	; (8004290 <prvInitialiseTaskLists+0x70>)
 8004260:	f7ff fb88 	bl	8003974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004264:	480b      	ldr	r0, [pc, #44]	; (8004294 <prvInitialiseTaskLists+0x74>)
 8004266:	f7ff fb85 	bl	8003974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <prvInitialiseTaskLists+0x78>)
 800426c:	4a05      	ldr	r2, [pc, #20]	; (8004284 <prvInitialiseTaskLists+0x64>)
 800426e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <prvInitialiseTaskLists+0x7c>)
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <prvInitialiseTaskLists+0x68>)
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20001008 	.word	0x20001008
 8004284:	20001094 	.word	0x20001094
 8004288:	200010a8 	.word	0x200010a8
 800428c:	200010c4 	.word	0x200010c4
 8004290:	200010d8 	.word	0x200010d8
 8004294:	200010ec 	.word	0x200010ec
 8004298:	200010bc 	.word	0x200010bc
 800429c:	200010c0 	.word	0x200010c0

080042a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <prvResetNextTaskUnblockTime+0x38>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvResetNextTaskUnblockTime+0x3c>)
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295
 80042b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042b8:	e008      	b.n	80042cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <prvResetNextTaskUnblockTime+0x38>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <prvResetNextTaskUnblockTime+0x3c>)
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	200010bc 	.word	0x200010bc
 80042dc:	20001120 	.word	0x20001120

080042e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f0:	4b28      	ldr	r3, [pc, #160]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fbc6 	bl	8003a88 <uxListRemove>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2201      	movs	r2, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4013      	ands	r3, r2
 8004316:	4a20      	ldr	r2, [pc, #128]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004318:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d10a      	bne.n	8004338 <prvAddCurrentTaskToDelayedList+0x58>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3304      	adds	r3, #4
 800432e:	4619      	mov	r1, r3
 8004330:	481a      	ldr	r0, [pc, #104]	; (800439c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004332:	f7ff fb4c 	bl	80039ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004336:	e026      	b.n	8004386 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d209      	bcs.n	8004364 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7ff fb5a 	bl	8003a16 <vListInsert>
}
 8004362:	e010      	b.n	8004386 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7ff fb50 	bl	8003a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d202      	bcs.n	8004386 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6013      	str	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20001104 	.word	0x20001104
 8004394:	20001004 	.word	0x20001004
 8004398:	20001108 	.word	0x20001108
 800439c:	200010ec 	.word	0x200010ec
 80043a0:	200010c0 	.word	0x200010c0
 80043a4:	200010bc 	.word	0x200010bc
 80043a8:	20001120 	.word	0x20001120

080043ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3b04      	subs	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b04      	subs	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043dc:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <pxPortInitialiseStack+0x64>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3b14      	subs	r3, #20
 80043e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f06f 0202 	mvn.w	r2, #2
 80043fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b20      	subs	r3, #32
 8004400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004402:	68fb      	ldr	r3, [r7, #12]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	08004415 	.word	0x08004415

08004414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <prvTaskExitError+0x54>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d00a      	beq.n	800443e <prvTaskExitError+0x2a>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <prvTaskExitError+0x28>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60bb      	str	r3, [r7, #8]
}
 8004450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004452:	bf00      	nop
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0fc      	beq.n	8004454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	2000000c 	.word	0x2000000c
 800446c:	00000000 	.word	0x00000000

08004470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	4770      	bx	lr
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst2>:
 8004490:	20001004 	.word	0x20001004
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <vPortEnterCritical+0x58>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <vPortEnterCritical+0x58>)
 80044ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <vPortEnterCritical+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10f      	bne.n	80044e4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vPortEnterCritical+0x5c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <vPortEnterCritical+0x4c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <vPortEnterCritical+0x4a>
	}
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	2000000c 	.word	0x2000000c
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <vPortExitCritical+0x50>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <vPortExitCritical+0x24>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	607b      	str	r3, [r7, #4]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vPortExitCritical+0x50>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3b01      	subs	r3, #1
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <vPortExitCritical+0x50>)
 8004524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <vPortExitCritical+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <vPortExitCritical+0x42>
 800452e:	2300      	movs	r3, #0
 8004530:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	2000000c 	.word	0x2000000c
 800454c:	00000000 	.word	0x00000000

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7ff fdec 	bl	800415c <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	20001004 	.word	0x20001004
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d2:	f7ff fd0b 	bl	8003fec <xTaskIncrementTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <SysTick_Handler+0x40>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f383 8811 	msr	BASEPRI, r3
}
 80045ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004608:	f7ff fc46 	bl	8003e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800460c:	4b5b      	ldr	r3, [pc, #364]	; (800477c <pvPortMalloc+0x180>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004614:	f000 f920 	bl	8004858 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004618:	4b59      	ldr	r3, [pc, #356]	; (8004780 <pvPortMalloc+0x184>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8093 	bne.w	800474c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01d      	beq.n	8004668 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800462c:	2208      	movs	r2, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	3308      	adds	r3, #8
 8004646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <pvPortMalloc+0x6c>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	617b      	str	r3, [r7, #20]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d06e      	beq.n	800474c <pvPortMalloc+0x150>
 800466e:	4b45      	ldr	r3, [pc, #276]	; (8004784 <pvPortMalloc+0x188>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d869      	bhi.n	800474c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004678:	4b43      	ldr	r3, [pc, #268]	; (8004788 <pvPortMalloc+0x18c>)
 800467a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <pvPortMalloc+0x18c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004682:	e004      	b.n	800468e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d903      	bls.n	80046a0 <pvPortMalloc+0xa4>
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f1      	bne.n	8004684 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046a0:	4b36      	ldr	r3, [pc, #216]	; (800477c <pvPortMalloc+0x180>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d050      	beq.n	800474c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2208      	movs	r2, #8
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	2308      	movs	r3, #8
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d91f      	bls.n	800470c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <pvPortMalloc+0xf8>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	613b      	str	r3, [r7, #16]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004706:	69b8      	ldr	r0, [r7, #24]
 8004708:	f000 f908 	bl	800491c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <pvPortMalloc+0x188>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <pvPortMalloc+0x188>)
 8004718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <pvPortMalloc+0x188>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <pvPortMalloc+0x190>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d203      	bcs.n	800472e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <pvPortMalloc+0x188>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <pvPortMalloc+0x190>)
 800472c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <pvPortMalloc+0x184>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	431a      	orrs	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <pvPortMalloc+0x194>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <pvPortMalloc+0x194>)
 800474a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800474c:	f7ff fbb2 	bl	8003eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <pvPortMalloc+0x174>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60fb      	str	r3, [r7, #12]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <pvPortMalloc+0x172>
	return pvReturn;
 8004770:	69fb      	ldr	r3, [r7, #28]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3728      	adds	r7, #40	; 0x28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20004d30 	.word	0x20004d30
 8004780:	20004d44 	.word	0x20004d44
 8004784:	20004d34 	.word	0x20004d34
 8004788:	20004d28 	.word	0x20004d28
 800478c:	20004d38 	.word	0x20004d38
 8004790:	20004d3c 	.word	0x20004d3c

08004794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04d      	beq.n	8004842 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047a6:	2308      	movs	r3, #8
 80047a8:	425b      	negs	r3, r3
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4413      	add	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4b24      	ldr	r3, [pc, #144]	; (800484c <vPortFree+0xb8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <vPortFree+0x44>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <vPortFree+0x62>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <vPortFree+0xb8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01e      	beq.n	8004842 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11a      	bne.n	8004842 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <vPortFree+0xb8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800481c:	f7ff fb3c 	bl	8003e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <vPortFree+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4413      	add	r3, r2
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <vPortFree+0xbc>)
 800482c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800482e:	6938      	ldr	r0, [r7, #16]
 8004830:	f000 f874 	bl	800491c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <vPortFree+0xc0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	4a06      	ldr	r2, [pc, #24]	; (8004854 <vPortFree+0xc0>)
 800483c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800483e:	f7ff fb39 	bl	8003eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20004d44 	.word	0x20004d44
 8004850:	20004d34 	.word	0x20004d34
 8004854:	20004d40 	.word	0x20004d40

08004858 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800485e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004862:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004864:	4b27      	ldr	r3, [pc, #156]	; (8004904 <prvHeapInit+0xac>)
 8004866:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3307      	adds	r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <prvHeapInit+0xac>)
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004890:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <prvHeapInit+0xb0>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004896:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <prvHeapInit+0xb0>)
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048a4:	2208      	movs	r2, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0307 	bic.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a15      	ldr	r2, [pc, #84]	; (800490c <prvHeapInit+0xb4>)
 80048b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ba:	4b14      	ldr	r3, [pc, #80]	; (800490c <prvHeapInit+0xb4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <prvHeapInit+0xb4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <prvHeapInit+0xb4>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <prvHeapInit+0xb8>)
 80048e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a09      	ldr	r2, [pc, #36]	; (8004914 <prvHeapInit+0xbc>)
 80048ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <prvHeapInit+0xc0>)
 80048f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048f6:	601a      	str	r2, [r3, #0]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	20001128 	.word	0x20001128
 8004908:	20004d28 	.word	0x20004d28
 800490c:	20004d30 	.word	0x20004d30
 8004910:	20004d38 	.word	0x20004d38
 8004914:	20004d34 	.word	0x20004d34
 8004918:	20004d44 	.word	0x20004d44

0800491c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <prvInsertBlockIntoFreeList+0xac>)
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e002      	b.n	8004930 <prvInsertBlockIntoFreeList+0x14>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d8f7      	bhi.n	800492a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4413      	add	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d108      	bne.n	800495e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	441a      	add	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d118      	bne.n	80049a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <prvInsertBlockIntoFreeList+0xb0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d00d      	beq.n	800499a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e008      	b.n	80049ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <prvInsertBlockIntoFreeList+0xb0>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e003      	b.n	80049ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d002      	beq.n	80049ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20004d28 	.word	0x20004d28
 80049cc:	20004d30 	.word	0x20004d30

080049d0 <memset>:
 80049d0:	4402      	add	r2, r0
 80049d2:	4603      	mov	r3, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4d0d      	ldr	r5, [pc, #52]	; (8004a18 <__libc_init_array+0x38>)
 80049e4:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e6:	1b64      	subs	r4, r4, r5
 80049e8:	10a4      	asrs	r4, r4, #2
 80049ea:	2600      	movs	r6, #0
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	4d0b      	ldr	r5, [pc, #44]	; (8004a20 <__libc_init_array+0x40>)
 80049f2:	4c0c      	ldr	r4, [pc, #48]	; (8004a24 <__libc_init_array+0x44>)
 80049f4:	f000 f818 	bl	8004a28 <_init>
 80049f8:	1b64      	subs	r4, r4, r5
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	2600      	movs	r6, #0
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	08004ad4 	.word	0x08004ad4
 8004a1c:	08004ad4 	.word	0x08004ad4
 8004a20:	08004ad4 	.word	0x08004ad4
 8004a24:	08004ad8 	.word	0x08004ad8

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
