
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008844  08008844  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800884c  0800884c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800884c  0800884c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08008854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000545c  200000f0  08008944  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000554c  08008944  0002554c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b67  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004678  00000000  00000000  00038cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b1  00000000  00000000  0003e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bc9  00000000  00000000  0003f9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5c2  00000000  00000000  0005957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097e3f  00000000  00000000  00075b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ac0  00000000  00000000  0010d97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011343c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008720 	.word	0x08008720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08008720 	.word	0x08008720

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f006 fdd5 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f006 fdcf 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f006 fdc9 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f006 fdc3 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f006 fdbd 	bl	8007090 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f006 fdb7 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f006 fdb1 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f006 fdab 	bl	8007090 <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f006 fda8 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f006 fda2 	bl	8007090 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f003 fc8f 	bl	8003ec8 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003b0 	.word	0x200003b0

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f003 fc5f 	bl	8003ec8 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003b0 	.word	0x200003b0

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
#include "debounce.h"

void debounce_init(Debounce_t *s, uint8_t activo_en_cero, uint16_t debounce) {
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero) ? 1 : 0;
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t) BTN_LIBRE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t) BTN_PRESIONADO;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:

void debounce_run(Debounce_t *s, uint32_t estado) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

	switch (s->estado) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
	case 0:
		if (boton) {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
			s->debounce_ticks = s->debounce;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
		break;
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
	case 1:
		if (!(--(s->debounce_ticks))) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
			if (boton) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
				s->estado_pin = BTN_PRESIONADO;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 0;
			}
		}
		break;
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
				s->estado = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
		break;
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
	case 2:
		if (!boton) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
			s->debounce_ticks = s->debounce;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
		break;
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
	case 3:
		if (!(--(s->debounce_ticks))) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
			if (!boton) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
				s->estado_pin = BTN_LIBRE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 2;
			}
		}
		break;
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
				s->estado = 2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
		break;
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:

int debounce_flank(Debounce_t *s) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
			&& (s->estado_anterior_pin == BTN_LIBRE);
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <vApplicationGetIdleTaskMemory+0x2c>)
 8000910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <vApplicationGetIdleTaskMemory+0x30>)
 8000916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200001ac 	.word	0x200001ac

08000934 <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <game_set_sensor_reader+0x20>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <game_set_sensor_reader+0x24>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200003ac 	.word	0x200003ac
 8000958:	200004cc 	.word	0x200004cc

0800095c <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f002 f803 	bl	8002970 <lighting_set_output>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <game_fsm>:


void game_fsm(){
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

    movement_fsm();
 8000976:	f000 fbab 	bl	80010d0 <movement_fsm>

    lighting_refresh();
 800097a:	f002 f93d 	bl	8002bf8 <lighting_refresh>

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <game_reset>:

void game_reset(){
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

    engine_reset();
 8000986:	f001 f983 	bl	8001c90 <engine_reset>

 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f002 fae7 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f877 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 f9af 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a2:	f000 f98d 	bl	8000cc0 <MX_DMA_Init>
  MX_TIM1_Init();
 80009a6:	f000 f90b 	bl	8000bc0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80009aa:	f000 f8db 	bl	8000b64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 80009ae:	2200      	movs	r2, #0
 80009b0:	2118      	movs	r1, #24
 80009b2:	2014      	movs	r0, #20
 80009b4:	f005 fd38 	bl	8006428 <xQueueGenericCreate>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <main+0xc8>)
 80009bc:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 80009be:	2200      	movs	r2, #0
 80009c0:	2101      	movs	r1, #1
 80009c2:	2014      	movs	r0, #20
 80009c4:	f005 fd30 	bl	8006428 <xQueueGenericCreate>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <main+0xcc>)
 80009cc:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009ce:	2203      	movs	r2, #3
 80009d0:	2100      	movs	r1, #0
 80009d2:	2001      	movs	r0, #1
 80009d4:	f005 fd28 	bl	8006428 <xQueueGenericCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <main+0xd0>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <main+0xd4>)
 80009e0:	1d3c      	adds	r4, r7, #4
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fb9a 	bl	800612e <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <main+0xd8>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

	xTaskCreate(t_LCD, "t_LCD",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2304      	movs	r3, #4
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	4917      	ldr	r1, [pc, #92]	; (8000a6c <main+0xdc>)
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <main+0xe0>)
 8000a10:	f006 f9f1 	bl	8006df6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 4,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4914      	ldr	r1, [pc, #80]	; (8000a74 <main+0xe4>)
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <main+0xe8>)
 8000a24:	f006 f9e7 	bl	8006df6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <main+0xec>)
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <main+0xf0>)
 8000a38:	f006 f9dd 	bl	8006df6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	490e      	ldr	r1, [pc, #56]	; (8000a84 <main+0xf4>)
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <main+0xf8>)
 8000a4c:	f006 f9d3 	bl	8006df6 <xTaskCreate>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a50:	f005 fb66 	bl	8006120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <main+0xc4>
 8000a56:	bf00      	nop
 8000a58:	200004b0 	.word	0x200004b0
 8000a5c:	200004b4 	.word	0x200004b4
 8000a60:	200004b8 	.word	0x200004b8
 8000a64:	08008770 	.word	0x08008770
 8000a68:	200004ac 	.word	0x200004ac
 8000a6c:	08008738 	.word	0x08008738
 8000a70:	0800164d 	.word	0x0800164d
 8000a74:	08008740 	.word	0x08008740
 8000a78:	080016bd 	.word	0x080016bd
 8000a7c:	0800874c 	.word	0x0800874c
 8000a80:	0800190d 	.word	0x0800190d
 8000a84:	08008758 	.word	0x08008758
 8000a88:	08001801 	.word	0x08001801

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fd56 	bl	800854c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <SystemClock_Config+0xd0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b00:	2310      	movs	r3, #16
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fcde 	bl	80044d8 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b22:	f000 f9d2 	bl	8000eca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2102      	movs	r1, #2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 ff40 	bl	80049c8 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b4e:	f000 f9bc 	bl	8000eca <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	; 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_I2C1_Init+0x54>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x58>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000ba2:	f003 f84d 	bl	8003c40 <HAL_I2C_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bac:	f000 f98d 	bl	8000eca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200003b0 	.word	0x200003b0
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	000186a0 	.word	0x000186a0

08000bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b092      	sub	sp, #72	; 0x48
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2220      	movs	r2, #32
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fcae 	bl	800854c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <MX_TIM1_Init+0xfc>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c04:	2268      	movs	r2, #104	; 0x68
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1a:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c1c:	f004 f9ce 	bl	8004fbc <HAL_TIM_PWM_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f950 	bl	8000eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c36:	4619      	mov	r1, r3
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c3a:	f005 f985 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c44:	f000 f941 	bl	8000eca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	220c      	movs	r2, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c6a:	f004 fd75 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000c74:	f000 f929 	bl	8000eca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c9c:	f005 f9c2 	bl	8006024 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000ca6:	f000 f910 	bl	8000eca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000caa:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000cac:	f000 fbd2 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8000cb0:	bf00      	nop
 8000cb2:	3748      	adds	r7, #72	; 0x48
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000404 	.word	0x20000404
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	203c      	movs	r0, #60	; 0x3c
 8000ce8:	f002 fa38 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000cec:	203c      	movs	r0, #60	; 0x3c
 8000cee:	f002 fa51 	bl	8003194 <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b5c      	ldr	r3, [pc, #368]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b59      	ldr	r3, [pc, #356]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b55      	ldr	r3, [pc, #340]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a4d      	ldr	r2, [pc, #308]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2183      	movs	r1, #131	; 0x83
 8000d8a:	4841      	ldr	r0, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000d8c:	f002 ff3e 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000d96:	483f      	ldr	r0, [pc, #252]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000d98:	f002 ff38 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2141      	movs	r1, #65	; 0x41
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000da2:	f002 ff33 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4834      	ldr	r0, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000dbe:	f002 fd89 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000dc2:	2383      	movs	r3, #131	; 0x83
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000dda:	f002 fd7b 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dde:	2320      	movs	r3, #32
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000df6:	f002 fd6d 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = REED_4_Pin|REED_5_Pin|REED_8_Pin;
 8000dfa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4820      	ldr	r0, [pc, #128]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000e14:	f002 fd5e 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000e30:	f002 fd50 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
                           REED_C_Pin REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_D_Pin
 8000e34:	f246 4338 	movw	r3, #25656	; 0x6438
 8000e38:	617b      	str	r3, [r7, #20]
                          |REED_C_Pin|REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000e4a:	f002 fd43 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
  GPIO_InitStruct.Pin = BOTON_1_Pin|BOTON_2_Pin|BOTON_3_Pin;
 8000e4e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000e64:	f002 fd36 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000e68:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000e7e:	f002 fd29 	bl	80038d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400

08000e9c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f005 f98e 	bl	80061c6 <osDelay>
 8000eaa:	e7fb      	b.n	8000ea4 <StartDefaultTask+0x8>

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f002 f875 	bl	8002fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
}
 8000ed0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed2:	e7fe      	b.n	8000ed2 <Error_Handler+0x8>

08000ed4 <get_last_sensor_change>:
char previous_sensor_state[8];
char new_sensor_state[8];

void (*get_sensors)(char[8]);

piece_change_t get_last_sensor_change(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

    get_sensors(new_sensor_state);
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <get_last_sensor_change+0xe8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000ee0:	4798      	blx	r3

    piece_change_t ret = {0, NONE};
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	713b      	strb	r3, [r7, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e054      	b.n	8000f9a <get_last_sensor_change+0xc6>
        for (int file = 0; file < 8; file++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e04b      	b.n	8000f8e <get_last_sensor_change+0xba>
            char new_state = (new_sensor_state[rank]&(1<<file)) != 0;
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	fa42 f303 	asr.w	r3, r2, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <get_last_sensor_change+0xf0>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fa42 f303 	asr.w	r3, r2, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f36:	7afa      	ldrb	r2, [r7, #11]
 8000f38:	7abb      	ldrb	r3, [r7, #10]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d024      	beq.n	8000f88 <get_last_sensor_change+0xb4>
                ret.square_affected = COORD2SQ(rank, file);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <get_last_sensor_change+0x86>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e000      	b.n	8000f5c <get_last_sensor_change+0x88>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e00b      	b.n	8000f7c <get_last_sensor_change+0xa8>
                    previous_sensor_state[i] = new_sensor_state[i];
 8000f64:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <get_last_sensor_change+0xf0>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	460a      	mov	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddf0      	ble.n	8000f64 <get_last_sensor_change+0x90>
                }
                return ret;
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	813b      	strh	r3, [r7, #8]
 8000f86:	e00d      	b.n	8000fa4 <get_last_sensor_change+0xd0>
        for (int file = 0; file < 8; file++) {
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	ddb0      	ble.n	8000ef6 <get_last_sensor_change+0x22>
    for (int rank = 0; rank < 8; rank++) {
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	dda7      	ble.n	8000ef0 <get_last_sensor_change+0x1c>
            }
        }
    }
    return ret;
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	813b      	strh	r3, [r7, #8]
}
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	7a3a      	ldrb	r2, [r7, #8]
 8000fa8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fac:	7a7a      	ldrb	r2, [r7, #9]
 8000fae:	f362 230f 	bfi	r3, r2, #8, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200004cc 	.word	0x200004cc
 8000fc0:	200004c4 	.word	0x200004c4
 8000fc4:	200004bc 	.word	0x200004bc

08000fc8 <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <is_board_ok+0xb4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1d3a      	adds	r2, r7, #4
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4798      	blx	r3
    char board_ok = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e044      	b.n	800106c <is_board_ok+0xa4>
        for (int file = 0; file < 8; file++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e03b      	b.n	8001060 <is_board_ok+0x98>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	fa42 f303 	asr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d010      	beq.n	8001022 <is_board_ok+0x5a>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fe6b 	bl	8001cec <engine_get_piece>
 8001016:	4603      	mov	r3, r0
 8001018:	2b06      	cmp	r3, #6
 800101a:	d102      	bne.n	8001022 <is_board_ok+0x5a>
                board_ok = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	75fb      	strb	r3, [r7, #23]
 8001020:	e01b      	b.n	800105a <is_board_ok+0x92>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa42 f303 	asr.w	r3, r2, r3
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <is_board_ok+0x92>
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4413      	add	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe4e 	bl	8001cec <engine_get_piece>
 8001050:	4603      	mov	r3, r0
 8001052:	2b06      	cmp	r3, #6
 8001054:	d001      	beq.n	800105a <is_board_ok+0x92>
                board_ok = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b07      	cmp	r3, #7
 8001064:	ddc0      	ble.n	8000fe8 <is_board_ok+0x20>
    for (int rank = 0; rank < 8; rank++) {
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	3301      	adds	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2b07      	cmp	r3, #7
 8001070:	ddb7      	ble.n	8000fe2 <is_board_ok+0x1a>
            }
        }
    }
    return board_ok;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200004cc 	.word	0x200004cc

08001080 <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	e00f      	b.n	80010b8 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d102      	bne.n	80010b2 <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3301      	adds	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbeb      	blt.n	8001098 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010c0:	697b      	ldr	r3, [r7, #20]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <movement_fsm>:

int total_valid_moves;
move_t valid_moves[255];

void movement_fsm(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 80010d6:	f7ff fefd 	bl	8000ed4 <get_last_sensor_change>
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 80010de:	4b6b      	ldr	r3, [pc, #428]	; (800128c <movement_fsm+0x1bc>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	f000 80b8 	beq.w	8001258 <movement_fsm+0x188>
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	f300 80c3 	bgt.w	8001274 <movement_fsm+0x1a4>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <movement_fsm+0x28>
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d03f      	beq.n	8001176 <movement_fsm+0xa6>
        break;



    default:
        break;
 80010f6:	e0bd      	b.n	8001274 <movement_fsm+0x1a4>
        if(piece_change.piece_action == REMOVED){
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d130      	bne.n	8001160 <movement_fsm+0x90>
            movement_state = PIECE_LIFTED_STATE;
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <movement_fsm+0x1bc>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001104:	793a      	ldrb	r2, [r7, #4]
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <movement_fsm+0x1c0>)
 8001108:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves);
 800110a:	4862      	ldr	r0, [pc, #392]	; (8001294 <movement_fsm+0x1c4>)
 800110c:	f000 fdde 	bl	8001ccc <engine_list_moves>
 8001110:	4603      	mov	r3, r0
 8001112:	4a61      	ldr	r2, [pc, #388]	; (8001298 <movement_fsm+0x1c8>)
 8001114:	6013      	str	r3, [r2, #0]
            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <movement_fsm+0x1c0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <movement_fsm+0x1c8>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	495d      	ldr	r1, [pc, #372]	; (8001294 <movement_fsm+0x1c4>)
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffad 	bl	8001080 <get_lifted_moves>
 8001126:	60b8      	str	r0, [r7, #8]
            if(lifted_piece_valid_moves == 0){
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <movement_fsm+0x6c>
                movement_state = ERROR_STATE;
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <movement_fsm+0x1bc>)
 8001130:	2203      	movs	r2, #3
 8001132:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001134:	2002      	movs	r0, #2
 8001136:	f001 fd29 	bl	8002b8c <lighting_set_state>
        break;
 800113a:	e09d      	b.n	8001278 <movement_fsm+0x1a8>
                movement_state = PIECE_LIFTED_STATE;
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <movement_fsm+0x1bc>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 8001142:	4b53      	ldr	r3, [pc, #332]	; (8001290 <movement_fsm+0x1c0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fd30 	bl	8002bac <lighting_piece_lifted_square>
                set_valid_moves(valid_moves, total_valid_moves);
 800114c:	4b52      	ldr	r3, [pc, #328]	; (8001298 <movement_fsm+0x1c8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4850      	ldr	r0, [pc, #320]	; (8001294 <movement_fsm+0x1c4>)
 8001154:	f001 fd3a 	bl	8002bcc <set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 8001158:	2001      	movs	r0, #1
 800115a:	f001 fd17 	bl	8002b8c <lighting_set_state>
        break;
 800115e:	e08b      	b.n	8001278 <movement_fsm+0x1a8>
        else if(piece_change.piece_action == PLACED){
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	2b02      	cmp	r3, #2
 8001164:	f040 8088 	bne.w	8001278 <movement_fsm+0x1a8>
            movement_state = ERROR_STATE;
 8001168:	4b48      	ldr	r3, [pc, #288]	; (800128c <movement_fsm+0x1bc>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 800116e:	2002      	movs	r0, #2
 8001170:	f001 fd0c 	bl	8002b8c <lighting_set_state>
        break;
 8001174:	e080      	b.n	8001278 <movement_fsm+0x1a8>
        if(piece_change.piece_action == PLACED){
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d11a      	bne.n	80011b2 <movement_fsm+0xe2>
            move_played.from = square_lifted;
 800117c:	4b44      	ldr	r3, [pc, #272]	; (8001290 <movement_fsm+0x1c0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 8001182:	793b      	ldrb	r3, [r7, #4]
 8001184:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f000 fd8e 	bl	8001ca8 <engine_move_piece>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]
            if(move_ok){
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <movement_fsm+0xd4>
                movement_state = WAIT_STATE;
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <movement_fsm+0x1bc>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_IDLE_STATE);
 800119c:	2000      	movs	r0, #0
 800119e:	f001 fcf5 	bl	8002b8c <lighting_set_state>
        break;
 80011a2:	e06b      	b.n	800127c <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <movement_fsm+0x1bc>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80011aa:	2002      	movs	r0, #2
 80011ac:	f001 fcee 	bl	8002b8c <lighting_set_state>
        break;
 80011b0:	e064      	b.n	800127c <movement_fsm+0x1ac>
        else if(piece_change.piece_action == REMOVED){
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d161      	bne.n	800127c <movement_fsm+0x1ac>
            total_valid_moves = engine_list_moves(valid_moves);
 80011b8:	4836      	ldr	r0, [pc, #216]	; (8001294 <movement_fsm+0x1c4>)
 80011ba:	f000 fd87 	bl	8001ccc <engine_list_moves>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a35      	ldr	r2, [pc, #212]	; (8001298 <movement_fsm+0x1c8>)
 80011c2:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	e035      	b.n	800123a <movement_fsm+0x16a>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 80011ce:	4931      	ldr	r1, [pc, #196]	; (8001294 <movement_fsm+0x1c4>)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	440b      	add	r3, r1
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <movement_fsm+0x1c0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d127      	bne.n	8001234 <movement_fsm+0x164>
 80011e4:	492b      	ldr	r1, [pc, #172]	; (8001294 <movement_fsm+0x1c4>)
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	3301      	adds	r3, #1
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11c      	bne.n	8001234 <movement_fsm+0x164>
                    captured_piece_is_valid = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fcd3 	bl	8002bac <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 8001206:	2003      	movs	r0, #3
 8001208:	f001 fcc0 	bl	8002b8c <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 800120c:	4921      	ldr	r1, [pc, #132]	; (8001294 <movement_fsm+0x1c4>)
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	440b      	add	r3, r1
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	7859      	ldrb	r1, [r3, #1]
 800121c:	0209      	lsls	r1, r1, #8
 800121e:	430a      	orrs	r2, r1
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431a      	orrs	r2, r3
 8001226:	2300      	movs	r3, #0
 8001228:	f362 0317 	bfi	r3, r2, #0, #24
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fd3b 	bl	8001ca8 <engine_move_piece>
                    break;
 8001232:	e007      	b.n	8001244 <movement_fsm+0x174>
            for(int i = 0; i < total_valid_moves; i++){
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	3301      	adds	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <movement_fsm+0x1c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbc4      	blt.n	80011ce <movement_fsm+0xfe>
            if(!captured_piece_is_valid){
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <movement_fsm+0x1bc>)
 800124c:	2203      	movs	r2, #3
 800124e:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001250:	2002      	movs	r0, #2
 8001252:	f001 fc9b 	bl	8002b8c <lighting_set_state>
        break;
 8001256:	e011      	b.n	800127c <movement_fsm+0x1ac>
        board_ok = is_board_ok();
 8001258:	f7ff feb6 	bl	8000fc8 <is_board_ok>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
        if(board_ok){
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00c      	beq.n	8001280 <movement_fsm+0x1b0>
            movement_state = WAIT_STATE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <movement_fsm+0x1bc>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 800126c:	2000      	movs	r0, #0
 800126e:	f001 fc8d 	bl	8002b8c <lighting_set_state>
        break;
 8001272:	e005      	b.n	8001280 <movement_fsm+0x1b0>
        break;
 8001274:	bf00      	nop
 8001276:	e004      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 8001280:	bf00      	nop
    }
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004d0 	.word	0x200004d0
 8001290:	200004d1 	.word	0x200004d1
 8001294:	200004d8 	.word	0x200004d8
 8001298:	200004d4 	.word	0x200004d4

0800129c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x54>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_MspInit+0x54>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x54>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x54>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_MspInit+0x54>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_MspInit+0x54>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	f06f 0001 	mvn.w	r0, #1
 80012e2:	f001 ff3b 	bl	800315c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_I2C_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12c      	bne.n	8001370 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_I2C_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001344:	2304      	movs	r3, #4
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <HAL_I2C_MspInit+0x8c>)
 8001350:	f002 fac0 	bl	80038d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_I2C_MspInit+0x88>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_I2C_MspInit+0x88>)
 800135e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40005400 	.word	0x40005400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400

08001384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <HAL_TIM_PWM_MspInit+0xc0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d151      	bne.n	800143a <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_TIM_PWM_MspInit+0xcc>)
 80013b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013f8:	f001 feda 	bl	80031b0 <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001402:	f7ff fd62 	bl	8000eca <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	201a      	movs	r0, #26
 8001430:	f001 fe94 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001434:	201a      	movs	r0, #26
 8001436:	f001 fead 	bl	8003194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800
 800144c:	2000044c 	.word	0x2000044c
 8001450:	40026470 	.word	0x40026470

08001454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d11e      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_TIM_MspPostInit+0x70>)
 80014b0:	f002 fa10 	bl	80038d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_InitTick+0xe8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_InitTick+0xe8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_InitTick+0xe8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f4:	f107 0210 	add.w	r2, r7, #16
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fc6e 	bl	8004de0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800150e:	f003 fc53 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 8001512:	6378      	str	r0, [r7, #52]	; 0x34
 8001514:	e004      	b.n	8001520 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001516:	f003 fc4f 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 800151a:	4603      	mov	r3, r0
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_InitTick+0xec>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	3b01      	subs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_InitTick+0xf0>)
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_InitTick+0xf0>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_InitTick+0xf0>)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_InitTick+0xf0>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_InitTick+0xf0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_InitTick+0xf0>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_InitTick+0xf0>)
 8001558:	f003 fc74 	bl	8004e44 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11b      	bne.n	80015a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <HAL_InitTick+0xf0>)
 800156c:	f003 fcc4 	bl	8004ef8 <HAL_TIM_Base_Start_IT>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157a:	2b00      	cmp	r3, #0
 800157c:	d111      	bne.n	80015a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800157e:	201c      	movs	r0, #28
 8001580:	f001 fe08 	bl	8003194 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d808      	bhi.n	800159c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800158a:	2200      	movs	r2, #0
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	201c      	movs	r0, #28
 8001590:	f001 fde4 	bl	800315c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_InitTick+0xf4>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e002      	b.n	80015a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3738      	adds	r7, #56	; 0x38
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	200007d8 	.word	0x200007d8
 80015bc:	20000094 	.word	0x20000094

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80015f2:	f003 ffa9 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000404 	.word	0x20000404

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f003 ff9f 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200007d8 	.word	0x200007d8

08001614 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA2_Stream4_IRQHandler+0x10>)
 800161a:	f001 fef1 	bl	8003400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000044c 	.word	0x2000044c

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <t_LCD>:

extern TIM_HandleTypeDef htim1;

void tareas_error_handler(uint8_t);

void t_LCD(void*) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <t_LCD+0x6c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <t_LCD+0x16>
		tareas_error_handler(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f000 f983 	bl	8001968 <tareas_error_handler>
	}

	lcd_init();
 8001662:	f7fe ff3b 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <t_LCD+0x6c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	f04f 32ff 	mov.w	r2, #4294967295
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f830 	bl	80066d8 <xQueueReceive>
		switch (msg.type) {
 8001678:	7a3b      	ldrb	r3, [r7, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d014      	beq.n	80016a8 <t_LCD+0x5c>
 800167e:	2b02      	cmp	r3, #2
 8001680:	dcf1      	bgt.n	8001666 <t_LCD+0x1a>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <t_LCD+0x40>
 8001686:	2b01      	cmp	r3, #1
 8001688:	d009      	beq.n	800169e <t_LCD+0x52>
 800168a:	e014      	b.n	80016b6 <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 800168c:	7a7b      	ldrb	r3, [r7, #9]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff62 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fcfa 	bl	8007090 <vTaskDelay>
			break;
 800169c:	e00b      	b.n	80016b6 <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 800169e:	7a7b      	ldrb	r3, [r7, #9]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff89 	bl	80005b8 <lcd_send_data>
			break;
 80016a6:	e006      	b.n	80016b6 <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	3301      	adds	r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ffb2 	bl	8000618 <lcd_send_string>
			break;
 80016b4:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80016b6:	e7d6      	b.n	8001666 <t_LCD+0x1a>
 80016b8:	200004b0 	.word	0x200004b0

080016bc <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	2202      	movs	r2, #2
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f856 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2202      	movs	r2, #2
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f84f 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2202      	movs	r2, #2
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f848 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 80016ee:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <t_Botones+0x13c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <t_Botones+0x40>
		tareas_error_handler(4);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f000 f936 	bl	8001968 <tareas_error_handler>
	}

	uint8_t msg = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	483e      	ldr	r0, [pc, #248]	; (80017fc <t_Botones+0x140>)
 8001704:	f002 fa6a 	bl	8003bdc <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f85a 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	4837      	ldr	r0, [pc, #220]	; (80017fc <t_Botones+0x140>)
 800171e:	f002 fa5d 	bl	8003bdc <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f84d 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4831      	ldr	r0, [pc, #196]	; (80017fc <t_Botones+0x140>)
 8001738:	f002 fa50 	bl	8003bdc <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f840 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) {
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f8bf 	bl	80008d4 <debounce_flank>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d012      	beq.n	8001782 <t_Botones+0xc6>
			msg = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <t_Botones+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f9a3 	bl	8006ab0 <uxQueueMessagesWaiting>
 800176a:	4603      	mov	r3, r0
 800176c:	2b13      	cmp	r3, #19
 800176e:	d808      	bhi.n	8001782 <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <t_Botones+0x13c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	f107 010f 	add.w	r1, r7, #15
 8001778:	2300      	movs	r3, #0
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	f004 fead 	bl	80064dc <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) {
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f8a4 	bl	80008d4 <debounce_flank>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <t_Botones+0xfc>
			msg = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <t_Botones+0x13c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 f988 	bl	8006ab0 <uxQueueMessagesWaiting>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b13      	cmp	r3, #19
 80017a4:	d808      	bhi.n	80017b8 <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <t_Botones+0x13c>)
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f107 010f 	add.w	r1, r7, #15
 80017ae:	2300      	movs	r3, #0
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	f004 fe92 	bl	80064dc <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) {
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f889 	bl	80008d4 <debounce_flank>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <t_Botones+0x132>
			msg = 3;
 80017c8:	2303      	movs	r3, #3
 80017ca:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <t_Botones+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f96d 	bl	8006ab0 <uxQueueMessagesWaiting>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b13      	cmp	r3, #19
 80017da:	d808      	bhi.n	80017ee <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <t_Botones+0x13c>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	f107 010f 	add.w	r1, r7, #15
 80017e4:	2300      	movs	r3, #0
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	f004 fe77 	bl	80064dc <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 80017ee:	200a      	movs	r0, #10
 80017f0:	f005 fc4e 	bl	8007090 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 80017f4:	e784      	b.n	8001700 <t_Botones+0x44>
 80017f6:	bf00      	nop
 80017f8:	200004b4 	.word	0x200004b4
 80017fc:	40020800 	.word	0x40020800

08001800 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0
 8001806:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <t_userLoop+0xf4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <t_userLoop+0x16>
		tareas_error_handler(2);
 8001810:	2002      	movs	r0, #2
 8001812:	f000 f8a9 	bl	8001968 <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <t_userLoop+0xf8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <t_userLoop+0x24>
		tareas_error_handler(4);
 800181e:	2004      	movs	r0, #4
 8001820:	f000 f8a2 	bl	8001968 <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <t_userLoop+0xfc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <t_userLoop+0x32>
		tareas_error_handler(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 f89b 	bl	8001968 <tareas_error_handler>
	}

	user_htim1 = &htim1;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <t_userLoop+0x100>)
 8001834:	4a33      	ldr	r2, [pc, #204]	; (8001904 <t_userLoop+0x104>)
 8001836:	601a      	str	r2, [r3, #0]
	user_init();
 8001838:	f000 f89c 	bl	8001974 <user_init>

	LCDQueueItem_t msg = { 0 };
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]

	ws2812_init();
 800184e:	f000 ffd5 	bl	80027fc <ws2812_init>

	msg = lcd_msg_clear();
 8001852:	463b      	mov	r3, r7
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ff2c 	bl	80006b2 <lcd_msg_clear>
 800185a:	f107 0420 	add.w	r4, r7, #32
 800185e:	463d      	mov	r5, r7
 8001860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001864:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001868:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <t_userLoop+0xfc>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f107 0120 	add.w	r1, r7, #32
 8001874:	2300      	movs	r3, #0
 8001876:	f04f 32ff 	mov.w	r2, #4294967295
 800187a:	f004 fe2f 	bl	80064dc <xQueueGenericSend>
	msg = lcd_msg_first_line();
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe ff38 	bl	80006f6 <lcd_msg_first_line>
 8001886:	f107 0420 	add.w	r4, r7, #32
 800188a:	463d      	mov	r5, r7
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001894:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <t_userLoop+0xfc>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f107 0120 	add.w	r1, r7, #32
 80018a0:	2300      	movs	r3, #0
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295
 80018a6:	f004 fe19 	bl	80064dc <xQueueGenericSend>
	msg = lcd_msg_from_string("Ajedrez Inteligente");
 80018aa:	463b      	mov	r3, r7
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <t_userLoop+0x108>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fec7 	bl	8000642 <lcd_msg_from_string>
 80018b4:	f107 0420 	add.w	r4, r7, #32
 80018b8:	463d      	mov	r5, r7
 80018ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018c2:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <t_userLoop+0xfc>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f107 0120 	add.w	r1, r7, #32
 80018ce:	2300      	movs	r3, #0
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	f004 fe02 	bl	80064dc <xQueueGenericSend>

	while (1) {
		user_loop();
 80018d8:	f000 f980 	bl	8001bdc <user_loop>
		xSemaphoreGive(ws2812_sem);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <t_userLoop+0xf4>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	f004 fdf9 	bl	80064dc <xQueueGenericSend>
		//ws2812_update_leds_from_data(user_htim1);
		vTaskDelay(33); //30 fps aprox
 80018ea:	2021      	movs	r0, #33	; 0x21
 80018ec:	f005 fbd0 	bl	8007090 <vTaskDelay>
		user_loop();
 80018f0:	e7f2      	b.n	80018d8 <t_userLoop+0xd8>
 80018f2:	bf00      	nop
 80018f4:	200004b8 	.word	0x200004b8
 80018f8:	200004b4 	.word	0x200004b4
 80018fc:	200004b0 	.word	0x200004b0
 8001900:	20000820 	.word	0x20000820
 8001904:	20000404 	.word	0x20000404
 8001908:	0800878c 	.word	0x0800878c

0800190c <t_WS2812>:
	}
}

void t_WS2812(void*) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <t_WS2812+0x50>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <t_WS2812+0x16>
		tareas_error_handler(2);
 800191c:	2002      	movs	r0, #2
 800191e:	f000 f823 	bl	8001968 <tareas_error_handler>
	}

	ws2812_init();
 8001922:	f000 ff6b 	bl	80027fc <ws2812_init>

	while (1) {

		if (xSemaphoreTake(ws2812_sem,portMAX_DELAY) != pdTRUE) {
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <t_WS2812+0x50>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	4618      	mov	r0, r3
 8001930:	f004 ffb2 	bl	8006898 <xQueueSemaphoreTake>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d002      	beq.n	8001940 <t_WS2812+0x34>
			tareas_error_handler(3);
 800193a:	2003      	movs	r0, #3
 800193c:	f000 f814 	bl	8001968 <tareas_error_handler>
		}

		ws2812_update_leds_from_data(user_htim1);
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <t_WS2812+0x54>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fffb 	bl	8002940 <ws2812_update_leds_from_data>

		while (!ws2812_finished_dma) {
 800194a:	e002      	b.n	8001952 <t_WS2812+0x46>
			vTaskDelay(5);
 800194c:	2005      	movs	r0, #5
 800194e:	f005 fb9f 	bl	8007090 <vTaskDelay>
		while (!ws2812_finished_dma) {
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <t_WS2812+0x58>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f8      	beq.n	800194c <t_WS2812+0x40>
		if (xSemaphoreTake(ws2812_sem,portMAX_DELAY) != pdTRUE) {
 800195a:	e7e4      	b.n	8001926 <t_WS2812+0x1a>
 800195c:	200004b8 	.word	0x200004b8
 8001960:	20000820 	.word	0x20000820
 8001964:	200016a0 	.word	0x200016a0

08001968 <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(uint8_t error) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	while (1) {
		UNUSED(error);
 8001972:	e7fe      	b.n	8001972 <tareas_error_handler+0xa>

08001974 <user_init>:

TIM_HandleTypeDef *user_htim1;
extern xQueueHandle buttons_queue;
extern xQueueHandle lcd_queue;

void user_init() {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <user_init+0x18>)
 800197a:	f7fe ffdb 	bl	8000934 <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <user_init+0x1c>)
 8001980:	f7fe ffec 	bl	800095c <game_set_led_output_array>

	game_reset();
 8001984:	f7fe fffd 	bl	8000982 <game_reset>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08002c95 	.word	0x08002c95
 8001990:	200015a0 	.word	0x200015a0

08001994 <get_promotion>:

piece_t get_promotion() {
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 80019b6:	463b      	mov	r3, r7
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fe7a 	bl	80006b2 <lcd_msg_clear>
 80019be:	f107 041c 	add.w	r4, r7, #28
 80019c2:	463d      	mov	r5, r7
 80019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019cc:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80019d0:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <get_promotion+0x22c>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f107 011c 	add.w	r1, r7, #28
 80019d8:	2300      	movs	r3, #0
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	f004 fd7d 	bl	80064dc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 80019e2:	463b      	mov	r3, r7
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fe86 	bl	80006f6 <lcd_msg_first_line>
 80019ea:	f107 041c 	add.w	r4, r7, #28
 80019ee:	463d      	mov	r5, r7
 80019f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019f8:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <get_promotion+0x22c>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f107 011c 	add.w	r1, r7, #28
 8001a04:	2300      	movs	r3, #0
 8001a06:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0a:	f004 fd67 	bl	80064dc <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 8001a0e:	463b      	mov	r3, r7
 8001a10:	496c      	ldr	r1, [pc, #432]	; (8001bc4 <get_promotion+0x230>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fe15 	bl	8000642 <lcd_msg_from_string>
 8001a18:	f107 041c 	add.w	r4, r7, #28
 8001a1c:	463d      	mov	r5, r7
 8001a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a26:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <get_promotion+0x22c>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	f107 011c 	add.w	r1, r7, #28
 8001a32:	2300      	movs	r3, #0
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	f004 fd50 	bl	80064dc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fe7b 	bl	800073a <lcd_msg_second_line>
 8001a44:	f107 041c 	add.w	r4, r7, #28
 8001a48:	463d      	mov	r5, r7
 8001a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a52:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001a56:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <get_promotion+0x22c>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	f107 011c 	add.w	r1, r7, #28
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	f004 fd3a 	bl	80064dc <xQueueGenericSend>
		switch (piece) {
 8001a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d86a      	bhi.n	8001b48 <get_promotion+0x1b4>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <get_promotion+0xe4>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001ab9 	.word	0x08001ab9
 8001a80:	08001b19 	.word	0x08001b19
 8001a84:	08001ae9 	.word	0x08001ae9
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 8001a88:	463b      	mov	r3, r7
 8001a8a:	494f      	ldr	r1, [pc, #316]	; (8001bc8 <get_promotion+0x234>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fdd8 	bl	8000642 <lcd_msg_from_string>
 8001a92:	f107 041c 	add.w	r4, r7, #28
 8001a96:	463d      	mov	r5, r7
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aa0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <get_promotion+0x22c>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 011c 	add.w	r1, r7, #28
 8001aac:	2300      	movs	r3, #0
 8001aae:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab2:	f004 fd13 	bl	80064dc <xQueueGenericSend>
			break;
 8001ab6:	e047      	b.n	8001b48 <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4944      	ldr	r1, [pc, #272]	; (8001bcc <get_promotion+0x238>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fdc0 	bl	8000642 <lcd_msg_from_string>
 8001ac2:	f107 041c 	add.w	r4, r7, #28
 8001ac6:	463d      	mov	r5, r7
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ad0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <get_promotion+0x22c>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f107 011c 	add.w	r1, r7, #28
 8001adc:	2300      	movs	r3, #0
 8001ade:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae2:	f004 fcfb 	bl	80064dc <xQueueGenericSend>
			break;
 8001ae6:	e02f      	b.n	8001b48 <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <get_promotion+0x23c>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fda8 	bl	8000642 <lcd_msg_from_string>
 8001af2:	f107 041c 	add.w	r4, r7, #28
 8001af6:	463d      	mov	r5, r7
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b00:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <get_promotion+0x22c>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f107 011c 	add.w	r1, r7, #28
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	f004 fce3 	bl	80064dc <xQueueGenericSend>
			break;
 8001b16:	e017      	b.n	8001b48 <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8001b18:	463b      	mov	r3, r7
 8001b1a:	492e      	ldr	r1, [pc, #184]	; (8001bd4 <get_promotion+0x240>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd90 	bl	8000642 <lcd_msg_from_string>
 8001b22:	f107 041c 	add.w	r4, r7, #28
 8001b26:	463d      	mov	r5, r7
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b30:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <get_promotion+0x22c>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f107 011c 	add.w	r1, r7, #28
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b42:	f004 fccb 	bl	80064dc <xQueueGenericSend>
			break;
 8001b46:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <get_promotion+0x244>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f107 011b 	add.w	r1, r7, #27
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fdbf 	bl	80066d8 <xQueueReceive>

		switch (button) {
 8001b5a:	7efb      	ldrb	r3, [r7, #27]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d023      	beq.n	8001ba8 <get_promotion+0x214>
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	dc22      	bgt.n	8001baa <get_promotion+0x216>
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d010      	beq.n	8001b8a <get_promotion+0x1f6>
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d11e      	bne.n	8001baa <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8001b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b70:	3301      	adds	r3, #1
 8001b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 8001b76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d902      	bls.n	8001b84 <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	76fb      	strb	r3, [r7, #27]
			break;
 8001b88:	e00f      	b.n	8001baa <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 8001b8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 8001b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	76fb      	strb	r3, [r7, #27]
			break;
 8001ba6:	e000      	b.n	8001baa <get_promotion+0x216>
			break;
 8001ba8:	bf00      	nop
		}

		if (button)
 8001baa:	7efb      	ldrb	r3, [r7, #27]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d100      	bne.n	8001bb2 <get_promotion+0x21e>
		msg = lcd_msg_clear();
 8001bb0:	e701      	b.n	80019b6 <get_promotion+0x22>
			break;
 8001bb2:	bf00      	nop
	}

	return piece;
 8001bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3738      	adds	r7, #56	; 0x38
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc0:	200004b0 	.word	0x200004b0
 8001bc4:	080087a0 	.word	0x080087a0
 8001bc8:	080087b0 	.word	0x080087b0
 8001bcc:	080087bc 	.word	0x080087bc
 8001bd0:	080087c8 	.word	0x080087c8
 8001bd4:	080087d4 	.word	0x080087d4
 8001bd8:	200004b4 	.word	0x200004b4

08001bdc <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	game_fsm();
 8001be0:	f7fe fec7 	bl	8000972 <game_fsm>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e00d      	b.n	8001c12 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3380      	adds	r3, #128	; 0x80
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	2206      	movs	r2, #6
 8001c0a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b7f      	cmp	r3, #127	; 0x7f
 8001c16:	ddee      	ble.n	8001bf6 <clear_game_state+0xe>
    }
    return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	4608      	mov	r0, r1
 8001c30:	4611      	mov	r1, r2
 8001c32:	461a      	mov	r2, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	70fb      	strb	r3, [r7, #3]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70bb      	strb	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	78f9      	ldrb	r1, [r7, #3]
 8001c46:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	78ba      	ldrb	r2, [r7, #2]
 8001c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	2106      	movs	r1, #6
 8001c74:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8001c94:	4902      	ldr	r1, [pc, #8]	; (8001ca0 <engine_reset+0x10>)
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <engine_reset+0x14>)
 8001c98:	f000 f838 	bl	8001d0c <load_fen>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	080087e0 	.word	0x080087e0
 8001ca4:	20000824 	.word	0x20000824

08001ca8 <engine_move_piece>:

char engine_move_piece(move_t move){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    return make_move(&game_state, move, 1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <engine_move_piece+0x20>)
 8001cb6:	f000 f9d7 	bl	8002068 <make_move>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000824 	.word	0x20000824

08001ccc <engine_list_moves>:

int engine_list_moves(move_t * moves){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    return generate_moves(&game_state, moves);
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <engine_list_moves+0x1c>)
 8001cd8:	f000 fae0 	bl	800229c <generate_moves>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000824 	.word	0x20000824

08001cec <engine_get_piece>:

char engine_get_piece(uint8_t square){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    return game_state.pieces[square];
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <engine_get_piece+0x1c>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000824 	.word	0x20000824

08001d0c <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff66 	bl	8001be8 <clear_game_state>

    char * f = (char *)fen;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8001d24:	2307      	movs	r3, #7
 8001d26:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3b2f      	subs	r3, #47	; 0x2f
 8001d2e:	2b43      	cmp	r3, #67	; 0x43
 8001d30:	f200 8166 	bhi.w	8002000 <load_fen+0x2f4>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <load_fen+0x30>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001fb5 	.word	0x08001fb5
 8001d40:	08002001 	.word	0x08002001
 8001d44:	08001fc1 	.word	0x08001fc1
 8001d48:	08001fc9 	.word	0x08001fc9
 8001d4c:	08001fd1 	.word	0x08001fd1
 8001d50:	08001fd9 	.word	0x08001fd9
 8001d54:	08001fe1 	.word	0x08001fe1
 8001d58:	08001fe9 	.word	0x08001fe9
 8001d5c:	08001ff1 	.word	0x08001ff1
 8001d60:	08001ff9 	.word	0x08001ff9
 8001d64:	08002001 	.word	0x08002001
 8001d68:	08002001 	.word	0x08002001
 8001d6c:	08002001 	.word	0x08002001
 8001d70:	08002001 	.word	0x08002001
 8001d74:	08002001 	.word	0x08002001
 8001d78:	08002001 	.word	0x08002001
 8001d7c:	08002001 	.word	0x08002001
 8001d80:	08002001 	.word	0x08002001
 8001d84:	08002001 	.word	0x08002001
 8001d88:	08001ea7 	.word	0x08001ea7
 8001d8c:	08002001 	.word	0x08002001
 8001d90:	08002001 	.word	0x08002001
 8001d94:	08002001 	.word	0x08002001
 8001d98:	08002001 	.word	0x08002001
 8001d9c:	08002001 	.word	0x08002001
 8001da0:	08002001 	.word	0x08002001
 8001da4:	08002001 	.word	0x08002001
 8001da8:	08002001 	.word	0x08002001
 8001dac:	08001e4d 	.word	0x08001e4d
 8001db0:	08002001 	.word	0x08002001
 8001db4:	08002001 	.word	0x08002001
 8001db8:	08001ec5 	.word	0x08001ec5
 8001dbc:	08002001 	.word	0x08002001
 8001dc0:	08001ee3 	.word	0x08001ee3
 8001dc4:	08001e6b 	.word	0x08001e6b
 8001dc8:	08001e89 	.word	0x08001e89
 8001dcc:	08002001 	.word	0x08002001
 8001dd0:	08002001 	.word	0x08002001
 8001dd4:	08002001 	.word	0x08002001
 8001dd8:	08002001 	.word	0x08002001
 8001ddc:	08002001 	.word	0x08002001
 8001de0:	08002001 	.word	0x08002001
 8001de4:	08002001 	.word	0x08002001
 8001de8:	08002001 	.word	0x08002001
 8001dec:	08002001 	.word	0x08002001
 8001df0:	08002001 	.word	0x08002001
 8001df4:	08002001 	.word	0x08002001
 8001df8:	08002001 	.word	0x08002001
 8001dfc:	08002001 	.word	0x08002001
 8001e00:	08002001 	.word	0x08002001
 8001e04:	08002001 	.word	0x08002001
 8001e08:	08001f5b 	.word	0x08001f5b
 8001e0c:	08002001 	.word	0x08002001
 8001e10:	08002001 	.word	0x08002001
 8001e14:	08002001 	.word	0x08002001
 8001e18:	08002001 	.word	0x08002001
 8001e1c:	08002001 	.word	0x08002001
 8001e20:	08002001 	.word	0x08002001
 8001e24:	08002001 	.word	0x08002001
 8001e28:	08002001 	.word	0x08002001
 8001e2c:	08001f01 	.word	0x08001f01
 8001e30:	08002001 	.word	0x08002001
 8001e34:	08002001 	.word	0x08002001
 8001e38:	08001f79 	.word	0x08001f79
 8001e3c:	08002001 	.word	0x08002001
 8001e40:	08001f97 	.word	0x08001f97
 8001e44:	08001f1f 	.word	0x08001f1f
 8001e48:	08001f3d 	.word	0x08001f3d
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8001e4c:	7abb      	ldrb	r3, [r7, #10]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	4413      	add	r3, r2
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fee2 	bl	8001c26 <place_piece>
            col++;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	3301      	adds	r3, #1
 8001e66:	72fb      	strb	r3, [r7, #11]
            break;
 8001e68:	e0ca      	b.n	8002000 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8001e6a:	7abb      	ldrb	r3, [r7, #10]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	4413      	add	r3, r2
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2200      	movs	r2, #0
 8001e78:	2101      	movs	r1, #1
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fed3 	bl	8001c26 <place_piece>
            col++;
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	3301      	adds	r3, #1
 8001e84:	72fb      	strb	r3, [r7, #11]
            break;
 8001e86:	e0bb      	b.n	8002000 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8001e88:	7abb      	ldrb	r3, [r7, #10]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	2102      	movs	r1, #2
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fec4 	bl	8001c26 <place_piece>
            col++;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	72fb      	strb	r3, [r7, #11]
            break;
 8001ea4:	e0ac      	b.n	8002000 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 8001ea6:	7abb      	ldrb	r3, [r7, #10]
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff feb5 	bl	8001c26 <place_piece>
            col++;
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	72fb      	strb	r3, [r7, #11]
            break;
 8001ec2:	e09d      	b.n	8002000 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8001ec4:	7abb      	ldrb	r3, [r7, #10]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fea6 	bl	8001c26 <place_piece>
            col++;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	3301      	adds	r3, #1
 8001ede:	72fb      	strb	r3, [r7, #11]
            break;
 8001ee0:	e08e      	b.n	8002000 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 8001ee2:	7abb      	ldrb	r3, [r7, #10]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fe97 	bl	8001c26 <place_piece>
            col++;
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	3301      	adds	r3, #1
 8001efc:	72fb      	strb	r3, [r7, #11]
            break;
 8001efe:	e07f      	b.n	8002000 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8001f00:	7abb      	ldrb	r3, [r7, #10]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fe88 	bl	8001c26 <place_piece>
            col++;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	72fb      	strb	r3, [r7, #11]
            break;
 8001f1c:	e070      	b.n	8002000 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 8001f1e:	7abb      	ldrb	r3, [r7, #10]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe79 	bl	8001c26 <place_piece>
            col++;
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	3301      	adds	r3, #1
 8001f38:	72fb      	strb	r3, [r7, #11]
            break;
 8001f3a:	e061      	b.n	8002000 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8001f3c:	7abb      	ldrb	r3, [r7, #10]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	4413      	add	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fe6a 	bl	8001c26 <place_piece>
            col++;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	3301      	adds	r3, #1
 8001f56:	72fb      	strb	r3, [r7, #11]
            break;
 8001f58:	e052      	b.n	8002000 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 8001f5a:	7abb      	ldrb	r3, [r7, #10]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2201      	movs	r2, #1
 8001f68:	2103      	movs	r1, #3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fe5b 	bl	8001c26 <place_piece>
            col++;
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	3301      	adds	r3, #1
 8001f74:	72fb      	strb	r3, [r7, #11]
            break;
 8001f76:	e043      	b.n	8002000 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8001f78:	7abb      	ldrb	r3, [r7, #10]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	4413      	add	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	2104      	movs	r1, #4
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe4c 	bl	8001c26 <place_piece>
            col++;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	3301      	adds	r3, #1
 8001f92:	72fb      	strb	r3, [r7, #11]
            break;
 8001f94:	e034      	b.n	8002000 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 8001f96:	7abb      	ldrb	r3, [r7, #10]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2105      	movs	r1, #5
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe3d 	bl	8001c26 <place_piece>
            col++;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	72fb      	strb	r3, [r7, #11]
            break;
 8001fb2:	e025      	b.n	8002000 <load_fen+0x2f4>
        case '/':
            row--;
 8001fb4:	7abb      	ldrb	r3, [r7, #10]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	72bb      	strb	r3, [r7, #10]
            col=0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	72fb      	strb	r3, [r7, #11]
            break;
 8001fbe:	e01f      	b.n	8002000 <load_fen+0x2f4>
        case '1':
            col+=1;
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	72fb      	strb	r3, [r7, #11]
            break;
 8001fc6:	e01b      	b.n	8002000 <load_fen+0x2f4>
        case '2':
            col+=2;
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	72fb      	strb	r3, [r7, #11]
            break;
 8001fce:	e017      	b.n	8002000 <load_fen+0x2f4>
        case '3':
            col+=3;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	72fb      	strb	r3, [r7, #11]
            break;
 8001fd6:	e013      	b.n	8002000 <load_fen+0x2f4>
        case '4':
            col+=4;
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	72fb      	strb	r3, [r7, #11]
            break;
 8001fde:	e00f      	b.n	8002000 <load_fen+0x2f4>
        case '5':
            col+=5;
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	3305      	adds	r3, #5
 8001fe4:	72fb      	strb	r3, [r7, #11]
            break;
 8001fe6:	e00b      	b.n	8002000 <load_fen+0x2f4>
        case '6':
            col+=6;
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	3306      	adds	r3, #6
 8001fec:	72fb      	strb	r3, [r7, #11]
            break;
 8001fee:	e007      	b.n	8002000 <load_fen+0x2f4>
        case '7':
            col+=7;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	3307      	adds	r3, #7
 8001ff4:	72fb      	strb	r3, [r7, #11]
            break;
 8001ff6:	e003      	b.n	8002000 <load_fen+0x2f4>
        case '8':
            col+=8;
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	72fb      	strb	r3, [r7, #11]
            break;
 8001ffe:	bf00      	nop
        };

        f++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b20      	cmp	r3, #32
 800200c:	f47f ae8c 	bne.w	8001d28 <load_fen+0x1c>

    f++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b77      	cmp	r3, #119	; 0x77
 800201c:	d104      	bne.n	8002028 <load_fen+0x31c>
        state->side_to_move = WHITE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8002026:	e003      	b.n	8002030 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3302      	adds	r3, #2
 8002034:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b20      	cmp	r3, #32
 8002042:	d1f8      	bne.n	8002036 <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b20      	cmp	r3, #32
 8002056:	d1f8      	bne.n	800204a <load_fen+0x33e>
    f++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800206e:	af00      	add	r7, sp, #0
 8002070:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002074:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002078:	6018      	str	r0, [r3, #0]
 800207a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800207e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002082:	6019      	str	r1, [r3, #0]
 8002084:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002088:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 800208c:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 800208e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002092:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800209c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d101      	bne.n	80020aa <make_move+0x42>
        return 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e0eb      	b.n	8002282 <make_move+0x21a>

    if(safe){
 80020aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020ae:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05d      	beq.n	8002174 <make_move+0x10c>
        uint8_t move_ok = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 80020be:	f107 0214 	add.w	r2, r7, #20
 80020c2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020c6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80020ca:	4611      	mov	r1, r2
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f000 f8e5 	bl	800229c <generate_moves>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 80020de:	e03d      	b.n	800215c <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 80020e0:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 80020e4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020e8:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020fa:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d126      	bne.n	8002152 <make_move+0xea>
 8002104:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002108:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800210c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	440b      	add	r3, r1
 8002118:	3301      	adds	r3, #1
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002120:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	429a      	cmp	r2, r3
 8002128:	d113      	bne.n	8002152 <make_move+0xea>
                move_ok = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 8002130:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002134:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002138:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	440b      	add	r3, r1
 8002144:	3302      	adds	r3, #2
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800214c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002150:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 8002152:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8002156:	3301      	adds	r3, #1
 8002158:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 800215c:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002160:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8002164:	429a      	cmp	r2, r3
 8002166:	d3bb      	bcc.n	80020e0 <make_move+0x78>
            }
        }
        if(!move_ok){
 8002168:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <make_move+0x10c>
            return 0;
 8002170:	2300      	movs	r3, #0
 8002172:	e086      	b.n	8002282 <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8002174:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002178:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002182:	f1c3 0301 	rsb	r3, r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800218c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8002196:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800219a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021a6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d00c      	beq.n	80021cc <make_move+0x164>
        remove_piece(state, move.to);
 80021b2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021b6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021ba:	785a      	ldrb	r2, [r3, #1]
 80021bc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021c0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80021c4:	4611      	mov	r1, r2
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	f7ff fd4b 	bl	8001c62 <remove_piece>

    if(move.promotion != 0)
 80021cc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021d4:	789b      	ldrb	r3, [r3, #2]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01f      	beq.n	800221a <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 80021da:	f000 f857 	bl	800228c <check_promotion>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021e6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021f2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80021fe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002202:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	f507 7146 	add.w	r1, r7, #792	; 0x318
 800220c:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8002210:	4621      	mov	r1, r4
 8002212:	6800      	ldr	r0, [r0, #0]
 8002214:	f7ff fd07 	bl	8001c26 <place_piece>
 8002218:	e025      	b.n	8002266 <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 800221a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800221e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800222a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	5c99      	ldrb	r1, [r3, r2]
 8002232:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002236:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002242:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800224e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002252:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	f507 7046 	add.w	r0, r7, #792	; 0x318
 800225c:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8002260:	6800      	ldr	r0, [r0, #0]
 8002262:	f7ff fce0 	bl	8001c26 <place_piece>
    }

    remove_piece(state, move.from);
 8002266:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800226a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002274:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002278:	4611      	mov	r1, r2
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	f7ff fcf1 	bl	8001c62 <remove_piece>
    return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}

0800228c <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
    return get_promotion();
 8002290:	f7ff fb80 	bl	8001994 <get_promotion>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	e281      	b.n	80027b4 <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 80022ba:	7b7b      	ldrb	r3, [r7, #13]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	f000 8273 	beq.w	80027a8 <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	3380      	adds	r3, #128	; 0x80
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f040 826a 	bne.w	80027ac <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 80022d8:	7b7b      	ldrb	r3, [r7, #13]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	f040 81e2 	bne.w	80026a4 <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80ee 	bne.w	80024c8 <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	3310      	adds	r3, #16
 80022f0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d162      	bne.n	80023be <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3310      	adds	r3, #16
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d15c      	bne.n	80023be <generate_moves+0x122>
                        moves[n_moves].from = square;
 8002304:	8afa      	ldrh	r2, [r7, #22]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	8afa      	ldrh	r2, [r7, #22]
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f101 0210 	add.w	r2, r1, #16
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800232e:	8afa      	ldrh	r2, [r7, #22]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4413      	add	r3, r2
 800233a:	2200      	movs	r2, #0
 800233c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 800233e:	8afa      	ldrh	r2, [r7, #22]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4413      	add	r3, r2
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b07      	cmp	r3, #7
 8002352:	d107      	bne.n	8002364 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8002354:	8afa      	ldrh	r2, [r7, #22]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	2201      	movs	r2, #1
 8002362:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8002364:	8afb      	ldrh	r3, [r7, #22]
 8002366:	3301      	adds	r3, #1
 8002368:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	111b      	asrs	r3, r3, #4
 800236e:	2b01      	cmp	r3, #1
 8002370:	d125      	bne.n	80023be <generate_moves+0x122>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3320      	adds	r3, #32
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d11f      	bne.n	80023be <generate_moves+0x122>
                            moves[n_moves].from = square;
 800237e:	8afa      	ldrh	r2, [r7, #22]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	b2d9      	uxtb	r1, r3
 8002394:	8afa      	ldrh	r2, [r7, #22]
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	f101 0220 	add.w	r2, r1, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 80023a8:	8afa      	ldrh	r2, [r7, #22]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 80023b8:	8afb      	ldrh	r3, [r7, #22]
 80023ba:	3301      	adds	r3, #1
 80023bc:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	3311      	adds	r3, #17
 80023c2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d13a      	bne.n	8002440 <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	3311      	adds	r3, #17
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d132      	bne.n	8002440 <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 80023da:	8afa      	ldrh	r2, [r7, #22]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	b2d9      	uxtb	r1, r3
 80023f0:	8afa      	ldrh	r2, [r7, #22]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	f101 0211 	add.w	r2, r1, #17
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002404:	8afa      	ldrh	r2, [r7, #22]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	2200      	movs	r2, #0
 8002412:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8002414:	8afa      	ldrh	r2, [r7, #22]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b07      	cmp	r3, #7
 8002428:	d107      	bne.n	800243a <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 800242a:	8afa      	ldrh	r2, [r7, #22]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	2201      	movs	r2, #1
 8002438:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 800243a:	8afb      	ldrh	r3, [r7, #22]
 800243c:	3301      	adds	r3, #1
 800243e:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	330f      	adds	r3, #15
 8002444:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 81b0 	bne.w	80027ae <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	330f      	adds	r3, #15
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 81a7 	bne.w	80027ae <generate_moves+0x512>
                        moves[n_moves].from = square;
 8002460:	8afa      	ldrh	r2, [r7, #22]
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	b2d9      	uxtb	r1, r3
 8002476:	8afa      	ldrh	r2, [r7, #22]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	f101 020f 	add.w	r2, r1, #15
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800248a:	8afa      	ldrh	r2, [r7, #22]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	2200      	movs	r2, #0
 8002498:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 800249a:	8afa      	ldrh	r2, [r7, #22]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	d107      	bne.n	80024c0 <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 80024b0:	8afa      	ldrh	r2, [r7, #22]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	2201      	movs	r2, #1
 80024be:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80024c0:	8afb      	ldrh	r3, [r7, #22]
 80024c2:	3301      	adds	r3, #1
 80024c4:	82fb      	strh	r3, [r7, #22]
 80024c6:	e172      	b.n	80027ae <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	3b10      	subs	r3, #16
 80024cc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d162      	bne.n	800259a <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	3b10      	subs	r3, #16
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d15c      	bne.n	800259a <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 80024e0:	8afa      	ldrh	r2, [r7, #22]
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	b2d9      	uxtb	r1, r3
 80024f6:	8afa      	ldrh	r2, [r7, #22]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	f1a1 0210 	sub.w	r2, r1, #16
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800250a:	8afa      	ldrh	r2, [r7, #22]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 800251a:	8afa      	ldrh	r2, [r7, #22]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 8002530:	8afa      	ldrh	r2, [r7, #22]
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	2201      	movs	r2, #1
 800253e:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8002540:	8afb      	ldrh	r3, [r7, #22]
 8002542:	3301      	adds	r3, #1
 8002544:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	111b      	asrs	r3, r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d125      	bne.n	800259a <generate_moves+0x2fe>
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	3b20      	subs	r3, #32
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d11f      	bne.n	800259a <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 800255a:	8afa      	ldrh	r2, [r7, #22]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	b2d9      	uxtb	r1, r3
 8002570:	8afa      	ldrh	r2, [r7, #22]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	f1a1 0220 	sub.w	r2, r1, #32
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8002584:	8afa      	ldrh	r2, [r7, #22]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 8002594:	8afb      	ldrh	r3, [r7, #22]
 8002596:	3301      	adds	r3, #1
 8002598:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	3b0f      	subs	r3, #15
 800259e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13a      	bne.n	800261c <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3b0f      	subs	r3, #15
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d132      	bne.n	800261c <generate_moves+0x380>
                        moves[n_moves].from = square;
 80025b6:	8afa      	ldrh	r2, [r7, #22]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	b2d9      	uxtb	r1, r3
 80025cc:	8afa      	ldrh	r2, [r7, #22]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f1a1 020f 	sub.w	r2, r1, #15
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80025e0:	8afa      	ldrh	r2, [r7, #22]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80025f0:	8afa      	ldrh	r2, [r7, #22]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d107      	bne.n	8002616 <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 8002606:	8afa      	ldrh	r2, [r7, #22]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	2201      	movs	r2, #1
 8002614:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8002616:	8afb      	ldrh	r3, [r7, #22]
 8002618:	3301      	adds	r3, #1
 800261a:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	3b11      	subs	r3, #17
 8002620:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 80c2 	bne.w	80027ae <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3b11      	subs	r3, #17
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80b9 	bne.w	80027ae <generate_moves+0x512>
                        moves[n_moves].from = square;
 800263c:	8afa      	ldrh	r2, [r7, #22]
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	4413      	add	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	b2d9      	uxtb	r1, r3
 8002652:	8afa      	ldrh	r2, [r7, #22]
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	f1a1 0211 	sub.w	r2, r1, #17
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002666:	8afa      	ldrh	r2, [r7, #22]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	2200      	movs	r2, #0
 8002674:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8002676:	8afa      	ldrh	r2, [r7, #22]
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 800268c:	8afa      	ldrh	r2, [r7, #22]
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	4413      	add	r3, r2
 8002698:	2201      	movs	r2, #1
 800269a:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 800269c:	8afb      	ldrh	r3, [r7, #22]
 800269e:	3301      	adds	r3, #1
 80026a0:	82fb      	strh	r3, [r7, #22]
 80026a2:	e084      	b.n	80027ae <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e076      	b.n	8002798 <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 80026aa:	7b7a      	ldrb	r2, [r7, #13]
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b0:	4946      	ldr	r1, [pc, #280]	; (80027cc <generate_moves+0x530>)
 80026b2:	00d2      	lsls	r2, r2, #3
 80026b4:	440a      	add	r2, r1
 80026b6:	4413      	add	r3, r2
 80026b8:	f993 3000 	ldrsb.w	r3, [r3]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 80026c6:	e05a      	b.n	800277e <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d121      	bne.n	8002716 <generate_moves+0x47a>
                        moves[n_moves].from = square;
 80026d2:	8afa      	ldrh	r2, [r7, #22]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 80026e4:	8afa      	ldrh	r2, [r7, #22]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	7bba      	ldrb	r2, [r7, #14]
 80026f2:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80026f4:	8afa      	ldrh	r2, [r7, #22]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	2200      	movs	r2, #0
 8002702:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	3301      	adds	r3, #1
 8002708:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <generate_moves+0x534>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d127      	bne.n	8002764 <generate_moves+0x4c8>
                        break;
 8002714:	e03a      	b.n	800278c <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002726:	429a      	cmp	r2, r3
 8002728:	d02f      	beq.n	800278a <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 800272a:	8afa      	ldrh	r2, [r7, #22]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 800273c:	8afa      	ldrh	r2, [r7, #22]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4413      	add	r3, r2
 8002748:	7bba      	ldrb	r2, [r7, #14]
 800274a:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 800274c:	8afa      	ldrh	r2, [r7, #22]
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	2200      	movs	r2, #0
 800275a:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 800275c:	8afb      	ldrh	r3, [r7, #22]
 800275e:	3301      	adds	r3, #1
 8002760:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8002762:	e012      	b.n	800278a <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 8002764:	7b7a      	ldrb	r2, [r7, #13]
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4918      	ldr	r1, [pc, #96]	; (80027cc <generate_moves+0x530>)
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	440a      	add	r2, r1
 8002770:	4413      	add	r3, r2
 8002772:	f993 3000 	ldrsb.w	r3, [r3]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	7bbb      	ldrb	r3, [r7, #14]
 800277a:	4413      	add	r3, r2
 800277c:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002784:	2b00      	cmp	r3, #0
 8002786:	d09f      	beq.n	80026c8 <generate_moves+0x42c>
 8002788:	e000      	b.n	800278c <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 800278a:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279c:	7b7a      	ldrb	r2, [r7, #13]
 800279e:	490d      	ldr	r1, [pc, #52]	; (80027d4 <generate_moves+0x538>)
 80027a0:	5c8a      	ldrb	r2, [r1, r2]
 80027a2:	4293      	cmp	r3, r2
 80027a4:	db81      	blt.n	80026aa <generate_moves+0x40e>
 80027a6:	e002      	b.n	80027ae <generate_moves+0x512>
            continue;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <generate_moves+0x512>
            continue;
 80027ac:	bf00      	nop
    for(int square = 0; square < 128; square++){
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3301      	adds	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b7f      	cmp	r3, #127	; 0x7f
 80027b8:	f77f ad7a 	ble.w	80022b0 <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 80027bc:	8afb      	ldrh	r3, [r7, #22]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000004 	.word	0x20000004
 80027d0:	20000034 	.word	0x20000034
 80027d4:	2000002c 	.word	0x2000002c

080027d8 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 80027e0:	210c      	movs	r1, #12
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f002 fdea 	bl	80053bc <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200016a0 	.word	0x200016a0

080027fc <ws2812_init>:

void ws2812_init(){
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	e010      	b.n	800282a <ws2812_init+0x2e>
		if(i < 60)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b3b      	cmp	r3, #59	; 0x3b
 800280c:	dc05      	bgt.n	800281a <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 800280e:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <ws2812_init+0x48>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2100      	movs	r1, #0
 8002814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002818:	e004      	b.n	8002824 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <ws2812_init+0x48>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	211c      	movs	r1, #28
 8002820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3301      	adds	r3, #1
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f240 623b 	movw	r2, #1595	; 0x63b
 8002830:	4293      	cmp	r3, r2
 8002832:	dde9      	ble.n	8002808 <ws2812_init+0xc>
	}
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000928 	.word	0x20000928

08002848 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e065      	b.n	8002920 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e05c      	b.n	8002914 <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8002864:	4933      	ldr	r1, [pc, #204]	; (8002934 <ws2812_update_pwm_data+0xec>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	00da      	lsls	r2, r3, #3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 8002878:	482e      	ldr	r0, [pc, #184]	; (8002934 <ws2812_update_pwm_data+0xec>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	00d9      	lsls	r1, r3, #3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	440b      	add	r3, r1
 8002882:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 800288c:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 800288e:	4829      	ldr	r0, [pc, #164]	; (8002934 <ws2812_update_pwm_data+0xec>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	440b      	add	r3, r1
 8002898:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800289c:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 800289e:	4313      	orrs	r3, r2
 80028a0:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e02f      	b.n	8002908 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 80028a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	fa42 f303 	asr.w	r3, r2, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d011      	beq.n	80028e0 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <ws2812_update_pwm_data+0xf0>)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <ws2812_update_pwm_data+0xf4>)
 80028d8:	214c      	movs	r1, #76	; 0x4c
 80028da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80028de:	e010      	b.n	8002902 <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <ws2812_update_pwm_data+0xf0>)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <ws2812_update_pwm_data+0xf4>)
 80028fc:	211c      	movs	r1, #28
 80028fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b17      	cmp	r3, #23
 800290c:	ddcc      	ble.n	80028a8 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	3301      	adds	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b07      	cmp	r3, #7
 8002918:	dd9f      	ble.n	800285a <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b07      	cmp	r3, #7
 8002924:	dd96      	ble.n	8002854 <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	200015a0 	.word	0x200015a0
 8002938:	2000003c 	.word	0x2000003c
 800293c:	20000928 	.word	0x20000928

08002940 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8002948:	f7ff ff7e 	bl	8002848 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <ws2812_update_leds_from_data+0x28>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 8002952:	f240 633c 	movw	r3, #1596	; 0x63c
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <ws2812_update_leds_from_data+0x2c>)
 8002958:	210c      	movs	r1, #12
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f002 fb7e 	bl	800505c <HAL_TIM_PWM_Start_DMA>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200016a0 	.word	0x200016a0
 800296c:	20000928 	.word	0x20000928

08002970 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <lighting_set_output+0x1c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	200016a4 	.word	0x200016a4

08002990 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <set_color+0x34>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	00d8      	lsls	r0, r3, #3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4403      	add	r3, r0
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	4905      	ldr	r1, [pc, #20]	; (80029c8 <set_color+0x38>)
 80029b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	200016a4 	.word	0x200016a4
 80029c8:	2000007c 	.word	0x2000007c

080029cc <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	e01a      	b.n	8002a0e <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	e011      	b.n	8002a02 <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4053      	eors	r3, r2
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffca 	bl	8002990 <set_color>
    for (int file = 0; file < 8; file++) {
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	ddea      	ble.n	80029de <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	dde1      	ble.n	80029d8 <paint_board+0xc>
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

    total_valid_moves = engine_list_moves(valid_moves);
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f7ff f94b 	bl	8001ccc <engine_list_moves>
 8002a36:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < total_valid_moves; i++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e026      	b.n	8002a8c <paint_valid_moves+0x6e>
        if(valid_moves[i].from == square_lifted){
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4413      	add	r3, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d119      	bne.n	8002a86 <paint_valid_moves+0x68>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4413      	add	r3, r2
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7ff ff88 	bl	8002990 <set_color>
            lifted_piece_valid_moves ++;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbd4      	blt.n	8002a3e <paint_valid_moves+0x20>
        }
    }
    return lifted_piece_valid_moves;
 8002a94:	697b      	ldr	r3, [r7, #20]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <paint_differences+0xc8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1d3a      	adds	r2, r7, #4
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
    char board_ok = 1;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	e04e      	b.n	8002b58 <paint_differences+0xb8>
        for (int file = 0; file < 8; file++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e045      	b.n	8002b4c <paint_differences+0xac>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8002ac0:	1d3a      	adds	r2, r7, #4
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	fa42 f303 	asr.w	r3, r2, r3
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <paint_differences+0x64>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f8ff 	bl	8001cec <engine_get_piece>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d107      	bne.n	8002b04 <paint_differences+0x64>
                set_color(rank, file, INVALID_ID);
 8002af4:	2205      	movs	r2, #5
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	6938      	ldr	r0, [r7, #16]
 8002afa:	f7ff ff49 	bl	8002990 <set_color>
                board_ok = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
 8002b02:	e020      	b.n	8002b46 <paint_differences+0xa6>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8002b04:	1d3a      	adds	r2, r7, #4
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	fa42 f303 	asr.w	r3, r2, r3
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <paint_differences+0xa6>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f8dd 	bl	8001cec <engine_get_piece>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d006      	beq.n	8002b46 <paint_differences+0xa6>
                set_color(rank, file, MISSING_ID);
 8002b38:	2204      	movs	r2, #4
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	6938      	ldr	r0, [r7, #16]
 8002b3e:	f7ff ff27 	bl	8002990 <set_color>
                board_ok = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b07      	cmp	r3, #7
 8002b50:	ddb6      	ble.n	8002ac0 <paint_differences+0x20>
    for (int rank = 0; rank < 8; rank++) {
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3301      	adds	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	ddad      	ble.n	8002aba <paint_differences+0x1a>
            }
        }
    }
    return board_ok;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200004cc 	.word	0x200004cc

08002b6c <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 8002b76:	2202      	movs	r2, #2
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff08 	bl	8002990 <set_color>
    return 1;
 8002b80:	2301      	movs	r3, #1
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <lighting_set_state>:

uint8_t square_lifted_lighting;
move_t * valid_moves_lighting;
int total_valid_moves_lighting;

void lighting_set_state(char state){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <lighting_set_state+0x1c>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	7013      	strb	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	200016a1 	.word	0x200016a1

08002bac <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <lighting_piece_lifted_square+0x1c>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	7013      	strb	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	200016a8 	.word	0x200016a8

08002bcc <set_valid_moves>:

void set_valid_moves(move_t * moves, int total_valid_moves){
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <set_valid_moves+0x24>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8002bdc:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <set_valid_moves+0x28>)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6013      	str	r3, [r2, #0]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	200016ac 	.word	0x200016ac
 8002bf4:	200016b0 	.word	0x200016b0

08002bf8 <lighting_refresh>:

void lighting_refresh(){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <lighting_refresh+0x8c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d83c      	bhi.n	8002c7e <lighting_refresh+0x86>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <lighting_refresh+0x14>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c23 	.word	0x08002c23
 8002c14:	08002c55 	.word	0x08002c55
 8002c18:	08002c5f 	.word	0x08002c5f
        case LIGHTING_IDLE_STATE:
            paint_board();
 8002c1c:	f7ff fed6 	bl	80029cc <paint_board>
        break;
 8002c20:	e02d      	b.n	8002c7e <lighting_refresh+0x86>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 8002c22:	f7ff fed3 	bl	80029cc <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <lighting_refresh+0x90>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <lighting_refresh+0x90>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7ff fea8 	bl	8002990 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <lighting_refresh+0x90>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <lighting_refresh+0x94>)
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <lighting_refresh+0x98>)
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fee6 	bl	8002a1e <paint_valid_moves>
        break;
 8002c52:	e014      	b.n	8002c7e <lighting_refresh+0x86>

        case LIGHTING_ERROR_STATE:
            paint_board();
 8002c54:	f7ff feba 	bl	80029cc <paint_board>
            paint_differences();
 8002c58:	f7ff ff22 	bl	8002aa0 <paint_differences>
        break;
 8002c5c:	e00f      	b.n	8002c7e <lighting_refresh+0x86>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 8002c5e:	f7ff feb5 	bl	80029cc <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <lighting_refresh+0x90>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <lighting_refresh+0x90>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f7ff ff78 	bl	8002b6c <paint_capture>
        break;
 8002c7c:	bf00      	nop
    }
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200016a1 	.word	0x200016a1
 8002c88:	200016a8 	.word	0x200016a8
 8002c8c:	200016ac 	.word	0x200016ac
 8002c90:	200016b0 	.word	0x200016b0

08002c94 <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e129      	b.n	8002ef6 <reed_scan_sensors+0x262>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4895      	ldr	r0, [pc, #596]	; (8002f08 <reed_scan_sensors+0x274>)
 8002cb4:	f000 ffaa 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	488f      	ldr	r0, [pc, #572]	; (8002f08 <reed_scan_sensors+0x274>)
 8002cca:	f000 ff9f 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2101      	movs	r1, #1
 8002cde:	488b      	ldr	r0, [pc, #556]	; (8002f0c <reed_scan_sensors+0x278>)
 8002ce0:	f000 ff94 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2140      	movs	r1, #64	; 0x40
 8002cf4:	4886      	ldr	r0, [pc, #536]	; (8002f10 <reed_scan_sensors+0x27c>)
 8002cf6:	f000 ff89 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	4881      	ldr	r0, [pc, #516]	; (8002f10 <reed_scan_sensors+0x27c>)
 8002d0c:	f000 ff7e 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2140      	movs	r1, #64	; 0x40
 8002d20:	487a      	ldr	r0, [pc, #488]	; (8002f0c <reed_scan_sensors+0x278>)
 8002d22:	f000 ff73 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	4874      	ldr	r0, [pc, #464]	; (8002f08 <reed_scan_sensors+0x274>)
 8002d38:	f000 ff68 	bl	8003c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d4e:	4870      	ldr	r0, [pc, #448]	; (8002f10 <reed_scan_sensors+0x27c>)
 8002d50:	f000 ff5c 	bl	8003c0c <HAL_GPIO_WritePin>

	for(int i = 0; i < 1000; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e003      	b.n	8002d62 <reed_scan_sensors+0xce>
 8002d5a:	bf00      	nop
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	dbf7      	blt.n	8002d5a <reed_scan_sensors+0xc6>

    data[row] = 0;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
    data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8002d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d78:	4865      	ldr	r0, [pc, #404]	; (8002f10 <reed_scan_sensors+0x27c>)
 8002d7a:	f000 ff2f 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b25a      	sxtb	r2, r3
 8002d96:	b24b      	sxtb	r3, r1
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b259      	sxtb	r1, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8002da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002daa:	4858      	ldr	r0, [pc, #352]	; (8002f0c <reed_scan_sensors+0x278>)
 8002dac:	f000 ff16 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <reed_scan_sensors+0x126>
 8002db6:	2102      	movs	r1, #2
 8002db8:	e000      	b.n	8002dbc <reed_scan_sensors+0x128>
 8002dba:	2100      	movs	r1, #0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25a      	sxtb	r2, r3
 8002dc6:	b24b      	sxtb	r3, r1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b259      	sxtb	r1, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	484c      	ldr	r0, [pc, #304]	; (8002f0c <reed_scan_sensors+0x278>)
 8002dda:	f000 feff 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <reed_scan_sensors+0x154>
 8002de4:	2104      	movs	r1, #4
 8002de6:	e000      	b.n	8002dea <reed_scan_sensors+0x156>
 8002de8:	2100      	movs	r1, #0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b25a      	sxtb	r2, r3
 8002df4:	b24b      	sxtb	r3, r1
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b259      	sxtb	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2ca      	uxtb	r2, r1
 8002e02:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8002e04:	2108      	movs	r1, #8
 8002e06:	4841      	ldr	r0, [pc, #260]	; (8002f0c <reed_scan_sensors+0x278>)
 8002e08:	f000 fee8 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <reed_scan_sensors+0x182>
 8002e12:	2108      	movs	r1, #8
 8002e14:	e000      	b.n	8002e18 <reed_scan_sensors+0x184>
 8002e16:	2100      	movs	r1, #0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b25a      	sxtb	r2, r3
 8002e22:	b24b      	sxtb	r3, r1
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b259      	sxtb	r1, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b2ca      	uxtb	r2, r1
 8002e30:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8002e32:	2120      	movs	r1, #32
 8002e34:	4835      	ldr	r0, [pc, #212]	; (8002f0c <reed_scan_sensors+0x278>)
 8002e36:	f000 fed1 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <reed_scan_sensors+0x1b0>
 8002e40:	2110      	movs	r1, #16
 8002e42:	e000      	b.n	8002e46 <reed_scan_sensors+0x1b2>
 8002e44:	2100      	movs	r1, #0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b25a      	sxtb	r2, r3
 8002e50:	b24b      	sxtb	r3, r1
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b259      	sxtb	r1, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b2ca      	uxtb	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8002e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e64:	482a      	ldr	r0, [pc, #168]	; (8002f10 <reed_scan_sensors+0x27c>)
 8002e66:	f000 feb9 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <reed_scan_sensors+0x1e0>
 8002e70:	2120      	movs	r1, #32
 8002e72:	e000      	b.n	8002e76 <reed_scan_sensors+0x1e2>
 8002e74:	2100      	movs	r1, #0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25a      	sxtb	r2, r3
 8002e80:	b24b      	sxtb	r3, r1
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b259      	sxtb	r1, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b2ca      	uxtb	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8002e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e94:	481d      	ldr	r0, [pc, #116]	; (8002f0c <reed_scan_sensors+0x278>)
 8002e96:	f000 fea1 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <reed_scan_sensors+0x210>
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	e000      	b.n	8002ea6 <reed_scan_sensors+0x212>
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25a      	sxtb	r2, r3
 8002eb0:	b24b      	sxtb	r3, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b259      	sxtb	r1, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8002ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec4:	4811      	ldr	r0, [pc, #68]	; (8002f0c <reed_scan_sensors+0x278>)
 8002ec6:	f000 fe89 	bl	8003bdc <HAL_GPIO_ReadPin>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <reed_scan_sensors+0x240>
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	e000      	b.n	8002ed6 <reed_scan_sensors+0x242>
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b25a      	sxtb	r2, r3
 8002ee0:	b24b      	sxtb	r3, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b259      	sxtb	r1, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	f77f aed2 	ble.w	8002ca2 <reed_scan_sensors+0xe>

  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40020000 	.word	0x40020000

08002f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f18:	480d      	ldr	r0, [pc, #52]	; (8002f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f20:	e002      	b.n	8002f28 <LoopCopyDataInit>

08002f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f26:	3304      	adds	r3, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f2c:	d3f9      	bcc.n	8002f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f30:	4c0b      	ldr	r4, [pc, #44]	; (8002f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f34:	e001      	b.n	8002f3a <LoopFillZerobss>

08002f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f38:	3204      	adds	r2, #4

08002f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f3c:	d3fb      	bcc.n	8002f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f3e:	f7fe fb73 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f42:	f005 fb61 	bl	8008608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7fd fd23 	bl	8000990 <main>
  bx  lr    
 8002f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f54:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002f58:	08008854 	.word	0x08008854
  ldr r2, =_sbss
 8002f5c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002f60:	2000554c 	.word	0x2000554c

08002f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>
	...

08002f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_Init+0x40>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_Init+0x40>)
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_Init+0x40>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 f8d8 	bl	8003146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f96:	200f      	movs	r0, #15
 8002f98:	f7fe fa96 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f9c:	f7fe f97e 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000098 	.word	0x20000098
 8002fd0:	200016b4 	.word	0x200016b4

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200016b4 	.word	0x200016b4

08002fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	; (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff4c 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316e:	f7ff ff61 	bl	8003034 <__NVIC_GetPriorityGrouping>
 8003172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f7ff ffb1 	bl	80030e0 <NVIC_EncodePriority>
 800317e:	4602      	mov	r2, r0
 8003180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff80 	bl	800308c <__NVIC_SetPriority>
}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff54 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff ff0a 	bl	8002fd4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e099      	b.n	8003300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ec:	e00f      	b.n	800320e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ee:	f7ff fef1 	bl	8002fd4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d908      	bls.n	800320e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2203      	movs	r2, #3
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e078      	b.n	8003300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e8      	bne.n	80031ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_DMA_Init+0x158>)
 8003228:	4013      	ands	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4313      	orrs	r3, r2
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d117      	bne.n	80032d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fa91 	bl	80037dc <DMA_CheckFifoParam>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ce:	2301      	movs	r3, #1
 80032d0:	e016      	b.n	8003300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa48 	bl	8003770 <DMA_CalcBaseAndBitshift>
 80032e0:	4603      	mov	r3, r0
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	223f      	movs	r2, #63	; 0x3f
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	f010803f 	.word	0xf010803f

0800330c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_DMA_Start_IT+0x26>
 800332e:	2302      	movs	r3, #2
 8003330:	e040      	b.n	80033b4 <HAL_DMA_Start_IT+0xa8>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d12f      	bne.n	80033a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f9da 	bl	8003714 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	223f      	movs	r2, #63	; 0x3f
 8003366:	409a      	lsls	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0216 	orr.w	r2, r2, #22
 800337a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e005      	b.n	80033b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
 80033b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00c      	b.n	80033f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800340c:	4b8e      	ldr	r3, [pc, #568]	; (8003648 <HAL_DMA_IRQHandler+0x248>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a8e      	ldr	r2, [pc, #568]	; (800364c <HAL_DMA_IRQHandler+0x24c>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0a9b      	lsrs	r3, r3, #10
 8003418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2208      	movs	r2, #8
 800342c:	409a      	lsls	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01a      	beq.n	800346c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	2208      	movs	r2, #8
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2201      	movs	r2, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2204      	movs	r2, #4
 80034a8:	409a      	lsls	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	2204      	movs	r2, #4
 80034c6:	409a      	lsls	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2210      	movs	r2, #16
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d043      	beq.n	8003570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d03c      	beq.n	8003570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	2210      	movs	r2, #16
 80034fc:	409a      	lsls	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d018      	beq.n	8003542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d024      	beq.n	8003570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
 800352e:	e01f      	b.n	8003570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
 8003540:	e016      	b.n	8003570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0208 	bic.w	r2, r2, #8
 800355e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2220      	movs	r2, #32
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 808f 	beq.w	80036a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8087 	beq.w	80036a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	2220      	movs	r2, #32
 8003598:	409a      	lsls	r2, r3
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d136      	bne.n	8003618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0216 	bic.w	r2, r2, #22
 80035b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_DMA_IRQHandler+0x1da>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0208 	bic.w	r2, r2, #8
 80035e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	223f      	movs	r2, #63	; 0x3f
 80035f0:	409a      	lsls	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	d07e      	beq.n	800370c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
        }
        return;
 8003616:	e079      	b.n	800370c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01d      	beq.n	8003662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	2b00      	cmp	r3, #0
 800363a:	d031      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e02c      	b.n	80036a0 <HAL_DMA_IRQHandler+0x2a0>
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000
 800364c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
 8003660:	e01e      	b.n	80036a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0210 	bic.w	r2, r2, #16
 800367e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d032      	beq.n	800370e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2205      	movs	r2, #5
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d307      	bcc.n	80036e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f2      	bne.n	80036cc <HAL_DMA_IRQHandler+0x2cc>
 80036e6:	e000      	b.n	80036ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e000      	b.n	800370e <HAL_DMA_IRQHandler+0x30e>
        return;
 800370c:	bf00      	nop
    }
  }
}
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003730:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d108      	bne.n	8003754 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003752:	e007      	b.n	8003764 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3b10      	subs	r3, #16
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <DMA_CalcBaseAndBitshift+0x68>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d909      	bls.n	80037b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	1d1a      	adds	r2, r3, #4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	659a      	str	r2, [r3, #88]	; 0x58
 80037b0:	e007      	b.n	80037c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	aaaaaaab 	.word	0xaaaaaaab
 80037d8:	0800883c 	.word	0x0800883c

080037dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d11f      	bne.n	8003836 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d856      	bhi.n	80038aa <DMA_CheckFifoParam+0xce>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <DMA_CheckFifoParam+0x28>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003815 	.word	0x08003815
 8003808:	08003827 	.word	0x08003827
 800380c:	08003815 	.word	0x08003815
 8003810:	080038ab 	.word	0x080038ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d046      	beq.n	80038ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003824:	e043      	b.n	80038ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800382e:	d140      	bne.n	80038b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e03d      	b.n	80038b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d121      	bne.n	8003884 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d837      	bhi.n	80038b6 <DMA_CheckFifoParam+0xda>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <DMA_CheckFifoParam+0x70>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	0800385d 	.word	0x0800385d
 8003850:	08003863 	.word	0x08003863
 8003854:	0800385d 	.word	0x0800385d
 8003858:	08003875 	.word	0x08003875
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e030      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d025      	beq.n	80038ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003872:	e022      	b.n	80038ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800387c:	d11f      	bne.n	80038be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003882:	e01c      	b.n	80038be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d903      	bls.n	8003892 <DMA_CheckFifoParam+0xb6>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d003      	beq.n	8003898 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003890:	e018      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      break;
 8003896:	e015      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e00b      	b.n	80038c2 <DMA_CheckFifoParam+0xe6>
      break;
 80038aa:	bf00      	nop
 80038ac:	e00a      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;
 80038ae:	bf00      	nop
 80038b0:	e008      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e006      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e004      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <DMA_CheckFifoParam+0xe8>
      break;
 80038c2:	bf00      	nop
    }
  } 
  
  return status; 
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop

080038d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e159      	b.n	8003ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	429a      	cmp	r2, r3
 800390a:	f040 8148 	bne.w	8003b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d005      	beq.n	8003926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003922:	2b02      	cmp	r3, #2
 8003924:	d130      	bne.n	8003988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0201 	and.w	r2, r3, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b03      	cmp	r3, #3
 8003992:	d017      	beq.n	80039c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d123      	bne.n	8003a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	08da      	lsrs	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	08da      	lsrs	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3208      	adds	r2, #8
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0203 	and.w	r2, r3, #3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a2 	beq.w	8003b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <HAL_GPIO_Init+0x2e8>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_GPIO_Init+0x2e8>)
 8003a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <HAL_GPIO_Init+0x2e8>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a76:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_GPIO_Init+0x2ec>)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a49      	ldr	r2, [pc, #292]	; (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d019      	beq.n	8003ad6 <HAL_GPIO_Init+0x202>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_GPIO_Init+0x2f4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x1fe>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_GPIO_Init+0x2f8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_Init+0x1fa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <HAL_GPIO_Init+0x2fc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x1f6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <HAL_GPIO_Init+0x300>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_Init+0x1f2>
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e008      	b.n	8003ad8 <HAL_GPIO_Init+0x204>
 8003ac6:	2307      	movs	r3, #7
 8003ac8:	e006      	b.n	8003ad8 <HAL_GPIO_Init+0x204>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e004      	b.n	8003ad8 <HAL_GPIO_Init+0x204>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e002      	b.n	8003ad8 <HAL_GPIO_Init+0x204>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_GPIO_Init+0x204>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	f002 0203 	and.w	r2, r2, #3
 8003ade:	0092      	lsls	r2, r2, #2
 8003ae0:	4093      	lsls	r3, r2
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ae8:	4935      	ldr	r1, [pc, #212]	; (8003bc0 <HAL_GPIO_Init+0x2ec>)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3302      	adds	r3, #2
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b44:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b4a:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b74:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b98:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <HAL_GPIO_Init+0x304>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	f67f aea2 	bls.w	80038f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3724      	adds	r7, #36	; 0x24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40013c00 	.word	0x40013c00

08003bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e001      	b.n	8003bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c28:	e003      	b.n	8003c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e12b      	b.n	8003eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fb44 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f001 f888 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a81      	ldr	r2, [pc, #516]	; (8003eb4 <HAL_I2C_Init+0x274>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d807      	bhi.n	8003cc4 <HAL_I2C_Init+0x84>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a80      	ldr	r2, [pc, #512]	; (8003eb8 <HAL_I2C_Init+0x278>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e006      	b.n	8003cd2 <HAL_I2C_Init+0x92>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a7d      	ldr	r2, [pc, #500]	; (8003ebc <HAL_I2C_Init+0x27c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	bf94      	ite	ls
 8003ccc:	2301      	movls	r3, #1
 8003cce:	2300      	movhi	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0e7      	b.n	8003eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a78      	ldr	r2, [pc, #480]	; (8003ec0 <HAL_I2C_Init+0x280>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0c9b      	lsrs	r3, r3, #18
 8003ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a6a      	ldr	r2, [pc, #424]	; (8003eb4 <HAL_I2C_Init+0x274>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d802      	bhi.n	8003d14 <HAL_I2C_Init+0xd4>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3301      	adds	r3, #1
 8003d12:	e009      	b.n	8003d28 <HAL_I2C_Init+0xe8>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	4a69      	ldr	r2, [pc, #420]	; (8003ec4 <HAL_I2C_Init+0x284>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	3301      	adds	r3, #1
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	495c      	ldr	r1, [pc, #368]	; (8003eb4 <HAL_I2C_Init+0x274>)
 8003d44:	428b      	cmp	r3, r1
 8003d46:	d819      	bhi.n	8003d7c <HAL_I2C_Init+0x13c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e59      	subs	r1, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_I2C_Init+0x138>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1e59      	subs	r1, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d76:	e051      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e04f      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d111      	bne.n	8003da8 <HAL_I2C_Init+0x168>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	440b      	add	r3, r1
 8003d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e012      	b.n	8003dce <HAL_I2C_Init+0x18e>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	0099      	lsls	r1, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_Init+0x196>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e022      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10e      	bne.n	8003dfc <HAL_I2C_Init+0x1bc>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1e58      	subs	r0, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	440b      	add	r3, r1
 8003dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfa:	e00f      	b.n	8003e1c <HAL_I2C_Init+0x1dc>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1e58      	subs	r0, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	6809      	ldr	r1, [r1, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6911      	ldr	r1, [r2, #16]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	4311      	orrs	r1, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	000186a0 	.word	0x000186a0
 8003eb8:	001e847f 	.word	0x001e847f
 8003ebc:	003d08ff 	.word	0x003d08ff
 8003ec0:	431bde83 	.word	0x431bde83
 8003ec4:	10624dd3 	.word	0x10624dd3

08003ec8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	817b      	strh	r3, [r7, #10]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003edc:	f7ff f87a 	bl	8002fd4 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	f040 80e0 	bne.w	80040b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2319      	movs	r3, #25
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4970      	ldr	r1, [pc, #448]	; (80040bc <HAL_I2C_Master_Transmit+0x1f4>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f964 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	e0d3      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2C_Master_Transmit+0x50>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e0cc      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d007      	beq.n	8003f3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2221      	movs	r2, #33	; 0x21
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	893a      	ldrh	r2, [r7, #8]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a50      	ldr	r2, [pc, #320]	; (80040c0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f80:	8979      	ldrh	r1, [r7, #10]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f89c 	bl	80040c4 <I2C_MasterRequestWrite>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e08d      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fac:	e066      	b.n	800407c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6a39      	ldr	r1, [r7, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f9de 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d107      	bne.n	8003fd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06b      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d11b      	bne.n	8004050 <HAL_I2C_Master_Transmit+0x188>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6a39      	ldr	r1, [r7, #32]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f9ce 	bl	80043f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d107      	bne.n	8004078 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e01a      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	d194      	bne.n	8003fae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	00100002 	.word	0x00100002
 80040c0:	ffff0000 	.word	0xffff0000

080040c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d006      	beq.n	80040ee <I2C_MasterRequestWrite+0x2a>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d003      	beq.n	80040ee <I2C_MasterRequestWrite+0x2a>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ec:	d108      	bne.n	8004100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00b      	b.n	8004118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b12      	cmp	r3, #18
 8004106:	d107      	bne.n	8004118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f84f 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d103      	bne.n	8004148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e035      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004154:	d108      	bne.n	8004168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004156:	897b      	ldrh	r3, [r7, #10]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004164:	611a      	str	r2, [r3, #16]
 8004166:	e01b      	b.n	80041a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	11db      	asrs	r3, r3, #7
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f063 030f 	orn	r3, r3, #15
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <I2C_MasterRequestWrite+0xfc>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f875 	bl	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e010      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <I2C_MasterRequestWrite+0x100>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f865 	bl	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	00010008 	.word	0x00010008
 80041c4:	00010002 	.word	0x00010002

080041c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	e025      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d021      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe fef7 	bl	8002fd4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d116      	bne.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e023      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10d      	bne.n	800424c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	e00c      	b.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	43da      	mvns	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0b6      	beq.n	80041da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004284:	e051      	b.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d123      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e046      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d021      	beq.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe fe75 	bl	8002fd4 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d116      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0220 	orr.w	r2, r3, #32
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e020      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10c      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e00b      	b.n	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	43da      	mvns	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d18d      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e02d      	b.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f878 	bl	8004478 <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e02d      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d021      	beq.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fe1b 	bl	8002fd4 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e007      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d1ca      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004402:	e02d      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f837 	bl	8004478 <I2C_IsAcknowledgeFailed>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e02d      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d021      	beq.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe fdda 	bl	8002fd4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d116      	bne.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d1ca      	bne.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d11b      	bne.n	80044c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f043 0204 	orr.w	r2, r3, #4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e267      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d075      	beq.n	80045e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f6:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00c      	beq.n	800451c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004502:	4b85      	ldr	r3, [pc, #532]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450a:	2b08      	cmp	r3, #8
 800450c:	d112      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450e:	4b82      	ldr	r3, [pc, #520]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451a:	d10b      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05b      	beq.n	80045e0 <HAL_RCC_OscConfig+0x108>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d157      	bne.n	80045e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e242      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x74>
 800453e:	4b76      	ldr	r3, [pc, #472]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a75      	ldr	r2, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e01d      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x98>
 8004556:	4b70      	ldr	r3, [pc, #448]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6f      	ldr	r2, [pc, #444]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b6d      	ldr	r3, [pc, #436]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6c      	ldr	r2, [pc, #432]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 8004570:	4b69      	ldr	r3, [pc, #420]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a68      	ldr	r2, [pc, #416]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fd20 	bl	8002fd4 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fd1c 	bl	8002fd4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e207      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0xc0>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe fd0c 	bl	8002fd4 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fe fd08 	bl	8002fd4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1f3      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0xe8>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ee:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004602:	2b08      	cmp	r3, #8
 8004604:	d11c      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b44      	ldr	r3, [pc, #272]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d116      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	4b41      	ldr	r3, [pc, #260]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e1c7      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	e03a      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004648:	4b34      	ldr	r3, [pc, #208]	; (800471c <HAL_RCC_OscConfig+0x244>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe fcc1 	bl	8002fd4 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004656:	f7fe fcbd 	bl	8002fd4 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1a8      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4925      	ldr	r1, [pc, #148]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_OscConfig+0x244>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fca0 	bl	8002fd4 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004698:	f7fe fc9c 	bl	8002fd4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e187      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d036      	beq.n	8004730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_RCC_OscConfig+0x248>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fe fc80 	bl	8002fd4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fe fc7c 	bl	8002fd4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e167      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x200>
 80046f6:	e01b      	b.n	8004730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_OscConfig+0x248>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fe fc69 	bl	8002fd4 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	e00e      	b.n	8004724 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe fc65 	bl	8002fd4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d907      	bls.n	8004724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e150      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	42470000 	.word	0x42470000
 8004720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8097 	beq.w	800486c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b81      	ldr	r3, [pc, #516]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	4b7d      	ldr	r3, [pc, #500]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a7c      	ldr	r2, [pc, #496]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
 800475e:	4b7a      	ldr	r3, [pc, #488]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b77      	ldr	r3, [pc, #476]	; (800494c <HAL_RCC_OscConfig+0x474>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b74      	ldr	r3, [pc, #464]	; (800494c <HAL_RCC_OscConfig+0x474>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	; (800494c <HAL_RCC_OscConfig+0x474>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fe fc25 	bl	8002fd4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe fc21 	bl	8002fd4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e10c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b6a      	ldr	r3, [pc, #424]	; (800494c <HAL_RCC_OscConfig+0x474>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2ea>
 80047b4:	4b64      	ldr	r3, [pc, #400]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a63      	ldr	r2, [pc, #396]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	e01c      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x30c>
 80047ca:	4b5f      	ldr	r3, [pc, #380]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a5e      	ldr	r2, [pc, #376]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	4b5c      	ldr	r3, [pc, #368]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a5b      	ldr	r2, [pc, #364]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047e4:	4b58      	ldr	r3, [pc, #352]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a57      	ldr	r2, [pc, #348]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
 80047f0:	4b55      	ldr	r3, [pc, #340]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a54      	ldr	r2, [pc, #336]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fe fbe6 	bl	8002fd4 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fe fbe2 	bl	8002fd4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0cb      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	4b49      	ldr	r3, [pc, #292]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ee      	beq.n	800480c <HAL_RCC_OscConfig+0x334>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004830:	f7fe fbd0 	bl	8002fd4 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fe fbcc 	bl	8002fd4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0b5      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484e:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ee      	bne.n	8004838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	4a38      	ldr	r2, [pc, #224]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a1 	beq.w	80049b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004876:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d05c      	beq.n	800493c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d141      	bne.n	800490e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCC_OscConfig+0x478>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe fba0 	bl	8002fd4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004898:	f7fe fb9c 	bl	8002fd4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e087      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	491b      	ldr	r1, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_RCC_OscConfig+0x478>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7fe fb75 	bl	8002fd4 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fe fb71 	bl	8002fd4 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e05c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x416>
 800490c:	e054      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_RCC_OscConfig+0x478>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fe fb5e 	bl	8002fd4 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491c:	f7fe fb5a 	bl	8002fd4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e045      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_OscConfig+0x470>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x444>
 800493a:	e03d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e038      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000
 8004950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCC_OscConfig+0x4ec>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d028      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d121      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d11a      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800498a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800498c:	4293      	cmp	r3, r2
 800498e:	d111      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fe fa8c 	bl	8002fd4 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fe fa88 	bl	8002fd4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fcaa 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	08008824 	.word	0x08008824
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	20000094 	.word	0x20000094

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b094      	sub	sp, #80	; 0x50
 8004b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bac:	4b79      	ldr	r3, [pc, #484]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	f200 80e1 	bhi.w	8004d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc6:	e0db      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bcc:	e0db      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bce:	4b73      	ldr	r3, [pc, #460]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x208>)
 8004bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bd2:	e0d8      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4b6f      	ldr	r3, [pc, #444]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bde:	4b6d      	ldr	r3, [pc, #436]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d063      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfe:	2300      	movs	r3, #0
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c06:	4622      	mov	r2, r4
 8004c08:	462b      	mov	r3, r5
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c18:	0150      	lsls	r0, r2, #5
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4621      	mov	r1, r4
 8004c20:	1a51      	subs	r1, r2, r1
 8004c22:	6139      	str	r1, [r7, #16]
 8004c24:	4629      	mov	r1, r5
 8004c26:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c38:	4659      	mov	r1, fp
 8004c3a:	018b      	lsls	r3, r1, #6
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c42:	4651      	mov	r1, sl
 8004c44:	018a      	lsls	r2, r1, #6
 8004c46:	4651      	mov	r1, sl
 8004c48:	ebb2 0801 	subs.w	r8, r2, r1
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c66:	4690      	mov	r8, r2
 8004c68:	4699      	mov	r9, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	eb18 0303 	adds.w	r3, r8, r3
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	462b      	mov	r3, r5
 8004c74:	eb49 0303 	adc.w	r3, r9, r3
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c86:	4629      	mov	r1, r5
 8004c88:	024b      	lsls	r3, r1, #9
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c90:	4621      	mov	r1, r4
 8004c92:	024a      	lsls	r2, r1, #9
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca4:	f7fb fa9c 	bl	80001e0 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb0:	e058      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb2:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	f04f 0000 	mov.w	r0, #0
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	0159      	lsls	r1, r3, #5
 8004cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cde:	0150      	lsls	r0, r2, #5
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4641      	mov	r1, r8
 8004ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cea:	4649      	mov	r1, r9
 8004cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d04:	ebb2 040a 	subs.w	r4, r2, sl
 8004d08:	eb63 050b 	sbc.w	r5, r3, fp
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	00eb      	lsls	r3, r5, #3
 8004d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1a:	00e2      	lsls	r2, r4, #3
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	4643      	mov	r3, r8
 8004d22:	18e3      	adds	r3, r4, r3
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	464b      	mov	r3, r9
 8004d28:	eb45 0303 	adc.w	r3, r5, r3
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	028b      	lsls	r3, r1, #10
 8004d3e:	4621      	mov	r1, r4
 8004d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d44:	4621      	mov	r1, r4
 8004d46:	028a      	lsls	r2, r1, #10
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4e:	2200      	movs	r2, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	61fa      	str	r2, [r7, #28]
 8004d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d58:	f7fb fa42 	bl	80001e0 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d7e:	e002      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3750      	adds	r7, #80	; 0x50
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200

08004da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da4:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000000 	.word	0x20000000

08004db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dbc:	f7ff fff0 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0a9b      	lsrs	r3, r3, #10
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	08008834 	.word	0x08008834

08004de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	220f      	movs	r2, #15
 8004dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_GetClockConfig+0x5c>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0203 	and.w	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <HAL_RCC_GetClockConfig+0x5c>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_GetClockConfig+0x5c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCC_GetClockConfig+0x60>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0207 	and.w	r2, r3, #7
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	601a      	str	r2, [r3, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40023c00 	.word	0x40023c00

08004e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f839 	bl	8004ee2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 fe2e 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e044      	b.n	8004f9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d013      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x6c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <HAL_TIM_Base_Start_IT+0xb4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x6c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x6c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d111      	bne.n	8004f88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d010      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f86:	e007      	b.n	8004f98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000

08004fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e041      	b.n	8005052 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc f9ce 	bl	8001384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fd72 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e022      	b.n	80050ce <HAL_TIM_PWM_Start_DMA+0x72>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d109      	bne.n	80050a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e015      	b.n	80050ce <HAL_TIM_PWM_Start_DMA+0x72>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d109      	bne.n	80050bc <HAL_TIM_PWM_Start_DMA+0x60>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e008      	b.n	80050ce <HAL_TIM_PWM_Start_DMA+0x72>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	e15d      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e022      	b.n	8005136 <HAL_TIM_PWM_Start_DMA+0xda>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d109      	bne.n	800510a <HAL_TIM_PWM_Start_DMA+0xae>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	e015      	b.n	8005136 <HAL_TIM_PWM_Start_DMA+0xda>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e008      	b.n	8005136 <HAL_TIM_PWM_Start_DMA+0xda>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d024      	beq.n	8005184 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_TIM_PWM_Start_DMA+0xee>
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e123      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005158:	e016      	b.n	8005188 <HAL_TIM_PWM_Start_DMA+0x12c>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005168:	e00e      	b.n	8005188 <HAL_TIM_PWM_Start_DMA+0x12c>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005178:	e006      	b.n	8005188 <HAL_TIM_PWM_Start_DMA+0x12c>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005182:	e001      	b.n	8005188 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e104      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	f200 80ae 	bhi.w	80052ec <HAL_TIM_PWM_Start_DMA+0x290>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051cd 	.word	0x080051cd
 800519c:	080052ed 	.word	0x080052ed
 80051a0:	080052ed 	.word	0x080052ed
 80051a4:	080052ed 	.word	0x080052ed
 80051a8:	08005215 	.word	0x08005215
 80051ac:	080052ed 	.word	0x080052ed
 80051b0:	080052ed 	.word	0x080052ed
 80051b4:	080052ed 	.word	0x080052ed
 80051b8:	0800525d 	.word	0x0800525d
 80051bc:	080052ed 	.word	0x080052ed
 80051c0:	080052ed 	.word	0x080052ed
 80051c4:	080052ed 	.word	0x080052ed
 80051c8:	080052a5 	.word	0x080052a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	4a72      	ldr	r2, [pc, #456]	; (800539c <HAL_TIM_PWM_Start_DMA+0x340>)
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	4a71      	ldr	r2, [pc, #452]	; (80053a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	4a70      	ldr	r2, [pc, #448]	; (80053a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80051e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3334      	adds	r3, #52	; 0x34
 80051f0:	461a      	mov	r2, r3
 80051f2:	887b      	ldrh	r3, [r7, #2]
 80051f4:	f7fe f88a 	bl	800330c <HAL_DMA_Start_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0c7      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	60da      	str	r2, [r3, #12]
      break;
 8005212:	e06e      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	4a60      	ldr	r2, [pc, #384]	; (800539c <HAL_TIM_PWM_Start_DMA+0x340>)
 800521a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800522a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3338      	adds	r3, #56	; 0x38
 8005238:	461a      	mov	r2, r3
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	f7fe f866 	bl	800330c <HAL_DMA_Start_IT>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0a3      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005258:	60da      	str	r2, [r3, #12]
      break;
 800525a:	e04a      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a4e      	ldr	r2, [pc, #312]	; (800539c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a4d      	ldr	r2, [pc, #308]	; (80053a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	4a4c      	ldr	r2, [pc, #304]	; (80053a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005272:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	333c      	adds	r3, #60	; 0x3c
 8005280:	461a      	mov	r2, r3
 8005282:	887b      	ldrh	r3, [r7, #2]
 8005284:	f7fe f842 	bl	800330c <HAL_DMA_Start_IT>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e07f      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a0:	60da      	str	r2, [r3, #12]
      break;
 80052a2:	e026      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	4a3c      	ldr	r2, [pc, #240]	; (800539c <HAL_TIM_PWM_Start_DMA+0x340>)
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80052ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3340      	adds	r3, #64	; 0x40
 80052c8:	461a      	mov	r2, r3
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	f7fe f81e 	bl	800330c <HAL_DMA_Start_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e05b      	b.n	8005392 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052e8:	60da      	str	r2, [r3, #12]
      break;
 80052ea:	e002      	b.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
      break;
 80052f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d14b      	bne.n	8005390 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fdfb 	bl	8005efc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d107      	bne.n	8005320 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_PWM_Start_DMA+0x300>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d013      	beq.n	800535c <HAL_TIM_PWM_Start_DMA+0x300>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIM_PWM_Start_DMA+0x350>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_PWM_Start_DMA+0x300>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_PWM_Start_DMA+0x300>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_PWM_Start_DMA+0x300>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d010      	beq.n	8005390 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e007      	b.n	8005390 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	080059d3 	.word	0x080059d3
 80053a0:	08005a7b 	.word	0x08005a7b
 80053a4:	08005941 	.word	0x08005941
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40014000 	.word	0x40014000

080053bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d855      	bhi.n	800547c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	0800540d 	.word	0x0800540d
 80053dc:	0800547d 	.word	0x0800547d
 80053e0:	0800547d 	.word	0x0800547d
 80053e4:	0800547d 	.word	0x0800547d
 80053e8:	08005429 	.word	0x08005429
 80053ec:	0800547d 	.word	0x0800547d
 80053f0:	0800547d 	.word	0x0800547d
 80053f4:	0800547d 	.word	0x0800547d
 80053f8:	08005445 	.word	0x08005445
 80053fc:	0800547d 	.word	0x0800547d
 8005400:	0800547d 	.word	0x0800547d
 8005404:	0800547d 	.word	0x0800547d
 8005408:	08005461 	.word	0x08005461
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800541a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	4618      	mov	r0, r3
 8005422:	f7fd ffcb 	bl	80033bc <HAL_DMA_Abort_IT>
      break;
 8005426:	e02c      	b.n	8005482 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005436:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd ffbd 	bl	80033bc <HAL_DMA_Abort_IT>
      break;
 8005442:	e01e      	b.n	8005482 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005452:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	4618      	mov	r0, r3
 800545a:	f7fd ffaf 	bl	80033bc <HAL_DMA_Abort_IT>
      break;
 800545e:	e010      	b.n	8005482 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800546e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	4618      	mov	r0, r3
 8005476:	f7fd ffa1 	bl	80033bc <HAL_DMA_Abort_IT>
      break;
 800547a:	e002      	b.n	8005482 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      break;
 8005480:	bf00      	nop
  }

  if (status == HAL_OK)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d157      	bne.n	8005538 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2200      	movs	r2, #0
 800548e:	6839      	ldr	r1, [r7, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fd33 	bl	8005efc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d117      	bne.n	80054d0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10f      	bne.n	80054d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	f240 4344 	movw	r3, #1092	; 0x444
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <HAL_TIM_PWM_Stop_DMA+0x144>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	f240 4344 	movw	r3, #1092	; 0x444
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_PWM_Stop_DMA+0x144>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800550e:	e013      	b.n	8005538 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d104      	bne.n	8005520 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551e:	e00b      	b.n	8005538 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b08      	cmp	r3, #8
 8005524:	d104      	bne.n	8005530 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800552e:	e003      	b.n	8005538 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0202 	mvn.w	r2, #2
 8005574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9b0 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a2 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fd f91d 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0204 	mvn.w	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f986 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f978 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fd f8f3 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b08      	cmp	r3, #8
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0208 	mvn.w	r2, #8
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2204      	movs	r2, #4
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f95c 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f94e 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fd f8c9 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0210 	mvn.w	r2, #16
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2208      	movs	r2, #8
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f932 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f924 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fd f89f 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d10e      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0201 	mvn.w	r2, #1
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb fbf0 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fcf2 	bl	80060dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f8fa 	bl	8005918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0220 	mvn.w	r2, #32
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fcbc 	bl	80060c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0ae      	b.n	80058d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	f200 809f 	bhi.w	80058c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080058c5 	.word	0x080058c5
 8005794:	080058c5 	.word	0x080058c5
 8005798:	080058c5 	.word	0x080058c5
 800579c:	08005801 	.word	0x08005801
 80057a0:	080058c5 	.word	0x080058c5
 80057a4:	080058c5 	.word	0x080058c5
 80057a8:	080058c5 	.word	0x080058c5
 80057ac:	08005843 	.word	0x08005843
 80057b0:	080058c5 	.word	0x080058c5
 80057b4:	080058c5 	.word	0x080058c5
 80057b8:	080058c5 	.word	0x080058c5
 80057bc:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fa0c 	bl	8005be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e064      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fa52 	bl	8005cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]
      break;
 8005840:	e043      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fa9d 	bl	8005d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	61da      	str	r2, [r3, #28]
      break;
 8005880:	e023      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fae7 	bl	8005e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	61da      	str	r2, [r3, #28]
      break;
 80058c2:	e002      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
      break;
 80058c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005966:	e02a      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d107      	bne.n	8005982 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005980:	e01d      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2204      	movs	r2, #4
 8005990:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599a:	e010      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d107      	bne.n	80059b6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2208      	movs	r2, #8
 80059aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059b4:	e003      	b.n	80059be <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ffb4 	bl	800592c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d136      	bne.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	e031      	b.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d10b      	bne.n	8005a24 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d125      	bne.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a22:	e020      	b.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10b      	bne.n	8005a46 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2204      	movs	r2, #4
 8005a32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d114      	bne.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	e00f      	b.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10a      	bne.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2208      	movs	r2, #8
 8005a54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7fc feb6 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	771a      	strb	r2, [r3, #28]
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d103      	bne.n	8005a9a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	771a      	strb	r2, [r3, #28]
 8005a98:	e019      	b.n	8005ace <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d103      	bne.n	8005aac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	771a      	strb	r2, [r3, #28]
 8005aaa:	e010      	b.n	8005ace <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d103      	bne.n	8005abe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	771a      	strb	r2, [r3, #28]
 8005abc:	e007      	b.n	8005ace <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d102      	bne.n	8005ace <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2208      	movs	r2, #8
 8005acc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ff18 	bl	8005904 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	771a      	strb	r2, [r3, #28]
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a34      	ldr	r2, [pc, #208]	; (8005bc8 <TIM_Base_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x38>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x38>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a31      	ldr	r2, [pc, #196]	; (8005bcc <TIM_Base_SetConfig+0xe8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x38>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a30      	ldr	r2, [pc, #192]	; (8005bd0 <TIM_Base_SetConfig+0xec>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x38>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <TIM_Base_SetConfig+0xf0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <TIM_Base_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a22      	ldr	r2, [pc, #136]	; (8005bcc <TIM_Base_SetConfig+0xe8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_Base_SetConfig+0xec>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <TIM_Base_SetConfig+0xf0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <TIM_Base_SetConfig+0xf4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <TIM_Base_SetConfig+0xf8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x8a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <TIM_Base_SetConfig+0xfc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <TIM_Base_SetConfig+0xe4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0302 	bic.w	r3, r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <TIM_OC1_SetConfig+0xc8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10c      	bne.n	8005c5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0308 	bic.w	r3, r3, #8
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <TIM_OC1_SetConfig+0xc8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40010000 	.word	0x40010000

08005cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0210 	bic.w	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0320 	bic.w	r3, r3, #32
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <TIM_OC2_SetConfig+0xd4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10d      	bne.n	8005d2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_OC2_SetConfig+0xd4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d113      	bne.n	8005d5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40010000 	.word	0x40010000

08005d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <TIM_OC3_SetConfig+0xd0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10d      	bne.n	8005e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <TIM_OC3_SetConfig+0xd0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d113      	bne.n	8005e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40010000 	.word	0x40010000

08005e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <TIM_OC4_SetConfig+0x9c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d109      	bne.n	8005ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	019b      	lsls	r3, r3, #6
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000

08005efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2201      	movs	r2, #1
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1a      	ldr	r2, [r3, #32]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	401a      	ands	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e050      	b.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fac:	d013      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a18      	ldr	r2, [pc, #96]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a16      	ldr	r2, [pc, #88]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d10c      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000

08006024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800603c:	2302      	movs	r3, #2
 800603e:	e03d      	b.n	80060bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006102:	2b84      	cmp	r3, #132	; 0x84
 8006104:	d005      	beq.n	8006112 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006106:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	3303      	adds	r3, #3
 8006110:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006124:	f000 ffe8 	bl	80070f8 <vTaskStartScheduler>
  
  return osOK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	bd80      	pop	{r7, pc}

0800612e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800612e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006130:	b089      	sub	sp, #36	; 0x24
 8006132:	af04      	add	r7, sp, #16
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <osThreadCreate+0x54>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685c      	ldr	r4, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691e      	ldr	r6, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ffc8 	bl	80060f0 <makeFreeRtosPriority>
 8006160:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	9100      	str	r1, [sp, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	4632      	mov	r2, r6
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fde0 	bl	8006d3c <xTaskCreateStatic>
 800617c:	4603      	mov	r3, r0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e01c      	b.n	80061bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685c      	ldr	r4, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800618e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff ffaa 	bl	80060f0 <makeFreeRtosPriority>
 800619c:	4602      	mov	r2, r0
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	9200      	str	r2, [sp, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4632      	mov	r2, r6
 80061aa:	4629      	mov	r1, r5
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fe22 	bl	8006df6 <xTaskCreate>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061bc:	68fb      	ldr	r3, [r7, #12]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <osDelay+0x16>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e000      	b.n	80061de <osDelay+0x18>
 80061dc:	2301      	movs	r3, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 ff56 	bl	8007090 <vTaskDelay>
  
  return osOK;
 80061e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f103 0208 	add.w	r2, r3, #8
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f103 0208 	add.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e00c      	b.n	80062ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3308      	adds	r3, #8
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e002      	b.n	80062be <vListInsert+0x2e>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d2f6      	bcs.n	80062b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6892      	ldr	r2, [r2, #8]
 8006318:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6852      	ldr	r2, [r2, #4]
 8006322:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d103      	bne.n	8006336 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006382:	f001 fe17 	bl	8007fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006392:	fb01 f303 	mul.w	r3, r1, r3
 8006396:	441a      	add	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	3b01      	subs	r3, #1
 80063b4:	68f9      	ldr	r1, [r7, #12]
 80063b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	441a      	add	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ff      	movs	r2, #255	; 0xff
 80063c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	; 0xff
 80063ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d114      	bne.n	8006402 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01a      	beq.n	8006416 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3310      	adds	r3, #16
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f8d9 	bl	800759c <xTaskRemoveFromEventList>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <xQueueGenericReset+0xcc>)
 80063f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	e009      	b.n	8006416 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3310      	adds	r3, #16
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fef1 	bl	80061ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3324      	adds	r3, #36	; 0x24
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff feec 	bl	80061ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006416:	f001 fdfd 	bl	8008014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800641a:	2301      	movs	r3, #1
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericCreate+0x2a>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	613b      	str	r3, [r7, #16]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3348      	adds	r3, #72	; 0x48
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fe89 	bl	8008178 <pvPortMalloc>
 8006466:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d011      	beq.n	8006492 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3348      	adds	r3, #72	; 0x48
 8006476:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006480:	79fa      	ldrb	r2, [r7, #7]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f805 	bl	800649c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006492:	69bb      	ldr	r3, [r7, #24]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3720      	adds	r7, #32
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064ca:	2101      	movs	r1, #1
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f7ff ff43 	bl	8006358 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064ea:	2300      	movs	r3, #0
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueGenericSend+0x32>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <xQueueGenericSend+0x40>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <xQueueGenericSend+0x44>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <xQueueGenericSend+0x46>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <xQueueGenericSend+0x60>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x6e>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <xQueueGenericSend+0x72>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xQueueGenericSend+0x74>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xQueueGenericSend+0x8e>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800656a:	f001 f9d7 	bl	800791c <xTaskGetSchedulerState>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <xQueueGenericSend+0x9e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueGenericSend+0xa2>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSend+0xa4>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueGenericSend+0xbe>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800659a:	f001 fd0b 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <xQueueGenericSend+0xd4>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d129      	bne.n	8006604 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b6:	f000 fab1 	bl	8006b1c <prvCopyDataToQueue>
 80065ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ffe7 	bl	800759c <xTaskRemoveFromEventList>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	e00a      	b.n	80065fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065ec:	4b39      	ldr	r3, [pc, #228]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065fc:	f001 fd0a 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 8006600:	2301      	movs	r3, #1
 8006602:	e063      	b.n	80066cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800660a:	f001 fd03 	bl	8008014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800660e:	2300      	movs	r3, #0
 8006610:	e05c      	b.n	80066cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f81f 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006622:	2301      	movs	r3, #1
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006626:	f001 fcf5 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800662a:	f000 fdcf 	bl	80071cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800662e:	f001 fcc1 	bl	8007fb4 <vPortEnterCritical>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006638:	b25b      	sxtb	r3, r3
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d103      	bne.n	8006648 <xQueueGenericSend+0x16c>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800664e:	b25b      	sxtb	r3, r3
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d103      	bne.n	800665e <xQueueGenericSend+0x182>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800665e:	f001 fcd9 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006662:	1d3a      	adds	r2, r7, #4
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4611      	mov	r1, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f001 f80e 	bl	800768c <xTaskCheckForTimeOut>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d124      	bne.n	80066c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006678:	f000 fb48 	bl	8006d0c <prvIsQueueFull>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	3310      	adds	r3, #16
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f000 ff62 	bl	8007554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006692:	f000 fad3 	bl	8006c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006696:	f000 fda7 	bl	80071e8 <xTaskResumeAll>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f af7c 	bne.w	800659a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80066a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	e772      	b.n	800659a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b6:	f000 fac1 	bl	8006c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ba:	f000 fd95 	bl	80071e8 <xTaskResumeAll>
 80066be:	e76c      	b.n	800659a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fabb 	bl	8006c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066c6:	f000 fd8f 	bl	80071e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3738      	adds	r7, #56	; 0x38
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08c      	sub	sp, #48	; 0x30
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <xQueueReceive+0x30>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	623b      	str	r3, [r7, #32]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <xQueueReceive+0x3e>
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <xQueueReceive+0x42>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <xQueueReceive+0x44>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <xQueueReceive+0x5e>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61fb      	str	r3, [r7, #28]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006736:	f001 f8f1 	bl	800791c <xTaskGetSchedulerState>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <xQueueReceive+0x6e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <xQueueReceive+0x72>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <xQueueReceive+0x74>
 800674a:	2300      	movs	r3, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueReceive+0x8e>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	61bb      	str	r3, [r7, #24]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006766:	f001 fc25 	bl	8007fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01f      	beq.n	80067b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800677a:	f000 fa39 	bl	8006bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00f      	beq.n	80067ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	3310      	adds	r3, #16
 8006792:	4618      	mov	r0, r3
 8006794:	f000 ff02 	bl	800759c <xTaskRemoveFromEventList>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800679e:	4b3d      	ldr	r3, [pc, #244]	; (8006894 <xQueueReceive+0x1bc>)
 80067a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067ae:	f001 fc31 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e069      	b.n	800688a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067bc:	f001 fc2a 	bl	8008014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e062      	b.n	800688a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ca:	f107 0310 	add.w	r3, r7, #16
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 ff46 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d8:	f001 fc1c 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067dc:	f000 fcf6 	bl	80071cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067e0:	f001 fbe8 	bl	8007fb4 <vPortEnterCritical>
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d103      	bne.n	80067fa <xQueueReceive+0x122>
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006800:	b25b      	sxtb	r3, r3
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d103      	bne.n	8006810 <xQueueReceive+0x138>
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006810:	f001 fc00 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006814:	1d3a      	adds	r2, r7, #4
 8006816:	f107 0310 	add.w	r3, r7, #16
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f000 ff35 	bl	800768c <xTaskCheckForTimeOut>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d123      	bne.n	8006870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682a:	f000 fa59 	bl	8006ce0 <prvIsQueueEmpty>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d017      	beq.n	8006864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fe89 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006844:	f000 f9fa 	bl	8006c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006848:	f000 fcce 	bl	80071e8 <xTaskResumeAll>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d189      	bne.n	8006766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <xQueueReceive+0x1bc>)
 8006854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	e780      	b.n	8006766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006866:	f000 f9e9 	bl	8006c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800686a:	f000 fcbd 	bl	80071e8 <xTaskResumeAll>
 800686e:	e77a      	b.n	8006766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006872:	f000 f9e3 	bl	8006c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006876:	f000 fcb7 	bl	80071e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800687a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800687c:	f000 fa30 	bl	8006ce0 <prvIsQueueEmpty>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f af6f 	beq.w	8006766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800688a:	4618      	mov	r0, r3
 800688c:	3730      	adds	r7, #48	; 0x30
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	623b      	str	r3, [r7, #32]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61fb      	str	r3, [r7, #28]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068e8:	f001 f818 	bl	800791c <xTaskGetSchedulerState>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <xQueueSemaphoreTake+0x60>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <xQueueSemaphoreTake+0x64>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <xQueueSemaphoreTake+0x66>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	61bb      	str	r3, [r7, #24]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006918:	f001 fb4c 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d024      	beq.n	8006972 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	1e5a      	subs	r2, r3, #1
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006938:	f001 f998 	bl	8007c6c <pvTaskIncrementMutexHeldCount>
 800693c:	4602      	mov	r2, r0
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00f      	beq.n	800696a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	3310      	adds	r3, #16
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fe24 	bl	800759c <xTaskRemoveFromEventList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800695a:	4b54      	ldr	r3, [pc, #336]	; (8006aac <xQueueSemaphoreTake+0x214>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800696a:	f001 fb53 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 800696e:	2301      	movs	r3, #1
 8006970:	e097      	b.n	8006aa2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d111      	bne.n	800699c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	617b      	str	r3, [r7, #20]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006994:	f001 fb3e 	bl	8008014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006998:	2300      	movs	r3, #0
 800699a:	e082      	b.n	8006aa2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a2:	f107 030c 	add.w	r3, r7, #12
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fe5a 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069b0:	f001 fb30 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069b4:	f000 fc0a 	bl	80071cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069b8:	f001 fafc 	bl	8007fb4 <vPortEnterCritical>
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d103      	bne.n	80069d2 <xQueueSemaphoreTake+0x13a>
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d103      	bne.n	80069e8 <xQueueSemaphoreTake+0x150>
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e8:	f001 fb14 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ec:	463a      	mov	r2, r7
 80069ee:	f107 030c 	add.w	r3, r7, #12
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fe49 	bl	800768c <xTaskCheckForTimeOut>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d132      	bne.n	8006a66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a02:	f000 f96d 	bl	8006ce0 <prvIsQueueEmpty>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d026      	beq.n	8006a5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006a14:	f001 face 	bl	8007fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 ff9b 	bl	8007958 <xTaskPriorityInherit>
 8006a22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a24:	f001 faf6 	bl	8008014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	3324      	adds	r3, #36	; 0x24
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fd8f 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a38:	f000 f900 	bl	8006c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a3c:	f000 fbd4 	bl	80071e8 <xTaskResumeAll>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f47f af68 	bne.w	8006918 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <xQueueSemaphoreTake+0x214>)
 8006a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	e75e      	b.n	8006918 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a5c:	f000 f8ee 	bl	8006c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a60:	f000 fbc2 	bl	80071e8 <xTaskResumeAll>
 8006a64:	e758      	b.n	8006918 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a68:	f000 f8e8 	bl	8006c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a6c:	f000 fbbc 	bl	80071e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a72:	f000 f935 	bl	8006ce0 <prvIsQueueEmpty>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f43f af4d 	beq.w	8006918 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a84:	f001 fa96 	bl	8007fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a8a:	f000 f82f 	bl	8006aec <prvGetDisinheritPriorityAfterTimeout>
 8006a8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f85a 	bl	8007b50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a9c:	f001 faba 	bl	8008014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3738      	adds	r7, #56	; 0x38
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60bb      	str	r3, [r7, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006ad4:	f001 fa6e 	bl	8007fb4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006ade:	f001 fa99 	bl	8008014 <vPortExitCritical>

	return uxReturn;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d006      	beq.n	8006b0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1c3 0307 	rsb	r3, r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e001      	b.n	8006b0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d14d      	bne.n	8006bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 ff7c 	bl	8007a44 <xTaskPriorityDisinherit>
 8006b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	e043      	b.n	8006bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d119      	bne.n	8006b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6858      	ldr	r0, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	f001 fd74 	bl	8008654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d32b      	bcc.n	8006bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	e026      	b.n	8006bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68d8      	ldr	r0, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	f001 fd5a 	bl	8008654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	425b      	negs	r3, r3
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d207      	bcs.n	8006bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	425b      	negs	r3, r3
 8006bc6:	441a      	add	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d105      	bne.n	8006bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006be6:	697b      	ldr	r3, [r7, #20]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	441a      	add	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d303      	bcc.n	8006c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68d9      	ldr	r1, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6838      	ldr	r0, [r7, #0]
 8006c30:	f001 fd10 	bl	8008654 <memcpy>
	}
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c44:	f001 f9b6 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c50:	e011      	b.n	8006c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d012      	beq.n	8006c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fc9c 	bl	800759c <xTaskRemoveFromEventList>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c6a:	f000 fd71 	bl	8007750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dce9      	bgt.n	8006c52 <prvUnlockQueue+0x16>
 8006c7e:	e000      	b.n	8006c82 <prvUnlockQueue+0x46>
					break;
 8006c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c8a:	f001 f9c3 	bl	8008014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c8e:	f001 f991 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c9a:	e011      	b.n	8006cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d012      	beq.n	8006cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3310      	adds	r3, #16
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fc77 	bl	800759c <xTaskRemoveFromEventList>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cb4:	f000 fd4c 	bl	8007750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dce9      	bgt.n	8006c9c <prvUnlockQueue+0x60>
 8006cc8:	e000      	b.n	8006ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	22ff      	movs	r2, #255	; 0xff
 8006cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cd4:	f001 f99e 	bl	8008014 <vPortExitCritical>
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce8:	f001 f964 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e001      	b.n	8006cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cfe:	f001 f989 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d14:	f001 f94e 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d102      	bne.n	8006d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e001      	b.n	8006d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f001 f971 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08e      	sub	sp, #56	; 0x38
 8006d40:	af04      	add	r7, sp, #16
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	623b      	str	r3, [r7, #32]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xTaskCreateStatic+0x46>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	61fb      	str	r3, [r7, #28]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d82:	23a0      	movs	r3, #160	; 0xa0
 8006d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2ba0      	cmp	r3, #160	; 0xa0
 8006d8a:	d00a      	beq.n	8006da2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61bb      	str	r3, [r7, #24]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006da2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01e      	beq.n	8006de8 <xTaskCreateStatic+0xac>
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9303      	str	r3, [sp, #12]
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f850 	bl	8006e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de2:	f000 f8eb 	bl	8006fbc <prvAddNewTaskToReadyList>
 8006de6:	e001      	b.n	8006dec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006dec:	697b      	ldr	r3, [r7, #20]
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b08c      	sub	sp, #48	; 0x30
 8006dfa:	af04      	add	r7, sp, #16
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 f9b4 	bl	8008178 <pvPortMalloc>
 8006e10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e18:	20a0      	movs	r0, #160	; 0xa0
 8006e1a:	f001 f9ad 	bl	8008178 <pvPortMalloc>
 8006e1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e2c:	e005      	b.n	8006e3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f001 fa6e 	bl	8008310 <vPortFree>
 8006e34:	e001      	b.n	8006e3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d017      	beq.n	8006e70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	9302      	str	r3, [sp, #8]
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f80e 	bl	8006e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e64:	69f8      	ldr	r0, [r7, #28]
 8006e66:	f000 f8a9 	bl	8006fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e002      	b.n	8006e76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e76:	69bb      	ldr	r3, [r7, #24]
	}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	617b      	str	r3, [r7, #20]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01f      	beq.n	8006f0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e012      	b.n	8006efa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	7819      	ldrb	r1, [r3, #0]
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3334      	adds	r3, #52	; 0x34
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b0f      	cmp	r3, #15
 8006efe:	d9e9      	bls.n	8006ed4 <prvInitialiseNewTask+0x54>
 8006f00:	e000      	b.n	8006f04 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f0c:	e003      	b.n	8006f16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	2b06      	cmp	r3, #6
 8006f1a:	d901      	bls.n	8006f20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2200      	movs	r2, #0
 8006f30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff f979 	bl	800622e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f974 	bl	800622e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	f1c3 0207 	rsb	r2, r3, #7
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	334c      	adds	r3, #76	; 0x4c
 8006f70:	224c      	movs	r2, #76	; 0x4c
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fae9 	bl	800854c <memset>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	4a0c      	ldr	r2, [pc, #48]	; (8006fb0 <prvInitialiseNewTask+0x130>)
 8006f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <prvInitialiseNewTask+0x134>)
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <prvInitialiseNewTask+0x138>)
 8006f8a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	68f9      	ldr	r1, [r7, #12]
 8006f90:	69b8      	ldr	r0, [r7, #24]
 8006f92:	f000 fee5 	bl	8007d60 <pxPortInitialiseStack>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa8:	bf00      	nop
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	2000540c 	.word	0x2000540c
 8006fb4:	20005474 	.word	0x20005474
 8006fb8:	200054dc 	.word	0x200054dc

08006fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fc4:	f000 fff6 	bl	8007fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fda:	4a27      	ldr	r2, [pc, #156]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fe0:	4b24      	ldr	r3, [pc, #144]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d110      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fe8:	f000 fbd6 	bl	8007798 <prvInitialiseTaskLists>
 8006fec:	e00d      	b.n	800700a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d802      	bhi.n	800700a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 8007012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2201      	movs	r2, #1
 800701a:	409a      	lsls	r2, r3
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <prvAddNewTaskToReadyList+0xcc>)
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7ff f903 	bl	8006248 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007042:	f000 ffe7 	bl	8008014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <prvAddNewTaskToReadyList+0xd0>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200017b8 	.word	0x200017b8
 8007078:	200016b8 	.word	0x200016b8
 800707c:	200017c4 	.word	0x200017c4
 8007080:	200017d4 	.word	0x200017d4
 8007084:	200017c0 	.word	0x200017c0
 8007088:	200016bc 	.word	0x200016bc
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <vTaskDelay+0x60>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <vTaskDelay+0x30>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070c0:	f000 f884 	bl	80071cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fde4 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070cc:	f000 f88c 	bl	80071e8 <xTaskResumeAll>
 80070d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d107      	bne.n	80070e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <vTaskDelay+0x64>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200017e0 	.word	0x200017e0
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007106:	463a      	mov	r2, r7
 8007108:	1d39      	adds	r1, r7, #4
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7f9 fbf6 	bl	8000900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	460a      	mov	r2, r1
 8007126:	4921      	ldr	r1, [pc, #132]	; (80071ac <vTaskStartScheduler+0xb4>)
 8007128:	4821      	ldr	r0, [pc, #132]	; (80071b0 <vTaskStartScheduler+0xb8>)
 800712a:	f7ff fe07 	bl	8006d3c <xTaskCreateStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <vTaskStartScheduler+0xbc>)
 8007132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007134:	4b1f      	ldr	r3, [pc, #124]	; (80071b4 <vTaskStartScheduler+0xbc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e001      	b.n	8007146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d11b      	bne.n	8007184 <vTaskStartScheduler+0x8c>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	613b      	str	r3, [r7, #16]
}
 800715e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <vTaskStartScheduler+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	334c      	adds	r3, #76	; 0x4c
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <vTaskStartScheduler+0xc4>)
 8007168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800716a:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <vTaskStartScheduler+0xc8>)
 800716c:	f04f 32ff 	mov.w	r2, #4294967295
 8007170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007172:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <vTaskStartScheduler+0xcc>)
 8007174:	2201      	movs	r2, #1
 8007176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007178:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <vTaskStartScheduler+0xd0>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800717e:	f000 fe77 	bl	8007e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007182:	e00e      	b.n	80071a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d10a      	bne.n	80071a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60fb      	str	r3, [r7, #12]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <vTaskStartScheduler+0xa8>
}
 80071a2:	bf00      	nop
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	0800881c 	.word	0x0800881c
 80071b0:	08007769 	.word	0x08007769
 80071b4:	200017dc 	.word	0x200017dc
 80071b8:	200016b8 	.word	0x200016b8
 80071bc:	200000ec 	.word	0x200000ec
 80071c0:	200017d8 	.word	0x200017d8
 80071c4:	200017c4 	.word	0x200017c4
 80071c8:	200017bc 	.word	0x200017bc

080071cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071d0:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <vTaskSuspendAll+0x18>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	4a03      	ldr	r2, [pc, #12]	; (80071e4 <vTaskSuspendAll+0x18>)
 80071d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071da:	bf00      	nop
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	200017e0 	.word	0x200017e0

080071e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071f6:	4b41      	ldr	r3, [pc, #260]	; (80072fc <xTaskResumeAll+0x114>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <xTaskResumeAll+0x2c>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	603b      	str	r3, [r7, #0]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007214:	f000 fece 	bl	8007fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007218:	4b38      	ldr	r3, [pc, #224]	; (80072fc <xTaskResumeAll+0x114>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3b01      	subs	r3, #1
 800721e:	4a37      	ldr	r2, [pc, #220]	; (80072fc <xTaskResumeAll+0x114>)
 8007220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007222:	4b36      	ldr	r3, [pc, #216]	; (80072fc <xTaskResumeAll+0x114>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d161      	bne.n	80072ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800722a:	4b35      	ldr	r3, [pc, #212]	; (8007300 <xTaskResumeAll+0x118>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d05d      	beq.n	80072ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007232:	e02e      	b.n	8007292 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007234:	4b33      	ldr	r3, [pc, #204]	; (8007304 <xTaskResumeAll+0x11c>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3318      	adds	r3, #24
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff f85e 	bl	8006302 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3304      	adds	r3, #4
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff f859 	bl	8006302 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2201      	movs	r2, #1
 8007256:	409a      	lsls	r2, r3
 8007258:	4b2b      	ldr	r3, [pc, #172]	; (8007308 <xTaskResumeAll+0x120>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4313      	orrs	r3, r2
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <xTaskResumeAll+0x120>)
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a27      	ldr	r2, [pc, #156]	; (800730c <xTaskResumeAll+0x124>)
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fe ffe5 	bl	8006248 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4b23      	ldr	r3, [pc, #140]	; (8007310 <xTaskResumeAll+0x128>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800728c:	4b21      	ldr	r3, [pc, #132]	; (8007314 <xTaskResumeAll+0x12c>)
 800728e:	2201      	movs	r2, #1
 8007290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <xTaskResumeAll+0x11c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1cc      	bne.n	8007234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072a0:	f000 fb1c 	bl	80078dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072a4:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <xTaskResumeAll+0x130>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d010      	beq.n	80072d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072b0:	f000 f836 	bl	8007320 <xTaskIncrementTick>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <xTaskResumeAll+0x12c>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1f1      	bne.n	80072b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <xTaskResumeAll+0x130>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <xTaskResumeAll+0x12c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <xTaskResumeAll+0x134>)
 80072e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ee:	f000 fe91 	bl	8008014 <vPortExitCritical>

	return xAlreadyYielded;
 80072f2:	68bb      	ldr	r3, [r7, #8]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200017e0 	.word	0x200017e0
 8007300:	200017b8 	.word	0x200017b8
 8007304:	20001778 	.word	0x20001778
 8007308:	200017c0 	.word	0x200017c0
 800730c:	200016bc 	.word	0x200016bc
 8007310:	200016b8 	.word	0x200016b8
 8007314:	200017cc 	.word	0x200017cc
 8007318:	200017c8 	.word	0x200017c8
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732a:	4b4e      	ldr	r3, [pc, #312]	; (8007464 <xTaskIncrementTick+0x144>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 808e 	bne.w	8007450 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007334:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <xTaskIncrementTick+0x148>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800733c:	4a4a      	ldr	r2, [pc, #296]	; (8007468 <xTaskIncrementTick+0x148>)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d120      	bne.n	800738a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007348:	4b48      	ldr	r3, [pc, #288]	; (800746c <xTaskIncrementTick+0x14c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <xTaskIncrementTick+0x48>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	603b      	str	r3, [r7, #0]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xTaskIncrementTick+0x46>
 8007368:	4b40      	ldr	r3, [pc, #256]	; (800746c <xTaskIncrementTick+0x14c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	4b40      	ldr	r3, [pc, #256]	; (8007470 <xTaskIncrementTick+0x150>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3e      	ldr	r2, [pc, #248]	; (800746c <xTaskIncrementTick+0x14c>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4a3e      	ldr	r2, [pc, #248]	; (8007470 <xTaskIncrementTick+0x150>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <xTaskIncrementTick+0x154>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <xTaskIncrementTick+0x154>)
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	f000 faa9 	bl	80078dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800738a:	4b3b      	ldr	r3, [pc, #236]	; (8007478 <xTaskIncrementTick+0x158>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	d348      	bcc.n	8007426 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007394:	4b35      	ldr	r3, [pc, #212]	; (800746c <xTaskIncrementTick+0x14c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739e:	4b36      	ldr	r3, [pc, #216]	; (8007478 <xTaskIncrementTick+0x158>)
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	601a      	str	r2, [r3, #0]
					break;
 80073a6:	e03e      	b.n	8007426 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a8:	4b30      	ldr	r3, [pc, #192]	; (800746c <xTaskIncrementTick+0x14c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d203      	bcs.n	80073c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073c0:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <xTaskIncrementTick+0x158>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073c6:	e02e      	b.n	8007426 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe ff98 	bl	8006302 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3318      	adds	r3, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe ff8f 	bl	8006302 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	4b23      	ldr	r3, [pc, #140]	; (800747c <xTaskIncrementTick+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4a22      	ldr	r2, [pc, #136]	; (800747c <xTaskIncrementTick+0x15c>)
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <xTaskIncrementTick+0x160>)
 8007404:	441a      	add	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe ff1b 	bl	8006248 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <xTaskIncrementTick+0x164>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d3b9      	bcc.n	8007394 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007424:	e7b6      	b.n	8007394 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <xTaskIncrementTick+0x164>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4914      	ldr	r1, [pc, #80]	; (8007480 <xTaskIncrementTick+0x160>)
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d901      	bls.n	8007442 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <xTaskIncrementTick+0x168>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800744a:	2301      	movs	r3, #1
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e004      	b.n	800745a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <xTaskIncrementTick+0x16c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a0d      	ldr	r2, [pc, #52]	; (800748c <xTaskIncrementTick+0x16c>)
 8007458:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800745a:	697b      	ldr	r3, [r7, #20]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200017e0 	.word	0x200017e0
 8007468:	200017bc 	.word	0x200017bc
 800746c:	20001770 	.word	0x20001770
 8007470:	20001774 	.word	0x20001774
 8007474:	200017d0 	.word	0x200017d0
 8007478:	200017d8 	.word	0x200017d8
 800747c:	200017c0 	.word	0x200017c0
 8007480:	200016bc 	.word	0x200016bc
 8007484:	200016b8 	.word	0x200016b8
 8007488:	200017cc 	.word	0x200017cc
 800748c:	200017c8 	.word	0x200017c8

08007490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007496:	4b29      	ldr	r3, [pc, #164]	; (800753c <vTaskSwitchContext+0xac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074a4:	e044      	b.n	8007530 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80074a6:	4b26      	ldr	r3, [pc, #152]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <vTaskSwitchContext+0xb4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	fab3 f383 	clz	r3, r3
 80074b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f1c3 031f 	rsb	r3, r3, #31
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	4921      	ldr	r1, [pc, #132]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	607b      	str	r3, [r7, #4]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <vTaskSwitchContext+0x5a>
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074f8:	4413      	add	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3308      	adds	r3, #8
 800750e:	429a      	cmp	r2, r3
 8007510:	d104      	bne.n	800751c <vTaskSwitchContext+0x8c>
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <vTaskSwitchContext+0xbc>)
 8007524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <vTaskSwitchContext+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	334c      	adds	r3, #76	; 0x4c
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <vTaskSwitchContext+0xc0>)
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	200017e0 	.word	0x200017e0
 8007540:	200017cc 	.word	0x200017cc
 8007544:	200017c0 	.word	0x200017c0
 8007548:	200016bc 	.word	0x200016bc
 800754c:	200016b8 	.word	0x200016b8
 8007550:	200000ec 	.word	0x200000ec

08007554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <vTaskPlaceOnEventList+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3318      	adds	r3, #24
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fe fe84 	bl	8006290 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007588:	2101      	movs	r1, #1
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f000 fb82 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200016b8 	.word	0x200016b8

0800759c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60fb      	str	r3, [r7, #12]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fe98 	bl	8006302 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d2:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <xTaskRemoveFromEventList+0xac>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11c      	bne.n	8007614 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fe8f 	bl	8006302 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	4b17      	ldr	r3, [pc, #92]	; (800764c <xTaskRemoveFromEventList+0xb0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	4a16      	ldr	r2, [pc, #88]	; (800764c <xTaskRemoveFromEventList+0xb0>)
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4a13      	ldr	r2, [pc, #76]	; (8007650 <xTaskRemoveFromEventList+0xb4>)
 8007604:	441a      	add	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fe fe1b 	bl	8006248 <vListInsertEnd>
 8007612:	e005      	b.n	8007620 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3318      	adds	r3, #24
 8007618:	4619      	mov	r1, r3
 800761a:	480e      	ldr	r0, [pc, #56]	; (8007654 <xTaskRemoveFromEventList+0xb8>)
 800761c:	f7fe fe14 	bl	8006248 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <xTaskRemoveFromEventList+0xbc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	429a      	cmp	r2, r3
 800762c:	d905      	bls.n	800763a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007632:	4b0a      	ldr	r3, [pc, #40]	; (800765c <xTaskRemoveFromEventList+0xc0>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e001      	b.n	800763e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200017e0 	.word	0x200017e0
 800764c:	200017c0 	.word	0x200017c0
 8007650:	200016bc 	.word	0x200016bc
 8007654:	20001778 	.word	0x20001778
 8007658:	200016b8 	.word	0x200016b8
 800765c:	200017cc 	.word	0x200017cc

08007660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <vTaskInternalSetTimeOutState+0x24>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <vTaskInternalSetTimeOutState+0x28>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	200017d0 	.word	0x200017d0
 8007688:	200017bc 	.word	0x200017bc

0800768c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076ce:	f000 fc71 	bl	8007fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <xTaskCheckForTimeOut+0xbc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d102      	bne.n	80076f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e023      	b.n	800773a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <xTaskCheckForTimeOut+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d007      	beq.n	800770e <xTaskCheckForTimeOut+0x82>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	d302      	bcc.n	800770e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e015      	b.n	800773a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	429a      	cmp	r2, r3
 8007716:	d20b      	bcs.n	8007730 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff9b 	bl	8007660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	e004      	b.n	800773a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007736:	2301      	movs	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800773a:	f000 fc6b 	bl	8008014 <vPortExitCritical>

	return xReturn;
 800773e:	69fb      	ldr	r3, [r7, #28]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	200017bc 	.word	0x200017bc
 800774c:	200017d0 	.word	0x200017d0

08007750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <vTaskMissedYield+0x14>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	200017cc 	.word	0x200017cc

08007768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007770:	f000 f852 	bl	8007818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <prvIdleTask+0x28>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d9f9      	bls.n	8007770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <prvIdleTask+0x2c>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800778c:	e7f0      	b.n	8007770 <prvIdleTask+0x8>
 800778e:	bf00      	nop
 8007790:	200016bc 	.word	0x200016bc
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	e00c      	b.n	80077be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <prvInitialiseTaskLists+0x60>)
 80077b0:	4413      	add	r3, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fd1b 	bl	80061ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3301      	adds	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b06      	cmp	r3, #6
 80077c2:	d9ef      	bls.n	80077a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077c4:	480d      	ldr	r0, [pc, #52]	; (80077fc <prvInitialiseTaskLists+0x64>)
 80077c6:	f7fe fd12 	bl	80061ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ca:	480d      	ldr	r0, [pc, #52]	; (8007800 <prvInitialiseTaskLists+0x68>)
 80077cc:	f7fe fd0f 	bl	80061ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077d0:	480c      	ldr	r0, [pc, #48]	; (8007804 <prvInitialiseTaskLists+0x6c>)
 80077d2:	f7fe fd0c 	bl	80061ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077d6:	480c      	ldr	r0, [pc, #48]	; (8007808 <prvInitialiseTaskLists+0x70>)
 80077d8:	f7fe fd09 	bl	80061ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077dc:	480b      	ldr	r0, [pc, #44]	; (800780c <prvInitialiseTaskLists+0x74>)
 80077de:	f7fe fd06 	bl	80061ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvInitialiseTaskLists+0x78>)
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <prvInitialiseTaskLists+0x64>)
 80077e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <prvInitialiseTaskLists+0x7c>)
 80077ea:	4a05      	ldr	r2, [pc, #20]	; (8007800 <prvInitialiseTaskLists+0x68>)
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200016bc 	.word	0x200016bc
 80077fc:	20001748 	.word	0x20001748
 8007800:	2000175c 	.word	0x2000175c
 8007804:	20001778 	.word	0x20001778
 8007808:	2000178c 	.word	0x2000178c
 800780c:	200017a4 	.word	0x200017a4
 8007810:	20001770 	.word	0x20001770
 8007814:	20001774 	.word	0x20001774

08007818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800781e:	e019      	b.n	8007854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007820:	f000 fbc8 	bl	8007fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <prvCheckTasksWaitingTermination+0x50>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fd66 	bl	8006302 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <prvCheckTasksWaitingTermination+0x54>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a0b      	ldr	r2, [pc, #44]	; (800786c <prvCheckTasksWaitingTermination+0x54>)
 800783e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3b01      	subs	r3, #1
 8007846:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800784a:	f000 fbe3 	bl	8008014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f810 	bl	8007874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e1      	bne.n	8007820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000178c 	.word	0x2000178c
 800786c:	200017b8 	.word	0x200017b8
 8007870:	200017a0 	.word	0x200017a0

08007874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	334c      	adds	r3, #76	; 0x4c
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fe6b 	bl	800855c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fd3b 	bl	8008310 <vPortFree>
				vPortFree( pxTCB );
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fd38 	bl	8008310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078a0:	e018      	b.n	80078d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d103      	bne.n	80078b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd2f 	bl	8008310 <vPortFree>
	}
 80078b2:	e00f      	b.n	80078d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d00a      	beq.n	80078d4 <prvDeleteTCB+0x60>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <prvDeleteTCB+0x5e>
	}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <prvResetNextTaskUnblockTime+0x38>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d104      	bne.n	80078f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvResetNextTaskUnblockTime+0x3c>)
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078f4:	e008      	b.n	8007908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <prvResetNextTaskUnblockTime+0x38>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a04      	ldr	r2, [pc, #16]	; (8007918 <prvResetNextTaskUnblockTime+0x3c>)
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20001770 	.word	0x20001770
 8007918:	200017d8 	.word	0x200017d8

0800791c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007922:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <xTaskGetSchedulerState+0x34>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800792a:	2301      	movs	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	e008      	b.n	8007942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <xTaskGetSchedulerState+0x38>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007938:	2302      	movs	r3, #2
 800793a:	607b      	str	r3, [r7, #4]
 800793c:	e001      	b.n	8007942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007942:	687b      	ldr	r3, [r7, #4]
	}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	200017c4 	.word	0x200017c4
 8007954:	200017e0 	.word	0x200017e0

08007958 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05e      	beq.n	8007a2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	429a      	cmp	r2, r3
 800797a:	d24e      	bcs.n	8007a1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db06      	blt.n	8007992 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007984:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f1c3 0207 	rsb	r2, r3, #7
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6959      	ldr	r1, [r3, #20]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4a26      	ldr	r2, [pc, #152]	; (8007a3c <xTaskPriorityInherit+0xe4>)
 80079a4:	4413      	add	r3, r2
 80079a6:	4299      	cmp	r1, r3
 80079a8:	d12f      	bne.n	8007a0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fca7 	bl	8006302 <uxListRemove>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	2201      	movs	r2, #1
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43da      	mvns	r2, r3
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d0:	4b19      	ldr	r3, [pc, #100]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	2201      	movs	r2, #1
 80079e0:	409a      	lsls	r2, r3
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <xTaskPriorityInherit+0xe4>)
 80079fa:	441a      	add	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fc20 	bl	8006248 <vListInsertEnd>
 8007a08:	e004      	b.n	8007a14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e008      	b.n	8007a2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d201      	bcs.n	8007a2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
	}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200016b8 	.word	0x200016b8
 8007a3c:	200016bc 	.word	0x200016bc
 8007a40:	200017c0 	.word	0x200017c0

08007a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d06e      	beq.n	8007b38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a5a:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <xTaskPriorityDisinherit+0x100>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d00a      	beq.n	8007a7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60fb      	str	r3, [r7, #12]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d044      	beq.n	8007b38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d140      	bne.n	8007b38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe fc21 	bl	8006302 <uxListRemove>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d115      	bne.n	8007af2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	491f      	ldr	r1, [pc, #124]	; (8007b48 <xTaskPriorityDisinherit+0x104>)
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xTaskPriorityDisinherit+0xae>
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	43da      	mvns	r2, r3
 8007ae8:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4013      	ands	r3, r2
 8007aee:	4a17      	ldr	r2, [pc, #92]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007af0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	f1c3 0207 	rsb	r2, r3, #7
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	409a      	lsls	r2, r3
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <xTaskPriorityDisinherit+0x104>)
 8007b26:	441a      	add	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f7fe fb8a 	bl	8006248 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b38:	697b      	ldr	r3, [r7, #20]
	}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200016b8 	.word	0x200016b8
 8007b48:	200016bc 	.word	0x200016bc
 8007b4c:	200017c0 	.word	0x200017c0

08007b50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d077      	beq.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d902      	bls.n	8007b96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e002      	b.n	8007b9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d058      	beq.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d153      	bne.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d10a      	bne.n	8007bd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60bb      	str	r3, [r7, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	db04      	blt.n	8007bee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f1c3 0207 	rsb	r2, r3, #7
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6959      	ldr	r1, [r3, #20]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d129      	bne.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fb7a 	bl	8006302 <uxListRemove>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	2201      	movs	r2, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43da      	mvns	r2, r3
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4013      	ands	r3, r2
 8007c26:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	2201      	movs	r2, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a06      	ldr	r2, [pc, #24]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c4a:	441a      	add	r2, r3
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe faf8 	bl	8006248 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c58:	bf00      	nop
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	200016b8 	.word	0x200016b8
 8007c64:	200016bc 	.word	0x200016bc
 8007c68:	200017c0 	.word	0x200017c0

08007c6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c7e:	3201      	adds	r2, #1
 8007c80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c84:	681b      	ldr	r3, [r3, #0]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	200016b8 	.word	0x200016b8

08007c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c9e:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fb29 	bl	8006302 <uxListRemove>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d10a      	bne.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	481a      	ldr	r0, [pc, #104]	; (8007d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ce6:	f7fe faaf 	bl	8006248 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cea:	e026      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf4:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d209      	bcs.n	8007d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d04:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fabd 	bl	8006290 <vListInsert>
}
 8007d16:	e010      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe fab3 	bl	8006290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d202      	bcs.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d34:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6013      	str	r3, [r2, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	200017bc 	.word	0x200017bc
 8007d48:	200016b8 	.word	0x200016b8
 8007d4c:	200017c0 	.word	0x200017c0
 8007d50:	200017a4 	.word	0x200017a4
 8007d54:	20001774 	.word	0x20001774
 8007d58:	20001770 	.word	0x20001770
 8007d5c:	200017d8 	.word	0x200017d8

08007d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b04      	subs	r3, #4
 8007d70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d90:	4a0c      	ldr	r2, [pc, #48]	; (8007dc4 <pxPortInitialiseStack+0x64>)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b14      	subs	r3, #20
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b04      	subs	r3, #4
 8007da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f06f 0202 	mvn.w	r2, #2
 8007dae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3b20      	subs	r3, #32
 8007db4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	08007dc9 	.word	0x08007dc9

08007dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <prvTaskExitError+0x54>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d00a      	beq.n	8007df2 <prvTaskExitError+0x2a>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60fb      	str	r3, [r7, #12]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <prvTaskExitError+0x28>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	60bb      	str	r3, [r7, #8]
}
 8007e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e06:	bf00      	nop
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0fc      	beq.n	8007e08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	2000009c 	.word	0x2000009c

08007e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <pxCurrentTCBConst2>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	f380 8809 	msr	PSP, r0
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	4770      	bx	lr
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst2>:
 8007e40:	200016b8 	.word	0x200016b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <prvPortStartFirstTask+0x24>)
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f380 8808 	msr	MSP, r0
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8814 	msr	CONTROL, r0
 8007e5a:	b662      	cpsie	i
 8007e5c:	b661      	cpsie	f
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	df00      	svc	0
 8007e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed08 	.word	0xe000ed08

08007e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e76:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <xPortStartScheduler+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10a      	bne.n	8007e96 <xPortStartScheduler+0x26>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	613b      	str	r3, [r7, #16]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e96:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a3f      	ldr	r2, [pc, #252]	; (8007f98 <xPortStartScheduler+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10a      	bne.n	8007eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	60fb      	str	r3, [r7, #12]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eb6:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <xPortStartScheduler+0x12c>)
 8007eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <xPortStartScheduler+0x130>)
 8007edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ee4:	e009      	b.n	8007efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	4a2d      	ldr	r2, [pc, #180]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d0ef      	beq.n	8007ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1c3 0307 	rsb	r3, r3, #7
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d00a      	beq.n	8007f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f28:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f3a:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f5e:	f000 f8dd 	bl	800811c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <xPortStartScheduler+0x13c>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f68:	f000 f8fc 	bl	8008164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f6c:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f78:	f7ff ff66 	bl	8007e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f7c:	f7ff fa88 	bl	8007490 <vTaskSwitchContext>
	prvTaskExitError();
 8007f80:	f7ff ff22 	bl	8007dc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	e000ed00 	.word	0xe000ed00
 8007f94:	410fc271 	.word	0x410fc271
 8007f98:	410fc270 	.word	0x410fc270
 8007f9c:	e000e400 	.word	0xe000e400
 8007fa0:	200017e4 	.word	0x200017e4
 8007fa4:	200017e8 	.word	0x200017e8
 8007fa8:	e000ed20 	.word	0xe000ed20
 8007fac:	2000009c 	.word	0x2000009c
 8007fb0:	e000ef34 	.word	0xe000ef34

08007fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <vPortEnterCritical+0x58>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	; (800800c <vPortEnterCritical+0x58>)
 8007fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <vPortEnterCritical+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d10f      	bne.n	8008000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <vPortEnterCritical+0x5c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	603b      	str	r3, [r7, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <vPortEnterCritical+0x4a>
	}
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000009c 	.word	0x2000009c
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <vPortExitCritical+0x50>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <vPortExitCritical+0x24>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	607b      	str	r3, [r7, #4]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vPortExitCritical+0x50>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <vPortExitCritical+0x50>)
 8008040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <vPortExitCritical+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <vPortExitCritical+0x42>
 800804a:	2300      	movs	r3, #0
 800804c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	2000009c 	.word	0x2000009c
	...

08008070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008070:	f3ef 8009 	mrs	r0, PSP
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <pxCurrentTCBConst>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f01e 0f10 	tst.w	lr, #16
 8008080:	bf08      	it	eq
 8008082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008094:	f380 8811 	msr	BASEPRI, r0
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f7ff f9f6 	bl	8007490 <vTaskSwitchContext>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f380 8811 	msr	BASEPRI, r0
 80080ac:	bc09      	pop	{r0, r3}
 80080ae:	6819      	ldr	r1, [r3, #0]
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b6:	f01e 0f10 	tst.w	lr, #16
 80080ba:	bf08      	it	eq
 80080bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080c0:	f380 8809 	msr	PSP, r0
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst>:
 80080d0:	200016b8 	.word	0x200016b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080f2:	f7ff f915 	bl	8007320 <xTaskIncrementTick>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <SysTick_Handler+0x40>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f383 8811 	msr	BASEPRI, r3
}
 800810e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <vPortSetupTimerInterrupt+0x38>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <vPortSetupTimerInterrupt+0x3c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <vPortSetupTimerInterrupt+0x40>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	4a09      	ldr	r2, [pc, #36]	; (8008160 <vPortSetupTimerInterrupt+0x44>)
 800813a:	3b01      	subs	r3, #1
 800813c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010
 8008154:	e000e018 	.word	0xe000e018
 8008158:	20000000 	.word	0x20000000
 800815c:	10624dd3 	.word	0x10624dd3
 8008160:	e000e014 	.word	0xe000e014

08008164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008174 <vPortEnableVFP+0x10>
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800816e:	6001      	str	r1, [r0, #0]
 8008170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008172:	bf00      	nop
 8008174:	e000ed88 	.word	0xe000ed88

08008178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008184:	f7ff f822 	bl	80071cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008188:	4b5b      	ldr	r3, [pc, #364]	; (80082f8 <pvPortMalloc+0x180>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008190:	f000 f920 	bl	80083d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008194:	4b59      	ldr	r3, [pc, #356]	; (80082fc <pvPortMalloc+0x184>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 8093 	bne.w	80082c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01d      	beq.n	80081e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081a8:	2208      	movs	r2, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d014      	beq.n	80081e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f023 0307 	bic.w	r3, r3, #7
 80081c0:	3308      	adds	r3, #8
 80081c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <pvPortMalloc+0x6c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	617b      	str	r3, [r7, #20]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06e      	beq.n	80082c8 <pvPortMalloc+0x150>
 80081ea:	4b45      	ldr	r3, [pc, #276]	; (8008300 <pvPortMalloc+0x188>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d869      	bhi.n	80082c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081f4:	4b43      	ldr	r3, [pc, #268]	; (8008304 <pvPortMalloc+0x18c>)
 80081f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081f8:	4b42      	ldr	r3, [pc, #264]	; (8008304 <pvPortMalloc+0x18c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081fe:	e004      	b.n	800820a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d903      	bls.n	800821c <pvPortMalloc+0xa4>
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f1      	bne.n	8008200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800821c:	4b36      	ldr	r3, [pc, #216]	; (80082f8 <pvPortMalloc+0x180>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008222:	429a      	cmp	r2, r3
 8008224:	d050      	beq.n	80082c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2208      	movs	r2, #8
 800822c:	4413      	add	r3, r2
 800822e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	2308      	movs	r3, #8
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	429a      	cmp	r2, r3
 8008246:	d91f      	bls.n	8008288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <pvPortMalloc+0xf8>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	613b      	str	r3, [r7, #16]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008282:	69b8      	ldr	r0, [r7, #24]
 8008284:	f000 f908 	bl	8008498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <pvPortMalloc+0x188>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <pvPortMalloc+0x188>)
 8008294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008296:	4b1a      	ldr	r3, [pc, #104]	; (8008300 <pvPortMalloc+0x188>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <pvPortMalloc+0x190>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d203      	bcs.n	80082aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082a2:	4b17      	ldr	r3, [pc, #92]	; (8008300 <pvPortMalloc+0x188>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <pvPortMalloc+0x190>)
 80082a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <pvPortMalloc+0x184>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082be:	4b13      	ldr	r3, [pc, #76]	; (800830c <pvPortMalloc+0x194>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	4a11      	ldr	r2, [pc, #68]	; (800830c <pvPortMalloc+0x194>)
 80082c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082c8:	f7fe ff8e 	bl	80071e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <pvPortMalloc+0x174>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	60fb      	str	r3, [r7, #12]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <pvPortMalloc+0x172>
	return pvReturn;
 80082ec:	69fb      	ldr	r3, [r7, #28]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3728      	adds	r7, #40	; 0x28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	200053f4 	.word	0x200053f4
 80082fc:	20005408 	.word	0x20005408
 8008300:	200053f8 	.word	0x200053f8
 8008304:	200053ec 	.word	0x200053ec
 8008308:	200053fc 	.word	0x200053fc
 800830c:	20005400 	.word	0x20005400

08008310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04d      	beq.n	80083be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008322:	2308      	movs	r3, #8
 8008324:	425b      	negs	r3, r3
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4413      	add	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <vPortFree+0xb8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4013      	ands	r3, r2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <vPortFree+0x44>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60fb      	str	r3, [r7, #12]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <vPortFree+0x62>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60bb      	str	r3, [r7, #8]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <vPortFree+0xb8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01e      	beq.n	80083be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11a      	bne.n	80083be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <vPortFree+0xb8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	43db      	mvns	r3, r3
 8008392:	401a      	ands	r2, r3
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008398:	f7fe ff18 	bl	80071cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <vPortFree+0xbc>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4413      	add	r3, r2
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <vPortFree+0xbc>)
 80083a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083aa:	6938      	ldr	r0, [r7, #16]
 80083ac:	f000 f874 	bl	8008498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <vPortFree+0xc0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	4a06      	ldr	r2, [pc, #24]	; (80083d0 <vPortFree+0xc0>)
 80083b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083ba:	f7fe ff15 	bl	80071e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083be:	bf00      	nop
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20005408 	.word	0x20005408
 80083cc:	200053f8 	.word	0x200053f8
 80083d0:	20005404 	.word	0x20005404

080083d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083e0:	4b27      	ldr	r3, [pc, #156]	; (8008480 <prvHeapInit+0xac>)
 80083e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3307      	adds	r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <prvHeapInit+0xac>)
 8008404:	4413      	add	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <prvHeapInit+0xb0>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <prvHeapInit+0xb0>)
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008420:	2208      	movs	r2, #8
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a15      	ldr	r2, [pc, #84]	; (8008488 <prvHeapInit+0xb4>)
 8008434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvHeapInit+0xb4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800843e:	4b12      	ldr	r3, [pc, #72]	; (8008488 <prvHeapInit+0xb4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvHeapInit+0xb4>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <prvHeapInit+0xb8>)
 8008462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <prvHeapInit+0xbc>)
 800846a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <prvHeapInit+0xc0>)
 800846e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	200017ec 	.word	0x200017ec
 8008484:	200053ec 	.word	0x200053ec
 8008488:	200053f4 	.word	0x200053f4
 800848c:	200053fc 	.word	0x200053fc
 8008490:	200053f8 	.word	0x200053f8
 8008494:	20005408 	.word	0x20005408

08008498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084a0:	4b28      	ldr	r3, [pc, #160]	; (8008544 <prvInsertBlockIntoFreeList+0xac>)
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e002      	b.n	80084ac <prvInsertBlockIntoFreeList+0x14>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d8f7      	bhi.n	80084a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d108      	bne.n	80084da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	441a      	add	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d118      	bne.n	8008520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d00d      	beq.n	8008516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	441a      	add	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e008      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e003      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d002      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	200053ec 	.word	0x200053ec
 8008548:	200053f4 	.word	0x200053f4

0800854c <memset>:
 800854c:	4402      	add	r2, r0
 800854e:	4603      	mov	r3, r0
 8008550:	4293      	cmp	r3, r2
 8008552:	d100      	bne.n	8008556 <memset+0xa>
 8008554:	4770      	bx	lr
 8008556:	f803 1b01 	strb.w	r1, [r3], #1
 800855a:	e7f9      	b.n	8008550 <memset+0x4>

0800855c <_reclaim_reent>:
 800855c:	4b29      	ldr	r3, [pc, #164]	; (8008604 <_reclaim_reent+0xa8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4283      	cmp	r3, r0
 8008562:	b570      	push	{r4, r5, r6, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	d04b      	beq.n	8008600 <_reclaim_reent+0xa4>
 8008568:	69c3      	ldr	r3, [r0, #28]
 800856a:	b143      	cbz	r3, 800857e <_reclaim_reent+0x22>
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d144      	bne.n	80085fc <_reclaim_reent+0xa0>
 8008572:	69e3      	ldr	r3, [r4, #28]
 8008574:	6819      	ldr	r1, [r3, #0]
 8008576:	b111      	cbz	r1, 800857e <_reclaim_reent+0x22>
 8008578:	4620      	mov	r0, r4
 800857a:	f000 f879 	bl	8008670 <_free_r>
 800857e:	6961      	ldr	r1, [r4, #20]
 8008580:	b111      	cbz	r1, 8008588 <_reclaim_reent+0x2c>
 8008582:	4620      	mov	r0, r4
 8008584:	f000 f874 	bl	8008670 <_free_r>
 8008588:	69e1      	ldr	r1, [r4, #28]
 800858a:	b111      	cbz	r1, 8008592 <_reclaim_reent+0x36>
 800858c:	4620      	mov	r0, r4
 800858e:	f000 f86f 	bl	8008670 <_free_r>
 8008592:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008594:	b111      	cbz	r1, 800859c <_reclaim_reent+0x40>
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f86a 	bl	8008670 <_free_r>
 800859c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800859e:	b111      	cbz	r1, 80085a6 <_reclaim_reent+0x4a>
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 f865 	bl	8008670 <_free_r>
 80085a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085a8:	b111      	cbz	r1, 80085b0 <_reclaim_reent+0x54>
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f860 	bl	8008670 <_free_r>
 80085b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085b2:	b111      	cbz	r1, 80085ba <_reclaim_reent+0x5e>
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 f85b 	bl	8008670 <_free_r>
 80085ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80085bc:	b111      	cbz	r1, 80085c4 <_reclaim_reent+0x68>
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 f856 	bl	8008670 <_free_r>
 80085c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80085c6:	b111      	cbz	r1, 80085ce <_reclaim_reent+0x72>
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 f851 	bl	8008670 <_free_r>
 80085ce:	6a23      	ldr	r3, [r4, #32]
 80085d0:	b1b3      	cbz	r3, 8008600 <_reclaim_reent+0xa4>
 80085d2:	4620      	mov	r0, r4
 80085d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085d8:	4718      	bx	r3
 80085da:	5949      	ldr	r1, [r1, r5]
 80085dc:	b941      	cbnz	r1, 80085f0 <_reclaim_reent+0x94>
 80085de:	3504      	adds	r5, #4
 80085e0:	69e3      	ldr	r3, [r4, #28]
 80085e2:	2d80      	cmp	r5, #128	; 0x80
 80085e4:	68d9      	ldr	r1, [r3, #12]
 80085e6:	d1f8      	bne.n	80085da <_reclaim_reent+0x7e>
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 f841 	bl	8008670 <_free_r>
 80085ee:	e7c0      	b.n	8008572 <_reclaim_reent+0x16>
 80085f0:	680e      	ldr	r6, [r1, #0]
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f83c 	bl	8008670 <_free_r>
 80085f8:	4631      	mov	r1, r6
 80085fa:	e7ef      	b.n	80085dc <_reclaim_reent+0x80>
 80085fc:	2500      	movs	r5, #0
 80085fe:	e7ef      	b.n	80085e0 <_reclaim_reent+0x84>
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	bf00      	nop
 8008604:	200000ec 	.word	0x200000ec

08008608 <__libc_init_array>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4d0d      	ldr	r5, [pc, #52]	; (8008640 <__libc_init_array+0x38>)
 800860c:	4c0d      	ldr	r4, [pc, #52]	; (8008644 <__libc_init_array+0x3c>)
 800860e:	1b64      	subs	r4, r4, r5
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	2600      	movs	r6, #0
 8008614:	42a6      	cmp	r6, r4
 8008616:	d109      	bne.n	800862c <__libc_init_array+0x24>
 8008618:	4d0b      	ldr	r5, [pc, #44]	; (8008648 <__libc_init_array+0x40>)
 800861a:	4c0c      	ldr	r4, [pc, #48]	; (800864c <__libc_init_array+0x44>)
 800861c:	f000 f880 	bl	8008720 <_init>
 8008620:	1b64      	subs	r4, r4, r5
 8008622:	10a4      	asrs	r4, r4, #2
 8008624:	2600      	movs	r6, #0
 8008626:	42a6      	cmp	r6, r4
 8008628:	d105      	bne.n	8008636 <__libc_init_array+0x2e>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008630:	4798      	blx	r3
 8008632:	3601      	adds	r6, #1
 8008634:	e7ee      	b.n	8008614 <__libc_init_array+0xc>
 8008636:	f855 3b04 	ldr.w	r3, [r5], #4
 800863a:	4798      	blx	r3
 800863c:	3601      	adds	r6, #1
 800863e:	e7f2      	b.n	8008626 <__libc_init_array+0x1e>
 8008640:	0800884c 	.word	0x0800884c
 8008644:	0800884c 	.word	0x0800884c
 8008648:	0800884c 	.word	0x0800884c
 800864c:	08008850 	.word	0x08008850

08008650 <__retarget_lock_acquire_recursive>:
 8008650:	4770      	bx	lr

08008652 <__retarget_lock_release_recursive>:
 8008652:	4770      	bx	lr

08008654 <memcpy>:
 8008654:	440a      	add	r2, r1
 8008656:	4291      	cmp	r1, r2
 8008658:	f100 33ff 	add.w	r3, r0, #4294967295
 800865c:	d100      	bne.n	8008660 <memcpy+0xc>
 800865e:	4770      	bx	lr
 8008660:	b510      	push	{r4, lr}
 8008662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866a:	4291      	cmp	r1, r2
 800866c:	d1f9      	bne.n	8008662 <memcpy+0xe>
 800866e:	bd10      	pop	{r4, pc}

08008670 <_free_r>:
 8008670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008672:	2900      	cmp	r1, #0
 8008674:	d044      	beq.n	8008700 <_free_r+0x90>
 8008676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867a:	9001      	str	r0, [sp, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f1a1 0404 	sub.w	r4, r1, #4
 8008682:	bfb8      	it	lt
 8008684:	18e4      	addlt	r4, r4, r3
 8008686:	f000 f83f 	bl	8008708 <__malloc_lock>
 800868a:	4a1e      	ldr	r2, [pc, #120]	; (8008704 <_free_r+0x94>)
 800868c:	9801      	ldr	r0, [sp, #4]
 800868e:	6813      	ldr	r3, [r2, #0]
 8008690:	b933      	cbnz	r3, 80086a0 <_free_r+0x30>
 8008692:	6063      	str	r3, [r4, #4]
 8008694:	6014      	str	r4, [r2, #0]
 8008696:	b003      	add	sp, #12
 8008698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800869c:	f000 b83a 	b.w	8008714 <__malloc_unlock>
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	d908      	bls.n	80086b6 <_free_r+0x46>
 80086a4:	6825      	ldr	r5, [r4, #0]
 80086a6:	1961      	adds	r1, r4, r5
 80086a8:	428b      	cmp	r3, r1
 80086aa:	bf01      	itttt	eq
 80086ac:	6819      	ldreq	r1, [r3, #0]
 80086ae:	685b      	ldreq	r3, [r3, #4]
 80086b0:	1949      	addeq	r1, r1, r5
 80086b2:	6021      	streq	r1, [r4, #0]
 80086b4:	e7ed      	b.n	8008692 <_free_r+0x22>
 80086b6:	461a      	mov	r2, r3
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b10b      	cbz	r3, 80086c0 <_free_r+0x50>
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d9fa      	bls.n	80086b6 <_free_r+0x46>
 80086c0:	6811      	ldr	r1, [r2, #0]
 80086c2:	1855      	adds	r5, r2, r1
 80086c4:	42a5      	cmp	r5, r4
 80086c6:	d10b      	bne.n	80086e0 <_free_r+0x70>
 80086c8:	6824      	ldr	r4, [r4, #0]
 80086ca:	4421      	add	r1, r4
 80086cc:	1854      	adds	r4, r2, r1
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	6011      	str	r1, [r2, #0]
 80086d2:	d1e0      	bne.n	8008696 <_free_r+0x26>
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	440c      	add	r4, r1
 80086dc:	6014      	str	r4, [r2, #0]
 80086de:	e7da      	b.n	8008696 <_free_r+0x26>
 80086e0:	d902      	bls.n	80086e8 <_free_r+0x78>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	e7d6      	b.n	8008696 <_free_r+0x26>
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	428b      	cmp	r3, r1
 80086ee:	bf04      	itt	eq
 80086f0:	6819      	ldreq	r1, [r3, #0]
 80086f2:	685b      	ldreq	r3, [r3, #4]
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	bf04      	itt	eq
 80086f8:	1949      	addeq	r1, r1, r5
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	6054      	str	r4, [r2, #4]
 80086fe:	e7ca      	b.n	8008696 <_free_r+0x26>
 8008700:	b003      	add	sp, #12
 8008702:	bd30      	pop	{r4, r5, pc}
 8008704:	20005548 	.word	0x20005548

08008708 <__malloc_lock>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__malloc_lock+0x8>)
 800870a:	f7ff bfa1 	b.w	8008650 <__retarget_lock_acquire_recursive>
 800870e:	bf00      	nop
 8008710:	20005544 	.word	0x20005544

08008714 <__malloc_unlock>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__malloc_unlock+0x8>)
 8008716:	f7ff bf9c 	b.w	8008652 <__retarget_lock_release_recursive>
 800871a:	bf00      	nop
 800871c:	20005544 	.word	0x20005544

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
