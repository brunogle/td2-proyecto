
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000512c  20000060  08005970  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000518c  08005970  0002518c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e8e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5a  00000000  00000000  00035f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00039cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5c  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001919f  00000000  00000000  0003c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191e9  00000000  00000000  000551ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097536  00000000  00000000  0006e394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053bc  00000000  00000000  001058cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0010ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005854 	.word	0x08005854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005854 	.word	0x08005854

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f004 f943 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f004 f93d 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f004 f937 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f004 f931 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f004 f92b 	bl	800476c <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f004 f925 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f004 f91f 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f004 f919 	bl	800476c <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f004 f916 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f004 f910 	bl	800476c <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f001 ff85 	bl	80024b4 <HAL_I2C_Master_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000320 	.word	0x20000320

080005b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f001 ff55 	bl	80024b4 <HAL_I2C_Master_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000320 	.word	0x20000320

08000618 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <vApplicationGetIdleTaskMemory+0x2c>)
 8000628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <vApplicationGetIdleTaskMemory+0x30>)
 800062e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000007c 	.word	0x2000007c
 8000648:	2000011c 	.word	0x2000011c

0800064c <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <game_set_sensor_reader+0x20>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <game_set_sensor_reader+0x24>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	2000031c 	.word	0x2000031c
 8000670:	20000420 	.word	0x20000420

08000674 <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fe77 	bl	8001370 <lighting_set_output>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <game_reset>:

    lighting_refresh();

}

void game_reset(){
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0

    engine_reset();
 800068e:	f000 fc7d 	bl	8000f8c <engine_reset>

 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <t_Inits>:
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

osThreadId defaultTaskHandle;
/* USER CODE BEGIN PV */

void t_Inits(void*) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	user_htim1 = &htim1;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <t_Inits+0x20>)
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <t_Inits+0x24>)
 80006a4:	601a      	str	r2, [r3, #0]
	user_init();
 80006a6:	f000 fc21 	bl	8000eec <user_init>

	lcd_init();
 80006aa:	f7ff ff17 	bl	80004dc <lcd_init>
	lcd_send_data('A');
 80006ae:	2041      	movs	r0, #65	; 0x41
 80006b0:	f7ff ff82 	bl	80005b8 <lcd_send_data>

	while (1) {
 80006b4:	e7fe      	b.n	80006b4 <t_Inits+0x1c>
 80006b6:	bf00      	nop
 80006b8:	2000046c 	.word	0x2000046c
 80006bc:	20000374 	.word	0x20000374

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 ffcb 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f82f 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f967 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 f945 	bl	8000960 <MX_DMA_Init>
  MX_TIM1_Init();
 80006d6:	f000 f8c3 	bl	8000860 <MX_TIM1_Init>
  MX_I2C1_Init();
 80006da:	f000 f893 	bl	8000804 <MX_I2C1_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <main+0x5c>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fd7a 	bl	80041ee <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a08      	ldr	r2, [pc, #32]	; (8000720 <main+0x60>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

	xTaskCreate(t_Inits, "t_Inits",
 8000700:	2300      	movs	r3, #0
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	4905      	ldr	r1, [pc, #20]	; (8000724 <main+0x64>)
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <main+0x68>)
 8000710:	f003 fede 	bl	80044d0 <xTaskCreate>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000714:	f003 fd64 	bl	80041e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000718:	e7fe      	b.n	8000718 <main+0x58>
 800071a:	bf00      	nop
 800071c:	08005880 	.word	0x08005880
 8000720:	2000041c 	.word	0x2000041c
 8000724:	0800586c 	.word	0x0800586c
 8000728:	08000699 	.word	0x08000699

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 ffae 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <SystemClock_Config+0xd0>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a28      	ldr	r2, [pc, #160]	; (80007fc <SystemClock_Config+0xd0>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <SystemClock_Config+0xd4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd4>)
 800077a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 f984 	bl	8002ac4 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c2:	f000 f9b6 	bl	8000b32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fbe6 	bl	8002fb4 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ee:	f000 f9a0 	bl	8000b32 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f001 fcf3 	bl	800222c <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f971 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000320 	.word	0x20000320
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b092      	sub	sp, #72	; 0x48
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f004 ff06 	bl	800569c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM1_Init+0xf8>)
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <MX_TIM1_Init+0xfc>)
 8000894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_TIM1_Init+0xf8>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_TIM1_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008a4:	2268      	movs	r2, #104	; 0x68
 80008a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ba:	4827      	ldr	r0, [pc, #156]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008bc:	f002 fe74 	bl	80035a8 <HAL_TIM_PWM_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80008c6:	f000 f934 	bl	8000b32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d6:	4619      	mov	r1, r3
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <MX_TIM1_Init+0xf8>)
 80008da:	f003 fb95 	bl	8004008 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80008e4:	f000 f925 	bl	8000b32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	220c      	movs	r2, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_TIM1_Init+0xf8>)
 800090a:	f003 f86b 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000914:	f000 f90d 	bl	8000b32 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM1_Init+0xf8>)
 800093c:	f003 fbd2 	bl	80040e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000946:	f000 f8f4 	bl	8000b32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM1_Init+0xf8>)
 800094c:	f000 f9d2 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3748      	adds	r7, #72	; 0x48
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000374 	.word	0x20000374
 800095c:	40010000 	.word	0x40010000

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_DMA_Init+0x3c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <MX_DMA_Init+0x3c>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_DMA_Init+0x3c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2105      	movs	r1, #5
 8000986:	203c      	movs	r0, #60	; 0x3c
 8000988:	f000 ff64 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800098c:	203c      	movs	r0, #60	; 0x3c
 800098e:	f000 ff7d 	bl	800188c <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4d      	ldr	r2, [pc, #308]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x154>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2183      	movs	r1, #131	; 0x83
 8000a2a:	4833      	ldr	r0, [pc, #204]	; (8000af8 <MX_GPIO_Init+0x158>)
 8000a2c:	f001 fbe4 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000a36:	4831      	ldr	r0, [pc, #196]	; (8000afc <MX_GPIO_Init+0x15c>)
 8000a38:	f001 fbde 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2141      	movs	r1, #65	; 0x41
 8000a40:	482f      	ldr	r0, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000a42:	f001 fbd9 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4826      	ldr	r0, [pc, #152]	; (8000af8 <MX_GPIO_Init+0x158>)
 8000a5e:	f001 fa2f 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000a62:	2383      	movs	r3, #131	; 0x83
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	481f      	ldr	r0, [pc, #124]	; (8000af8 <MX_GPIO_Init+0x158>)
 8000a7a:	f001 fa21 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin;
 8000a7e:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4819      	ldr	r0, [pc, #100]	; (8000afc <MX_GPIO_Init+0x15c>)
 8000a98:	f001 fa12 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 8000a9c:	2341      	movs	r3, #65	; 0x41
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000ab4:	f001 fa04 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
                           REED_C_Pin REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_D_Pin
 8000ab8:	f246 4338 	movw	r3, #25656	; 0x6438
 8000abc:	617b      	str	r3, [r7, #20]
                          |REED_C_Pin|REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000ace:	f001 f9f7 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000ad2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x15c>)
 8000ae8:	f001 f9ea 	bl	8001ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400

08000b04 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f003 fbba 	bl	8004286 <osDelay>
 8000b12:	e7fb      	b.n	8000b0c <StartDefaultTask+0x8>

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f000 fdbd 	bl	80016a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b36:	b672      	cpsid	i
}
 8000b38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b3a:	e7fe      	b.n	8000b3a <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_MspInit+0x54>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_MspInit+0x54>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x54>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_MspInit+0x54>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_MspInit+0x54>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x54>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f000 fe67 	bl	8001854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_I2C_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <HAL_I2C_MspInit+0x8c>)
 8000bf0:	f001 f966 	bl	8001ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_I2C_MspInit+0x88>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <HAL_TIM_PWM_MspInit+0xc0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d151      	bne.n	8000cda <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c5a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000c98:	f000 fe06 	bl	80018a8 <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000ca2:	f7ff ff46 	bl	8000b32 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_TIM_PWM_MspInit+0xc8>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	201a      	movs	r0, #26
 8000cd0:	f000 fdc0 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	f000 fdd9 	bl	800188c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	200003bc 	.word	0x200003bc
 8000cf0:	40026470 	.word	0x40026470

08000cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_TIM_MspPostInit+0x68>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d11e      	bne.n	8000d54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8000d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_TIM_MspPostInit+0x70>)
 8000d50:	f001 f8b6 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <HAL_InitTick+0xe8>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_InitTick+0xe8>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <HAL_InitTick+0xe8>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d94:	f107 0210 	add.w	r2, r7, #16
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fb14 	bl	80033cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dae:	f002 faf9 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8000db2:	6378      	str	r0, [r7, #52]	; 0x34
 8000db4:	e004      	b.n	8000dc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000db6:	f002 faf5 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <HAL_InitTick+0xec>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9b      	lsrs	r3, r3, #18
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_InitTick+0xf0>)
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_InitTick+0xf0>)
 8000dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ddc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000dde:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_InitTick+0xf0>)
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_InitTick+0xf0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_InitTick+0xf0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_InitTick+0xf0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <HAL_InitTick+0xf0>)
 8000df8:	f002 fb1a 	bl	8003430 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d11b      	bne.n	8000e42 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <HAL_InitTick+0xf0>)
 8000e0c:	f002 fb6a 	bl	80034e4 <HAL_TIM_Base_Start_IT>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d111      	bne.n	8000e42 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 fd34 	bl	800188c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d808      	bhi.n	8000e3c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	201c      	movs	r0, #28
 8000e30:	f000 fd10 	bl	8001854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_InitTick+0xf4>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e002      	b.n	8000e42 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3738      	adds	r7, #56	; 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	20000424 	.word	0x20000424
 8000e5c:	20000004 	.word	0x20000004

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e92:	f002 fc9f 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000374 	.word	0x20000374

08000ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM2_IRQHandler+0x10>)
 8000ea6:	f002 fc95 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000424 	.word	0x20000424

08000eb4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA2_Stream4_IRQHandler+0x10>)
 8000eba:	f000 fdc5 	bl	8001a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200003bc 	.word	0x200003bc

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <user_init>:

TIM_HandleTypeDef * user_htim1;



void user_init(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	ws2812_init();
 8000ef0:	f000 fa18 	bl	8001324 <ws2812_init>

	game_set_sensor_reader((sensor_reader_t)reed_scan_sensors);
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <user_init+0x1c>)
 8000ef6:	f7ff fba9 	bl	800064c <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <user_init+0x20>)
 8000efc:	f7ff fbba 	bl	8000674 <game_set_led_output_array>

	game_reset();
 8000f00:	f7ff fbc3 	bl	800068a <game_reset>

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08001391 	.word	0x08001391
 8000f0c:	200011ec 	.word	0x200011ec

08000f10 <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e00d      	b.n	8000f3a <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	3380      	adds	r3, #128	; 0x80
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	2206      	movs	r2, #6
 8000f32:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	ddee      	ble.n	8000f1e <clear_game_state+0xe>
    }
    return 1;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	4608      	mov	r0, r1
 8000f58:	4611      	mov	r1, r2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	70fb      	strb	r3, [r7, #3]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70bb      	strb	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	78f9      	ldrb	r1, [r7, #3]
 8000f6e:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	78ba      	ldrb	r2, [r7, #2]
 8000f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8000f90:	4902      	ldr	r1, [pc, #8]	; (8000f9c <engine_reset+0x10>)
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <engine_reset+0x14>)
 8000f94:	f000 f806 	bl	8000fa4 <load_fen>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800589c 	.word	0x0800589c
 8000fa0:	20000470 	.word	0x20000470

08000fa4 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffae 	bl	8000f10 <clear_game_state>

    char * f = (char *)fen;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3b2f      	subs	r3, #47	; 0x2f
 8000fc6:	2b43      	cmp	r3, #67	; 0x43
 8000fc8:	f200 8166 	bhi.w	8001298 <load_fen+0x2f4>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <load_fen+0x30>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	0800124d 	.word	0x0800124d
 8000fd8:	08001299 	.word	0x08001299
 8000fdc:	08001259 	.word	0x08001259
 8000fe0:	08001261 	.word	0x08001261
 8000fe4:	08001269 	.word	0x08001269
 8000fe8:	08001271 	.word	0x08001271
 8000fec:	08001279 	.word	0x08001279
 8000ff0:	08001281 	.word	0x08001281
 8000ff4:	08001289 	.word	0x08001289
 8000ff8:	08001291 	.word	0x08001291
 8000ffc:	08001299 	.word	0x08001299
 8001000:	08001299 	.word	0x08001299
 8001004:	08001299 	.word	0x08001299
 8001008:	08001299 	.word	0x08001299
 800100c:	08001299 	.word	0x08001299
 8001010:	08001299 	.word	0x08001299
 8001014:	08001299 	.word	0x08001299
 8001018:	08001299 	.word	0x08001299
 800101c:	08001299 	.word	0x08001299
 8001020:	0800113f 	.word	0x0800113f
 8001024:	08001299 	.word	0x08001299
 8001028:	08001299 	.word	0x08001299
 800102c:	08001299 	.word	0x08001299
 8001030:	08001299 	.word	0x08001299
 8001034:	08001299 	.word	0x08001299
 8001038:	08001299 	.word	0x08001299
 800103c:	08001299 	.word	0x08001299
 8001040:	08001299 	.word	0x08001299
 8001044:	080010e5 	.word	0x080010e5
 8001048:	08001299 	.word	0x08001299
 800104c:	08001299 	.word	0x08001299
 8001050:	0800115d 	.word	0x0800115d
 8001054:	08001299 	.word	0x08001299
 8001058:	0800117b 	.word	0x0800117b
 800105c:	08001103 	.word	0x08001103
 8001060:	08001121 	.word	0x08001121
 8001064:	08001299 	.word	0x08001299
 8001068:	08001299 	.word	0x08001299
 800106c:	08001299 	.word	0x08001299
 8001070:	08001299 	.word	0x08001299
 8001074:	08001299 	.word	0x08001299
 8001078:	08001299 	.word	0x08001299
 800107c:	08001299 	.word	0x08001299
 8001080:	08001299 	.word	0x08001299
 8001084:	08001299 	.word	0x08001299
 8001088:	08001299 	.word	0x08001299
 800108c:	08001299 	.word	0x08001299
 8001090:	08001299 	.word	0x08001299
 8001094:	08001299 	.word	0x08001299
 8001098:	08001299 	.word	0x08001299
 800109c:	08001299 	.word	0x08001299
 80010a0:	080011f3 	.word	0x080011f3
 80010a4:	08001299 	.word	0x08001299
 80010a8:	08001299 	.word	0x08001299
 80010ac:	08001299 	.word	0x08001299
 80010b0:	08001299 	.word	0x08001299
 80010b4:	08001299 	.word	0x08001299
 80010b8:	08001299 	.word	0x08001299
 80010bc:	08001299 	.word	0x08001299
 80010c0:	08001299 	.word	0x08001299
 80010c4:	08001199 	.word	0x08001199
 80010c8:	08001299 	.word	0x08001299
 80010cc:	08001299 	.word	0x08001299
 80010d0:	08001211 	.word	0x08001211
 80010d4:	08001299 	.word	0x08001299
 80010d8:	0800122f 	.word	0x0800122f
 80010dc:	080011b7 	.word	0x080011b7
 80010e0:	080011d5 	.word	0x080011d5
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff2a 	bl	8000f4e <place_piece>
            col++;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	3301      	adds	r3, #1
 80010fe:	72fb      	strb	r3, [r7, #11]
            break;
 8001100:	e0ca      	b.n	8001298 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8001102:	7abb      	ldrb	r3, [r7, #10]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	b2da      	uxtb	r2, r3
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	4413      	add	r3, r2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff1b 	bl	8000f4e <place_piece>
            col++;
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	3301      	adds	r3, #1
 800111c:	72fb      	strb	r3, [r7, #11]
            break;
 800111e:	e0bb      	b.n	8001298 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8001120:	7abb      	ldrb	r3, [r7, #10]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	b2da      	uxtb	r2, r3
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	4413      	add	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff0c 	bl	8000f4e <place_piece>
            col++;
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	3301      	adds	r3, #1
 800113a:	72fb      	strb	r3, [r7, #11]
            break;
 800113c:	e0ac      	b.n	8001298 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	b2da      	uxtb	r2, r3
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	4413      	add	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2200      	movs	r2, #0
 800114c:	2103      	movs	r1, #3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fefd 	bl	8000f4e <place_piece>
            col++;
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	3301      	adds	r3, #1
 8001158:	72fb      	strb	r3, [r7, #11]
            break;
 800115a:	e09d      	b.n	8001298 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	b2da      	uxtb	r2, r3
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	4413      	add	r3, r2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2200      	movs	r2, #0
 800116a:	2104      	movs	r1, #4
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff feee 	bl	8000f4e <place_piece>
            col++;
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	3301      	adds	r3, #1
 8001176:	72fb      	strb	r3, [r7, #11]
            break;
 8001178:	e08e      	b.n	8001298 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 800117a:	7abb      	ldrb	r3, [r7, #10]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	b2da      	uxtb	r2, r3
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fedf 	bl	8000f4e <place_piece>
            col++;
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	3301      	adds	r3, #1
 8001194:	72fb      	strb	r3, [r7, #11]
            break;
 8001196:	e07f      	b.n	8001298 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	b2da      	uxtb	r2, r3
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fed0 	bl	8000f4e <place_piece>
            col++;
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	3301      	adds	r3, #1
 80011b2:	72fb      	strb	r3, [r7, #11]
            break;
 80011b4:	e070      	b.n	8001298 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 80011b6:	7abb      	ldrb	r3, [r7, #10]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	2101      	movs	r1, #1
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fec1 	bl	8000f4e <place_piece>
            col++;
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	3301      	adds	r3, #1
 80011d0:	72fb      	strb	r3, [r7, #11]
            break;
 80011d2:	e061      	b.n	8001298 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	4413      	add	r3, r2
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	2102      	movs	r1, #2
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff feb2 	bl	8000f4e <place_piece>
            col++;
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	3301      	adds	r3, #1
 80011ee:	72fb      	strb	r3, [r7, #11]
            break;
 80011f0:	e052      	b.n	8001298 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 80011f2:	7abb      	ldrb	r3, [r7, #10]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	4413      	add	r3, r2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	2103      	movs	r1, #3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fea3 	bl	8000f4e <place_piece>
            col++;
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	3301      	adds	r3, #1
 800120c:	72fb      	strb	r3, [r7, #11]
            break;
 800120e:	e043      	b.n	8001298 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	b2da      	uxtb	r2, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	4413      	add	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2201      	movs	r2, #1
 800121e:	2104      	movs	r1, #4
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe94 	bl	8000f4e <place_piece>
            col++;
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	3301      	adds	r3, #1
 800122a:	72fb      	strb	r3, [r7, #11]
            break;
 800122c:	e034      	b.n	8001298 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 800122e:	7abb      	ldrb	r3, [r7, #10]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	b2da      	uxtb	r2, r3
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	4413      	add	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2201      	movs	r2, #1
 800123c:	2105      	movs	r1, #5
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe85 	bl	8000f4e <place_piece>
            col++;
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	3301      	adds	r3, #1
 8001248:	72fb      	strb	r3, [r7, #11]
            break;
 800124a:	e025      	b.n	8001298 <load_fen+0x2f4>
        case '/':
            row--;
 800124c:	7abb      	ldrb	r3, [r7, #10]
 800124e:	3b01      	subs	r3, #1
 8001250:	72bb      	strb	r3, [r7, #10]
            col=0;
 8001252:	2300      	movs	r3, #0
 8001254:	72fb      	strb	r3, [r7, #11]
            break;
 8001256:	e01f      	b.n	8001298 <load_fen+0x2f4>
        case '1':
            col+=1;
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	3301      	adds	r3, #1
 800125c:	72fb      	strb	r3, [r7, #11]
            break;
 800125e:	e01b      	b.n	8001298 <load_fen+0x2f4>
        case '2':
            col+=2;
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	3302      	adds	r3, #2
 8001264:	72fb      	strb	r3, [r7, #11]
            break;
 8001266:	e017      	b.n	8001298 <load_fen+0x2f4>
        case '3':
            col+=3;
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	3303      	adds	r3, #3
 800126c:	72fb      	strb	r3, [r7, #11]
            break;
 800126e:	e013      	b.n	8001298 <load_fen+0x2f4>
        case '4':
            col+=4;
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	3304      	adds	r3, #4
 8001274:	72fb      	strb	r3, [r7, #11]
            break;
 8001276:	e00f      	b.n	8001298 <load_fen+0x2f4>
        case '5':
            col+=5;
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	3305      	adds	r3, #5
 800127c:	72fb      	strb	r3, [r7, #11]
            break;
 800127e:	e00b      	b.n	8001298 <load_fen+0x2f4>
        case '6':
            col+=6;
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	3306      	adds	r3, #6
 8001284:	72fb      	strb	r3, [r7, #11]
            break;
 8001286:	e007      	b.n	8001298 <load_fen+0x2f4>
        case '7':
            col+=7;
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	3307      	adds	r3, #7
 800128c:	72fb      	strb	r3, [r7, #11]
            break;
 800128e:	e003      	b.n	8001298 <load_fen+0x2f4>
        case '8':
            col+=8;
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	3308      	adds	r3, #8
 8001294:	72fb      	strb	r3, [r7, #11]
            break;
 8001296:	bf00      	nop
        };

        f++;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	f47f ae8c 	bne.w	8000fc0 <load_fen+0x1c>

    f++;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b77      	cmp	r3, #119	; 0x77
 80012b4:	d104      	bne.n	80012c0 <load_fen+0x31c>
        state->side_to_move = WHITE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80012be:	e003      	b.n	80012c8 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3302      	adds	r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d1f8      	bne.n	80012ce <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d1f8      	bne.n	80012e2 <load_fen+0x33e>
    f++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8001308:	210c      	movs	r1, #12
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f002 f99c 	bl	8003648 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200012ec 	.word	0x200012ec

08001324 <ws2812_init>:

void ws2812_init(){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e010      	b.n	8001352 <ws2812_init+0x2e>
		if(i < 60)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b3b      	cmp	r3, #59	; 0x3b
 8001334:	dc05      	bgt.n	8001342 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <ws2812_init+0x48>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2100      	movs	r1, #0
 800133c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001340:	e004      	b.n	800134c <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <ws2812_init+0x48>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	211c      	movs	r1, #28
 8001348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f240 623b 	movw	r2, #1595	; 0x63b
 8001358:	4293      	cmp	r3, r2
 800135a:	dde9      	ble.n	8001330 <ws2812_init+0xc>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000574 	.word	0x20000574

08001370 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <lighting_set_output+0x1c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200012f0 	.word	0x200012f0

08001390 <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e127      	b.n	80015ee <reed_scan_sensors+0x25e>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	4894      	ldr	r0, [pc, #592]	; (8001600 <reed_scan_sensors+0x270>)
 80013b0:	f000 ff22 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	2102      	movs	r1, #2
 80013c4:	488e      	ldr	r0, [pc, #568]	; (8001600 <reed_scan_sensors+0x270>)
 80013c6:	f000 ff17 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	2101      	movs	r1, #1
 80013da:	488a      	ldr	r0, [pc, #552]	; (8001604 <reed_scan_sensors+0x274>)
 80013dc:	f000 ff0c 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	2140      	movs	r1, #64	; 0x40
 80013f0:	4885      	ldr	r0, [pc, #532]	; (8001608 <reed_scan_sensors+0x278>)
 80013f2:	f000 ff01 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	4880      	ldr	r0, [pc, #512]	; (8001608 <reed_scan_sensors+0x278>)
 8001408:	f000 fef6 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b05      	cmp	r3, #5
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	4879      	ldr	r0, [pc, #484]	; (8001604 <reed_scan_sensors+0x274>)
 800141e:	f000 feeb 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b06      	cmp	r3, #6
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	4873      	ldr	r0, [pc, #460]	; (8001600 <reed_scan_sensors+0x270>)
 8001434:	f000 fee0 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b07      	cmp	r3, #7
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144a:	486f      	ldr	r0, [pc, #444]	; (8001608 <reed_scan_sensors+0x278>)
 800144c:	f000 fed4 	bl	80021f8 <HAL_GPIO_WritePin>

	for(int i = 0; i < 10; i++){ } //Delay chico para dejar que la señal se propage
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	e002      	b.n	800145c <reed_scan_sensors+0xcc>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b09      	cmp	r3, #9
 8001460:	ddf9      	ble.n	8001456 <reed_scan_sensors+0xc6>


    data[row] = 0;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	4865      	ldr	r0, [pc, #404]	; (8001608 <reed_scan_sensors+0x278>)
 8001472:	f000 fea9 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25a      	sxtb	r2, r3
 800148e:	b24b      	sxtb	r3, r1
 8001490:	4313      	orrs	r3, r2
 8001492:	b259      	sxtb	r1, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4858      	ldr	r0, [pc, #352]	; (8001604 <reed_scan_sensors+0x274>)
 80014a4:	f000 fe90 	bl	80021c8 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <reed_scan_sensors+0x122>
 80014ae:	2102      	movs	r1, #2
 80014b0:	e000      	b.n	80014b4 <reed_scan_sensors+0x124>
 80014b2:	2100      	movs	r1, #0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	b24b      	sxtb	r3, r1
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b259      	sxtb	r1, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 80014ce:	2110      	movs	r1, #16
 80014d0:	484c      	ldr	r0, [pc, #304]	; (8001604 <reed_scan_sensors+0x274>)
 80014d2:	f000 fe79 	bl	80021c8 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <reed_scan_sensors+0x150>
 80014dc:	2104      	movs	r1, #4
 80014de:	e000      	b.n	80014e2 <reed_scan_sensors+0x152>
 80014e0:	2100      	movs	r1, #0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b25a      	sxtb	r2, r3
 80014ec:	b24b      	sxtb	r3, r1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b259      	sxtb	r1, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 80014fc:	2108      	movs	r1, #8
 80014fe:	4841      	ldr	r0, [pc, #260]	; (8001604 <reed_scan_sensors+0x274>)
 8001500:	f000 fe62 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <reed_scan_sensors+0x17e>
 800150a:	2108      	movs	r1, #8
 800150c:	e000      	b.n	8001510 <reed_scan_sensors+0x180>
 800150e:	2100      	movs	r1, #0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25a      	sxtb	r2, r3
 800151a:	b24b      	sxtb	r3, r1
 800151c:	4313      	orrs	r3, r2
 800151e:	b259      	sxtb	r1, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 800152a:	2120      	movs	r1, #32
 800152c:	4835      	ldr	r0, [pc, #212]	; (8001604 <reed_scan_sensors+0x274>)
 800152e:	f000 fe4b 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <reed_scan_sensors+0x1ac>
 8001538:	2110      	movs	r1, #16
 800153a:	e000      	b.n	800153e <reed_scan_sensors+0x1ae>
 800153c:	2100      	movs	r1, #0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b25a      	sxtb	r2, r3
 8001548:	b24b      	sxtb	r3, r1
 800154a:	4313      	orrs	r3, r2
 800154c:	b259      	sxtb	r1, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8001558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155c:	482a      	ldr	r0, [pc, #168]	; (8001608 <reed_scan_sensors+0x278>)
 800155e:	f000 fe33 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <reed_scan_sensors+0x1dc>
 8001568:	2120      	movs	r1, #32
 800156a:	e000      	b.n	800156e <reed_scan_sensors+0x1de>
 800156c:	2100      	movs	r1, #0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25a      	sxtb	r2, r3
 8001578:	b24b      	sxtb	r3, r1
 800157a:	4313      	orrs	r3, r2
 800157c:	b259      	sxtb	r1, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8001588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158c:	481d      	ldr	r0, [pc, #116]	; (8001604 <reed_scan_sensors+0x274>)
 800158e:	f000 fe1b 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <reed_scan_sensors+0x20c>
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	e000      	b.n	800159e <reed_scan_sensors+0x20e>
 800159c:	2100      	movs	r1, #0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25a      	sxtb	r2, r3
 80015a8:	b24b      	sxtb	r3, r1
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b259      	sxtb	r1, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2ca      	uxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 80015b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <reed_scan_sensors+0x274>)
 80015be:	f000 fe03 	bl	80021c8 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <reed_scan_sensors+0x23c>
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	e000      	b.n	80015ce <reed_scan_sensors+0x23e>
 80015cc:	2100      	movs	r1, #0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	b24b      	sxtb	r3, r1
 80015da:	4313      	orrs	r3, r2
 80015dc:	b259      	sxtb	r1, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	f77f aed4 	ble.w	800139e <reed_scan_sensors+0xe>

  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020800 	.word	0x40020800
 8001604:	40020400 	.word	0x40020400
 8001608:	40020000 	.word	0x40020000

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	; (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff fc47 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f004 f88d 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff f83f 	bl	80006c0 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001644:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001650:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8001654:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001658:	2000518c 	.word	0x2000518c

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f8d8 	bl	800183e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f7ff fb6a 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fa52 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	200012f4 	.word	0x200012f4

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200012f4 	.word	0x200012f4

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff4c 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001866:	f7ff ff61 	bl	800172c <__NVIC_GetPriorityGrouping>
 800186a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	6978      	ldr	r0, [r7, #20]
 8001872:	f7ff ffb1 	bl	80017d8 <NVIC_EncodePriority>
 8001876:	4602      	mov	r2, r0
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff80 	bl	8001784 <__NVIC_SetPriority>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff54 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ff0a 	bl	80016cc <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e099      	b.n	80019f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e4:	e00f      	b.n	8001906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e6:	f7ff fef1 	bl	80016cc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d908      	bls.n	8001906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e078      	b.n	80019f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e8      	bne.n	80018e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_DMA_Init+0x158>)
 8001920:	4013      	ands	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2b04      	cmp	r3, #4
 800195e:	d107      	bne.n	8001970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4313      	orrs	r3, r2
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f023 0307 	bic.w	r3, r3, #7
 8001986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	2b04      	cmp	r3, #4
 8001998:	d117      	bne.n	80019ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa0b 	bl	8001dc8 <DMA_CheckFifoParam>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2240      	movs	r2, #64	; 0x40
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019c6:	2301      	movs	r3, #1
 80019c8:	e016      	b.n	80019f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9c2 	bl	8001d5c <DMA_CalcBaseAndBitshift>
 80019d8:	4603      	mov	r3, r0
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	223f      	movs	r2, #63	; 0x3f
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	f010803f 	.word	0xf010803f

08001a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d004      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00c      	b.n	8001a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a54:	4b8e      	ldr	r3, [pc, #568]	; (8001c90 <HAL_DMA_IRQHandler+0x248>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a8e      	ldr	r2, [pc, #568]	; (8001c94 <HAL_DMA_IRQHandler+0x24c>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2208      	movs	r2, #8
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2204      	movs	r2, #4
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	2210      	movs	r2, #16
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d043      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03c      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2210      	movs	r2, #16
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d024      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
 8001b76:	e01f      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e016      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0208 	bic.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 808f 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8087 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2220      	movs	r2, #32
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d136      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0216 	bic.w	r2, r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x1da>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0208 	bic.w	r2, r2, #8
 8001c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07e      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
        }
        return;
 8001c5e:	e079      	b.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d031      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
 8001c8c:	e02c      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
 8001ca8:	e01e      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0210 	bic.w	r2, r2, #16
 8001cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d032      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d307      	bcc.n	8001d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f2      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x2cc>
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
 8001d52:	e000      	b.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d54:	bf00      	nop
    }
  }
}
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3b10      	subs	r3, #16
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d909      	bls.n	8001d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d92:	f023 0303 	bic.w	r3, r3, #3
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d9c:	e007      	b.n	8001dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	aaaaaaab 	.word	0xaaaaaaab
 8001dc4:	080058f8 	.word	0x080058f8

08001dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d11f      	bne.n	8001e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d856      	bhi.n	8001e96 <DMA_CheckFifoParam+0xce>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <DMA_CheckFifoParam+0x28>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001e13 	.word	0x08001e13
 8001df8:	08001e01 	.word	0x08001e01
 8001dfc:	08001e97 	.word	0x08001e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d046      	beq.n	8001e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e10:	e043      	b.n	8001e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1a:	d140      	bne.n	8001e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e03d      	b.n	8001e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2a:	d121      	bne.n	8001e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d837      	bhi.n	8001ea2 <DMA_CheckFifoParam+0xda>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <DMA_CheckFifoParam+0x70>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e4f 	.word	0x08001e4f
 8001e40:	08001e49 	.word	0x08001e49
 8001e44:	08001e61 	.word	0x08001e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4c:	e030      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d025      	beq.n	8001ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5e:	e022      	b.n	8001ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e68:	d11f      	bne.n	8001eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e6e:	e01c      	b.n	8001eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d903      	bls.n	8001e7e <DMA_CheckFifoParam+0xb6>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e7c:	e018      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      break;
 8001e82:	e015      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      break;
 8001e94:	e00b      	b.n	8001eae <DMA_CheckFifoParam+0xe6>
      break;
 8001e96:	bf00      	nop
 8001e98:	e00a      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e008      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
 8001ea0:	e006      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
    }
  } 
  
  return status; 
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e159      	b.n	8002190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8148 	bne.w	800218a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a2 	beq.w	800218a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b57      	ldr	r3, [pc, #348]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_GPIO_Init+0x2e8>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_GPIO_Init+0x2ec>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a49      	ldr	r2, [pc, #292]	; (80021b0 <HAL_GPIO_Init+0x2f0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x202>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a48      	ldr	r2, [pc, #288]	; (80021b4 <HAL_GPIO_Init+0x2f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x1fe>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a47      	ldr	r2, [pc, #284]	; (80021b8 <HAL_GPIO_Init+0x2f8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x1fa>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_GPIO_Init+0x2fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x1f6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a45      	ldr	r2, [pc, #276]	; (80021c0 <HAL_GPIO_Init+0x300>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x1f2>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x204>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x2ec>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_GPIO_Init+0x304>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_GPIO_Init+0x304>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_GPIO_Init+0x304>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f aea2 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e12b      	b.n	8002496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fc9e 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800227e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800228e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002290:	f001 f888 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8002294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a81      	ldr	r2, [pc, #516]	; (80024a0 <HAL_I2C_Init+0x274>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d807      	bhi.n	80022b0 <HAL_I2C_Init+0x84>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_I2C_Init+0x278>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e006      	b.n	80022be <HAL_I2C_Init+0x92>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a7d      	ldr	r2, [pc, #500]	; (80024a8 <HAL_I2C_Init+0x27c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0e7      	b.n	8002496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a78      	ldr	r2, [pc, #480]	; (80024ac <HAL_I2C_Init+0x280>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0c9b      	lsrs	r3, r3, #18
 80022d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_I2C_Init+0x274>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d802      	bhi.n	8002300 <HAL_I2C_Init+0xd4>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	e009      	b.n	8002314 <HAL_I2C_Init+0xe8>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <HAL_I2C_Init+0x284>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	3301      	adds	r3, #1
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	495c      	ldr	r1, [pc, #368]	; (80024a0 <HAL_I2C_Init+0x274>)
 8002330:	428b      	cmp	r3, r1
 8002332:	d819      	bhi.n	8002368 <HAL_I2C_Init+0x13c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e59      	subs	r1, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002342:	1c59      	adds	r1, r3, #1
 8002344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002348:	400b      	ands	r3, r1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_I2C_Init+0x138>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e59      	subs	r1, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fbb1 f3f3 	udiv	r3, r1, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002362:	e051      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 8002364:	2304      	movs	r3, #4
 8002366:	e04f      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <HAL_I2C_Init+0x168>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e012      	b.n	80023ba <HAL_I2C_Init+0x18e>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	0099      	lsls	r1, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x196>
 80023be:	2301      	movs	r3, #1
 80023c0:	e022      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10e      	bne.n	80023e8 <HAL_I2C_Init+0x1bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e58      	subs	r0, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	e00f      	b.n	8002408 <HAL_I2C_Init+0x1dc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1e58      	subs	r0, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	0099      	lsls	r1, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	6809      	ldr	r1, [r1, #0]
 800240c:	4313      	orrs	r3, r2
 800240e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6911      	ldr	r1, [r2, #16]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68d2      	ldr	r2, [r2, #12]
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	000186a0 	.word	0x000186a0
 80024a4:	001e847f 	.word	0x001e847f
 80024a8:	003d08ff 	.word	0x003d08ff
 80024ac:	431bde83 	.word	0x431bde83
 80024b0:	10624dd3 	.word	0x10624dd3

080024b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	817b      	strh	r3, [r7, #10]
 80024c4:	4613      	mov	r3, r2
 80024c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff f900 	bl	80016cc <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f040 80e0 	bne.w	800269c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	4970      	ldr	r1, [pc, #448]	; (80026a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f964 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0d3      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2C_Master_Transmit+0x50>
 8002500:	2302      	movs	r3, #2
 8002502:	e0cc      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d007      	beq.n	800252a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2210      	movs	r2, #16
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_I2C_Master_Transmit+0x1f8>)
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f89c 	bl	80026b0 <I2C_MasterRequestWrite>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e08d      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002598:	e066      	b.n	8002668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9de 	bl	8002960 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_I2C_Master_Transmit+0x188>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	6a39      	ldr	r1, [r7, #32]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f9ce 	bl	80029e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b04      	cmp	r3, #4
 8002652:	d107      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01a      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d194      	bne.n	800259a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	00100002 	.word	0x00100002
 80026ac:	ffff0000 	.word	0xffff0000

080026b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	460b      	mov	r3, r1
 80026be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d006      	beq.n	80026da <I2C_MasterRequestWrite+0x2a>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d003      	beq.n	80026da <I2C_MasterRequestWrite+0x2a>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d8:	d108      	bne.n	80026ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00b      	b.n	8002704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d107      	bne.n	8002704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f84f 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272a:	d103      	bne.n	8002734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e035      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002740:	d108      	bne.n	8002754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	e01b      	b.n	800278c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002754:	897b      	ldrh	r3, [r7, #10]
 8002756:	11db      	asrs	r3, r3, #7
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0306 	and.w	r3, r3, #6
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f063 030f 	orn	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <I2C_MasterRequestWrite+0xfc>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f875 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e010      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <I2C_MasterRequestWrite+0x100>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f865 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00010008 	.word	0x00010008
 80027b0:	00010002 	.word	0x00010002

080027b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c4:	e025      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d021      	beq.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7fe ff7d 	bl	80016cc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e023      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10d      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	e00c      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	429a      	cmp	r2, r3
 8002856:	d0b6      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002870:	e051      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d123      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800289a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e046      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d021      	beq.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fefb 	bl	80016cc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e020      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10c      	bne.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e00b      	b.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d18d      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296c:	e02d      	b.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f878 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e02d      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe fea1 	bl	80016cc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d1ca      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ee:	e02d      	b.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f837 	bl	8002a64 <I2C_IsAcknowledgeFailed>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e02d      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d021      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7fe fe60 	bl	80016cc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1ca      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d11b      	bne.n	8002ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e267      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d075      	beq.n	8002bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b85      	ldr	r3, [pc, #532]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d112      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b06:	d10b      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d05b      	beq.n	8002bcc <HAL_RCC_OscConfig+0x108>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d157      	bne.n	8002bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e242      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x74>
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e01d      	b.n	8002b74 <HAL_RCC_OscConfig+0xb0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x98>
 8002b42:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6f      	ldr	r2, [pc, #444]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6c      	ldr	r2, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0xb0>
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fda6 	bl	80016cc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe fda2 	bl	80016cc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e207      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0xc0>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fd92 	bl	80016cc <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fd8e 	bl	80016cc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1f3      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0xe8>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf2:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x152>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e1c7      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e03a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x244>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fd47 	bl	80016cc <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe fd43 	bl	80016cc <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1a8      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4925      	ldr	r1, [pc, #148]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x244>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fd26 	bl	80016cc <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fd22 	bl	80016cc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e187      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d036      	beq.n	8002d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x248>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd06 	bl	80016cc <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fd02 	bl	80016cc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e167      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x200>
 8002ce2:	e01b      	b.n	8002d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x248>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fcef 	bl	80016cc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	e00e      	b.n	8002d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fceb 	bl	80016cc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d907      	bls.n	8002d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e150      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470000 	.word	0x42470000
 8002d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ea      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8097 	beq.w	8002e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a7c      	ldr	r2, [pc, #496]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d66:	4b74      	ldr	r3, [pc, #464]	; (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fcab 	bl	80016cc <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fca7 	bl	80016cc <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e10c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x474>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x2ea>
 8002da0:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	e01c      	b.n	8002de8 <HAL_RCC_OscConfig+0x324>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x30c>
 8002db6:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a5e      	ldr	r2, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a5b      	ldr	r2, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0x324>
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002de2:	f023 0304 	bic.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe fc6c 	bl	80016cc <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe fc68 	bl	80016cc <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0cb      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ee      	beq.n	8002df8 <HAL_RCC_OscConfig+0x334>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fc56 	bl	80016cc <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe fc52 	bl	80016cc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0b5      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ee      	bne.n	8002e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4a38      	ldr	r2, [pc, #224]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a1 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e62:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d05c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d141      	bne.n	8002efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fc26 	bl	80016cc <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fc22 	bl	80016cc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e087      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fbfb 	bl	80016cc <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fbf7 	bl	80016cc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e05c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x416>
 8002ef8:	e054      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x478>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fbe4 	bl	80016cc <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fbe0 	bl	80016cc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e045      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x444>
 8002f26:	e03d      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e038      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d121      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d11a      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0cc      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d90c      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b8      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d044      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e067      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fb12 	bl	80016cc <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fb0e 	bl	80016cc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e04f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20c      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e032      	b.n	8003162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4916      	ldr	r1, [pc, #88]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490e      	ldr	r1, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f821 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800313e:	4602      	mov	r2, r0
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	490a      	ldr	r1, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	5ccb      	ldrb	r3, [r1, r3]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fe04 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00
 8003170:	40023800 	.word	0x40023800
 8003174:	080058e0 	.word	0x080058e0
 8003178:	20000000 	.word	0x20000000
 800317c:	20000004 	.word	0x20000004

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b094      	sub	sp, #80	; 0x50
 8003186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	647b      	str	r3, [r7, #68]	; 0x44
 800318c:	2300      	movs	r3, #0
 800318e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003190:	2300      	movs	r3, #0
 8003192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003198:	4b79      	ldr	r3, [pc, #484]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d00d      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x40>
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	f200 80e1 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x3a>
 80031b2:	e0db      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031b8:	e0db      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ba:	4b73      	ldr	r3, [pc, #460]	; (8003388 <HAL_RCC_GetSysClockFreq+0x208>)
 80031bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031be:	e0d8      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c0:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d063      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	2200      	movs	r2, #0
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	f04f 0000 	mov.w	r0, #0
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	0159      	lsls	r1, r3, #5
 8003200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003204:	0150      	lsls	r0, r2, #5
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4621      	mov	r1, r4
 800320c:	1a51      	subs	r1, r2, r1
 800320e:	6139      	str	r1, [r7, #16]
 8003210:	4629      	mov	r1, r5
 8003212:	eb63 0301 	sbc.w	r3, r3, r1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003224:	4659      	mov	r1, fp
 8003226:	018b      	lsls	r3, r1, #6
 8003228:	4651      	mov	r1, sl
 800322a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322e:	4651      	mov	r1, sl
 8003230:	018a      	lsls	r2, r1, #6
 8003232:	4651      	mov	r1, sl
 8003234:	ebb2 0801 	subs.w	r8, r2, r1
 8003238:	4659      	mov	r1, fp
 800323a:	eb63 0901 	sbc.w	r9, r3, r1
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800324a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003252:	4690      	mov	r8, r2
 8003254:	4699      	mov	r9, r3
 8003256:	4623      	mov	r3, r4
 8003258:	eb18 0303 	adds.w	r3, r8, r3
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	462b      	mov	r3, r5
 8003260:	eb49 0303 	adc.w	r3, r9, r3
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003272:	4629      	mov	r1, r5
 8003274:	024b      	lsls	r3, r1, #9
 8003276:	4621      	mov	r1, r4
 8003278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800327c:	4621      	mov	r1, r4
 800327e:	024a      	lsls	r2, r1, #9
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003286:	2200      	movs	r2, #0
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800328c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003290:	f7fc ffa6 	bl	80001e0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	e058      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	2200      	movs	r2, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	4611      	mov	r1, r2
 80032aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b8:	4642      	mov	r2, r8
 80032ba:	464b      	mov	r3, r9
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0159      	lsls	r1, r3, #5
 80032c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ca:	0150      	lsls	r0, r2, #5
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4641      	mov	r1, r8
 80032d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d6:	4649      	mov	r1, r9
 80032d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f0:	ebb2 040a 	subs.w	r4, r2, sl
 80032f4:	eb63 050b 	sbc.w	r5, r3, fp
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	00eb      	lsls	r3, r5, #3
 8003302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003306:	00e2      	lsls	r2, r4, #3
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4643      	mov	r3, r8
 800330e:	18e3      	adds	r3, r4, r3
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	464b      	mov	r3, r9
 8003314:	eb45 0303 	adc.w	r3, r5, r3
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003326:	4629      	mov	r1, r5
 8003328:	028b      	lsls	r3, r1, #10
 800332a:	4621      	mov	r1, r4
 800332c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003330:	4621      	mov	r1, r4
 8003332:	028a      	lsls	r2, r1, #10
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	2200      	movs	r2, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	61fa      	str	r2, [r7, #28]
 8003340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003344:	f7fc ff4c 	bl	80001e0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_GetSysClockFreq+0x200>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336a:	e002      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetSysClockFreq+0x204>)
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003374:	4618      	mov	r0, r3
 8003376:	3750      	adds	r7, #80	; 0x50
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
 8003384:	00f42400 	.word	0x00f42400
 8003388:	007a1200 	.word	0x007a1200

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a8:	f7ff fff0 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	080058f0 	.word	0x080058f0

080033cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	220f      	movs	r2, #15
 80033da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0203 	and.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_RCC_GetClockConfig+0x60>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0207 	and.w	r2, r3, #7
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40023c00 	.word	0x40023c00

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e041      	b.n	80034c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f839 	bl	80034ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fb98 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e044      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_TIM_Base_Start_IT+0xb0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x6c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d013      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x6c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_TIM_Base_Start_IT+0xb4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x6c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_TIM_Base_Start_IT+0xb8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x6c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x6c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d010      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e007      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40014000 	.word	0x40014000

080035a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e041      	b.n	800363e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fb28 	bl	8000c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 fadc 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d855      	bhi.n	8003708 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003699 	.word	0x08003699
 8003668:	08003709 	.word	0x08003709
 800366c:	08003709 	.word	0x08003709
 8003670:	08003709 	.word	0x08003709
 8003674:	080036b5 	.word	0x080036b5
 8003678:	08003709 	.word	0x08003709
 800367c:	08003709 	.word	0x08003709
 8003680:	08003709 	.word	0x08003709
 8003684:	080036d1 	.word	0x080036d1
 8003688:	08003709 	.word	0x08003709
 800368c:	08003709 	.word	0x08003709
 8003690:	08003709 	.word	0x08003709
 8003694:	080036ed 	.word	0x080036ed
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe f9a9 	bl	8001a04 <HAL_DMA_Abort_IT>
      break;
 80036b2:	e02c      	b.n	800370e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe f99b 	bl	8001a04 <HAL_DMA_Abort_IT>
      break;
 80036ce:	e01e      	b.n	800370e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe f98d 	bl	8001a04 <HAL_DMA_Abort_IT>
      break;
 80036ea:	e010      	b.n	800370e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe f97f 	bl	8001a04 <HAL_DMA_Abort_IT>
      break;
 8003706:	e002      	b.n	800370e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	bf00      	nop
  }

  if (status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d157      	bne.n	80037c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fc4d 	bl	8003fbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d117      	bne.n	800375c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	f241 1311 	movw	r3, #4369	; 0x1111
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10f      	bne.n	800375c <HAL_TIM_PWM_Stop_DMA+0x114>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	f240 4344 	movw	r3, #1092	; 0x444
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_TIM_PWM_Stop_DMA+0x114>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	f241 1311 	movw	r3, #4369	; 0x1111
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10f      	bne.n	800378c <HAL_TIM_PWM_Stop_DMA+0x144>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	f240 4344 	movw	r3, #1092	; 0x444
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_TIM_PWM_Stop_DMA+0x144>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_TIM_PWM_Stop_DMA+0x154>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800379a:	e013      	b.n	80037c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_PWM_Stop_DMA+0x164>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037aa:	e00b      	b.n	80037c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d104      	bne.n	80037bc <HAL_TIM_PWM_Stop_DMA+0x174>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ba:	e003      	b.n	80037c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40010000 	.word	0x40010000

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9b0 	bl	8003b7c <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9a2 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd fd6b 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f986 	bl	8003b7c <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f978 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fd41 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f95c 	bl	8003b7c <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f94e 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fd fd17 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f932 	bl	8003b7c <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f924 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fced 	bl	8001300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd f8de 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fc0c 	bl	800419c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8f0 	bl	8003b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fbd6 	bl	8004188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ae      	b.n	8003b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	f200 809f 	bhi.w	8003b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003b51 	.word	0x08003b51
 8003a20:	08003b51 	.word	0x08003b51
 8003a24:	08003b51 	.word	0x08003b51
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003b51 	.word	0x08003b51
 8003a30:	08003b51 	.word	0x08003b51
 8003a34:	08003b51 	.word	0x08003b51
 8003a38:	08003acf 	.word	0x08003acf
 8003a3c:	08003b51 	.word	0x08003b51
 8003a40:	08003b51 	.word	0x08003b51
 8003a44:	08003b51 	.word	0x08003b51
 8003a48:	08003b0f 	.word	0x08003b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f926 	bl	8003ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
      break;
 8003a8a:	e064      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f96c 	bl	8003d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6999      	ldr	r1, [r3, #24]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	619a      	str	r2, [r3, #24]
      break;
 8003acc:	e043      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f9b7 	bl	8003e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0208 	orr.w	r2, r2, #8
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0204 	bic.w	r2, r2, #4
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	61da      	str	r2, [r3, #28]
      break;
 8003b0c:	e023      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fa01 	bl	8003f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	021a      	lsls	r2, r3, #8
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	61da      	str	r2, [r3, #28]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d00b      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <TIM_Base_SetConfig+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <TIM_Base_SetConfig+0xec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <TIM_Base_SetConfig+0xf0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d017      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <TIM_Base_SetConfig+0xe8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <TIM_Base_SetConfig+0xec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <TIM_Base_SetConfig+0xf0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <TIM_Base_SetConfig+0xf4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <TIM_Base_SetConfig+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <TIM_Base_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	615a      	str	r2, [r3, #20]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 0302 	bic.w	r3, r3, #2
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <TIM_OC1_SetConfig+0xc8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10c      	bne.n	8003d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0308 	bic.w	r3, r3, #8
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <TIM_OC1_SetConfig+0xc8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d111      	bne.n	8003d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40010000 	.word	0x40010000

08003d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0320 	bic.w	r3, r3, #32
 8003dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <TIM_OC2_SetConfig+0xd4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <TIM_OC2_SetConfig+0xd4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d113      	bne.n	8003e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000

08003e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10d      	bne.n	8003ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d113      	bne.n	8003ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40010000 	.word	0x40010000

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	031b      	lsls	r3, r3, #12
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <TIM_OC4_SetConfig+0x9c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000

08003fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e050      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d013      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e03d      	b.n	800417c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c2:	2b84      	cmp	r3, #132	; 0x84
 80041c4:	d005      	beq.n	80041d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	3303      	adds	r3, #3
 80041d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041e4:	f000 faf6 	bl	80047d4 <vTaskStartScheduler>
  
  return osOK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}

080041ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f0:	b089      	sub	sp, #36	; 0x24
 80041f2:	af04      	add	r7, sp, #16
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <osThreadCreate+0x54>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685c      	ldr	r4, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691e      	ldr	r6, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffc8 	bl	80041b0 <makeFreeRtosPriority>
 8004220:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	9100      	str	r1, [sp, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4632      	mov	r2, r6
 8004234:	4629      	mov	r1, r5
 8004236:	4620      	mov	r0, r4
 8004238:	f000 f8ed 	bl	8004416 <xTaskCreateStatic>
 800423c:	4603      	mov	r3, r0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e01c      	b.n	800427c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685c      	ldr	r4, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800424e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ffaa 	bl	80041b0 <makeFreeRtosPriority>
 800425c:	4602      	mov	r2, r0
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	9200      	str	r2, [sp, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4632      	mov	r2, r6
 800426a:	4629      	mov	r1, r5
 800426c:	4620      	mov	r0, r4
 800426e:	f000 f92f 	bl	80044d0 <xTaskCreate>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004286 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <osDelay+0x16>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e000      	b.n	800429e <osDelay+0x18>
 800429c:	2301      	movs	r3, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fa64 	bl	800476c <vTaskDelay>
  
  return osOK;
 80042a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f103 0208 	add.w	r2, r3, #8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f103 0208 	add.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0208 	add.w	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d103      	bne.n	8004370 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e00c      	b.n	800438a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3308      	adds	r3, #8
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e002      	b.n	800437e <vListInsert+0x2e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d2f6      	bcs.n	8004378 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6852      	ldr	r2, [r2, #4]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d103      	bne.n	80043f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1e5a      	subs	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08e      	sub	sp, #56	; 0x38
 800441a:	af04      	add	r7, sp, #16
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <xTaskCreateStatic+0x46>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	61fb      	str	r3, [r7, #28]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800445c:	23a0      	movs	r3, #160	; 0xa0
 800445e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2ba0      	cmp	r3, #160	; 0xa0
 8004464:	d00a      	beq.n	800447c <xTaskCreateStatic+0x66>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	61bb      	str	r3, [r7, #24]
}
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800447c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <xTaskCreateStatic+0xac>
 8004484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01b      	beq.n	80044c2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	2202      	movs	r2, #2
 8004498:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800449c:	2300      	movs	r3, #0
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f851 	bl	800455c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044bc:	f000 f8ec 	bl	8004698 <prvAddNewTaskToReadyList>
 80044c0:	e001      	b.n	80044c6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044c6:	697b      	ldr	r3, [r7, #20]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	; 0x30
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 feef 	bl	80052c8 <pvPortMalloc>
 80044ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044f2:	20a0      	movs	r0, #160	; 0xa0
 80044f4:	f000 fee8 	bl	80052c8 <pvPortMalloc>
 80044f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
 8004506:	e005      	b.n	8004514 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f000 ffa9 	bl	8005460 <vPortFree>
 800450e:	e001      	b.n	8004514 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d017      	beq.n	800454a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	2300      	movs	r3, #0
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f80f 	bl	800455c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800453e:	69f8      	ldr	r0, [r7, #28]
 8004540:	f000 f8aa 	bl	8004698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004544:	2301      	movs	r3, #1
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e002      	b.n	8004550 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004550:	69bb      	ldr	r3, [r7, #24]
	}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004574:	3b01      	subs	r3, #1
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f023 0307 	bic.w	r3, r3, #7
 8004582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	617b      	str	r3, [r7, #20]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01f      	beq.n	80045ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e012      	b.n	80045d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	7819      	ldrb	r1, [r3, #0]
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	3334      	adds	r3, #52	; 0x34
 80045c0:	460a      	mov	r2, r1
 80045c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d9e9      	bls.n	80045b0 <prvInitialiseNewTask+0x54>
 80045dc:	e000      	b.n	80045e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80045de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e8:	e003      	b.n	80045f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	2b06      	cmp	r3, #6
 80045f6:	d901      	bls.n	80045fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045f8:	2306      	movs	r3, #6
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2200      	movs	r2, #0
 800460c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	3304      	adds	r3, #4
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fe6b 	bl	80042ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3318      	adds	r3, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe66 	bl	80042ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	f1c3 0207 	rsb	r2, r3, #7
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	2200      	movs	r2, #0
 8004644:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	334c      	adds	r3, #76	; 0x4c
 800464c:	224c      	movs	r2, #76	; 0x4c
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f823 	bl	800569c <memset>
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	4a0c      	ldr	r2, [pc, #48]	; (800468c <prvInitialiseNewTask+0x130>)
 800465a:	651a      	str	r2, [r3, #80]	; 0x50
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <prvInitialiseNewTask+0x134>)
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <prvInitialiseNewTask+0x138>)
 8004666:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	69b8      	ldr	r0, [r7, #24]
 800466e:	f000 fc1f 	bl	8004eb0 <pxPortInitialiseStack>
 8004672:	4602      	mov	r2, r0
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004682:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004684:	bf00      	nop
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000504c 	.word	0x2000504c
 8004690:	200050b4 	.word	0x200050b4
 8004694:	2000511c 	.word	0x2000511c

08004698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046a0:	f000 fd30 	bl	8005104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <prvAddNewTaskToReadyList+0xb8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <prvAddNewTaskToReadyList+0xb8>)
 80046ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <prvAddNewTaskToReadyList+0xbc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046b6:	4a27      	ldr	r2, [pc, #156]	; (8004754 <prvAddNewTaskToReadyList+0xbc>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046bc:	4b24      	ldr	r3, [pc, #144]	; (8004750 <prvAddNewTaskToReadyList+0xb8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d110      	bne.n	80046e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046c4:	f000 facc 	bl	8004c60 <prvInitialiseTaskLists>
 80046c8:	e00d      	b.n	80046e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ca:	4b23      	ldr	r3, [pc, #140]	; (8004758 <prvAddNewTaskToReadyList+0xc0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <prvAddNewTaskToReadyList+0xbc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d802      	bhi.n	80046e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <prvAddNewTaskToReadyList+0xbc>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <prvAddNewTaskToReadyList+0xc4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <prvAddNewTaskToReadyList+0xc4>)
 80046ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <prvAddNewTaskToReadyList+0xc8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <prvAddNewTaskToReadyList+0xc8>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <prvAddNewTaskToReadyList+0xcc>)
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7ff fdf5 	bl	8004308 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800471e:	f000 fd21 	bl	8005164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <prvAddNewTaskToReadyList+0xc0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvAddNewTaskToReadyList+0xbc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d207      	bcs.n	8004748 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <prvAddNewTaskToReadyList+0xd0>)
 800473a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200013f8 	.word	0x200013f8
 8004754:	200012f8 	.word	0x200012f8
 8004758:	20001404 	.word	0x20001404
 800475c:	20001414 	.word	0x20001414
 8004760:	20001400 	.word	0x20001400
 8004764:	200012fc 	.word	0x200012fc
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d017      	beq.n	80047ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <vTaskDelay+0x60>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <vTaskDelay+0x30>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60bb      	str	r3, [r7, #8]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800479c:	f000 f884 	bl	80048a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047a0:	2100      	movs	r1, #0
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fb1e 	bl	8004de4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047a8:	f000 f88c 	bl	80048c4 <xTaskResumeAll>
 80047ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <vTaskDelay+0x64>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20001420 	.word	0x20001420
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047e2:	463a      	mov	r2, r7
 80047e4:	1d39      	adds	r1, r7, #4
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb ff14 	bl	8000618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	460a      	mov	r2, r1
 8004802:	4921      	ldr	r1, [pc, #132]	; (8004888 <vTaskStartScheduler+0xb4>)
 8004804:	4821      	ldr	r0, [pc, #132]	; (800488c <vTaskStartScheduler+0xb8>)
 8004806:	f7ff fe06 	bl	8004416 <xTaskCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	4a20      	ldr	r2, [pc, #128]	; (8004890 <vTaskStartScheduler+0xbc>)
 800480e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004810:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <vTaskStartScheduler+0xbc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11b      	bne.n	8004860 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	613b      	str	r3, [r7, #16]
}
 800483a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800483c:	4b15      	ldr	r3, [pc, #84]	; (8004894 <vTaskStartScheduler+0xc0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	334c      	adds	r3, #76	; 0x4c
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <vTaskStartScheduler+0xc4>)
 8004844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <vTaskStartScheduler+0xc8>)
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <vTaskStartScheduler+0xcc>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <vTaskStartScheduler+0xd0>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800485a:	f000 fbb1 	bl	8004fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800485e:	e00e      	b.n	800487e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d10a      	bne.n	800487e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <vTaskStartScheduler+0xa8>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	080058d8 	.word	0x080058d8
 800488c:	08004c31 	.word	0x08004c31
 8004890:	2000141c 	.word	0x2000141c
 8004894:	200012f8 	.word	0x200012f8
 8004898:	2000005c 	.word	0x2000005c
 800489c:	20001418 	.word	0x20001418
 80048a0:	20001404 	.word	0x20001404
 80048a4:	200013fc 	.word	0x200013fc

080048a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20001420 	.word	0x20001420

080048c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <xTaskResumeAll+0x114>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048f0:	f000 fc08 	bl	8005104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048f4:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <xTaskResumeAll+0x114>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4a37      	ldr	r2, [pc, #220]	; (80049d8 <xTaskResumeAll+0x114>)
 80048fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <xTaskResumeAll+0x114>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d161      	bne.n	80049ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004906:	4b35      	ldr	r3, [pc, #212]	; (80049dc <xTaskResumeAll+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05d      	beq.n	80049ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490e:	e02e      	b.n	800496e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <xTaskResumeAll+0x11c>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3318      	adds	r3, #24
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fd50 	bl	80043c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fd4b 	bl	80043c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <xTaskResumeAll+0x120>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <xTaskResumeAll+0x120>)
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <xTaskResumeAll+0x124>)
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7ff fcd7 	bl	8004308 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <xTaskResumeAll+0x128>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <xTaskResumeAll+0x12c>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <xTaskResumeAll+0x11c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1cc      	bne.n	8004910 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800497c:	f000 fa12 	bl	8004da4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004980:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <xTaskResumeAll+0x130>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800498c:	f000 f836 	bl	80049fc <xTaskIncrementTick>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004996:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <xTaskResumeAll+0x12c>)
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f1      	bne.n	800498c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <xTaskResumeAll+0x130>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <xTaskResumeAll+0x12c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <xTaskResumeAll+0x134>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049ca:	f000 fbcb 	bl	8005164 <vPortExitCritical>

	return xAlreadyYielded;
 80049ce:	68bb      	ldr	r3, [r7, #8]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20001420 	.word	0x20001420
 80049dc:	200013f8 	.word	0x200013f8
 80049e0:	200013b8 	.word	0x200013b8
 80049e4:	20001400 	.word	0x20001400
 80049e8:	200012fc 	.word	0x200012fc
 80049ec:	200012f8 	.word	0x200012f8
 80049f0:	2000140c 	.word	0x2000140c
 80049f4:	20001408 	.word	0x20001408
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a06:	4b4e      	ldr	r3, [pc, #312]	; (8004b40 <xTaskIncrementTick+0x144>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 808e 	bne.w	8004b2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a10:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a18:	4a4a      	ldr	r2, [pc, #296]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d120      	bne.n	8004a66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	603b      	str	r3, [r7, #0]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <xTaskIncrementTick+0x46>
 8004a44:	4b40      	ldr	r3, [pc, #256]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3e      	ldr	r2, [pc, #248]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	f000 f99f 	bl	8004da4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d348      	bcc.n	8004b02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a70:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7a:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	601a      	str	r2, [r3, #0]
					break;
 8004a82:	e03e      	b.n	8004b02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d203      	bcs.n	8004aa4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004aa2:	e02e      	b.n	8004b02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fc8a 	bl	80043c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fc81 	bl	80043c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <xTaskIncrementTick+0x160>)
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff fc0d 	bl	8004308 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <xTaskIncrementTick+0x164>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d3b9      	bcc.n	8004a70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b00:	e7b6      	b.n	8004a70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <xTaskIncrementTick+0x164>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	4914      	ldr	r1, [pc, #80]	; (8004b5c <xTaskIncrementTick+0x160>)
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d901      	bls.n	8004b1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <xTaskIncrementTick+0x168>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e004      	b.n	8004b36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <xTaskIncrementTick+0x16c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <xTaskIncrementTick+0x16c>)
 8004b34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20001420 	.word	0x20001420
 8004b44:	200013fc 	.word	0x200013fc
 8004b48:	200013b0 	.word	0x200013b0
 8004b4c:	200013b4 	.word	0x200013b4
 8004b50:	20001410 	.word	0x20001410
 8004b54:	20001418 	.word	0x20001418
 8004b58:	20001400 	.word	0x20001400
 8004b5c:	200012fc 	.word	0x200012fc
 8004b60:	200012f8 	.word	0x200012f8
 8004b64:	2000140c 	.word	0x2000140c
 8004b68:	20001408 	.word	0x20001408

08004b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <vTaskSwitchContext+0xac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b7a:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <vTaskSwitchContext+0xb0>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b80:	e044      	b.n	8004c0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004b82:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <vTaskSwitchContext+0xb0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <vTaskSwitchContext+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	f1c3 031f 	rsb	r3, r3, #31
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	4921      	ldr	r1, [pc, #132]	; (8004c24 <vTaskSwitchContext+0xb8>)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	607b      	str	r3, [r7, #4]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <vTaskSwitchContext+0x5a>
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <vTaskSwitchContext+0xb8>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3308      	adds	r3, #8
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d104      	bne.n	8004bf8 <vTaskSwitchContext+0x8c>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <vTaskSwitchContext+0xbc>)
 8004c00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <vTaskSwitchContext+0xbc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	334c      	adds	r3, #76	; 0x4c
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <vTaskSwitchContext+0xc0>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20001420 	.word	0x20001420
 8004c1c:	2000140c 	.word	0x2000140c
 8004c20:	20001400 	.word	0x20001400
 8004c24:	200012fc 	.word	0x200012fc
 8004c28:	200012f8 	.word	0x200012f8
 8004c2c:	2000005c 	.word	0x2000005c

08004c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c38:	f000 f852 	bl	8004ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <prvIdleTask+0x28>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d9f9      	bls.n	8004c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <prvIdleTask+0x2c>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c54:	e7f0      	b.n	8004c38 <prvIdleTask+0x8>
 8004c56:	bf00      	nop
 8004c58:	200012fc 	.word	0x200012fc
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	e00c      	b.n	8004c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <prvInitialiseTaskLists+0x60>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fb17 	bl	80042ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3301      	adds	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d9ef      	bls.n	8004c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c8c:	480d      	ldr	r0, [pc, #52]	; (8004cc4 <prvInitialiseTaskLists+0x64>)
 8004c8e:	f7ff fb0e 	bl	80042ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c92:	480d      	ldr	r0, [pc, #52]	; (8004cc8 <prvInitialiseTaskLists+0x68>)
 8004c94:	f7ff fb0b 	bl	80042ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c98:	480c      	ldr	r0, [pc, #48]	; (8004ccc <prvInitialiseTaskLists+0x6c>)
 8004c9a:	f7ff fb08 	bl	80042ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c9e:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <prvInitialiseTaskLists+0x70>)
 8004ca0:	f7ff fb05 	bl	80042ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ca4:	480b      	ldr	r0, [pc, #44]	; (8004cd4 <prvInitialiseTaskLists+0x74>)
 8004ca6:	f7ff fb02 	bl	80042ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <prvInitialiseTaskLists+0x78>)
 8004cac:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <prvInitialiseTaskLists+0x64>)
 8004cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <prvInitialiseTaskLists+0x7c>)
 8004cb2:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <prvInitialiseTaskLists+0x68>)
 8004cb4:	601a      	str	r2, [r3, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200012fc 	.word	0x200012fc
 8004cc4:	20001388 	.word	0x20001388
 8004cc8:	2000139c 	.word	0x2000139c
 8004ccc:	200013b8 	.word	0x200013b8
 8004cd0:	200013cc 	.word	0x200013cc
 8004cd4:	200013e4 	.word	0x200013e4
 8004cd8:	200013b0 	.word	0x200013b0
 8004cdc:	200013b4 	.word	0x200013b4

08004ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce6:	e019      	b.n	8004d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ce8:	f000 fa0c 	bl	8005104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <prvCheckTasksWaitingTermination+0x50>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fb62 	bl	80043c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <prvCheckTasksWaitingTermination+0x54>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <prvCheckTasksWaitingTermination+0x54>)
 8004d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d12:	f000 fa27 	bl	8005164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f810 	bl	8004d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <prvCheckTasksWaitingTermination+0x58>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e1      	bne.n	8004ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200013cc 	.word	0x200013cc
 8004d34:	200013f8 	.word	0x200013f8
 8004d38:	200013e0 	.word	0x200013e0

08004d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	334c      	adds	r3, #76	; 0x4c
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fcaf 	bl	80056ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fb7f 	bl	8005460 <vPortFree>
				vPortFree( pxTCB );
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb7c 	bl	8005460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d68:	e018      	b.n	8004d9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d103      	bne.n	8004d7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb73 	bl	8005460 <vPortFree>
	}
 8004d7a:	e00f      	b.n	8004d9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d00a      	beq.n	8004d9c <prvDeleteTCB+0x60>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60fb      	str	r3, [r7, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <prvDeleteTCB+0x5e>
	}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvResetNextTaskUnblockTime+0x38>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <prvResetNextTaskUnblockTime+0x3c>)
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dbc:	e008      	b.n	8004dd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <prvResetNextTaskUnblockTime+0x38>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	200013b0 	.word	0x200013b0
 8004de0:	20001418 	.word	0x20001418

08004de4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fae1 	bl	80043c2 <uxListRemove>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43da      	mvns	r2, r3
 8004e14:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d10a      	bne.n	8004e3c <prvAddCurrentTaskToDelayedList+0x58>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	481a      	ldr	r0, [pc, #104]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e36:	f7ff fa67 	bl	8004308 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e3a:	e026      	b.n	8004e8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d209      	bcs.n	8004e68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7ff fa75 	bl	8004350 <vListInsert>
}
 8004e66:	e010      	b.n	8004e8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f7ff fa6b 	bl	8004350 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d202      	bcs.n	8004e8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e84:	4a09      	ldr	r2, [pc, #36]	; (8004eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6013      	str	r3, [r2, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200013fc 	.word	0x200013fc
 8004e98:	200012f8 	.word	0x200012f8
 8004e9c:	20001400 	.word	0x20001400
 8004ea0:	200013e4 	.word	0x200013e4
 8004ea4:	200013b4 	.word	0x200013b4
 8004ea8:	200013b0 	.word	0x200013b0
 8004eac:	20001418 	.word	0x20001418

08004eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3b04      	subs	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <pxPortInitialiseStack+0x64>)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b14      	subs	r3, #20
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f06f 0202 	mvn.w	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b20      	subs	r3, #32
 8004f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	08004f19 	.word	0x08004f19

08004f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f22:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <prvTaskExitError+0x54>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d00a      	beq.n	8004f42 <prvTaskExitError+0x2a>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60fb      	str	r3, [r7, #12]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <prvTaskExitError+0x28>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60bb      	str	r3, [r7, #8]
}
 8004f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f56:	bf00      	nop
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0fc      	beq.n	8004f58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	4770      	bx	lr
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst2>:
 8004f90:	200012f8 	.word	0x200012f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <prvPortStartFirstTask+0x24>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8814 	msr	CONTROL, r0
 8004faa:	b662      	cpsie	i
 8004fac:	b661      	cpsie	f
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	df00      	svc	0
 8004fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fba:	bf00      	nop
 8004fbc:	e000ed08 	.word	0xe000ed08

08004fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fc6:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <xPortStartScheduler+0x120>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a46      	ldr	r2, [pc, #280]	; (80050e4 <xPortStartScheduler+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10a      	bne.n	8004fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <xPortStartScheduler+0x120>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a3f      	ldr	r2, [pc, #252]	; (80050e8 <xPortStartScheduler+0x128>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10a      	bne.n	8005006 <xPortStartScheduler+0x46>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	60fb      	str	r3, [r7, #12]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <xPortStartScheduler+0x12c>)
 8005008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	22ff      	movs	r2, #255	; 0xff
 8005016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <xPortStartScheduler+0x130>)
 800502c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <xPortStartScheduler+0x134>)
 8005030:	2207      	movs	r2, #7
 8005032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005034:	e009      	b.n	800504a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005036:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <xPortStartScheduler+0x134>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <xPortStartScheduler+0x134>)
 800503e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d0ef      	beq.n	8005036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <xPortStartScheduler+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1c3 0307 	rsb	r3, r3, #7
 800505e:	2b04      	cmp	r3, #4
 8005060:	d00a      	beq.n	8005078 <xPortStartScheduler+0xb8>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <xPortStartScheduler+0x134>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <xPortStartScheduler+0x134>)
 8005080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005082:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <xPortStartScheduler+0x134>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800508a:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <xPortStartScheduler+0x134>)
 800508c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <xPortStartScheduler+0x138>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <xPortStartScheduler+0x138>)
 800509c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <xPortStartScheduler+0x138>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <xPortStartScheduler+0x138>)
 80050a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ae:	f000 f8dd 	bl	800526c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <xPortStartScheduler+0x13c>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050b8:	f000 f8fc 	bl	80052b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <xPortStartScheduler+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <xPortStartScheduler+0x140>)
 80050c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050c8:	f7ff ff66 	bl	8004f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050cc:	f7ff fd4e 	bl	8004b6c <vTaskSwitchContext>
	prvTaskExitError();
 80050d0:	f7ff ff22 	bl	8004f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000ed00 	.word	0xe000ed00
 80050e4:	410fc271 	.word	0x410fc271
 80050e8:	410fc270 	.word	0x410fc270
 80050ec:	e000e400 	.word	0xe000e400
 80050f0:	20001424 	.word	0x20001424
 80050f4:	20001428 	.word	0x20001428
 80050f8:	e000ed20 	.word	0xe000ed20
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	e000ef34 	.word	0xe000ef34

08005104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	607b      	str	r3, [r7, #4]
}
 800511c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <vPortEnterCritical+0x58>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a0d      	ldr	r2, [pc, #52]	; (800515c <vPortEnterCritical+0x58>)
 8005126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <vPortEnterCritical+0x58>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d10f      	bne.n	8005150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <vPortEnterCritical+0x5c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <vPortEnterCritical+0x4c>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	603b      	str	r3, [r7, #0]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vPortEnterCritical+0x4a>
	}
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	2000000c 	.word	0x2000000c
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <vPortExitCritical+0x50>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <vPortExitCritical+0x24>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	607b      	str	r3, [r7, #4]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <vPortExitCritical+0x50>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3b01      	subs	r3, #1
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <vPortExitCritical+0x50>)
 8005190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005192:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <vPortExitCritical+0x50>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <vPortExitCritical+0x42>
 800519a:	2300      	movs	r3, #0
 800519c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c
	...

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f01e 0f10 	tst.w	lr, #16
 80051d0:	bf08      	it	eq
 80051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051e4:	f380 8811 	msr	BASEPRI, r0
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f7ff fcbc 	bl	8004b6c <vTaskSwitchContext>
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	bc09      	pop	{r0, r3}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005206:	f01e 0f10 	tst.w	lr, #16
 800520a:	bf08      	it	eq
 800520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005210:	f380 8809 	msr	PSP, r0
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst>:
 8005220:	200012f8 	.word	0x200012f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7ff fbdb 	bl	80049fc <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <SysTick_Handler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vPortSetupTimerInterrupt+0x38>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <vPortSetupTimerInterrupt+0x3c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <vPortSetupTimerInterrupt+0x40>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <vPortSetupTimerInterrupt+0x44>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e010 	.word	0xe000e010
 80052a4:	e000e018 	.word	0xe000e018
 80052a8:	20000000 	.word	0x20000000
 80052ac:	10624dd3 	.word	0x10624dd3
 80052b0:	e000e014 	.word	0xe000e014

080052b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052c4 <vPortEnableVFP+0x10>
 80052b8:	6801      	ldr	r1, [r0, #0]
 80052ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052be:	6001      	str	r1, [r0, #0]
 80052c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052c2:	bf00      	nop
 80052c4:	e000ed88 	.word	0xe000ed88

080052c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052d4:	f7ff fae8 	bl	80048a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052d8:	4b5b      	ldr	r3, [pc, #364]	; (8005448 <pvPortMalloc+0x180>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e0:	f000 f920 	bl	8005524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052e4:	4b59      	ldr	r3, [pc, #356]	; (800544c <pvPortMalloc+0x184>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8093 	bne.w	8005418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01d      	beq.n	8005334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052f8:	2208      	movs	r2, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d014      	beq.n	8005334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	3308      	adds	r3, #8
 8005312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <pvPortMalloc+0x6c>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617b      	str	r3, [r7, #20]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06e      	beq.n	8005418 <pvPortMalloc+0x150>
 800533a:	4b45      	ldr	r3, [pc, #276]	; (8005450 <pvPortMalloc+0x188>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d869      	bhi.n	8005418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005344:	4b43      	ldr	r3, [pc, #268]	; (8005454 <pvPortMalloc+0x18c>)
 8005346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005348:	4b42      	ldr	r3, [pc, #264]	; (8005454 <pvPortMalloc+0x18c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800534e:	e004      	b.n	800535a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d903      	bls.n	800536c <pvPortMalloc+0xa4>
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f1      	bne.n	8005350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800536c:	4b36      	ldr	r3, [pc, #216]	; (8005448 <pvPortMalloc+0x180>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005372:	429a      	cmp	r2, r3
 8005374:	d050      	beq.n	8005418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2208      	movs	r2, #8
 800537c:	4413      	add	r3, r2
 800537e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	2308      	movs	r3, #8
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	429a      	cmp	r2, r3
 8005396:	d91f      	bls.n	80053d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <pvPortMalloc+0xf8>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	613b      	str	r3, [r7, #16]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	1ad2      	subs	r2, r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053d2:	69b8      	ldr	r0, [r7, #24]
 80053d4:	f000 f908 	bl	80055e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <pvPortMalloc+0x188>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <pvPortMalloc+0x188>)
 80053e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053e6:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <pvPortMalloc+0x188>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <pvPortMalloc+0x190>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d203      	bcs.n	80053fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <pvPortMalloc+0x188>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <pvPortMalloc+0x190>)
 80053f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <pvPortMalloc+0x184>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	431a      	orrs	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <pvPortMalloc+0x194>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <pvPortMalloc+0x194>)
 8005416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005418:	f7ff fa54 	bl	80048c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <pvPortMalloc+0x174>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60fb      	str	r3, [r7, #12]
}
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <pvPortMalloc+0x172>
	return pvReturn;
 800543c:	69fb      	ldr	r3, [r7, #28]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20005034 	.word	0x20005034
 800544c:	20005048 	.word	0x20005048
 8005450:	20005038 	.word	0x20005038
 8005454:	2000502c 	.word	0x2000502c
 8005458:	2000503c 	.word	0x2000503c
 800545c:	20005040 	.word	0x20005040

08005460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04d      	beq.n	800550e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005472:	2308      	movs	r3, #8
 8005474:	425b      	negs	r3, r3
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <vPortFree+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <vPortFree+0x44>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60fb      	str	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <vPortFree+0x62>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60bb      	str	r3, [r7, #8]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <vPortFree+0xb8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01e      	beq.n	800550e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11a      	bne.n	800550e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <vPortFree+0xb8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054e8:	f7ff f9de 	bl	80048a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <vPortFree+0xbc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <vPortFree+0xbc>)
 80054f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f000 f874 	bl	80055e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <vPortFree+0xc0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a06      	ldr	r2, [pc, #24]	; (8005520 <vPortFree+0xc0>)
 8005508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800550a:	f7ff f9db 	bl	80048c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800550e:	bf00      	nop
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20005048 	.word	0x20005048
 800551c:	20005038 	.word	0x20005038
 8005520:	20005044 	.word	0x20005044

08005524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800552a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800552e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <prvHeapInit+0xac>)
 8005532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00c      	beq.n	8005558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <prvHeapInit+0xac>)
 8005554:	4413      	add	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <prvHeapInit+0xb0>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <prvHeapInit+0xb0>)
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4413      	add	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005570:	2208      	movs	r2, #8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0307 	bic.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <prvHeapInit+0xb4>)
 8005584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <prvHeapInit+0xb4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <prvHeapInit+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	1ad2      	subs	r2, r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvHeapInit+0xb4>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <prvHeapInit+0xb8>)
 80055b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <prvHeapInit+0xbc>)
 80055ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <prvHeapInit+0xc0>)
 80055be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	2000142c 	.word	0x2000142c
 80055d4:	2000502c 	.word	0x2000502c
 80055d8:	20005034 	.word	0x20005034
 80055dc:	2000503c 	.word	0x2000503c
 80055e0:	20005038 	.word	0x20005038
 80055e4:	20005048 	.word	0x20005048

080055e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055f0:	4b28      	ldr	r3, [pc, #160]	; (8005694 <prvInsertBlockIntoFreeList+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e002      	b.n	80055fc <prvInsertBlockIntoFreeList+0x14>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d8f7      	bhi.n	80055f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d108      	bne.n	800562a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d118      	bne.n	8005670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <prvInsertBlockIntoFreeList+0xb0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d00d      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e008      	b.n	8005678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvInsertBlockIntoFreeList+0xb0>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e003      	b.n	8005678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d002      	beq.n	8005686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2000502c 	.word	0x2000502c
 8005698:	20005034 	.word	0x20005034

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <_reclaim_reent>:
 80056ac:	4b29      	ldr	r3, [pc, #164]	; (8005754 <_reclaim_reent+0xa8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4283      	cmp	r3, r0
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	4604      	mov	r4, r0
 80056b6:	d04b      	beq.n	8005750 <_reclaim_reent+0xa4>
 80056b8:	69c3      	ldr	r3, [r0, #28]
 80056ba:	b143      	cbz	r3, 80056ce <_reclaim_reent+0x22>
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d144      	bne.n	800574c <_reclaim_reent+0xa0>
 80056c2:	69e3      	ldr	r3, [r4, #28]
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	b111      	cbz	r1, 80056ce <_reclaim_reent+0x22>
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 f86b 	bl	80057a4 <_free_r>
 80056ce:	6961      	ldr	r1, [r4, #20]
 80056d0:	b111      	cbz	r1, 80056d8 <_reclaim_reent+0x2c>
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 f866 	bl	80057a4 <_free_r>
 80056d8:	69e1      	ldr	r1, [r4, #28]
 80056da:	b111      	cbz	r1, 80056e2 <_reclaim_reent+0x36>
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 f861 	bl	80057a4 <_free_r>
 80056e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80056e4:	b111      	cbz	r1, 80056ec <_reclaim_reent+0x40>
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 f85c 	bl	80057a4 <_free_r>
 80056ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ee:	b111      	cbz	r1, 80056f6 <_reclaim_reent+0x4a>
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 f857 	bl	80057a4 <_free_r>
 80056f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056f8:	b111      	cbz	r1, 8005700 <_reclaim_reent+0x54>
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 f852 	bl	80057a4 <_free_r>
 8005700:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005702:	b111      	cbz	r1, 800570a <_reclaim_reent+0x5e>
 8005704:	4620      	mov	r0, r4
 8005706:	f000 f84d 	bl	80057a4 <_free_r>
 800570a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800570c:	b111      	cbz	r1, 8005714 <_reclaim_reent+0x68>
 800570e:	4620      	mov	r0, r4
 8005710:	f000 f848 	bl	80057a4 <_free_r>
 8005714:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005716:	b111      	cbz	r1, 800571e <_reclaim_reent+0x72>
 8005718:	4620      	mov	r0, r4
 800571a:	f000 f843 	bl	80057a4 <_free_r>
 800571e:	6a23      	ldr	r3, [r4, #32]
 8005720:	b1b3      	cbz	r3, 8005750 <_reclaim_reent+0xa4>
 8005722:	4620      	mov	r0, r4
 8005724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005728:	4718      	bx	r3
 800572a:	5949      	ldr	r1, [r1, r5]
 800572c:	b941      	cbnz	r1, 8005740 <_reclaim_reent+0x94>
 800572e:	3504      	adds	r5, #4
 8005730:	69e3      	ldr	r3, [r4, #28]
 8005732:	2d80      	cmp	r5, #128	; 0x80
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	d1f8      	bne.n	800572a <_reclaim_reent+0x7e>
 8005738:	4620      	mov	r0, r4
 800573a:	f000 f833 	bl	80057a4 <_free_r>
 800573e:	e7c0      	b.n	80056c2 <_reclaim_reent+0x16>
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f82e 	bl	80057a4 <_free_r>
 8005748:	4631      	mov	r1, r6
 800574a:	e7ef      	b.n	800572c <_reclaim_reent+0x80>
 800574c:	2500      	movs	r5, #0
 800574e:	e7ef      	b.n	8005730 <_reclaim_reent+0x84>
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	bf00      	nop
 8005754:	2000005c 	.word	0x2000005c

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	4d0d      	ldr	r5, [pc, #52]	; (8005790 <__libc_init_array+0x38>)
 800575c:	4c0d      	ldr	r4, [pc, #52]	; (8005794 <__libc_init_array+0x3c>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	2600      	movs	r6, #0
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	4d0b      	ldr	r5, [pc, #44]	; (8005798 <__libc_init_array+0x40>)
 800576a:	4c0c      	ldr	r4, [pc, #48]	; (800579c <__libc_init_array+0x44>)
 800576c:	f000 f872 	bl	8005854 <_init>
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	2600      	movs	r6, #0
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f855 3b04 	ldr.w	r3, [r5], #4
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	08005908 	.word	0x08005908
 8005794:	08005908 	.word	0x08005908
 8005798:	08005908 	.word	0x08005908
 800579c:	0800590c 	.word	0x0800590c

080057a0 <__retarget_lock_acquire_recursive>:
 80057a0:	4770      	bx	lr

080057a2 <__retarget_lock_release_recursive>:
 80057a2:	4770      	bx	lr

080057a4 <_free_r>:
 80057a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d044      	beq.n	8005834 <_free_r+0x90>
 80057aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ae:	9001      	str	r0, [sp, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f1a1 0404 	sub.w	r4, r1, #4
 80057b6:	bfb8      	it	lt
 80057b8:	18e4      	addlt	r4, r4, r3
 80057ba:	f000 f83f 	bl	800583c <__malloc_lock>
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <_free_r+0x94>)
 80057c0:	9801      	ldr	r0, [sp, #4]
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	b933      	cbnz	r3, 80057d4 <_free_r+0x30>
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	6014      	str	r4, [r2, #0]
 80057ca:	b003      	add	sp, #12
 80057cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d0:	f000 b83a 	b.w	8005848 <__malloc_unlock>
 80057d4:	42a3      	cmp	r3, r4
 80057d6:	d908      	bls.n	80057ea <_free_r+0x46>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf01      	itttt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	1949      	addeq	r1, r1, r5
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	e7ed      	b.n	80057c6 <_free_r+0x22>
 80057ea:	461a      	mov	r2, r3
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b10b      	cbz	r3, 80057f4 <_free_r+0x50>
 80057f0:	42a3      	cmp	r3, r4
 80057f2:	d9fa      	bls.n	80057ea <_free_r+0x46>
 80057f4:	6811      	ldr	r1, [r2, #0]
 80057f6:	1855      	adds	r5, r2, r1
 80057f8:	42a5      	cmp	r5, r4
 80057fa:	d10b      	bne.n	8005814 <_free_r+0x70>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	4421      	add	r1, r4
 8005800:	1854      	adds	r4, r2, r1
 8005802:	42a3      	cmp	r3, r4
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	d1e0      	bne.n	80057ca <_free_r+0x26>
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	6053      	str	r3, [r2, #4]
 800580e:	440c      	add	r4, r1
 8005810:	6014      	str	r4, [r2, #0]
 8005812:	e7da      	b.n	80057ca <_free_r+0x26>
 8005814:	d902      	bls.n	800581c <_free_r+0x78>
 8005816:	230c      	movs	r3, #12
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	e7d6      	b.n	80057ca <_free_r+0x26>
 800581c:	6825      	ldr	r5, [r4, #0]
 800581e:	1961      	adds	r1, r4, r5
 8005820:	428b      	cmp	r3, r1
 8005822:	bf04      	itt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	6063      	str	r3, [r4, #4]
 800582a:	bf04      	itt	eq
 800582c:	1949      	addeq	r1, r1, r5
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	6054      	str	r4, [r2, #4]
 8005832:	e7ca      	b.n	80057ca <_free_r+0x26>
 8005834:	b003      	add	sp, #12
 8005836:	bd30      	pop	{r4, r5, pc}
 8005838:	20005188 	.word	0x20005188

0800583c <__malloc_lock>:
 800583c:	4801      	ldr	r0, [pc, #4]	; (8005844 <__malloc_lock+0x8>)
 800583e:	f7ff bfaf 	b.w	80057a0 <__retarget_lock_acquire_recursive>
 8005842:	bf00      	nop
 8005844:	20005184 	.word	0x20005184

08005848 <__malloc_unlock>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__malloc_unlock+0x8>)
 800584a:	f7ff bfaa 	b.w	80057a2 <__retarget_lock_release_recursive>
 800584e:	bf00      	nop
 8005850:	20005184 	.word	0x20005184

08005854 <_init>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr

08005860 <_fini>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr
