
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a210  0800a210  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a218  0800a218  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800a220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000548c  200000f0  0800a310  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000557c  0800a310  0002557c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc55  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dad  00000000  00000000  0003bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  00040b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ba  00000000  00000000  000423c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad12  00000000  00000000  0004367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020214  00000000  00000000  0005e38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e3b7  00000000  00000000  0007e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065f0  00000000  00000000  0011c958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00122f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a010 	.word	0x0800a010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0800a010 	.word	0x0800a010

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f008 fa4b 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f008 fa45 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f008 fa3f 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f008 fa39 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f008 fa33 	bl	800897c <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f008 fa2d 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f008 fa27 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f008 fa21 	bl	800897c <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f008 fa1e 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f008 fa18 	bl	800897c <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f004 fb27 	bl	8004bf8 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003ac 	.word	0x200003ac

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f004 faf7 	bl	8004bf8 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003ac 	.word	0x200003ac

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <vApplicationGetIdleTaskMemory+0x2c>)
 8000910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <vApplicationGetIdleTaskMemory+0x30>)
 8000916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200001ac 	.word	0x200001ac

08000934 <game_set_led_output_array>:
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f002 fead 	bl	800369c <lighting_set_output>
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <game_fsm>:
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
 800094e:	f000 fc75 	bl	800123c <movement_fsm>
 8000952:	f002 ffe3 	bl	800391c <lighting_refresh>
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <game_reset>:
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
 800095e:	f002 f82d 	bl	80029bc <engine_reset>
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800096e:	f003 f993 	bl	8003c98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000972:	f000 f887 	bl	8000a84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000976:	f000 fa4d 	bl	8000e14 <MX_GPIO_Init>
	MX_DMA_Init();
 800097a:	f000 fa2b 	bl	8000dd4 <MX_DMA_Init>
	MX_TIM1_Init();
 800097e:	f000 f9a9 	bl	8000cd4 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000982:	f000 f8ed 	bl	8000b60 <MX_I2C1_Init>
	MX_RTC_Init();
 8000986:	f000 f919 	bl	8000bbc <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 800098a:	2200      	movs	r2, #0
 800098c:	2118      	movs	r1, #24
 800098e:	2014      	movs	r0, #20
 8000990:	f007 f942 	bl	8007c18 <xQueueGenericCreate>
 8000994:	4603      	mov	r3, r0
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <main+0xe0>)
 8000998:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 800099a:	2200      	movs	r2, #0
 800099c:	2101      	movs	r1, #1
 800099e:	2014      	movs	r0, #20
 80009a0:	f007 f93a 	bl	8007c18 <xQueueGenericCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <main+0xe4>)
 80009a8:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009aa:	2203      	movs	r2, #3
 80009ac:	2100      	movs	r1, #0
 80009ae:	2001      	movs	r0, #1
 80009b0:	f007 f932 	bl	8007c18 <xQueueGenericCreate>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <main+0xe8>)
 80009b8:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <main+0xec>)
 80009bc:	1d3c      	adds	r4, r7, #4
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 ffa4 	bl	800791e <osThreadCreate>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <main+0xf0>)
 80009da:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(t_LCD, "t_LCD",
 80009dc:	2300      	movs	r3, #0
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	2304      	movs	r3, #4
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	491c      	ldr	r1, [pc, #112]	; (8000a5c <main+0xf4>)
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <main+0xf8>)
 80009ec:	f007 fdfb 	bl	80085e6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 4,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2302      	movs	r3, #2
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	4919      	ldr	r1, [pc, #100]	; (8000a64 <main+0xfc>)
 80009fe:	481a      	ldr	r0, [pc, #104]	; (8000a68 <main+0x100>)
 8000a00:	f007 fdf1 	bl	80085e6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a04:	2300      	movs	r3, #0
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2305      	movs	r3, #5
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	4916      	ldr	r1, [pc, #88]	; (8000a6c <main+0x104>)
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0x108>)
 8000a14:	f007 fde7 	bl	80085e6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_reed_scan_sensors, "t_reed_scan_sensors",
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	4913      	ldr	r1, [pc, #76]	; (8000a74 <main+0x10c>)
 8000a26:	4814      	ldr	r0, [pc, #80]	; (8000a78 <main+0x110>)
 8000a28:	f007 fddd 	bl	80085e6 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2300      	movs	r3, #0
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	4910      	ldr	r1, [pc, #64]	; (8000a7c <main+0x114>)
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <main+0x118>)
 8000a3c:	f007 fdd3 	bl	80085e6 <xTaskCreate>

	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000a40:	f006 ff66 	bl	8007910 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000a44:	e7fe      	b.n	8000a44 <main+0xdc>
 8000a46:	bf00      	nop
 8000a48:	200004cc 	.word	0x200004cc
 8000a4c:	200004d0 	.word	0x200004d0
 8000a50:	200004d4 	.word	0x200004d4
 8000a54:	0800a074 	.word	0x0800a074
 8000a58:	200004c8 	.word	0x200004c8
 8000a5c:	0800a028 	.word	0x0800a028
 8000a60:	0800188d 	.word	0x0800188d
 8000a64:	0800a030 	.word	0x0800a030
 8000a68:	080018fd 	.word	0x080018fd
 8000a6c:	0800a03c 	.word	0x0800a03c
 8000a70:	08002605 	.word	0x08002605
 8000a74:	0800a048 	.word	0x0800a048
 8000a78:	080039b9 	.word	0x080039b9
 8000a7c:	0800a05c 	.word	0x0800a05c
 8000a80:	08001a41 	.word	0x08001a41

08000a84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	2230      	movs	r2, #48	; 0x30
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f009 f9d2 	bl	8009e3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <SystemClock_Config+0xd4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a29      	ldr	r2, [pc, #164]	; (8000b58 <SystemClock_Config+0xd4>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SystemClock_Config+0xd4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <SystemClock_Config+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <SystemClock_Config+0xd8>)
 8000ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <SystemClock_Config+0xd8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aec:	2310      	movs	r3, #16
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000afc:	2310      	movs	r3, #16
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fb78 	bl	8005208 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
		Error_Handler();
 8000b1e:	f000 fa91 	bl	8001044 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fdda 	bl	80056f8 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xca>
		Error_Handler();
 8000b4a:	f000 fa7b 	bl	8001044 <Error_Handler>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_I2C1_Init+0x54>)
 8000b68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_I2C1_Init+0x58>)
 8000b6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b82:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_I2C1_Init+0x50>)
 8000b9e:	f003 fee7 	bl	8004970 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000ba8:	f000 fa4c 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200003ac 	.word	0x200003ac
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	000186a0 	.word	0x000186a0

08000bbc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	; 0x40
 8000bc0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2228      	movs	r2, #40	; 0x28
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f009 f92d 	bl	8009e3c <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_RTC_Init+0x110>)
 8000be4:	4a3a      	ldr	r2, [pc, #232]	; (8000cd0 <MX_RTC_Init+0x114>)
 8000be6:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <MX_RTC_Init+0x110>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <MX_RTC_Init+0x110>)
 8000bf0:	227f      	movs	r2, #127	; 0x7f
 8000bf2:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_RTC_Init+0x110>)
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <MX_RTC_Init+0x110>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <MX_RTC_Init+0x110>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <MX_RTC_Init+0x110>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000c0c:	482f      	ldr	r0, [pc, #188]	; (8000ccc <MX_RTC_Init+0x110>)
 8000c0e:	f005 f89f 	bl	8005d50 <HAL_RTC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_RTC_Init+0x60>
		Error_Handler();
 8000c18:	f000 fa14 	bl	8001044 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_RTC_Init+0x110>)
 8000c40:	f005 f8fc 	bl	8005e3c <HAL_RTC_SetTime>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_RTC_Init+0x92>
		Error_Handler();
 8000c4a:	f000 f9fb 	bl	8001044 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JANUARY;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <MX_RTC_Init+0x110>)
 8000c70:	f005 f97e 	bl	8005f70 <HAL_RTC_SetDate>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_RTC_Init+0xc2>
		Error_Handler();
 8000c7a:	f000 f9e3 	bl	8001044 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_RTC_Init+0x110>)
 8000cb6:	f005 f9df 	bl	8006078 <HAL_RTC_SetAlarm_IT>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_RTC_Init+0x108>
		Error_Handler();
 8000cc0:	f000 f9c0 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3740      	adds	r7, #64	; 0x40
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000400 	.word	0x20000400
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b092      	sub	sp, #72	; 0x48
 8000cd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f009 f89c 	bl	8009e3c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d06:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <MX_TIM1_Init+0xfc>)
 8000d08:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d18:	2268      	movs	r2, #104	; 0x68
 8000d1a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000d2e:	4827      	ldr	r0, [pc, #156]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d30:	f005 fd3c 	bl	80067ac <HAL_TIM_PWM_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x6a>
		Error_Handler();
 8000d3a:	f000 f983 	bl	8001044 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d4e:	f006 fcf3 	bl	8007738 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8000d58:	f000 f974 	bl	8001044 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5c:	2360      	movs	r3, #96	; 0x60
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	220c      	movs	r2, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000d7e:	f006 f8e3 	bl	8006f48 <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000d88:	f000 f95c 	bl	8001044 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000db0:	f006 fd30 	bl	8007814 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 8000dba:	f000 f943 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <MX_TIM1_Init+0xf8>)
 8000dc0:	f000 fc32 	bl	8001628 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3748      	adds	r7, #72	; 0x48
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000420 	.word	0x20000420
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_DMA_Init+0x3c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <MX_DMA_Init+0x3c>)
 8000de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_DMA_Init+0x3c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	203c      	movs	r0, #60	; 0x3c
 8000dfc:	f003 f846 	bl	8003e8c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e00:	203c      	movs	r0, #60	; 0x3c
 8000e02:	f003 f85f 	bl	8003ec4 <HAL_NVIC_EnableIRQ>

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a61      	ldr	r2, [pc, #388]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a5a      	ldr	r2, [pc, #360]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a53      	ldr	r2, [pc, #332]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <MX_GPIO_Init+0x1a4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REED_1_Pin | REED_2_Pin | REED_7_Pin,
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2183      	movs	r1, #131	; 0x83
 8000e9e:	4847      	ldr	r0, [pc, #284]	; (8000fbc <MX_GPIO_Init+0x1a8>)
 8000ea0:	f003 fd4c 	bl	800493c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | REED_4_Pin | REED_5_Pin | REED_8_Pin,
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000eaa:	4845      	ldr	r0, [pc, #276]	; (8000fc0 <MX_GPIO_Init+0x1ac>)
 8000eac:	f003 fd46 	bl	800493c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, REED_3_Pin | REED_6_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2141      	movs	r1, #65	; 0x41
 8000eb4:	4843      	ldr	r0, [pc, #268]	; (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000eb6:	f003 fd41 	bl	800493c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483a      	ldr	r0, [pc, #232]	; (8000fbc <MX_GPIO_Init+0x1a8>)
 8000ed2:	f003 fb97 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
	GPIO_InitStruct.Pin = REED_1_Pin | REED_2_Pin | REED_7_Pin;
 8000ed6:	2383      	movs	r3, #131	; 0x83
 8000ed8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4833      	ldr	r0, [pc, #204]	; (8000fbc <MX_GPIO_Init+0x1a8>)
 8000eee:	f003 fb89 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <MX_GPIO_Init+0x1ac>)
 8000f0a:	f003 fb7b 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
	GPIO_InitStruct.Pin = REED_4_Pin | REED_5_Pin | REED_8_Pin;
 8000f0e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000f12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <MX_GPIO_Init+0x1ac>)
 8000f28:	f003 fb6c 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pin : REED_D_Pin */
	GPIO_InitStruct.Pin = REED_D_Pin;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(REED_D_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481f      	ldr	r0, [pc, #124]	; (8000fbc <MX_GPIO_Init+0x1a8>)
 8000f40:	f003 fb60 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_3_Pin REED_6_Pin */
	GPIO_InitStruct.Pin = REED_3_Pin | REED_6_Pin;
 8000f44:	2341      	movs	r3, #65	; 0x41
 8000f46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000f5c:	f003 fb52 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_C_Pin
	 REED_E_Pin */
	GPIO_InitStruct.Pin = REED_B_Pin | REED_H_Pin | REED_G_Pin | REED_C_Pin
 8000f60:	f246 4330 	movw	r3, #25648	; 0x6430
 8000f64:	617b      	str	r3, [r7, #20]
			| REED_E_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000f76:	f003 fb45 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
	GPIO_InitStruct.Pin = BOTON_1_Pin | BOTON_2_Pin | BOTON_3_Pin;
 8000f7a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000f7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MX_GPIO_Init+0x1a8>)
 8000f90:	f003 fb38 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_A_Pin REED_F_Pin */
	GPIO_InitStruct.Pin = REED_A_Pin | REED_F_Pin;
 8000f94:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_GPIO_Init+0x1ac>)
 8000faa:	f003 fb2b 	bl	8004604 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400

08000fc8 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm;
	HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, FORMAT_BIN);
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 f98e 	bl	80062fc <HAL_RTC_GetAlarm>
	if (sAlarm.AlarmTime.Seconds > 58) {
 8000fe0:	7abb      	ldrb	r3, [r7, #10]
 8000fe2:	2b3a      	cmp	r3, #58	; 0x3a
 8000fe4:	d902      	bls.n	8000fec <HAL_RTC_AlarmAEventCallback+0x24>
		sAlarm.AlarmTime.Seconds = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	72bb      	strb	r3, [r7, #10]
 8000fea:	e003      	b.n	8000ff4 <HAL_RTC_AlarmAEventCallback+0x2c>
	} else {
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
 8000fec:	7abb      	ldrb	r3, [r7, #10]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	72bb      	strb	r3, [r7, #10]
	}
	while (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN) != HAL_OK) {
 8000ff4:	bf00      	nop
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f005 f83a 	bl	8006078 <HAL_RTC_SetAlarm_IT>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f5      	bne.n	8000ff6 <HAL_RTC_AlarmAEventCallback+0x2e>
	}
	chess_timer();
 800100a:	f000 fc13 	bl	8001834 <chess_timer>
}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fcc9 	bl	80079b6 <osDelay>
 8001024:	e7fb      	b.n	800101e <StartDefaultTask+0x8>

08001026 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001036:	d101      	bne.n	800103c <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001038:	f002 fe50 	bl	8003cdc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <get_last_sensor_change>:
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	2300      	movs	r3, #0
 8001058:	713b      	strb	r3, [r7, #4]
 800105a:	2300      	movs	r3, #0
 800105c:	717b      	strb	r3, [r7, #5]
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e054      	b.n	800110e <get_last_sensor_change+0xbe>
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e04b      	b.n	8001102 <get_last_sensor_change+0xb2>
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <get_last_sensor_change+0xe4>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	fa42 f303 	asr.w	r3, r2, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	72fb      	strb	r3, [r7, #11]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <get_last_sensor_change+0xe8>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fa42 f303 	asr.w	r3, r2, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf14      	ite	ne
 80010a2:	2301      	movne	r3, #1
 80010a4:	2300      	moveq	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	72bb      	strb	r3, [r7, #10]
 80010aa:	7afa      	ldrb	r2, [r7, #11]
 80010ac:	7abb      	ldrb	r3, [r7, #10]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d024      	beq.n	80010fc <get_last_sensor_change+0xac>
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4413      	add	r3, r2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	713b      	strb	r3, [r7, #4]
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <get_last_sensor_change+0x7e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e000      	b.n	80010d0 <get_last_sensor_change+0x80>
 80010ce:	2301      	movs	r3, #1
 80010d0:	717b      	strb	r3, [r7, #5]
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e00b      	b.n	80010f0 <get_last_sensor_change+0xa0>
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <get_last_sensor_change+0xe4>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	7819      	ldrb	r1, [r3, #0]
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <get_last_sensor_change+0xe8>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	460a      	mov	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	ddf0      	ble.n	80010d8 <get_last_sensor_change+0x88>
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	813b      	strh	r3, [r7, #8]
 80010fa:	e00d      	b.n	8001118 <get_last_sensor_change+0xc8>
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3301      	adds	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddb0      	ble.n	800106a <get_last_sensor_change+0x1a>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b07      	cmp	r3, #7
 8001112:	dda7      	ble.n	8001064 <get_last_sensor_change+0x14>
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	813b      	strh	r3, [r7, #8]
 8001118:	2300      	movs	r3, #0
 800111a:	7a3a      	ldrb	r2, [r7, #8]
 800111c:	f362 0307 	bfi	r3, r2, #0, #8
 8001120:	7a7a      	ldrb	r2, [r7, #9]
 8001122:	f362 230f 	bfi	r3, r2, #8, #8
 8001126:	4618      	mov	r0, r3
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200016dc 	.word	0x200016dc
 8001138:	200004d8 	.word	0x200004d8

0800113c <is_board_ok>:
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	e044      	b.n	80011d6 <is_board_ok+0x9a>
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e03b      	b.n	80011ca <is_board_ok+0x8e>
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <is_board_ok+0xac>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	fa42 f303 	asr.w	r3, r2, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d010      	beq.n	800118c <is_board_ok+0x50>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fc4c 	bl	8002a18 <engine_get_piece>
 8001180:	4603      	mov	r3, r0
 8001182:	2b06      	cmp	r3, #6
 8001184:	d102      	bne.n	800118c <is_board_ok+0x50>
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e01b      	b.n	80011c4 <is_board_ok+0x88>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <is_board_ok+0xac>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	fa42 f303 	asr.w	r3, r2, r3
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10f      	bne.n	80011c4 <is_board_ok+0x88>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fc2f 	bl	8002a18 <engine_get_piece>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d001      	beq.n	80011c4 <is_board_ok+0x88>
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	ddc0      	ble.n	8001152 <is_board_ok+0x16>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b07      	cmp	r3, #7
 80011da:	ddb7      	ble.n	800114c <is_board_ok+0x10>
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200016dc 	.word	0x200016dc

080011ec <get_lifted_moves>:
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	e00f      	b.n	8001224 <get_lifted_moves+0x38>
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	429a      	cmp	r2, r3
 8001216:	d102      	bne.n	800121e <get_lifted_moves+0x32>
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3301      	adds	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbeb      	blt.n	8001204 <get_lifted_moves+0x18>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <movement_fsm>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	f7ff ff05 	bl	8001050 <get_last_sensor_change>
 8001246:	4603      	mov	r3, r0
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <movement_fsm+0x1bc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b03      	cmp	r3, #3
 8001250:	f000 80b8 	beq.w	80013c4 <movement_fsm+0x188>
 8001254:	2b03      	cmp	r3, #3
 8001256:	f300 80c3 	bgt.w	80013e0 <movement_fsm+0x1a4>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <movement_fsm+0x28>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d03f      	beq.n	80012e2 <movement_fsm+0xa6>
 8001262:	e0bd      	b.n	80013e0 <movement_fsm+0x1a4>
 8001264:	797b      	ldrb	r3, [r7, #5]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d130      	bne.n	80012cc <movement_fsm+0x90>
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <movement_fsm+0x1bc>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	793a      	ldrb	r2, [r7, #4]
 8001272:	4b62      	ldr	r3, [pc, #392]	; (80013fc <movement_fsm+0x1c0>)
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4862      	ldr	r0, [pc, #392]	; (8001400 <movement_fsm+0x1c4>)
 8001278:	f001 fbbe 	bl	80029f8 <engine_list_moves>
 800127c:	4603      	mov	r3, r0
 800127e:	4a61      	ldr	r2, [pc, #388]	; (8001404 <movement_fsm+0x1c8>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <movement_fsm+0x1c0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4a5f      	ldr	r2, [pc, #380]	; (8001404 <movement_fsm+0x1c8>)
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	495d      	ldr	r1, [pc, #372]	; (8001400 <movement_fsm+0x1c4>)
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ffad 	bl	80011ec <get_lifted_moves>
 8001292:	60b8      	str	r0, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <movement_fsm+0x6c>
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <movement_fsm+0x1bc>)
 800129c:	2203      	movs	r2, #3
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	2002      	movs	r0, #2
 80012a2:	f002 fb05 	bl	80038b0 <lighting_set_state>
 80012a6:	e09d      	b.n	80013e4 <movement_fsm+0x1a8>
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <movement_fsm+0x1bc>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	4b53      	ldr	r3, [pc, #332]	; (80013fc <movement_fsm+0x1c0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fb0c 	bl	80038d0 <lighting_piece_lifted_square>
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <movement_fsm+0x1c8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4850      	ldr	r0, [pc, #320]	; (8001400 <movement_fsm+0x1c4>)
 80012c0:	f002 fb16 	bl	80038f0 <set_valid_moves>
 80012c4:	2001      	movs	r0, #1
 80012c6:	f002 faf3 	bl	80038b0 <lighting_set_state>
 80012ca:	e08b      	b.n	80013e4 <movement_fsm+0x1a8>
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	f040 8088 	bne.w	80013e4 <movement_fsm+0x1a8>
 80012d4:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <movement_fsm+0x1bc>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	2002      	movs	r0, #2
 80012dc:	f002 fae8 	bl	80038b0 <lighting_set_state>
 80012e0:	e080      	b.n	80013e4 <movement_fsm+0x1a8>
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d11a      	bne.n	800131e <movement_fsm+0xe2>
 80012e8:	4b44      	ldr	r3, [pc, #272]	; (80013fc <movement_fsm+0x1c0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	703b      	strb	r3, [r7, #0]
 80012ee:	793b      	ldrb	r3, [r7, #4]
 80012f0:	707b      	strb	r3, [r7, #1]
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f001 fb6e 	bl	80029d4 <engine_move_piece>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73bb      	strb	r3, [r7, #14]
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <movement_fsm+0xd4>
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <movement_fsm+0x1bc>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	2000      	movs	r0, #0
 800130a:	f002 fad1 	bl	80038b0 <lighting_set_state>
 800130e:	e06b      	b.n	80013e8 <movement_fsm+0x1ac>
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <movement_fsm+0x1bc>)
 8001312:	2203      	movs	r2, #3
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	2002      	movs	r0, #2
 8001318:	f002 faca 	bl	80038b0 <lighting_set_state>
 800131c:	e064      	b.n	80013e8 <movement_fsm+0x1ac>
 800131e:	797b      	ldrb	r3, [r7, #5]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d161      	bne.n	80013e8 <movement_fsm+0x1ac>
 8001324:	4836      	ldr	r0, [pc, #216]	; (8001400 <movement_fsm+0x1c4>)
 8001326:	f001 fb67 	bl	80029f8 <engine_list_moves>
 800132a:	4603      	mov	r3, r0
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <movement_fsm+0x1c8>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	e035      	b.n	80013a6 <movement_fsm+0x16a>
 800133a:	4931      	ldr	r1, [pc, #196]	; (8001400 <movement_fsm+0x1c4>)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	440b      	add	r3, r1
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <movement_fsm+0x1c0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d127      	bne.n	80013a0 <movement_fsm+0x164>
 8001350:	492b      	ldr	r1, [pc, #172]	; (8001400 <movement_fsm+0x1c4>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	440b      	add	r3, r1
 800135c:	3301      	adds	r3, #1
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	793b      	ldrb	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d11c      	bne.n	80013a0 <movement_fsm+0x164>
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
 800136a:	793b      	ldrb	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 faaf 	bl	80038d0 <lighting_piece_lifted_square>
 8001372:	2003      	movs	r0, #3
 8001374:	f002 fa9c 	bl	80038b0 <lighting_set_state>
 8001378:	4921      	ldr	r1, [pc, #132]	; (8001400 <movement_fsm+0x1c4>)
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	440b      	add	r3, r1
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	7859      	ldrb	r1, [r3, #1]
 8001388:	0209      	lsls	r1, r1, #8
 800138a:	430a      	orrs	r2, r1
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	2300      	movs	r3, #0
 8001394:	f362 0317 	bfi	r3, r2, #0, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fb1b 	bl	80029d4 <engine_move_piece>
 800139e:	e007      	b.n	80013b0 <movement_fsm+0x174>
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	3301      	adds	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <movement_fsm+0x1c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbc4      	blt.n	800133a <movement_fsm+0xfe>
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <movement_fsm+0x1ac>
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <movement_fsm+0x1bc>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	2002      	movs	r0, #2
 80013be:	f002 fa77 	bl	80038b0 <lighting_set_state>
 80013c2:	e011      	b.n	80013e8 <movement_fsm+0x1ac>
 80013c4:	f7ff feba 	bl	800113c <is_board_ok>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <movement_fsm+0x1b0>
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <movement_fsm+0x1bc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	2000      	movs	r0, #0
 80013da:	f002 fa69 	bl	80038b0 <lighting_set_state>
 80013de:	e005      	b.n	80013ec <movement_fsm+0x1b0>
 80013e0:	bf00      	nop
 80013e2:	e004      	b.n	80013ee <movement_fsm+0x1b2>
 80013e4:	bf00      	nop
 80013e6:	e002      	b.n	80013ee <movement_fsm+0x1b2>
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <movement_fsm+0x1b2>
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200004e0 	.word	0x200004e0
 80013fc:	200004e1 	.word	0x200004e1
 8001400:	200004e8 	.word	0x200004e8
 8001404:	200004e4 	.word	0x200004e4

08001408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_MspInit+0x54>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_MspInit+0x54>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x54>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_MspInit+0x54>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_MspInit+0x54>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_MspInit+0x54>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	210f      	movs	r1, #15
 800144a:	f06f 0001 	mvn.w	r0, #1
 800144e:	f002 fd1d 	bl	8003e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014bc:	f003 f8a2 	bl	8004604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_RTC_MspInit+0x60>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d119      	bne.n	8001546 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001512:	2302      	movs	r3, #2
 8001514:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800151a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f004 fb27 	bl	8005b74 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800152c:	f7ff fd8a 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_RTC_MspInit+0x64>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	2029      	movs	r0, #41	; 0x29
 800153c:	f002 fca6 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001540:	2029      	movs	r0, #41	; 0x29
 8001542:	f002 fcbf 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40002800 	.word	0x40002800
 8001554:	42470e3c 	.word	0x42470e3c

08001558 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2c      	ldr	r2, [pc, #176]	; (8001618 <HAL_TIM_PWM_MspInit+0xc0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d151      	bne.n	800160e <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_TIM_PWM_MspInit+0xc4>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a2a      	ldr	r2, [pc, #168]	; (800161c <HAL_TIM_PWM_MspInit+0xc4>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_TIM_PWM_MspInit+0xc4>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 8001588:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_TIM_PWM_MspInit+0xcc>)
 800158a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 800158e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001592:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015cc:	f002 fc88 	bl	8003ee0 <HAL_DMA_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80015d6:	f7ff fd35 	bl	8001044 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_TIM_PWM_MspInit+0xc8>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	201a      	movs	r0, #26
 8001604:	f002 fc42 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001608:	201a      	movs	r0, #26
 800160a:	f002 fc5b 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40010000 	.word	0x40010000
 800161c:	40023800 	.word	0x40023800
 8001620:	20000468 	.word	0x20000468
 8001624:	40026470 	.word	0x40026470

08001628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_TIM_MspPostInit+0x68>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d11e      	bne.n	8001688 <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8001666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800166a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <HAL_TIM_MspPostInit+0x70>)
 8001684:	f002 ffbe 	bl	8004604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010000 	.word	0x40010000
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_InitTick+0xe8>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_InitTick+0xe8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_InitTick+0xe8>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c8:	f107 0210 	add.w	r2, r7, #16
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fa1c 	bl	8005b10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e2:	f004 fa01 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80016e6:	6378      	str	r0, [r7, #52]	; 0x34
 80016e8:	e004      	b.n	80016f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ea:	f004 f9fd 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80016ee:	4603      	mov	r3, r0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <HAL_InitTick+0xec>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	3b01      	subs	r3, #1
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_InitTick+0xf0>)
 8001704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001708:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_InitTick+0xf0>)
 800170c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001710:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_InitTick+0xf0>)
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_InitTick+0xf0>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_InitTick+0xf0>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_InitTick+0xf0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <HAL_InitTick+0xf0>)
 800172c:	f004 ff83 	bl	8006636 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11b      	bne.n	8001776 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <HAL_InitTick+0xf0>)
 8001740:	f004 ffd2 	bl	80066e8 <HAL_TIM_Base_Start_IT>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800174a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800174e:	2b00      	cmp	r3, #0
 8001750:	d111      	bne.n	8001776 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001752:	201c      	movs	r0, #28
 8001754:	f002 fbb6 	bl	8003ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d808      	bhi.n	8001770 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800175e:	2200      	movs	r2, #0
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	201c      	movs	r0, #28
 8001764:	f002 fb92 	bl	8003e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_InitTick+0xf4>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e002      	b.n	8001776 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800177a:	4618      	mov	r0, r3
 800177c:	3738      	adds	r7, #56	; 0x38
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	431bde83 	.word	0x431bde83
 800178c:	200007e8 	.word	0x200007e8
 8001790:	20000094 	.word	0x20000094

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017c6:	f005 fab7 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000420 	.word	0x20000420

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f005 faad 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200007e8 	.word	0x200007e8

080017e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <RTC_Alarm_IRQHandler+0x10>)
 80017ee:	f004 fe15 	bl	800641c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000400 	.word	0x20000400

080017fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA2_Stream4_IRQHandler+0x10>)
 8001802:	f002 fc95 	bl	8004130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000468 	.word	0x20000468

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <chess_timer>:

uint32_t segundos_j1 = 0, segundos_j2 = 0, incremento = 0;

void tareas_error_handler(uint8_t);

void chess_timer() {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	if (contar) {
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <chess_timer+0x48>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <chess_timer+0x3c>
		if (get_side_to_move() == 0) {
 8001840:	f000 ff1c 	bl	800267c <get_side_to_move>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <chess_timer+0x2a>
			if (segundos_j1 > 0)
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <chess_timer+0x4c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <chess_timer+0x3c>
				segundos_j1--;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <chess_timer+0x4c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <chess_timer+0x4c>)
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e008      	b.n	8001870 <chess_timer+0x3c>
		}

		else {
			if (segundos_j2 > 0)
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <chess_timer+0x50>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <chess_timer+0x3c>
				segundos_j2--;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <chess_timer+0x50>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	4a05      	ldr	r2, [pc, #20]	; (8001884 <chess_timer+0x50>)
 800186e:	6013      	str	r3, [r2, #0]
		}

	}

	actualizar_display = 1;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <chess_timer+0x54>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000833 	.word	0x20000833
 8001880:	20000838 	.word	0x20000838
 8001884:	2000083c 	.word	0x2000083c
 8001888:	20000834 	.word	0x20000834

0800188c <t_LCD>:

void t_LCD(void*) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <t_LCD+0x6c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <t_LCD+0x16>
		tareas_error_handler(1);
 800189c:	2001      	movs	r0, #1
 800189e:	f000 fed9 	bl	8002654 <tareas_error_handler>
	}

	lcd_init();
 80018a2:	f7fe fe1b 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <t_LCD+0x6c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f107 0108 	add.w	r1, r7, #8
 80018ae:	f04f 32ff 	mov.w	r2, #4294967295
 80018b2:	4618      	mov	r0, r3
 80018b4:	f006 fb08 	bl	8007ec8 <xQueueReceive>
		switch (msg.type) {
 80018b8:	7a3b      	ldrb	r3, [r7, #8]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d014      	beq.n	80018e8 <t_LCD+0x5c>
 80018be:	2b02      	cmp	r3, #2
 80018c0:	dcf1      	bgt.n	80018a6 <t_LCD+0x1a>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <t_LCD+0x40>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d009      	beq.n	80018de <t_LCD+0x52>
 80018ca:	e014      	b.n	80018f6 <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 80018cc:	7a7b      	ldrb	r3, [r7, #9]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe42 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 f850 	bl	800897c <vTaskDelay>
			break;
 80018dc:	e00b      	b.n	80018f6 <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 80018de:	7a7b      	ldrb	r3, [r7, #9]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe69 	bl	80005b8 <lcd_send_data>
			break;
 80018e6:	e006      	b.n	80018f6 <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	3301      	adds	r3, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe92 	bl	8000618 <lcd_send_string>
			break;
 80018f4:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80018f6:	e7d6      	b.n	80018a6 <t_LCD+0x1a>
 80018f8:	200004cc 	.word	0x200004cc

080018fc <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	2202      	movs	r2, #2
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe ff36 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	2202      	movs	r2, #2
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe ff2f 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2202      	movs	r2, #2
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe ff28 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <t_Botones+0x13c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <t_Botones+0x40>
		tareas_error_handler(4);
 8001936:	2004      	movs	r0, #4
 8001938:	f000 fe8c 	bl	8002654 <tareas_error_handler>
	}

	uint8_t msg = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	483e      	ldr	r0, [pc, #248]	; (8001a3c <t_Botones+0x140>)
 8001944:	f002 ffe2 	bl	800490c <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe ff3a 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 8001958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195c:	4837      	ldr	r0, [pc, #220]	; (8001a3c <t_Botones+0x140>)
 800195e:	f002 ffd5 	bl	800490c <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ff2d 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 8001972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001976:	4831      	ldr	r0, [pc, #196]	; (8001a3c <t_Botones+0x140>)
 8001978:	f002 ffc8 	bl	800490c <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe ff20 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) { // Boton arriba (no contra el tablero)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe ff9f 	bl	80008d4 <debounce_flank>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d012      	beq.n	80019c2 <t_Botones+0xc6>
			msg = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <t_Botones+0x13c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f006 fc7b 	bl	80082a0 <uxQueueMessagesWaiting>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b13      	cmp	r3, #19
 80019ae:	d808      	bhi.n	80019c2 <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <t_Botones+0x13c>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f107 010f 	add.w	r1, r7, #15
 80019b8:	2300      	movs	r3, #0
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295
 80019be:	f006 f985 	bl	8007ccc <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) { // Boton abajo (contra el tablero)
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe ff84 	bl	80008d4 <debounce_flank>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <t_Botones+0xfc>
			msg = 2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <t_Botones+0x13c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 fc60 	bl	80082a0 <uxQueueMessagesWaiting>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b13      	cmp	r3, #19
 80019e4:	d808      	bhi.n	80019f8 <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <t_Botones+0x13c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f107 010f 	add.w	r1, r7, #15
 80019ee:	2300      	movs	r3, #0
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	f006 f96a 	bl	8007ccc <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) { // Boton verde
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe ff69 	bl	80008d4 <debounce_flank>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d012      	beq.n	8001a2e <t_Botones+0x132>
			msg = 3;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <t_Botones+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f006 fc45 	bl	80082a0 <uxQueueMessagesWaiting>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b13      	cmp	r3, #19
 8001a1a:	d808      	bhi.n	8001a2e <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <t_Botones+0x13c>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	f107 010f 	add.w	r1, r7, #15
 8001a24:	2300      	movs	r3, #0
 8001a26:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2a:	f006 f94f 	bl	8007ccc <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f006 ffa4 	bl	800897c <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001a34:	e784      	b.n	8001940 <t_Botones+0x44>
 8001a36:	bf00      	nop
 8001a38:	200004d0 	.word	0x200004d0
 8001a3c:	40020800 	.word	0x40020800

08001a40 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b094      	sub	sp, #80	; 0x50
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <t_userLoop+0xdc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <t_userLoop+0x16>
		tareas_error_handler(2);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f000 fdff 	bl	8002654 <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <t_userLoop+0xe0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <t_userLoop+0x24>
		tareas_error_handler(4);
 8001a5e:	2004      	movs	r0, #4
 8001a60:	f000 fdf8 	bl	8002654 <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <t_userLoop+0xe4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <t_userLoop+0x32>
		tareas_error_handler(1);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 fdf1 	bl	8002654 <tareas_error_handler>
	}

	user_htim1 = &htim1;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <t_userLoop+0xe8>)
 8001a74:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <t_userLoop+0xec>)
 8001a76:	601a      	str	r2, [r3, #0]
	user_init();
 8001a78:	f000 fdf4 	bl	8002664 <user_init>

	ws2812_init();
 8001a7c:	f001 fd54 	bl	8003528 <ws2812_init>

	uint8_t button;

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 33; // 30fps aprox
 8001a80:	2321      	movs	r3, #33	; 0x21
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48

	LCDQueueItem_t msg = { 0 };
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]

	char *msg_tiempo = "JX - XX:XX";
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <t_userLoop+0xf0>)
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
	char *msg_flecha = "->";
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <t_userLoop+0xf4>)
 8001a9c:	623b      	str	r3, [r7, #32]

	uint8_t prev_side_to_move = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	while (1) {
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <t_userLoop+0xe0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8001aac:	2200      	movs	r2, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f006 fa0a 	bl	8007ec8 <xQueueReceive>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d104      	bne.n	8001ac4 <t_userLoop+0x84>
			ME_general(button);
 8001aba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f99a 	bl	8001df8 <ME_general>
		}

		switch (modo_de_juego) {
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <t_userLoop+0xf8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	f200 8170 	bhi.w	8001dae <t_userLoop+0x36e>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <t_userLoop+0x94>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001daf 	.word	0x08001daf
 8001ad8:	08001ae5 	.word	0x08001ae5
 8001adc:	08001daf 	.word	0x08001daf
 8001ae0:	08001daf 	.word	0x08001daf
		case 0:
			break;
		case 1:
			user_loop();
 8001ae4:	f000 ff10 	bl	8002908 <user_loop>

			if (prev_side_to_move != get_side_to_move()) {
 8001ae8:	f000 fdc8 	bl	800267c <get_side_to_move>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d02c      	beq.n	8001b52 <t_userLoop+0x112>
				prev_side_to_move = get_side_to_move();
 8001af8:	f000 fdc0 	bl	800267c <get_side_to_move>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				if (prev_side_to_move)
 8001b02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01c      	beq.n	8001b44 <t_userLoop+0x104>
					segundos_j1 += incremento;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <t_userLoop+0xfc>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <t_userLoop+0x100>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <t_userLoop+0xfc>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e01b      	b.n	8001b52 <t_userLoop+0x112>
 8001b1a:	bf00      	nop
 8001b1c:	200004d4 	.word	0x200004d4
 8001b20:	200004d0 	.word	0x200004d0
 8001b24:	200004cc 	.word	0x200004cc
 8001b28:	20000848 	.word	0x20000848
 8001b2c:	20000420 	.word	0x20000420
 8001b30:	0800a090 	.word	0x0800a090
 8001b34:	0800a09c 	.word	0x0800a09c
 8001b38:	20000831 	.word	0x20000831
 8001b3c:	20000838 	.word	0x20000838
 8001b40:	20000840 	.word	0x20000840
				else
					segundos_j2 += incremento;
 8001b44:	4ba1      	ldr	r3, [pc, #644]	; (8001dcc <t_userLoop+0x38c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4ba1      	ldr	r3, [pc, #644]	; (8001dd0 <t_userLoop+0x390>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a9f      	ldr	r2, [pc, #636]	; (8001dcc <t_userLoop+0x38c>)
 8001b50:	6013      	str	r3, [r2, #0]
			}

			if (actualizar_display && mostrar_tiempo) {
 8001b52:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <t_userLoop+0x394>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8128 	beq.w	8001dac <t_userLoop+0x36c>
 8001b5c:	4b9e      	ldr	r3, [pc, #632]	; (8001dd8 <t_userLoop+0x398>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8123 	beq.w	8001dac <t_userLoop+0x36c>
				actualizar_display = 0;
 8001b66:	4b9b      	ldr	r3, [pc, #620]	; (8001dd4 <t_userLoop+0x394>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
				msg = lcd_msg_clear();
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd9f 	bl	80006b2 <lcd_msg_clear>
 8001b74:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001b78:	463d      	mov	r5, r7
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b82:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b86:	4b95      	ldr	r3, [pc, #596]	; (8001ddc <t_userLoop+0x39c>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	f006 f89a 	bl	8007ccc <xQueueGenericSend>
				msg = lcd_msg_first_line();
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fdab 	bl	80006f6 <lcd_msg_first_line>
 8001ba0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001ba4:	463d      	mov	r5, r7
 8001ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001baa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bae:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001bb2:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <t_userLoop+0x39c>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	f006 f884 	bl	8007ccc <xQueueGenericSend>

				if (get_side_to_move() == 0)
 8001bc4:	f000 fd5a 	bl	800267c <get_side_to_move>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <t_userLoop+0x1a0>
					xQueueSend(lcd_queue, (void* )&msg_flecha, portMAX_DELAY);
 8001bce:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <t_userLoop+0x39c>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f107 0120 	add.w	r1, r7, #32
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	f006 f876 	bl	8007ccc <xQueueGenericSend>

				// char * msg_tiempo = "JX - XX:XX";
				msg_tiempo[1] = '1';
 8001be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be2:	3301      	adds	r3, #1
 8001be4:	2231      	movs	r2, #49	; 0x31
 8001be6:	701a      	strb	r2, [r3, #0]
				msg_tiempo[5] = (segundos_j1 / 600) + 48;
 8001be8:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <t_userLoop+0x3a0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a7d      	ldr	r2, [pc, #500]	; (8001de4 <t_userLoop+0x3a4>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf8:	3305      	adds	r3, #5
 8001bfa:	3230      	adds	r2, #48	; 0x30
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
				msg_tiempo[6] = ((segundos_j1 / 60) % 10) + 48;
 8001c00:	4b77      	ldr	r3, [pc, #476]	; (8001de0 <t_userLoop+0x3a0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <t_userLoop+0x3a8>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0959      	lsrs	r1, r3, #5
 8001c0c:	4b77      	ldr	r3, [pc, #476]	; (8001dec <t_userLoop+0x3ac>)
 8001c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	1aca      	subs	r2, r1, r3
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	3306      	adds	r3, #6
 8001c24:	3230      	adds	r2, #48	; 0x30
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
				msg_tiempo[8] = ((segundos_j1 % 100) / 10) + 48;
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <t_userLoop+0x3a0>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <t_userLoop+0x3b0>)
 8001c30:	fba3 1302 	umull	r1, r3, r3, r2
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	2164      	movs	r1, #100	; 0x64
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a6b      	ldr	r2, [pc, #428]	; (8001dec <t_userLoop+0x3ac>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	3230      	adds	r2, #48	; 0x30
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]
				msg_tiempo[9] = (segundos_j1 % 10) + 48;
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <t_userLoop+0x3a0>)
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <t_userLoop+0x3ac>)
 8001c58:	fba3 2301 	umull	r2, r3, r3, r1
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	1aca      	subs	r2, r1, r3
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6c:	3309      	adds	r3, #9
 8001c6e:	3230      	adds	r2, #48	; 0x30
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

				msg = lcd_msg_from_string(msg_tiempo);
 8001c74:	463b      	mov	r3, r7
 8001c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fce2 	bl	8000642 <lcd_msg_from_string>
 8001c7e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001c82:	463d      	mov	r5, r7
 8001c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c8c:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001c90:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <t_userLoop+0x39c>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9e:	f006 f815 	bl	8007ccc <xQueueGenericSend>
				msg = lcd_msg_second_line();
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fd48 	bl	800073a <lcd_msg_second_line>
 8001caa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001cae:	463d      	mov	r5, r7
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cb8:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <t_userLoop+0x39c>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	f005 ffff 	bl	8007ccc <xQueueGenericSend>

				if (get_side_to_move() == 1)
 8001cce:	f000 fcd5 	bl	800267c <get_side_to_move>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <t_userLoop+0x2aa>
					xQueueSend(lcd_queue, (void* )&msg_flecha, portMAX_DELAY);
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <t_userLoop+0x39c>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f107 0120 	add.w	r1, r7, #32
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce6:	f005 fff1 	bl	8007ccc <xQueueGenericSend>

				msg_tiempo[1] = '2';
 8001cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cec:	3301      	adds	r3, #1
 8001cee:	2232      	movs	r2, #50	; 0x32
 8001cf0:	701a      	strb	r2, [r3, #0]
				msg_tiempo[5] = (segundos_j2 / 600) + 48;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <t_userLoop+0x38c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <t_userLoop+0x3a4>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d02:	3305      	adds	r3, #5
 8001d04:	3230      	adds	r2, #48	; 0x30
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]
				msg_tiempo[6] = ((segundos_j2 / 60) % 10) + 48;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <t_userLoop+0x38c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <t_userLoop+0x3a8>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	0959      	lsrs	r1, r3, #5
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <t_userLoop+0x3ac>)
 8001d18:	fba3 2301 	umull	r2, r3, r3, r1
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	1aca      	subs	r2, r1, r3
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	3230      	adds	r2, #48	; 0x30
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
				msg_tiempo[8] = ((segundos_j2 % 100) / 10) + 48;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <t_userLoop+0x38c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <t_userLoop+0x3b0>)
 8001d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2164      	movs	r1, #100	; 0x64
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <t_userLoop+0x3ac>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	08db      	lsrs	r3, r3, #3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d54:	3308      	adds	r3, #8
 8001d56:	3230      	adds	r2, #48	; 0x30
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
				msg_tiempo[9] = (segundos_j2 % 10) + 48;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <t_userLoop+0x38c>)
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <t_userLoop+0x3ac>)
 8001d62:	fba3 2301 	umull	r2, r3, r3, r1
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d76:	3309      	adds	r3, #9
 8001d78:	3230      	adds	r2, #48	; 0x30
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

				msg = lcd_msg_from_string(msg_tiempo);
 8001d7e:	463b      	mov	r3, r7
 8001d80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fc5d 	bl	8000642 <lcd_msg_from_string>
 8001d88:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001d8c:	463d      	mov	r5, r7
 8001d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d96:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <t_userLoop+0x39c>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001da2:	2300      	movs	r3, #0
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	f005 ff90 	bl	8007ccc <xQueueGenericSend>
			}
			break;
 8001dac:	bf00      	nop
			break;
		case 3:
			break;
		}

		xSemaphoreGive(ws2812_sem);
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <t_userLoop+0x3b4>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	2300      	movs	r3, #0
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	f005 ff88 	bl	8007ccc <xQueueGenericSend>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001dbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 fd5c 	bl	8008880 <vTaskDelayUntil>
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001dc8:	e66c      	b.n	8001aa4 <t_userLoop+0x64>
 8001dca:	bf00      	nop
 8001dcc:	2000083c 	.word	0x2000083c
 8001dd0:	20000840 	.word	0x20000840
 8001dd4:	20000834 	.word	0x20000834
 8001dd8:	20000832 	.word	0x20000832
 8001ddc:	200004cc 	.word	0x200004cc
 8001de0:	20000838 	.word	0x20000838
 8001de4:	1b4e81b5 	.word	0x1b4e81b5
 8001de8:	88888889 	.word	0x88888889
 8001dec:	cccccccd 	.word	0xcccccccd
 8001df0:	51eb851f 	.word	0x51eb851f
 8001df4:	200004d4 	.word	0x200004d4

08001df8 <ME_general>:
	}
}

static void ME_general(uint8_t button) {
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	77fb      	strb	r3, [r7, #31]
	static uint8_t sub_estado = 0;
	LCDQueueItem_t msg = { 0 };
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]

	switch (estado) {
 8001e14:	4b9c      	ldr	r3, [pc, #624]	; (8002088 <ME_general+0x290>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	f200 83dc 	bhi.w	80025d6 <ME_general+0x7de>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <ME_general+0x2c>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001f33 	.word	0x08001f33
 8001e2c:	080020ad 	.word	0x080020ad
 8001e30:	0800234d 	.word	0x0800234d
 8001e34:	080024cd 	.word	0x080024cd
 8001e38:	080024d5 	.word	0x080024d5
	case ME_GENERAL_RESET:
		modo_de_juego = 0;
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <ME_general+0x294>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
		msg = lcd_msg_clear();
 8001e42:	463b      	mov	r3, r7
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fc34 	bl	80006b2 <lcd_msg_clear>
 8001e4a:	f107 0420 	add.w	r4, r7, #32
 8001e4e:	463d      	mov	r5, r7
 8001e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e58:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <ME_general+0x298>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	f107 0120 	add.w	r1, r7, #32
 8001e64:	2300      	movs	r3, #0
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6a:	f005 ff2f 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fc40 	bl	80006f6 <lcd_msg_first_line>
 8001e76:	f107 0420 	add.w	r4, r7, #32
 8001e7a:	463d      	mov	r5, r7
 8001e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e84:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <ME_general+0x298>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f107 0120 	add.w	r1, r7, #32
 8001e90:	2300      	movs	r3, #0
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295
 8001e96:	f005 ff19 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Smart Chess");
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	497d      	ldr	r1, [pc, #500]	; (8002094 <ME_general+0x29c>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fbcf 	bl	8000642 <lcd_msg_from_string>
 8001ea4:	f107 0420 	add.w	r4, r7, #32
 8001ea8:	463d      	mov	r5, r7
 8001eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001eb2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <ME_general+0x298>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f107 0120 	add.w	r1, r7, #32
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	f005 ff02 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fc35 	bl	800073a <lcd_msg_second_line>
 8001ed0:	f107 0420 	add.w	r4, r7, #32
 8001ed4:	463d      	mov	r5, r7
 8001ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ede:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ee2:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <ME_general+0x298>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f107 0120 	add.w	r1, r7, #32
 8001eea:	2300      	movs	r3, #0
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	f005 feec 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4968      	ldr	r1, [pc, #416]	; (8002098 <ME_general+0x2a0>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fba2 	bl	8000642 <lcd_msg_from_string>
 8001efe:	f107 0420 	add.w	r4, r7, #32
 8001f02:	463d      	mov	r5, r7
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f0c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f10:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <ME_general+0x298>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f107 0120 	add.w	r1, r7, #32
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	f005 fed5 	bl	8007ccc <xQueueGenericSend>

		if (button == 3) {
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	f040 8351 	bne.w	80025cc <ME_general+0x7d4>
			estado = ME_GENERAL_SELECCION_MODO;
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <ME_general+0x290>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001f30:	e34c      	b.n	80025cc <ME_general+0x7d4>
	case ME_GENERAL_SELECCION_MODO:
		msg = lcd_msg_clear();
 8001f32:	463b      	mov	r3, r7
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fbbc 	bl	80006b2 <lcd_msg_clear>
 8001f3a:	f107 0420 	add.w	r4, r7, #32
 8001f3e:	463d      	mov	r5, r7
 8001f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f48:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <ME_general+0x298>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f107 0120 	add.w	r1, r7, #32
 8001f54:	2300      	movs	r3, #0
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5a:	f005 feb7 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fbc8 	bl	80006f6 <lcd_msg_first_line>
 8001f66:	f107 0420 	add.w	r4, r7, #32
 8001f6a:	463d      	mov	r5, r7
 8001f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f74:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <ME_general+0x298>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f107 0120 	add.w	r1, r7, #32
 8001f80:	2300      	movs	r3, #0
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295
 8001f86:	f005 fea1 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Modo:");
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4943      	ldr	r1, [pc, #268]	; (800209c <ME_general+0x2a4>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fb57 	bl	8000642 <lcd_msg_from_string>
 8001f94:	f107 0420 	add.w	r4, r7, #32
 8001f98:	463d      	mov	r5, r7
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <ME_general+0x298>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	f107 0120 	add.w	r1, r7, #32
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	f005 fe8a 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001fb8:	463b      	mov	r3, r7
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fbbd 	bl	800073a <lcd_msg_second_line>
 8001fc0:	f107 0420 	add.w	r4, r7, #32
 8001fc4:	463d      	mov	r5, r7
 8001fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fce:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <ME_general+0x298>)
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	f107 0120 	add.w	r1, r7, #32
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	f005 fe74 	bl	8007ccc <xQueueGenericSend>
		if (sub_estado == 0) {
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <ME_general+0x2a8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d116      	bne.n	800201a <ME_general+0x222>
			msg = lcd_msg_from_string("-> Jug vs Jug");
 8001fec:	463b      	mov	r3, r7
 8001fee:	492d      	ldr	r1, [pc, #180]	; (80020a4 <ME_general+0x2ac>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fb26 	bl	8000642 <lcd_msg_from_string>
 8001ff6:	f107 0420 	add.w	r4, r7, #32
 8001ffa:	463d      	mov	r5, r7
 8001ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002000:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002004:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <ME_general+0x298>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 0120 	add.w	r1, r7, #32
 8002010:	2300      	movs	r3, #0
 8002012:	f04f 32ff 	mov.w	r2, #4294967295
 8002016:	f005 fe59 	bl	8007ccc <xQueueGenericSend>
		}
		if (sub_estado == 1) {
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <ME_general+0x2a8>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d116      	bne.n	8002050 <ME_general+0x258>
			msg = lcd_msg_from_string("-> Jug vs Maq");
 8002022:	463b      	mov	r3, r7
 8002024:	4920      	ldr	r1, [pc, #128]	; (80020a8 <ME_general+0x2b0>)
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fb0b 	bl	8000642 <lcd_msg_from_string>
 800202c:	f107 0420 	add.w	r4, r7, #32
 8002030:	463d      	mov	r5, r7
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203a:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <ME_general+0x298>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f107 0120 	add.w	r1, r7, #32
 8002046:	2300      	movs	r3, #0
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	f005 fe3e 	bl	8007ccc <xQueueGenericSend>
		}

		if (button == 3) {
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d10c      	bne.n	8002070 <ME_general+0x278>
			estado =
					sub_estado == 0 ?
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <ME_general+0x2a8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
							ME_GENERAL_SELECCION_TIEMPO : ME_GENERAL_JVM;
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <ME_general+0x26a>
 800205e:	2202      	movs	r2, #2
 8002060:	e000      	b.n	8002064 <ME_general+0x26c>
 8002062:	2204      	movs	r2, #4
			estado =
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <ME_general+0x290>)
 8002066:	701a      	strb	r2, [r3, #0]
			sub_estado = 0;
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <ME_general+0x2a8>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		} else {
			sub_estado = !sub_estado;
		}
		break;
 800206e:	e2b2      	b.n	80025d6 <ME_general+0x7de>
			sub_estado = !sub_estado;
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <ME_general+0x2a8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <ME_general+0x2a8>)
 8002082:	701a      	strb	r2, [r3, #0]
		break;
 8002084:	e2a7      	b.n	80025d6 <ME_general+0x7de>
 8002086:	bf00      	nop
 8002088:	20000830 	.word	0x20000830
 800208c:	20000831 	.word	0x20000831
 8002090:	200004cc 	.word	0x200004cc
 8002094:	0800a0a0 	.word	0x0800a0a0
 8002098:	0800a0ac 	.word	0x0800a0ac
 800209c:	0800a0bc 	.word	0x0800a0bc
 80020a0:	20000844 	.word	0x20000844
 80020a4:	0800a0cc 	.word	0x0800a0cc
 80020a8:	0800a0dc 	.word	0x0800a0dc

	case ME_GENERAL_SELECCION_TIEMPO:
		msg = lcd_msg_clear();
 80020ac:	463b      	mov	r3, r7
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe faff 	bl	80006b2 <lcd_msg_clear>
 80020b4:	f107 0420 	add.w	r4, r7, #32
 80020b8:	463d      	mov	r5, r7
 80020ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020c2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020c6:	4baa      	ldr	r3, [pc, #680]	; (8002370 <ME_general+0x578>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f107 0120 	add.w	r1, r7, #32
 80020ce:	2300      	movs	r3, #0
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	f005 fdfa 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 80020d8:	463b      	mov	r3, r7
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fb0b 	bl	80006f6 <lcd_msg_first_line>
 80020e0:	f107 0420 	add.w	r4, r7, #32
 80020e4:	463d      	mov	r5, r7
 80020e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ee:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020f2:	4b9f      	ldr	r3, [pc, #636]	; (8002370 <ME_general+0x578>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f107 0120 	add.w	r1, r7, #32
 80020fa:	2300      	movs	r3, #0
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	f005 fde4 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Tiempo:");
 8002104:	463b      	mov	r3, r7
 8002106:	499b      	ldr	r1, [pc, #620]	; (8002374 <ME_general+0x57c>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa9a 	bl	8000642 <lcd_msg_from_string>
 800210e:	f107 0420 	add.w	r4, r7, #32
 8002112:	463d      	mov	r5, r7
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	e895 0003 	ldmia.w	r5, {r0, r1}
 800211c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002120:	4b93      	ldr	r3, [pc, #588]	; (8002370 <ME_general+0x578>)
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f107 0120 	add.w	r1, r7, #32
 8002128:	2300      	movs	r3, #0
 800212a:	f04f 32ff 	mov.w	r2, #4294967295
 800212e:	f005 fdcd 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002132:	463b      	mov	r3, r7
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fb00 	bl	800073a <lcd_msg_second_line>
 800213a:	f107 0420 	add.w	r4, r7, #32
 800213e:	463d      	mov	r5, r7
 8002140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002144:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002148:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <ME_general+0x578>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	f107 0120 	add.w	r1, r7, #32
 8002154:	2300      	movs	r3, #0
 8002156:	f04f 32ff 	mov.w	r2, #4294967295
 800215a:	f005 fdb7 	bl	8007ccc <xQueueGenericSend>

		switch (sub_estado) {
 800215e:	4b86      	ldr	r3, [pc, #536]	; (8002378 <ME_general+0x580>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d868      	bhi.n	8002238 <ME_general+0x440>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <ME_general+0x374>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	08002185 	.word	0x08002185
 8002170:	080021a3 	.word	0x080021a3
 8002174:	080021c1 	.word	0x080021c1
 8002178:	080021df 	.word	0x080021df
 800217c:	080021fd 	.word	0x080021fd
 8002180:	0800221b 	.word	0x0800221b
		case 0:
			msg = lcd_msg_from_string("5min S/INC");
 8002184:	463b      	mov	r3, r7
 8002186:	497d      	ldr	r1, [pc, #500]	; (800237c <ME_general+0x584>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fa5a 	bl	8000642 <lcd_msg_from_string>
 800218e:	f107 0420 	add.w	r4, r7, #32
 8002192:	463d      	mov	r5, r7
 8002194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002198:	e895 0003 	ldmia.w	r5, {r0, r1}
 800219c:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80021a0:	e04a      	b.n	8002238 <ME_general+0x440>
		case 1:
			msg = lcd_msg_from_string("5min +30seg");
 80021a2:	463b      	mov	r3, r7
 80021a4:	4976      	ldr	r1, [pc, #472]	; (8002380 <ME_general+0x588>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fa4b 	bl	8000642 <lcd_msg_from_string>
 80021ac:	f107 0420 	add.w	r4, r7, #32
 80021b0:	463d      	mov	r5, r7
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ba:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80021be:	e03b      	b.n	8002238 <ME_general+0x440>
		case 2:
			msg = lcd_msg_from_string("10min S/INC");
 80021c0:	463b      	mov	r3, r7
 80021c2:	4970      	ldr	r1, [pc, #448]	; (8002384 <ME_general+0x58c>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fa3c 	bl	8000642 <lcd_msg_from_string>
 80021ca:	f107 0420 	add.w	r4, r7, #32
 80021ce:	463d      	mov	r5, r7
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021d8:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80021dc:	e02c      	b.n	8002238 <ME_general+0x440>
		case 3:
			msg = lcd_msg_from_string("10min +1min");
 80021de:	463b      	mov	r3, r7
 80021e0:	4969      	ldr	r1, [pc, #420]	; (8002388 <ME_general+0x590>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fa2d 	bl	8000642 <lcd_msg_from_string>
 80021e8:	f107 0420 	add.w	r4, r7, #32
 80021ec:	463d      	mov	r5, r7
 80021ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021f6:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80021fa:	e01d      	b.n	8002238 <ME_general+0x440>
		case 4:
			msg = lcd_msg_from_string("30min S/INC");
 80021fc:	463b      	mov	r3, r7
 80021fe:	4963      	ldr	r1, [pc, #396]	; (800238c <ME_general+0x594>)
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fa1e 	bl	8000642 <lcd_msg_from_string>
 8002206:	f107 0420 	add.w	r4, r7, #32
 800220a:	463d      	mov	r5, r7
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002214:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002218:	e00e      	b.n	8002238 <ME_general+0x440>
		case 5:
			msg = lcd_msg_from_string("30min +3min");
 800221a:	463b      	mov	r3, r7
 800221c:	495c      	ldr	r1, [pc, #368]	; (8002390 <ME_general+0x598>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fa0f 	bl	8000642 <lcd_msg_from_string>
 8002224:	f107 0420 	add.w	r4, r7, #32
 8002228:	463d      	mov	r5, r7
 800222a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800222c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002232:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002236:	bf00      	nop
		}

		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002238:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <ME_general+0x578>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f107 0120 	add.w	r1, r7, #32
 8002240:	2300      	movs	r3, #0
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	f005 fd41 	bl	8007ccc <xQueueGenericSend>

		if (button == 1) {
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <ME_general+0x466>
			sub_estado--;
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <ME_general+0x580>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <ME_general+0x580>)
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e00f      	b.n	800227e <ME_general+0x486>
			if (sub_estado < 0)
				sub_estado = 5;
		} else if (button == 2) {
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d10c      	bne.n	800227e <ME_general+0x486>
			sub_estado++;
 8002264:	4b44      	ldr	r3, [pc, #272]	; (8002378 <ME_general+0x580>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <ME_general+0x580>)
 800226e:	701a      	strb	r2, [r3, #0]
			if (sub_estado > 5)
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <ME_general+0x580>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d902      	bls.n	800227e <ME_general+0x486>
				sub_estado = 0;
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <ME_general+0x580>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
		}
		if (button == 3) {
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b03      	cmp	r3, #3
 8002282:	f040 81a5 	bne.w	80025d0 <ME_general+0x7d8>
			estado = ME_GENERAL_JVJ;
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <ME_general+0x59c>)
 8002288:	2203      	movs	r2, #3
 800228a:	701a      	strb	r2, [r3, #0]
			switch (sub_estado) {
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <ME_general+0x580>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d857      	bhi.n	8002344 <ME_general+0x54c>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <ME_general+0x4a4>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022b5 	.word	0x080022b5
 80022a0:	080022cd 	.word	0x080022cd
 80022a4:	080022e5 	.word	0x080022e5
 80022a8:	080022fd 	.word	0x080022fd
 80022ac:	08002315 	.word	0x08002315
 80022b0:	0800232d 	.word	0x0800232d
			case 0:
				segundos_j1 = 300;
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <ME_general+0x5a0>)
 80022b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ba:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80022bc:	4b37      	ldr	r3, [pc, #220]	; (800239c <ME_general+0x5a4>)
 80022be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022c2:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <ME_general+0x5a8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
				break;
 80022ca:	e03b      	b.n	8002344 <ME_general+0x54c>
			case 1:
				segundos_j1 = 300;
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <ME_general+0x5a0>)
 80022ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d2:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <ME_general+0x5a4>)
 80022d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022da:	601a      	str	r2, [r3, #0]
				incremento = 30;
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <ME_general+0x5a8>)
 80022de:	221e      	movs	r2, #30
 80022e0:	601a      	str	r2, [r3, #0]
				break;
 80022e2:	e02f      	b.n	8002344 <ME_general+0x54c>
			case 2:
				segundos_j1 = 600;
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <ME_general+0x5a0>)
 80022e6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022ea:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <ME_general+0x5a4>)
 80022ee:	f44f 7216 	mov.w	r2, #600	; 0x258
 80022f2:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <ME_general+0x5a8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
				break;
 80022fa:	e023      	b.n	8002344 <ME_general+0x54c>
			case 3:
				segundos_j1 = 600;
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <ME_general+0x5a0>)
 80022fe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002302:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <ME_general+0x5a4>)
 8002306:	f44f 7216 	mov.w	r2, #600	; 0x258
 800230a:	601a      	str	r2, [r3, #0]
				incremento = 60;
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <ME_general+0x5a8>)
 800230e:	223c      	movs	r2, #60	; 0x3c
 8002310:	601a      	str	r2, [r3, #0]
				break;
 8002312:	e017      	b.n	8002344 <ME_general+0x54c>
			case 4:
				segundos_j1 = 1800;
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <ME_general+0x5a0>)
 8002316:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800231a:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <ME_general+0x5a4>)
 800231e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002322:	601a      	str	r2, [r3, #0]
				incremento = 0;
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <ME_general+0x5a8>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
				break;
 800232a:	e00b      	b.n	8002344 <ME_general+0x54c>
			case 5:
				segundos_j1 = 1800;
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <ME_general+0x5a0>)
 800232e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002332:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <ME_general+0x5a4>)
 8002336:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800233a:	601a      	str	r2, [r3, #0]
				incremento = 180;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <ME_general+0x5a8>)
 800233e:	22b4      	movs	r2, #180	; 0xb4
 8002340:	601a      	str	r2, [r3, #0]
				break;
 8002342:	bf00      	nop
			}
			sub_estado = 0;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <ME_general+0x580>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
		}
		break;
 800234a:	e141      	b.n	80025d0 <ME_general+0x7d8>

	case ME_GENERAL_JVJ:
		modo_de_juego = 1;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <ME_general+0x5ac>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]

		contar = get_error_position();
 8002352:	f000 f9a5 	bl	80026a0 <get_error_position>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <ME_general+0x5b0>)
 800235c:	701a      	strb	r2, [r3, #0]

		if (sub_estado == 0) {
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <ME_general+0x580>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d124      	bne.n	80023b0 <ME_general+0x5b8>
			mostrar_tiempo = 1;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <ME_general+0x5b4>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e093      	b.n	8002496 <ME_general+0x69e>
 800236e:	bf00      	nop
 8002370:	200004cc 	.word	0x200004cc
 8002374:	0800a0ec 	.word	0x0800a0ec
 8002378:	20000844 	.word	0x20000844
 800237c:	0800a0fc 	.word	0x0800a0fc
 8002380:	0800a108 	.word	0x0800a108
 8002384:	0800a114 	.word	0x0800a114
 8002388:	0800a120 	.word	0x0800a120
 800238c:	0800a12c 	.word	0x0800a12c
 8002390:	0800a138 	.word	0x0800a138
 8002394:	20000830 	.word	0x20000830
 8002398:	20000838 	.word	0x20000838
 800239c:	2000083c 	.word	0x2000083c
 80023a0:	20000840 	.word	0x20000840
 80023a4:	20000831 	.word	0x20000831
 80023a8:	20000833 	.word	0x20000833
 80023ac:	20000832 	.word	0x20000832
		} else {
			mostrar_tiempo = 0;
 80023b0:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <ME_general+0x7e8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
			msg = lcd_msg_clear();
 80023b6:	463b      	mov	r3, r7
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f97a 	bl	80006b2 <lcd_msg_clear>
 80023be:	f107 0420 	add.w	r4, r7, #32
 80023c2:	463d      	mov	r5, r7
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023cc:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <ME_general+0x7ec>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	f107 0120 	add.w	r1, r7, #32
 80023d8:	2300      	movs	r3, #0
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	f005 fc75 	bl	8007ccc <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80023e2:	463b      	mov	r3, r7
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f986 	bl	80006f6 <lcd_msg_first_line>
 80023ea:	f107 0420 	add.w	r4, r7, #32
 80023ee:	463d      	mov	r5, r7
 80023f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023f8:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80023fc:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <ME_general+0x7ec>)
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	f107 0120 	add.w	r1, r7, #32
 8002404:	2300      	movs	r3, #0
 8002406:	f04f 32ff 	mov.w	r2, #4294967295
 800240a:	f005 fc5f 	bl	8007ccc <xQueueGenericSend>
			msg = lcd_msg_from_string("Modo Reset");
 800240e:	463b      	mov	r3, r7
 8002410:	4975      	ldr	r1, [pc, #468]	; (80025e8 <ME_general+0x7f0>)
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f915 	bl	8000642 <lcd_msg_from_string>
 8002418:	f107 0420 	add.w	r4, r7, #32
 800241c:	463d      	mov	r5, r7
 800241e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002422:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002426:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800242a:	4b6e      	ldr	r3, [pc, #440]	; (80025e4 <ME_general+0x7ec>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f107 0120 	add.w	r1, r7, #32
 8002432:	2300      	movs	r3, #0
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	f005 fc48 	bl	8007ccc <xQueueGenericSend>
			msg = lcd_msg_second_line();
 800243c:	463b      	mov	r3, r7
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f97b 	bl	800073a <lcd_msg_second_line>
 8002444:	f107 0420 	add.w	r4, r7, #32
 8002448:	463d      	mov	r5, r7
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002452:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <ME_general+0x7ec>)
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	f107 0120 	add.w	r1, r7, #32
 800245e:	2300      	movs	r3, #0
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	f005 fc32 	bl	8007ccc <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 8002468:	463b      	mov	r3, r7
 800246a:	4960      	ldr	r1, [pc, #384]	; (80025ec <ME_general+0x7f4>)
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f8e8 	bl	8000642 <lcd_msg_from_string>
 8002472:	f107 0420 	add.w	r4, r7, #32
 8002476:	463d      	mov	r5, r7
 8002478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002480:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <ME_general+0x7ec>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	f107 0120 	add.w	r1, r7, #32
 800248c:	2300      	movs	r3, #0
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	f005 fc1b 	bl	8007ccc <xQueueGenericSend>
		}

		if (button == 3) {
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d10c      	bne.n	80024b6 <ME_general+0x6be>
			estado = sub_estado == 1 ? ME_GENERAL_FIN : ME_GENERAL_JVJ;
 800249c:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <ME_general+0x7f8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <ME_general+0x6b0>
 80024a4:	2205      	movs	r2, #5
 80024a6:	e000      	b.n	80024aa <ME_general+0x6b2>
 80024a8:	2203      	movs	r2, #3
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <ME_general+0x7fc>)
 80024ac:	701a      	strb	r2, [r3, #0]
			sub_estado = 0;
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <ME_general+0x7f8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
		} else {
			sub_estado = !sub_estado;
		}
		break;
 80024b4:	e08f      	b.n	80025d6 <ME_general+0x7de>
			sub_estado = !sub_estado;
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <ME_general+0x7f8>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <ME_general+0x7f8>)
 80024c8:	701a      	strb	r2, [r3, #0]
		break;
 80024ca:	e084      	b.n	80025d6 <ME_general+0x7de>
	case ME_GENERAL_JVM:
		modo_de_juego = 2;
 80024cc:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <ME_general+0x800>)
 80024ce:	2202      	movs	r2, #2
 80024d0:	701a      	strb	r2, [r3, #0]
		break;
 80024d2:	e080      	b.n	80025d6 <ME_general+0x7de>
	case ME_GENERAL_FIN:
		modo_de_juego = 3;
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <ME_general+0x800>)
 80024d6:	2203      	movs	r2, #3
 80024d8:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 80024da:	463b      	mov	r3, r7
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f8e8 	bl	80006b2 <lcd_msg_clear>
 80024e2:	f107 0420 	add.w	r4, r7, #32
 80024e6:	463d      	mov	r5, r7
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024f0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <ME_general+0x7ec>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f107 0120 	add.w	r1, r7, #32
 80024fc:	2300      	movs	r3, #0
 80024fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002502:	f005 fbe3 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002506:	463b      	mov	r3, r7
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f8f4 	bl	80006f6 <lcd_msg_first_line>
 800250e:	f107 0420 	add.w	r4, r7, #32
 8002512:	463d      	mov	r5, r7
 8002514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002518:	e895 0003 	ldmia.w	r5, {r0, r1}
 800251c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <ME_general+0x7ec>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f107 0120 	add.w	r1, r7, #32
 8002528:	2300      	movs	r3, #0
 800252a:	f04f 32ff 	mov.w	r2, #4294967295
 800252e:	f005 fbcd 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Juego Terminado");
 8002532:	463b      	mov	r3, r7
 8002534:	4931      	ldr	r1, [pc, #196]	; (80025fc <ME_general+0x804>)
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f883 	bl	8000642 <lcd_msg_from_string>
 800253c:	f107 0420 	add.w	r4, r7, #32
 8002540:	463d      	mov	r5, r7
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800254a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <ME_general+0x7ec>)
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f107 0120 	add.w	r1, r7, #32
 8002556:	2300      	movs	r3, #0
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	f005 fbb6 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002560:	463b      	mov	r3, r7
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f8e9 	bl	800073a <lcd_msg_second_line>
 8002568:	f107 0420 	add.w	r4, r7, #32
 800256c:	463d      	mov	r5, r7
 800256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002576:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <ME_general+0x7ec>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	f107 0120 	add.w	r1, r7, #32
 8002582:	2300      	movs	r3, #0
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	f005 fba0 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 800258c:	463b      	mov	r3, r7
 800258e:	491c      	ldr	r1, [pc, #112]	; (8002600 <ME_general+0x808>)
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f856 	bl	8000642 <lcd_msg_from_string>
 8002596:	f107 0420 	add.w	r4, r7, #32
 800259a:	463d      	mov	r5, r7
 800259c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025a4:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <ME_general+0x7ec>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f107 0120 	add.w	r1, r7, #32
 80025b0:	2300      	movs	r3, #0
 80025b2:	f04f 32ff 	mov.w	r2, #4294967295
 80025b6:	f005 fb89 	bl	8007ccc <xQueueGenericSend>

		if (button == 3) {
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d109      	bne.n	80025d4 <ME_general+0x7dc>
			user_init();
 80025c0:	f000 f850 	bl	8002664 <user_init>
			estado = ME_GENERAL_RESET;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <ME_general+0x7fc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80025ca:	e003      	b.n	80025d4 <ME_general+0x7dc>
		break;
 80025cc:	bf00      	nop
 80025ce:	e002      	b.n	80025d6 <ME_general+0x7de>
		break;
 80025d0:	bf00      	nop
 80025d2:	e000      	b.n	80025d6 <ME_general+0x7de>
		break;
 80025d4:	bf00      	nop
	}
}
 80025d6:	bf00      	nop
 80025d8:	3738      	adds	r7, #56	; 0x38
 80025da:	46bd      	mov	sp, r7
 80025dc:	bdb0      	pop	{r4, r5, r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000832 	.word	0x20000832
 80025e4:	200004cc 	.word	0x200004cc
 80025e8:	0800a144 	.word	0x0800a144
 80025ec:	0800a150 	.word	0x0800a150
 80025f0:	20000844 	.word	0x20000844
 80025f4:	20000830 	.word	0x20000830
 80025f8:	20000831 	.word	0x20000831
 80025fc:	0800a15c 	.word	0x0800a15c
 8002600:	0800a0ac 	.word	0x0800a0ac

08002604 <t_WS2812>:

void t_WS2812(void*) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <t_WS2812+0x44>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <t_WS2812+0x16>
		tareas_error_handler(2);
 8002614:	2002      	movs	r0, #2
 8002616:	f000 f81d 	bl	8002654 <tareas_error_handler>
	}

	ws2812_init();
 800261a:	f000 ff85 	bl	8003528 <ws2812_init>

	while (1) {
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <t_WS2812+0x44>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f04f 31ff 	mov.w	r1, #4294967295
 8002626:	4618      	mov	r0, r3
 8002628:	f005 fd2e 	bl	8008088 <xQueueSemaphoreTake>
		ws2812_update_leds_from_data(user_htim1);
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <t_WS2812+0x48>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f001 f81b 	bl	800366c <ws2812_update_leds_from_data>
		while (!ws2812_finished_dma) {
 8002636:	e002      	b.n	800263e <t_WS2812+0x3a>
			vTaskDelay(5);
 8002638:	2005      	movs	r0, #5
 800263a:	f006 f99f 	bl	800897c <vTaskDelay>
		while (!ws2812_finished_dma) {
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <t_WS2812+0x4c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f8      	beq.n	8002638 <t_WS2812+0x34>
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 8002646:	e7ea      	b.n	800261e <t_WS2812+0x1a>
 8002648:	200004d4 	.word	0x200004d4
 800264c:	20000848 	.word	0x20000848
 8002650:	200016c8 	.word	0x200016c8

08002654 <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(uint8_t error) {
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800265e:	b672      	cpsid	i
}
 8002660:	bf00      	nop
	__disable_irq();
	while (1) {
		UNUSED(error);
 8002662:	e7fe      	b.n	8002662 <tareas_error_handler+0xe>

08002664 <user_init>:
extern xQueueHandle lcd_queue;

extern game_state_t game_state;
extern char lighting_state;

void user_init() {
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	//game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);

	game_set_led_output_array(ws2812_color_data);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <user_init+0x14>)
 800266a:	f7fe f963 	bl	8000934 <game_set_led_output_array>

	game_reset();
 800266e:	f7fe f974 	bl	800095a <game_reset>
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200015c8 	.word	0x200015c8

0800267c <get_side_to_move>:

uint8_t get_side_to_move()
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	return (game_state.side_to_move == WHITE ? 0 : 1);
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <get_side_to_move+0x20>)
 8002682:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000084c 	.word	0x2000084c

080026a0 <get_error_position>:

uint8_t get_error_position()
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
	return (lighting_state == LIGHTING_ERROR_STATE ? 0 : 1);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <get_error_position+0x1c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	200016c9 	.word	0x200016c9

080026c0 <get_promotion>:

piece_t get_promotion() {
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 80026e2:	463b      	mov	r3, r7
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ffe4 	bl	80006b2 <lcd_msg_clear>
 80026ea:	f107 041c 	add.w	r4, r7, #28
 80026ee:	463d      	mov	r5, r7
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026f8:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80026fc:	4b7b      	ldr	r3, [pc, #492]	; (80028ec <get_promotion+0x22c>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f107 011c 	add.w	r1, r7, #28
 8002704:	2300      	movs	r3, #0
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	f005 fadf 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_first_line();
 800270e:	463b      	mov	r3, r7
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fff0 	bl	80006f6 <lcd_msg_first_line>
 8002716:	f107 041c 	add.w	r4, r7, #28
 800271a:	463d      	mov	r5, r7
 800271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002720:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002724:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <get_promotion+0x22c>)
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	f107 011c 	add.w	r1, r7, #28
 8002730:	2300      	movs	r3, #0
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	f005 fac9 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 800273a:	463b      	mov	r3, r7
 800273c:	496c      	ldr	r1, [pc, #432]	; (80028f0 <get_promotion+0x230>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff7f 	bl	8000642 <lcd_msg_from_string>
 8002744:	f107 041c 	add.w	r4, r7, #28
 8002748:	463d      	mov	r5, r7
 800274a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002752:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <get_promotion+0x22c>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f107 011c 	add.w	r1, r7, #28
 800275e:	2300      	movs	r3, #0
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	f005 fab2 	bl	8007ccc <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8002768:	463b      	mov	r3, r7
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd ffe5 	bl	800073a <lcd_msg_second_line>
 8002770:	f107 041c 	add.w	r4, r7, #28
 8002774:	463d      	mov	r5, r7
 8002776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800277e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <get_promotion+0x22c>)
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f107 011c 	add.w	r1, r7, #28
 800278a:	2300      	movs	r3, #0
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	f005 fa9c 	bl	8007ccc <xQueueGenericSend>
		switch (piece) {
 8002794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002798:	3b01      	subs	r3, #1
 800279a:	2b03      	cmp	r3, #3
 800279c:	d86a      	bhi.n	8002874 <get_promotion+0x1b4>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <get_promotion+0xe4>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027e5 	.word	0x080027e5
 80027ac:	08002845 	.word	0x08002845
 80027b0:	08002815 	.word	0x08002815
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 80027b4:	463b      	mov	r3, r7
 80027b6:	494f      	ldr	r1, [pc, #316]	; (80028f4 <get_promotion+0x234>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd ff42 	bl	8000642 <lcd_msg_from_string>
 80027be:	f107 041c 	add.w	r4, r7, #28
 80027c2:	463d      	mov	r5, r7
 80027c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027cc:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <get_promotion+0x22c>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	f107 011c 	add.w	r1, r7, #28
 80027d8:	2300      	movs	r3, #0
 80027da:	f04f 32ff 	mov.w	r2, #4294967295
 80027de:	f005 fa75 	bl	8007ccc <xQueueGenericSend>
			break;
 80027e2:	e047      	b.n	8002874 <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 80027e4:	463b      	mov	r3, r7
 80027e6:	4944      	ldr	r1, [pc, #272]	; (80028f8 <get_promotion+0x238>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd ff2a 	bl	8000642 <lcd_msg_from_string>
 80027ee:	f107 041c 	add.w	r4, r7, #28
 80027f2:	463d      	mov	r5, r7
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027fc:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <get_promotion+0x22c>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f107 011c 	add.w	r1, r7, #28
 8002808:	2300      	movs	r3, #0
 800280a:	f04f 32ff 	mov.w	r2, #4294967295
 800280e:	f005 fa5d 	bl	8007ccc <xQueueGenericSend>
			break;
 8002812:	e02f      	b.n	8002874 <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8002814:	463b      	mov	r3, r7
 8002816:	4939      	ldr	r1, [pc, #228]	; (80028fc <get_promotion+0x23c>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd ff12 	bl	8000642 <lcd_msg_from_string>
 800281e:	f107 041c 	add.w	r4, r7, #28
 8002822:	463d      	mov	r5, r7
 8002824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002828:	e895 0003 	ldmia.w	r5, {r0, r1}
 800282c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002830:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <get_promotion+0x22c>)
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	f107 011c 	add.w	r1, r7, #28
 8002838:	2300      	movs	r3, #0
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	f005 fa45 	bl	8007ccc <xQueueGenericSend>
			break;
 8002842:	e017      	b.n	8002874 <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8002844:	463b      	mov	r3, r7
 8002846:	492e      	ldr	r1, [pc, #184]	; (8002900 <get_promotion+0x240>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fefa 	bl	8000642 <lcd_msg_from_string>
 800284e:	f107 041c 	add.w	r4, r7, #28
 8002852:	463d      	mov	r5, r7
 8002854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002858:	e895 0003 	ldmia.w	r5, {r0, r1}
 800285c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <get_promotion+0x22c>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f107 011c 	add.w	r1, r7, #28
 8002868:	2300      	movs	r3, #0
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	f005 fa2d 	bl	8007ccc <xQueueGenericSend>
			break;
 8002872:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <get_promotion+0x244>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f107 011b 	add.w	r1, r7, #27
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	4618      	mov	r0, r3
 8002882:	f005 fb21 	bl	8007ec8 <xQueueReceive>

		switch (button) {
 8002886:	7efb      	ldrb	r3, [r7, #27]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d023      	beq.n	80028d4 <get_promotion+0x214>
 800288c:	2b03      	cmp	r3, #3
 800288e:	dc22      	bgt.n	80028d6 <get_promotion+0x216>
 8002890:	2b01      	cmp	r3, #1
 8002892:	d010      	beq.n	80028b6 <get_promotion+0x1f6>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d11e      	bne.n	80028d6 <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8002898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800289c:	3301      	adds	r3, #1
 800289e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 80028a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d902      	bls.n	80028b0 <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	76fb      	strb	r3, [r7, #27]
			break;
 80028b4:	e00f      	b.n	80028d6 <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 80028b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 80028c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 80028c8:	2304      	movs	r3, #4
 80028ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	76fb      	strb	r3, [r7, #27]
			break;
 80028d2:	e000      	b.n	80028d6 <get_promotion+0x216>
			break;
 80028d4:	bf00      	nop
		}

		if (button)
 80028d6:	7efb      	ldrb	r3, [r7, #27]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <get_promotion+0x21e>
		msg = lcd_msg_clear();
 80028dc:	e701      	b.n	80026e2 <get_promotion+0x22>
			break;
 80028de:	bf00      	nop
	}

	return piece;
 80028e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3738      	adds	r7, #56	; 0x38
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	200004cc 	.word	0x200004cc
 80028f0:	0800a16c 	.word	0x0800a16c
 80028f4:	0800a17c 	.word	0x0800a17c
 80028f8:	0800a188 	.word	0x0800a188
 80028fc:	0800a194 	.word	0x0800a194
 8002900:	0800a1a0 	.word	0x0800a1a0
 8002904:	200004d0 	.word	0x200004d0

08002908 <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	game_fsm();
 800290c:	f7fe f81d 	bl	800094a <game_fsm>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <clear_game_state>:
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e00d      	b.n	800293e <clear_game_state+0x2a>
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	3380      	adds	r3, #128	; 0x80
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	2206      	movs	r2, #6
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b7f      	cmp	r3, #127	; 0x7f
 8002942:	ddee      	ble.n	8002922 <clear_game_state+0xe>
 8002944:	2301      	movs	r3, #1
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <place_piece>:
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	461a      	mov	r2, r3
 8002960:	4603      	mov	r3, r0
 8002962:	70fb      	strb	r3, [r7, #3]
 8002964:	460b      	mov	r3, r1
 8002966:	70bb      	strb	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	78f9      	ldrb	r1, [r7, #3]
 8002972:	54d1      	strb	r1, [r2, r3]
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002980:	2301      	movs	r3, #1
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <remove_piece>:
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	2106      	movs	r1, #6
 80029a0:	54d1      	strb	r1, [r2, r3]
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80029ae:	2301      	movs	r3, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <engine_reset>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4902      	ldr	r1, [pc, #8]	; (80029cc <engine_reset+0x10>)
 80029c2:	4803      	ldr	r0, [pc, #12]	; (80029d0 <engine_reset+0x14>)
 80029c4:	f000 f838 	bl	8002a38 <load_fen>
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	0800a1ac 	.word	0x0800a1ac
 80029d0:	2000084c 	.word	0x2000084c

080029d4 <engine_move_piece>:
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <engine_move_piece+0x20>)
 80029e2:	f000 f9d7 	bl	8002d94 <make_move>
 80029e6:	4603      	mov	r3, r0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000084c 	.word	0x2000084c

080029f8 <engine_list_moves>:
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4804      	ldr	r0, [pc, #16]	; (8002a14 <engine_list_moves+0x1c>)
 8002a04:	f000 fae0 	bl	8002fc8 <generate_moves>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000084c 	.word	0x2000084c

08002a18 <engine_get_piece>:
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <engine_get_piece+0x1c>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	2000084c 	.word	0x2000084c

08002a38 <load_fen>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff66 	bl	8002914 <clear_game_state>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	72fb      	strb	r3, [r7, #11]
 8002a50:	2307      	movs	r3, #7
 8002a52:	72bb      	strb	r3, [r7, #10]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3b2f      	subs	r3, #47	; 0x2f
 8002a5a:	2b43      	cmp	r3, #67	; 0x43
 8002a5c:	f200 8166 	bhi.w	8002d2c <load_fen+0x2f4>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <load_fen+0x30>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002ce1 	.word	0x08002ce1
 8002a6c:	08002d2d 	.word	0x08002d2d
 8002a70:	08002ced 	.word	0x08002ced
 8002a74:	08002cf5 	.word	0x08002cf5
 8002a78:	08002cfd 	.word	0x08002cfd
 8002a7c:	08002d05 	.word	0x08002d05
 8002a80:	08002d0d 	.word	0x08002d0d
 8002a84:	08002d15 	.word	0x08002d15
 8002a88:	08002d1d 	.word	0x08002d1d
 8002a8c:	08002d25 	.word	0x08002d25
 8002a90:	08002d2d 	.word	0x08002d2d
 8002a94:	08002d2d 	.word	0x08002d2d
 8002a98:	08002d2d 	.word	0x08002d2d
 8002a9c:	08002d2d 	.word	0x08002d2d
 8002aa0:	08002d2d 	.word	0x08002d2d
 8002aa4:	08002d2d 	.word	0x08002d2d
 8002aa8:	08002d2d 	.word	0x08002d2d
 8002aac:	08002d2d 	.word	0x08002d2d
 8002ab0:	08002d2d 	.word	0x08002d2d
 8002ab4:	08002bd3 	.word	0x08002bd3
 8002ab8:	08002d2d 	.word	0x08002d2d
 8002abc:	08002d2d 	.word	0x08002d2d
 8002ac0:	08002d2d 	.word	0x08002d2d
 8002ac4:	08002d2d 	.word	0x08002d2d
 8002ac8:	08002d2d 	.word	0x08002d2d
 8002acc:	08002d2d 	.word	0x08002d2d
 8002ad0:	08002d2d 	.word	0x08002d2d
 8002ad4:	08002d2d 	.word	0x08002d2d
 8002ad8:	08002b79 	.word	0x08002b79
 8002adc:	08002d2d 	.word	0x08002d2d
 8002ae0:	08002d2d 	.word	0x08002d2d
 8002ae4:	08002bf1 	.word	0x08002bf1
 8002ae8:	08002d2d 	.word	0x08002d2d
 8002aec:	08002c0f 	.word	0x08002c0f
 8002af0:	08002b97 	.word	0x08002b97
 8002af4:	08002bb5 	.word	0x08002bb5
 8002af8:	08002d2d 	.word	0x08002d2d
 8002afc:	08002d2d 	.word	0x08002d2d
 8002b00:	08002d2d 	.word	0x08002d2d
 8002b04:	08002d2d 	.word	0x08002d2d
 8002b08:	08002d2d 	.word	0x08002d2d
 8002b0c:	08002d2d 	.word	0x08002d2d
 8002b10:	08002d2d 	.word	0x08002d2d
 8002b14:	08002d2d 	.word	0x08002d2d
 8002b18:	08002d2d 	.word	0x08002d2d
 8002b1c:	08002d2d 	.word	0x08002d2d
 8002b20:	08002d2d 	.word	0x08002d2d
 8002b24:	08002d2d 	.word	0x08002d2d
 8002b28:	08002d2d 	.word	0x08002d2d
 8002b2c:	08002d2d 	.word	0x08002d2d
 8002b30:	08002d2d 	.word	0x08002d2d
 8002b34:	08002c87 	.word	0x08002c87
 8002b38:	08002d2d 	.word	0x08002d2d
 8002b3c:	08002d2d 	.word	0x08002d2d
 8002b40:	08002d2d 	.word	0x08002d2d
 8002b44:	08002d2d 	.word	0x08002d2d
 8002b48:	08002d2d 	.word	0x08002d2d
 8002b4c:	08002d2d 	.word	0x08002d2d
 8002b50:	08002d2d 	.word	0x08002d2d
 8002b54:	08002d2d 	.word	0x08002d2d
 8002b58:	08002c2d 	.word	0x08002c2d
 8002b5c:	08002d2d 	.word	0x08002d2d
 8002b60:	08002d2d 	.word	0x08002d2d
 8002b64:	08002ca5 	.word	0x08002ca5
 8002b68:	08002d2d 	.word	0x08002d2d
 8002b6c:	08002cc3 	.word	0x08002cc3
 8002b70:	08002c4b 	.word	0x08002c4b
 8002b74:	08002c69 	.word	0x08002c69
 8002b78:	7abb      	ldrb	r3, [r7, #10]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	4413      	add	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fee2 	bl	8002952 <place_piece>
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	3301      	adds	r3, #1
 8002b92:	72fb      	strb	r3, [r7, #11]
 8002b94:	e0ca      	b.n	8002d2c <load_fen+0x2f4>
 8002b96:	7abb      	ldrb	r3, [r7, #10]
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fed3 	bl	8002952 <place_piece>
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	72fb      	strb	r3, [r7, #11]
 8002bb2:	e0bb      	b.n	8002d2c <load_fen+0x2f4>
 8002bb4:	7abb      	ldrb	r3, [r7, #10]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fec4 	bl	8002952 <place_piece>
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	72fb      	strb	r3, [r7, #11]
 8002bd0:	e0ac      	b.n	8002d2c <load_fen+0x2f4>
 8002bd2:	7abb      	ldrb	r3, [r7, #10]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2200      	movs	r2, #0
 8002be0:	2103      	movs	r1, #3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff feb5 	bl	8002952 <place_piece>
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	3301      	adds	r3, #1
 8002bec:	72fb      	strb	r3, [r7, #11]
 8002bee:	e09d      	b.n	8002d2c <load_fen+0x2f4>
 8002bf0:	7abb      	ldrb	r3, [r7, #10]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2104      	movs	r1, #4
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fea6 	bl	8002952 <place_piece>
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	72fb      	strb	r3, [r7, #11]
 8002c0c:	e08e      	b.n	8002d2c <load_fen+0x2f4>
 8002c0e:	7abb      	ldrb	r3, [r7, #10]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	7afb      	ldrb	r3, [r7, #11]
 8002c16:	4413      	add	r3, r2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fe97 	bl	8002952 <place_piece>
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	3301      	adds	r3, #1
 8002c28:	72fb      	strb	r3, [r7, #11]
 8002c2a:	e07f      	b.n	8002d2c <load_fen+0x2f4>
 8002c2c:	7abb      	ldrb	r3, [r7, #10]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	4413      	add	r3, r2
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fe88 	bl	8002952 <place_piece>
 8002c42:	7afb      	ldrb	r3, [r7, #11]
 8002c44:	3301      	adds	r3, #1
 8002c46:	72fb      	strb	r3, [r7, #11]
 8002c48:	e070      	b.n	8002d2c <load_fen+0x2f4>
 8002c4a:	7abb      	ldrb	r3, [r7, #10]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2201      	movs	r2, #1
 8002c58:	2101      	movs	r1, #1
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fe79 	bl	8002952 <place_piece>
 8002c60:	7afb      	ldrb	r3, [r7, #11]
 8002c62:	3301      	adds	r3, #1
 8002c64:	72fb      	strb	r3, [r7, #11]
 8002c66:	e061      	b.n	8002d2c <load_fen+0x2f4>
 8002c68:	7abb      	ldrb	r3, [r7, #10]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	4413      	add	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	2102      	movs	r1, #2
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe6a 	bl	8002952 <place_piece>
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	3301      	adds	r3, #1
 8002c82:	72fb      	strb	r3, [r7, #11]
 8002c84:	e052      	b.n	8002d2c <load_fen+0x2f4>
 8002c86:	7abb      	ldrb	r3, [r7, #10]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2201      	movs	r2, #1
 8002c94:	2103      	movs	r1, #3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fe5b 	bl	8002952 <place_piece>
 8002c9c:	7afb      	ldrb	r3, [r7, #11]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	72fb      	strb	r3, [r7, #11]
 8002ca2:	e043      	b.n	8002d2c <load_fen+0x2f4>
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	7afb      	ldrb	r3, [r7, #11]
 8002cac:	4413      	add	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fe4c 	bl	8002952 <place_piece>
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	72fb      	strb	r3, [r7, #11]
 8002cc0:	e034      	b.n	8002d2c <load_fen+0x2f4>
 8002cc2:	7abb      	ldrb	r3, [r7, #10]
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fe3d 	bl	8002952 <place_piece>
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	72fb      	strb	r3, [r7, #11]
 8002cde:	e025      	b.n	8002d2c <load_fen+0x2f4>
 8002ce0:	7abb      	ldrb	r3, [r7, #10]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	72bb      	strb	r3, [r7, #10]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	72fb      	strb	r3, [r7, #11]
 8002cea:	e01f      	b.n	8002d2c <load_fen+0x2f4>
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	72fb      	strb	r3, [r7, #11]
 8002cf2:	e01b      	b.n	8002d2c <load_fen+0x2f4>
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	72fb      	strb	r3, [r7, #11]
 8002cfa:	e017      	b.n	8002d2c <load_fen+0x2f4>
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	3303      	adds	r3, #3
 8002d00:	72fb      	strb	r3, [r7, #11]
 8002d02:	e013      	b.n	8002d2c <load_fen+0x2f4>
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	3304      	adds	r3, #4
 8002d08:	72fb      	strb	r3, [r7, #11]
 8002d0a:	e00f      	b.n	8002d2c <load_fen+0x2f4>
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	3305      	adds	r3, #5
 8002d10:	72fb      	strb	r3, [r7, #11]
 8002d12:	e00b      	b.n	8002d2c <load_fen+0x2f4>
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	3306      	adds	r3, #6
 8002d18:	72fb      	strb	r3, [r7, #11]
 8002d1a:	e007      	b.n	8002d2c <load_fen+0x2f4>
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	3307      	adds	r3, #7
 8002d20:	72fb      	strb	r3, [r7, #11]
 8002d22:	e003      	b.n	8002d2c <load_fen+0x2f4>
 8002d24:	7afb      	ldrb	r3, [r7, #11]
 8002d26:	3308      	adds	r3, #8
 8002d28:	72fb      	strb	r3, [r7, #11]
 8002d2a:	bf00      	nop
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f47f ae8c 	bne.w	8002a54 <load_fen+0x1c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b77      	cmp	r3, #119	; 0x77
 8002d48:	d104      	bne.n	8002d54 <load_fen+0x31c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8002d52:	e003      	b.n	8002d5c <load_fen+0x324>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3302      	adds	r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3301      	adds	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d1f8      	bne.n	8002d62 <load_fen+0x32a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d1f8      	bne.n	8002d76 <load_fen+0x33e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002da0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002da4:	6018      	str	r0, [r3, #0]
 8002da6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002daa:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002dae:	6019      	str	r1, [r3, #0]
 8002db0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002db4:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002db8:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8002dba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002dbe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002dc8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d101      	bne.n	8002dd6 <make_move+0x42>
        return 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e0eb      	b.n	8002fae <make_move+0x21a>

    if(safe){
 8002dd6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002dda:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05d      	beq.n	8002ea0 <make_move+0x10c>
        uint8_t move_ok = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8002dea:	f107 0214 	add.w	r2, r7, #20
 8002dee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002df2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002df6:	4611      	mov	r1, r2
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f000 f8e5 	bl	8002fc8 <generate_moves>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002e0a:	e03d      	b.n	8002e88 <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8002e0c:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e10:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e14:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e26:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d126      	bne.n	8002e7e <make_move+0xea>
 8002e30:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e34:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e38:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	3301      	adds	r3, #1
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e4c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d113      	bne.n	8002e7e <make_move+0xea>
                move_ok = 1;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 8002e5c:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e60:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e64:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3302      	adds	r3, #2
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e78:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e7c:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 8002e7e:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8002e82:	3301      	adds	r3, #1
 8002e84:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002e88:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e8c:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3bb      	bcc.n	8002e0c <make_move+0x78>
            }
        }
        if(!move_ok){
 8002e94:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <make_move+0x10c>
            return 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e086      	b.n	8002fae <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8002ea0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002ea4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002eae:	f1c3 0301 	rsb	r3, r3, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002eb8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8002ec2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002ec6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002ed2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	5c9b      	ldrb	r3, [r3, r2]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d00c      	beq.n	8002ef8 <make_move+0x164>
        remove_piece(state, move.to);
 8002ede:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002ee2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002ee6:	785a      	ldrb	r2, [r3, #1]
 8002ee8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002eec:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f7ff fd4b 	bl	800298e <remove_piece>

    if(move.promotion != 0)
 8002ef8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002efc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f00:	789b      	ldrb	r3, [r3, #2]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01f      	beq.n	8002f46 <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 8002f06:	f000 f857 	bl	8002fb8 <check_promotion>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f12:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f1e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002f2a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f2e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8002f38:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	f7ff fd07 	bl	8002952 <place_piece>
 8002f44:	e025      	b.n	8002f92 <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8002f46:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f4a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f56:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	5c99      	ldrb	r1, [r3, r2]
 8002f5e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f62:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f6e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002f7a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f7e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8002f88:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8002f8c:	6800      	ldr	r0, [r0, #0]
 8002f8e:	f7ff fce0 	bl	8002952 <place_piece>
    }

    remove_piece(state, move.from);
 8002f92:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f96:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002fa0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	f7ff fcf1 	bl	800298e <remove_piece>
    return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}

08002fb8 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
    return get_promotion();
 8002fbc:	f7ff fb80 	bl	80026c0 <get_promotion>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e281      	b.n	80034e0 <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 8002fe6:	7b7b      	ldrb	r3, [r7, #13]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	f000 8273 	beq.w	80034d4 <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3380      	adds	r3, #128	; 0x80
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f040 826a 	bne.w	80034d8 <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 8003004:	7b7b      	ldrb	r3, [r7, #13]
 8003006:	2b05      	cmp	r3, #5
 8003008:	f040 81e2 	bne.w	80033d0 <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80ee 	bne.w	80031f4 <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3310      	adds	r3, #16
 800301c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003020:	2b00      	cmp	r3, #0
 8003022:	d162      	bne.n	80030ea <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3310      	adds	r3, #16
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	2b06      	cmp	r3, #6
 800302e:	d15c      	bne.n	80030ea <generate_moves+0x122>
                        moves[n_moves].from = square;
 8003030:	8afa      	ldrh	r2, [r7, #22]
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	b2d9      	uxtb	r1, r3
 8003046:	8afa      	ldrh	r2, [r7, #22]
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	4413      	add	r3, r2
 8003052:	f101 0210 	add.w	r2, r1, #16
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800305a:	8afa      	ldrh	r2, [r7, #22]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4413      	add	r3, r2
 8003066:	2200      	movs	r2, #0
 8003068:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 800306a:	8afa      	ldrh	r2, [r7, #22]
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4413      	add	r3, r2
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b07      	cmp	r3, #7
 800307e:	d107      	bne.n	8003090 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8003080:	8afa      	ldrh	r2, [r7, #22]
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	4413      	add	r3, r2
 800308c:	2201      	movs	r2, #1
 800308e:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8003090:	8afb      	ldrh	r3, [r7, #22]
 8003092:	3301      	adds	r3, #1
 8003094:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	111b      	asrs	r3, r3, #4
 800309a:	2b01      	cmp	r3, #1
 800309c:	d125      	bne.n	80030ea <generate_moves+0x122>
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	3320      	adds	r3, #32
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d11f      	bne.n	80030ea <generate_moves+0x122>
                            moves[n_moves].from = square;
 80030aa:	8afa      	ldrh	r2, [r7, #22]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	b2d9      	uxtb	r1, r3
 80030c0:	8afa      	ldrh	r2, [r7, #22]
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	f101 0220 	add.w	r2, r1, #32
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 80030d4:	8afa      	ldrh	r2, [r7, #22]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 80030e4:	8afb      	ldrh	r3, [r7, #22]
 80030e6:	3301      	adds	r3, #1
 80030e8:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	3311      	adds	r3, #17
 80030ee:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d13a      	bne.n	800316c <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3311      	adds	r3, #17
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003102:	2b01      	cmp	r3, #1
 8003104:	d132      	bne.n	800316c <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 8003106:	8afa      	ldrh	r2, [r7, #22]
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4413      	add	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	b2d9      	uxtb	r1, r3
 800311c:	8afa      	ldrh	r2, [r7, #22]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	4413      	add	r3, r2
 8003128:	f101 0211 	add.w	r2, r1, #17
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003130:	8afa      	ldrh	r2, [r7, #22]
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	4413      	add	r3, r2
 800313c:	2200      	movs	r2, #0
 800313e:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003140:	8afa      	ldrh	r2, [r7, #22]
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b07      	cmp	r3, #7
 8003154:	d107      	bne.n	8003166 <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 8003156:	8afa      	ldrh	r2, [r7, #22]
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4413      	add	r3, r2
 8003162:	2201      	movs	r2, #1
 8003164:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8003166:	8afb      	ldrh	r3, [r7, #22]
 8003168:	3301      	adds	r3, #1
 800316a:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	330f      	adds	r3, #15
 8003170:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 81b0 	bne.w	80034da <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	330f      	adds	r3, #15
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 81a7 	bne.w	80034da <generate_moves+0x512>
                        moves[n_moves].from = square;
 800318c:	8afa      	ldrh	r2, [r7, #22]
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4413      	add	r3, r2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	8afa      	ldrh	r2, [r7, #22]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	f101 020f 	add.w	r2, r1, #15
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80031b6:	8afa      	ldrh	r2, [r7, #22]
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	2200      	movs	r2, #0
 80031c4:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80031c6:	8afa      	ldrh	r2, [r7, #22]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b07      	cmp	r3, #7
 80031da:	d107      	bne.n	80031ec <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 80031dc:	8afa      	ldrh	r2, [r7, #22]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	2201      	movs	r2, #1
 80031ea:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80031ec:	8afb      	ldrh	r3, [r7, #22]
 80031ee:	3301      	adds	r3, #1
 80031f0:	82fb      	strh	r3, [r7, #22]
 80031f2:	e172      	b.n	80034da <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3b10      	subs	r3, #16
 80031f8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d162      	bne.n	80032c6 <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	3b10      	subs	r3, #16
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d15c      	bne.n	80032c6 <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 800320c:	8afa      	ldrh	r2, [r7, #22]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	4413      	add	r3, r2
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	b2d9      	uxtb	r1, r3
 8003222:	8afa      	ldrh	r2, [r7, #22]
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	f1a1 0210 	sub.w	r2, r1, #16
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003236:	8afa      	ldrh	r2, [r7, #22]
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8003246:	8afa      	ldrh	r2, [r7, #22]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4413      	add	r3, r2
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 800325c:	8afa      	ldrh	r2, [r7, #22]
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	2201      	movs	r2, #1
 800326a:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 800326c:	8afb      	ldrh	r3, [r7, #22]
 800326e:	3301      	adds	r3, #1
 8003270:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	111b      	asrs	r3, r3, #4
 8003276:	2b06      	cmp	r3, #6
 8003278:	d125      	bne.n	80032c6 <generate_moves+0x2fe>
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	3b20      	subs	r3, #32
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d11f      	bne.n	80032c6 <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 8003286:	8afa      	ldrh	r2, [r7, #22]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b2d9      	uxtb	r1, r3
 800329c:	8afa      	ldrh	r2, [r7, #22]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	f1a1 0220 	sub.w	r2, r1, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 80032b0:	8afa      	ldrh	r2, [r7, #22]
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 80032c0:	8afb      	ldrh	r3, [r7, #22]
 80032c2:	3301      	adds	r3, #1
 80032c4:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3b0f      	subs	r3, #15
 80032ca:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d13a      	bne.n	8003348 <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3b0f      	subs	r3, #15
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d132      	bne.n	8003348 <generate_moves+0x380>
                        moves[n_moves].from = square;
 80032e2:	8afa      	ldrh	r2, [r7, #22]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	b2d9      	uxtb	r1, r3
 80032f8:	8afa      	ldrh	r2, [r7, #22]
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4413      	add	r3, r2
 8003304:	f1a1 020f 	sub.w	r2, r1, #15
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800330c:	8afa      	ldrh	r2, [r7, #22]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	4413      	add	r3, r2
 8003318:	2200      	movs	r2, #0
 800331a:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 800331c:	8afa      	ldrh	r2, [r7, #22]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4413      	add	r3, r2
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 8003332:	8afa      	ldrh	r2, [r7, #22]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	2201      	movs	r2, #1
 8003340:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	3301      	adds	r3, #1
 8003346:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	3b11      	subs	r3, #17
 800334c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 80c2 	bne.w	80034da <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3b11      	subs	r3, #17
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80b9 	bne.w	80034da <generate_moves+0x512>
                        moves[n_moves].from = square;
 8003368:	8afa      	ldrh	r2, [r7, #22]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	b2d9      	uxtb	r1, r3
 800337e:	8afa      	ldrh	r2, [r7, #22]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4413      	add	r3, r2
 800338a:	f1a1 0211 	sub.w	r2, r1, #17
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003392:	8afa      	ldrh	r2, [r7, #22]
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4413      	add	r3, r2
 800339e:	2200      	movs	r2, #0
 80033a0:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80033a2:	8afa      	ldrh	r2, [r7, #22]
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 80033b8:	8afa      	ldrh	r2, [r7, #22]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	2201      	movs	r2, #1
 80033c6:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80033c8:	8afb      	ldrh	r3, [r7, #22]
 80033ca:	3301      	adds	r3, #1
 80033cc:	82fb      	strh	r3, [r7, #22]
 80033ce:	e084      	b.n	80034da <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e076      	b.n	80034c4 <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 80033d6:	7b7a      	ldrb	r2, [r7, #13]
 80033d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033dc:	4946      	ldr	r1, [pc, #280]	; (80034f8 <generate_moves+0x530>)
 80033de:	00d2      	lsls	r2, r2, #3
 80033e0:	440a      	add	r2, r1
 80033e2:	4413      	add	r3, r2
 80033e4:	f993 3000 	ldrsb.w	r3, [r3]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 80033f2:	e05a      	b.n	80034aa <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 80033f4:	7bbb      	ldrb	r3, [r7, #14]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d121      	bne.n	8003442 <generate_moves+0x47a>
                        moves[n_moves].from = square;
 80033fe:	8afa      	ldrh	r2, [r7, #22]
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	4413      	add	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 8003410:	8afa      	ldrh	r2, [r7, #22]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	4413      	add	r3, r2
 800341c:	7bba      	ldrb	r2, [r7, #14]
 800341e:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003420:	8afa      	ldrh	r2, [r7, #22]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4413      	add	r3, r2
 800342c:	2200      	movs	r2, #0
 800342e:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	3301      	adds	r3, #1
 8003434:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 8003436:	7b7b      	ldrb	r3, [r7, #13]
 8003438:	4a30      	ldr	r2, [pc, #192]	; (80034fc <generate_moves+0x534>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d127      	bne.n	8003490 <generate_moves+0x4c8>
                        break;
 8003440:	e03a      	b.n	80034b8 <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 8003442:	7bbb      	ldrb	r3, [r7, #14]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003452:	429a      	cmp	r2, r3
 8003454:	d02f      	beq.n	80034b6 <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 8003456:	8afa      	ldrh	r2, [r7, #22]
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 8003468:	8afa      	ldrh	r2, [r7, #22]
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	7bba      	ldrb	r2, [r7, #14]
 8003476:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8003478:	8afa      	ldrh	r2, [r7, #22]
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	2200      	movs	r2, #0
 8003486:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 8003488:	8afb      	ldrh	r3, [r7, #22]
 800348a:	3301      	adds	r3, #1
 800348c:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 800348e:	e012      	b.n	80034b6 <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 8003490:	7b7a      	ldrb	r2, [r7, #13]
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4918      	ldr	r1, [pc, #96]	; (80034f8 <generate_moves+0x530>)
 8003498:	00d2      	lsls	r2, r2, #3
 800349a:	440a      	add	r2, r1
 800349c:	4413      	add	r3, r2
 800349e:	f993 3000 	ldrsb.w	r3, [r3]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	4413      	add	r3, r2
 80034a8:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d09f      	beq.n	80033f4 <generate_moves+0x42c>
 80034b4:	e000      	b.n	80034b8 <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80034b6:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80034b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	3301      	adds	r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c8:	7b7a      	ldrb	r2, [r7, #13]
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <generate_moves+0x538>)
 80034cc:	5c8a      	ldrb	r2, [r1, r2]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	db81      	blt.n	80033d6 <generate_moves+0x40e>
 80034d2:	e002      	b.n	80034da <generate_moves+0x512>
            continue;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <generate_moves+0x512>
            continue;
 80034d8:	bf00      	nop
    for(int square = 0; square < 128; square++){
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3301      	adds	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b7f      	cmp	r3, #127	; 0x7f
 80034e4:	f77f ad7a 	ble.w	8002fdc <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 80034e8:	8afb      	ldrh	r3, [r7, #22]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000004 	.word	0x20000004
 80034fc:	20000034 	.word	0x20000034
 8003500:	2000002c 	.word	0x2000002c

08003504 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 800350c:	210c      	movs	r1, #12
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f003 fb4c 	bl	8006bac <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200016c8 	.word	0x200016c8

08003528 <ws2812_init>:

void ws2812_init(){
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e010      	b.n	8003556 <ws2812_init+0x2e>
		if(i < 60)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b3b      	cmp	r3, #59	; 0x3b
 8003538:	dc05      	bgt.n	8003546 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <ws2812_init+0x48>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2100      	movs	r1, #0
 8003540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003544:	e004      	b.n	8003550 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <ws2812_init+0x48>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	211c      	movs	r1, #28
 800354c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3301      	adds	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f240 623b 	movw	r2, #1595	; 0x63b
 800355c:	4293      	cmp	r3, r2
 800355e:	dde9      	ble.n	8003534 <ws2812_init+0xc>
	}
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000950 	.word	0x20000950

08003574 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e065      	b.n	800364c <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	e05c      	b.n	8003640 <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8003590:	4933      	ldr	r1, [pc, #204]	; (8003660 <ws2812_update_pwm_data+0xec>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	00da      	lsls	r2, r3, #3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 80035a4:	482e      	ldr	r0, [pc, #184]	; (8003660 <ws2812_update_pwm_data+0xec>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	00d9      	lsls	r1, r3, #3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	440b      	add	r3, r1
 80035ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80035b8:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 80035ba:	4829      	ldr	r0, [pc, #164]	; (8003660 <ws2812_update_pwm_data+0xec>)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	00d9      	lsls	r1, r3, #3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	440b      	add	r3, r1
 80035c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035c8:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80035ca:	4313      	orrs	r3, r2
 80035cc:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e02f      	b.n	8003634 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 80035d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	fa42 f303 	asr.w	r3, r2, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d011      	beq.n	800360c <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <ws2812_update_pwm_data+0xf0>)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <ws2812_update_pwm_data+0xf4>)
 8003604:	214c      	movs	r1, #76	; 0x4c
 8003606:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800360a:	e010      	b.n	800362e <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <ws2812_update_pwm_data+0xf0>)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	4a10      	ldr	r2, [pc, #64]	; (8003668 <ws2812_update_pwm_data+0xf4>)
 8003628:	211c      	movs	r1, #28
 800362a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3301      	adds	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b17      	cmp	r3, #23
 8003638:	ddcc      	ble.n	80035d4 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3301      	adds	r3, #1
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b07      	cmp	r3, #7
 8003644:	dd9f      	ble.n	8003586 <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b07      	cmp	r3, #7
 8003650:	dd96      	ble.n	8003580 <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	200015c8 	.word	0x200015c8
 8003664:	2000003c 	.word	0x2000003c
 8003668:	20000950 	.word	0x20000950

0800366c <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8003674:	f7ff ff7e 	bl	8003574 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <ws2812_update_leds_from_data+0x28>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 800367e:	f240 633c 	movw	r3, #1596	; 0x63c
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <ws2812_update_leds_from_data+0x2c>)
 8003684:	210c      	movs	r1, #12
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f003 f8e0 	bl	800684c <HAL_TIM_PWM_Start_DMA>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200016c8 	.word	0x200016c8
 8003698:	20000950 	.word	0x20000950

0800369c <lighting_set_output>:
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <lighting_set_output+0x1c>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	200016cc 	.word	0x200016cc

080036bc <set_color>:
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
 80036ca:	79fa      	ldrb	r2, [r7, #7]
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <set_color+0x34>)
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	00d8      	lsls	r0, r3, #3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4403      	add	r3, r0
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	4905      	ldr	r1, [pc, #20]	; (80036f4 <set_color+0x38>)
 80036de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	200016cc 	.word	0x200016cc
 80036f4:	2000007c 	.word	0x2000007c

080036f8 <paint_board>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	e01a      	b.n	800373a <paint_board+0x42>
 8003704:	2300      	movs	r3, #0
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	e011      	b.n	800372e <paint_board+0x36>
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4053      	eors	r3, r2
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffca 	bl	80036bc <set_color>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b07      	cmp	r3, #7
 8003732:	ddea      	ble.n	800370a <paint_board+0x12>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3301      	adds	r3, #1
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b07      	cmp	r3, #7
 800373e:	dde1      	ble.n	8003704 <paint_board+0xc>
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <paint_valid_moves>:
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	f7ff f94b 	bl	80029f8 <engine_list_moves>
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e026      	b.n	80037b8 <paint_valid_moves+0x6e>
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4413      	add	r3, r2
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	429a      	cmp	r2, r3
 800377c:	d119      	bne.n	80037b2 <paint_valid_moves+0x68>
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	4413      	add	r3, r2
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	2202      	movs	r2, #2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7ff ff88 	bl	80036bc <set_color>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	dbd4      	blt.n	800376a <paint_valid_moves+0x20>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <paint_differences>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	e04e      	b.n	800387a <paint_differences+0xae>
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e045      	b.n	800386e <paint_differences+0xa2>
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <paint_differences+0xc0>)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4413      	add	r3, r2
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	fa42 f303 	asr.w	r3, r2, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <paint_differences+0x5a>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	b2da      	uxtb	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4413      	add	r3, r2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f904 	bl	8002a18 <engine_get_piece>
 8003810:	4603      	mov	r3, r0
 8003812:	2b06      	cmp	r3, #6
 8003814:	d107      	bne.n	8003826 <paint_differences+0x5a>
 8003816:	2205      	movs	r2, #5
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f7ff ff4e 	bl	80036bc <set_color>
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e020      	b.n	8003868 <paint_differences+0x9c>
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <paint_differences+0xc0>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	fa42 f303 	asr.w	r3, r2, r3
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d114      	bne.n	8003868 <paint_differences+0x9c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	b2da      	uxtb	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4413      	add	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f8e2 	bl	8002a18 <engine_get_piece>
 8003854:	4603      	mov	r3, r0
 8003856:	2b06      	cmp	r3, #6
 8003858:	d006      	beq.n	8003868 <paint_differences+0x9c>
 800385a:	2204      	movs	r2, #4
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68b8      	ldr	r0, [r7, #8]
 8003860:	f7ff ff2c 	bl	80036bc <set_color>
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3301      	adds	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b07      	cmp	r3, #7
 8003872:	ddb6      	ble.n	80037e2 <paint_differences+0x16>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b07      	cmp	r3, #7
 800387e:	ddad      	ble.n	80037dc <paint_differences+0x10>
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200016dc 	.word	0x200016dc

08003890 <paint_capture>:
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	2202      	movs	r2, #2
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff0c 	bl	80036bc <set_color>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <lighting_set_state>:
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <lighting_set_state+0x1c>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	7013      	strb	r3, [r2, #0]
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	200016c9 	.word	0x200016c9

080038d0 <lighting_piece_lifted_square>:
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <lighting_piece_lifted_square+0x1c>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	7013      	strb	r3, [r2, #0]
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	200016d0 	.word	0x200016d0

080038f0 <set_valid_moves>:
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	4a06      	ldr	r2, [pc, #24]	; (8003914 <set_valid_moves+0x24>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <set_valid_moves+0x28>)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200016d4 	.word	0x200016d4
 8003918:	200016d8 	.word	0x200016d8

0800391c <lighting_refresh>:
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
 8003920:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <lighting_refresh+0x8c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d83c      	bhi.n	80039a2 <lighting_refresh+0x86>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <lighting_refresh+0x14>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003941 	.word	0x08003941
 8003934:	08003947 	.word	0x08003947
 8003938:	08003979 	.word	0x08003979
 800393c:	08003983 	.word	0x08003983
 8003940:	f7ff feda 	bl	80036f8 <paint_board>
 8003944:	e02d      	b.n	80039a2 <lighting_refresh+0x86>
 8003946:	f7ff fed7 	bl	80036f8 <paint_board>
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <lighting_refresh+0x90>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <lighting_refresh+0x90>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	2203      	movs	r2, #3
 800395e:	4619      	mov	r1, r3
 8003960:	f7ff feac 	bl	80036bc <set_color>
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <lighting_refresh+0x90>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4a11      	ldr	r2, [pc, #68]	; (80039b0 <lighting_refresh+0x94>)
 800396a:	6811      	ldr	r1, [r2, #0]
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <lighting_refresh+0x98>)
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff feea 	bl	800374a <paint_valid_moves>
 8003976:	e014      	b.n	80039a2 <lighting_refresh+0x86>
 8003978:	f7ff febe 	bl	80036f8 <paint_board>
 800397c:	f7ff ff26 	bl	80037cc <paint_differences>
 8003980:	e00f      	b.n	80039a2 <lighting_refresh+0x86>
 8003982:	f7ff feb9 	bl	80036f8 <paint_board>
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <lighting_refresh+0x90>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <lighting_refresh+0x90>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff ff78 	bl	8003890 <paint_capture>
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200016c9 	.word	0x200016c9
 80039ac:	200016d0 	.word	0x200016d0
 80039b0:	200016d4 	.word	0x200016d4
 80039b4:	200016d8 	.word	0x200016d8

080039b8 <t_reed_scan_sensors>:

volatile uint8_t reed_data[8] = { 0 };



void t_reed_scan_sensors() {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0

	while (1) {
		for (int row = 0; row < 8; row++) {
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	e131      	b.n	8003c28 <t_reed_scan_sensors+0x270>
			HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	2101      	movs	r1, #1
 80039d4:	4897      	ldr	r0, [pc, #604]	; (8003c34 <t_reed_scan_sensors+0x27c>)
 80039d6:	f000 ffb1 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	2102      	movs	r1, #2
 80039ea:	4892      	ldr	r0, [pc, #584]	; (8003c34 <t_reed_scan_sensors+0x27c>)
 80039ec:	f000 ffa6 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	2101      	movs	r1, #1
 8003a00:	488d      	ldr	r0, [pc, #564]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003a02:	f000 ff9b 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	4889      	ldr	r0, [pc, #548]	; (8003c3c <t_reed_scan_sensors+0x284>)
 8003a18:	f000 ff90 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	4883      	ldr	r0, [pc, #524]	; (8003c3c <t_reed_scan_sensors+0x284>)
 8003a2e:	f000 ff85 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	487d      	ldr	r0, [pc, #500]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003a44:	f000 ff7a 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	4876      	ldr	r0, [pc, #472]	; (8003c34 <t_reed_scan_sensors+0x27c>)
 8003a5a:	f000 ff6f 	bl	800493c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a70:	4872      	ldr	r0, [pc, #456]	; (8003c3c <t_reed_scan_sensors+0x284>)
 8003a72:	f000 ff63 	bl	800493c <HAL_GPIO_WritePin>

			//for(int i = 0; i < 100; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
			vTaskDelay(50); // Lo uso para hacer más lenta toda la lectura
 8003a76:	2032      	movs	r0, #50	; 0x32
 8003a78:	f004 ff80 	bl	800897c <vTaskDelay>

			reed_data[row] = 0;
 8003a7c:	4a70      	ldr	r2, [pc, #448]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8003a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a8a:	486c      	ldr	r0, [pc, #432]	; (8003c3c <t_reed_scan_sensors+0x284>)
 8003a8c:	f000 ff3e 	bl	800490c <HAL_GPIO_ReadPin>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf14      	ite	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	2300      	moveq	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4a68      	ldr	r2, [pc, #416]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	b24b      	sxtb	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	4a63      	ldr	r2, [pc, #396]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	460a      	mov	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8003abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ac0:	485d      	ldr	r0, [pc, #372]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003ac2:	f000 ff23 	bl	800490c <HAL_GPIO_ReadPin>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <t_reed_scan_sensors+0x118>
 8003acc:	2102      	movs	r1, #2
 8003ace:	e000      	b.n	8003ad2 <t_reed_scan_sensors+0x11a>
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4a5b      	ldr	r2, [pc, #364]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	b25a      	sxtb	r2, r3
 8003ade:	b24b      	sxtb	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	b2d9      	uxtb	r1, r3
 8003ae6:	4a56      	ldr	r2, [pc, #344]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	460a      	mov	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8003af0:	2110      	movs	r1, #16
 8003af2:	4851      	ldr	r0, [pc, #324]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003af4:	f000 ff0a 	bl	800490c <HAL_GPIO_ReadPin>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <t_reed_scan_sensors+0x14a>
 8003afe:	2104      	movs	r1, #4
 8003b00:	e000      	b.n	8003b04 <t_reed_scan_sensors+0x14c>
 8003b02:	2100      	movs	r1, #0
 8003b04:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	b25a      	sxtb	r2, r3
 8003b10:	b24b      	sxtb	r3, r1
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	4a49      	ldr	r2, [pc, #292]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	460a      	mov	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8003b22:	2110      	movs	r1, #16
 8003b24:	4843      	ldr	r0, [pc, #268]	; (8003c34 <t_reed_scan_sensors+0x27c>)
 8003b26:	f000 fef1 	bl	800490c <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <t_reed_scan_sensors+0x17c>
 8003b30:	2108      	movs	r1, #8
 8003b32:	e000      	b.n	8003b36 <t_reed_scan_sensors+0x17e>
 8003b34:	2100      	movs	r1, #0
 8003b36:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	b24b      	sxtb	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	b2d9      	uxtb	r1, r3
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	460a      	mov	r2, r1
 8003b52:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8003b54:	2120      	movs	r1, #32
 8003b56:	4838      	ldr	r0, [pc, #224]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003b58:	f000 fed8 	bl	800490c <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <t_reed_scan_sensors+0x1ae>
 8003b62:	2110      	movs	r1, #16
 8003b64:	e000      	b.n	8003b68 <t_reed_scan_sensors+0x1b0>
 8003b66:	2100      	movs	r1, #0
 8003b68:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	b25a      	sxtb	r2, r3
 8003b74:	b24b      	sxtb	r3, r1
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	b2d9      	uxtb	r1, r3
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	460a      	mov	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8003b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b8a:	482c      	ldr	r0, [pc, #176]	; (8003c3c <t_reed_scan_sensors+0x284>)
 8003b8c:	f000 febe 	bl	800490c <HAL_GPIO_ReadPin>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <t_reed_scan_sensors+0x1e2>
 8003b96:	2120      	movs	r1, #32
 8003b98:	e000      	b.n	8003b9c <t_reed_scan_sensors+0x1e4>
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	b25a      	sxtb	r2, r3
 8003ba8:	b24b      	sxtb	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	b2d9      	uxtb	r1, r3
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8003bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bbe:	481e      	ldr	r0, [pc, #120]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003bc0:	f000 fea4 	bl	800490c <HAL_GPIO_ReadPin>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <t_reed_scan_sensors+0x216>
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	e000      	b.n	8003bd0 <t_reed_scan_sensors+0x218>
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b25a      	sxtb	r2, r3
 8003bdc:	b24b      	sxtb	r3, r1
 8003bde:	4313      	orrs	r3, r2
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	b2d9      	uxtb	r1, r3
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	460a      	mov	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8003bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bf2:	4811      	ldr	r0, [pc, #68]	; (8003c38 <t_reed_scan_sensors+0x280>)
 8003bf4:	f000 fe8a 	bl	800490c <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <t_reed_scan_sensors+0x24a>
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	e000      	b.n	8003c04 <t_reed_scan_sensors+0x24c>
 8003c02:	2100      	movs	r1, #0
 8003c04:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	b25a      	sxtb	r2, r3
 8003c10:	b24b      	sxtb	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	b2d9      	uxtb	r1, r3
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <t_reed_scan_sensors+0x288>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < 8; row++) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3301      	adds	r3, #1
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b07      	cmp	r3, #7
 8003c2c:	f77f aeca 	ble.w	80039c4 <t_reed_scan_sensors+0xc>
 8003c30:	e6c5      	b.n	80039be <t_reed_scan_sensors+0x6>
 8003c32:	bf00      	nop
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	200016dc 	.word	0x200016dc

08003c44 <Reset_Handler>:
 8003c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c7c <LoopFillZerobss+0x12>
 8003c48:	480d      	ldr	r0, [pc, #52]	; (8003c80 <LoopFillZerobss+0x16>)
 8003c4a:	490e      	ldr	r1, [pc, #56]	; (8003c84 <LoopFillZerobss+0x1a>)
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <LoopFillZerobss+0x1e>)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e002      	b.n	8003c58 <LoopCopyDataInit>

08003c52 <CopyDataInit>:
 8003c52:	58d4      	ldr	r4, [r2, r3]
 8003c54:	50c4      	str	r4, [r0, r3]
 8003c56:	3304      	adds	r3, #4

08003c58 <LoopCopyDataInit>:
 8003c58:	18c4      	adds	r4, r0, r3
 8003c5a:	428c      	cmp	r4, r1
 8003c5c:	d3f9      	bcc.n	8003c52 <CopyDataInit>
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <LoopFillZerobss+0x22>)
 8003c60:	4c0b      	ldr	r4, [pc, #44]	; (8003c90 <LoopFillZerobss+0x26>)
 8003c62:	2300      	movs	r3, #0
 8003c64:	e001      	b.n	8003c6a <LoopFillZerobss>

08003c66 <FillZerobss>:
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	3204      	adds	r2, #4

08003c6a <LoopFillZerobss>:
 8003c6a:	42a2      	cmp	r2, r4
 8003c6c:	d3fb      	bcc.n	8003c66 <FillZerobss>
 8003c6e:	f7fd fdcf 	bl	8001810 <SystemInit>
 8003c72:	f006 f941 	bl	8009ef8 <__libc_init_array>
 8003c76:	f7fc fe77 	bl	8000968 <main>
 8003c7a:	4770      	bx	lr
 8003c7c:	20018000 	.word	0x20018000
 8003c80:	20000000 	.word	0x20000000
 8003c84:	200000f0 	.word	0x200000f0
 8003c88:	0800a220 	.word	0x0800a220
 8003c8c:	200000f0 	.word	0x200000f0
 8003c90:	2000557c 	.word	0x2000557c

08003c94 <ADC_IRQHandler>:
 8003c94:	e7fe      	b.n	8003c94 <ADC_IRQHandler>
	...

08003c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <HAL_Init+0x40>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_Init+0x40>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_Init+0x40>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_Init+0x40>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f000 f8d8 	bl	8003e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc6:	200f      	movs	r0, #15
 8003cc8:	f7fd fce8 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ccc:	f7fd fb9c 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x20>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x24>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_IncTick+0x24>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000098 	.word	0x20000098
 8003d00:	200016e4 	.word	0x200016e4

08003d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return uwTick;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_GetTick+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	200016e4 	.word	0x200016e4

08003d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	60d3      	str	r3, [r2, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <__NVIC_GetPriorityGrouping+0x18>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0307 	and.w	r3, r3, #7
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db0b      	blt.n	8003daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4907      	ldr	r1, [pc, #28]	; (8003db8 <__NVIC_EnableIRQ+0x38>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2001      	movs	r0, #1
 8003da2:	fa00 f202 	lsl.w	r2, r0, r2
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	; (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	; (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f1c3 0307 	rsb	r3, r3, #7
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf28      	it	cs
 8003e2e:	2304      	movcs	r3, #4
 8003e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d902      	bls.n	8003e40 <NVIC_EncodePriority+0x30>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3b03      	subs	r3, #3
 8003e3e:	e000      	b.n	8003e42 <NVIC_EncodePriority+0x32>
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	401a      	ands	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	4313      	orrs	r3, r2
         );
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff4c 	bl	8003d1c <__NVIC_SetPriorityGrouping>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9e:	f7ff ff61 	bl	8003d64 <__NVIC_GetPriorityGrouping>
 8003ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f7ff ffb1 	bl	8003e10 <NVIC_EncodePriority>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff80 	bl	8003dbc <__NVIC_SetPriority>
}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff54 	bl	8003d80 <__NVIC_EnableIRQ>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003eec:	f7ff ff0a 	bl	8003d04 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e099      	b.n	8004030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1c:	e00f      	b.n	8003f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f1e:	f7ff fef1 	bl	8003d04 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d908      	bls.n	8003f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2203      	movs	r2, #3
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e078      	b.n	8004030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e8      	bne.n	8003f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <HAL_DMA_Init+0x158>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d107      	bne.n	8003fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d117      	bne.n	8004002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fa91 	bl	800450c <DMA_CheckFifoParam>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ffe:	2301      	movs	r3, #1
 8004000:	e016      	b.n	8004030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa48 	bl	80044a0 <DMA_CalcBaseAndBitshift>
 8004010:	4603      	mov	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	f010803f 	.word	0xf010803f

0800403c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Start_IT+0x26>
 800405e:	2302      	movs	r3, #2
 8004060:	e040      	b.n	80040e4 <HAL_DMA_Start_IT+0xa8>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d12f      	bne.n	80040d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f9da 	bl	8004444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	223f      	movs	r2, #63	; 0x3f
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0216 	orr.w	r2, r2, #22
 80040aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e005      	b.n	80040e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e00c      	b.n	8004124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2205      	movs	r2, #5
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800413c:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_DMA_IRQHandler+0x248>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a8e      	ldr	r2, [pc, #568]	; (800437c <HAL_DMA_IRQHandler+0x24c>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2208      	movs	r2, #8
 800415c:	409a      	lsls	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	2208      	movs	r2, #8
 800418a:	409a      	lsls	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	2201      	movs	r2, #1
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	2204      	movs	r2, #4
 80041d8:	409a      	lsls	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2204      	movs	r2, #4
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2210      	movs	r2, #16
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d043      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03c      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2210      	movs	r2, #16
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d018      	beq.n	8004272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d108      	bne.n	8004260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d024      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
 800425e:	e01f      	b.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
 8004270:	e016      	b.n	80042a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0208 	bic.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	2220      	movs	r2, #32
 80042a6:	409a      	lsls	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 808f 	beq.w	80043d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8087 	beq.w	80043d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2220      	movs	r2, #32
 80042c8:	409a      	lsls	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d136      	bne.n	8004348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0216 	bic.w	r2, r2, #22
 80042e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <HAL_DMA_IRQHandler+0x1da>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0208 	bic.w	r2, r2, #8
 8004318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	223f      	movs	r2, #63	; 0x3f
 8004320:	409a      	lsls	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07e      	beq.n	800443c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
        }
        return;
 8004346:	e079      	b.n	800443c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	2b00      	cmp	r3, #0
 800436a:	d031      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
 8004374:	e02c      	b.n	80043d0 <HAL_DMA_IRQHandler+0x2a0>
 8004376:	bf00      	nop
 8004378:	20000000 	.word	0x20000000
 800437c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d023      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
 8004390:	e01e      	b.n	80043d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10f      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0210 	bic.w	r2, r2, #16
 80043ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d032      	beq.n	800443e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2205      	movs	r2, #5
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	3301      	adds	r3, #1
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	429a      	cmp	r2, r3
 8004406:	d307      	bcc.n	8004418 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f2      	bne.n	80043fc <HAL_DMA_IRQHandler+0x2cc>
 8004416:	e000      	b.n	800441a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004418:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
 800443a:	e000      	b.n	800443e <HAL_DMA_IRQHandler+0x30e>
        return;
 800443c:	bf00      	nop
    }
  }
}
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d108      	bne.n	8004484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004482:	e007      	b.n	8004494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	3b10      	subs	r3, #16
 80044b0:	4a14      	ldr	r2, [pc, #80]	; (8004504 <DMA_CalcBaseAndBitshift+0x64>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <DMA_CalcBaseAndBitshift+0x68>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d909      	bls.n	80044e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	659a      	str	r2, [r3, #88]	; 0x58
 80044e0:	e007      	b.n	80044f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	aaaaaaab 	.word	0xaaaaaaab
 8004508:	0800a208 	.word	0x0800a208

0800450c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d11f      	bne.n	8004566 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d856      	bhi.n	80045da <DMA_CheckFifoParam+0xce>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <DMA_CheckFifoParam+0x28>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004545 	.word	0x08004545
 8004538:	08004557 	.word	0x08004557
 800453c:	08004545 	.word	0x08004545
 8004540:	080045db 	.word	0x080045db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d046      	beq.n	80045de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e043      	b.n	80045de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800455e:	d140      	bne.n	80045e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e03d      	b.n	80045e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456e:	d121      	bne.n	80045b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d837      	bhi.n	80045e6 <DMA_CheckFifoParam+0xda>
 8004576:	a201      	add	r2, pc, #4	; (adr r2, 800457c <DMA_CheckFifoParam+0x70>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	0800458d 	.word	0x0800458d
 8004580:	08004593 	.word	0x08004593
 8004584:	0800458d 	.word	0x0800458d
 8004588:	080045a5 	.word	0x080045a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e030      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d025      	beq.n	80045ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a2:	e022      	b.n	80045ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ac:	d11f      	bne.n	80045ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045b2:	e01c      	b.n	80045ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d903      	bls.n	80045c2 <DMA_CheckFifoParam+0xb6>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d003      	beq.n	80045c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045c0:	e018      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      break;
 80045c6:	e015      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      break;
 80045d8:	e00b      	b.n	80045f2 <DMA_CheckFifoParam+0xe6>
      break;
 80045da:	bf00      	nop
 80045dc:	e00a      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045de:	bf00      	nop
 80045e0:	e008      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045e2:	bf00      	nop
 80045e4:	e006      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
    }
  } 
  
  return status; 
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop

08004604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e159      	b.n	80048d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	f040 8148 	bne.w	80048ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d005      	beq.n	8004656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004652:	2b02      	cmp	r3, #2
 8004654:	d130      	bne.n	80046b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800468c:	2201      	movs	r2, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 0201 	and.w	r2, r3, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d017      	beq.n	80046f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d123      	bne.n	8004748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	220f      	movs	r2, #15
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	08da      	lsrs	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3208      	adds	r2, #8
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80a2 	beq.w	80048ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b57      	ldr	r3, [pc, #348]	; (80048ec <HAL_GPIO_Init+0x2e8>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	4a56      	ldr	r2, [pc, #344]	; (80048ec <HAL_GPIO_Init+0x2e8>)
 8004794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004798:	6453      	str	r3, [r2, #68]	; 0x44
 800479a:	4b54      	ldr	r3, [pc, #336]	; (80048ec <HAL_GPIO_Init+0x2e8>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a6:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_GPIO_Init+0x2ec>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a49      	ldr	r2, [pc, #292]	; (80048f4 <HAL_GPIO_Init+0x2f0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d019      	beq.n	8004806 <HAL_GPIO_Init+0x202>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a48      	ldr	r2, [pc, #288]	; (80048f8 <HAL_GPIO_Init+0x2f4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0x1fe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a47      	ldr	r2, [pc, #284]	; (80048fc <HAL_GPIO_Init+0x2f8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_GPIO_Init+0x2fc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_Init+0x1f6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a45      	ldr	r2, [pc, #276]	; (8004904 <HAL_GPIO_Init+0x300>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_Init+0x1f2>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e008      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047f6:	2307      	movs	r3, #7
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e004      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047fe:	2302      	movs	r3, #2
 8004800:	e002      	b.n	8004808 <HAL_GPIO_Init+0x204>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_GPIO_Init+0x204>
 8004806:	2300      	movs	r3, #0
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f002 0203 	and.w	r2, r2, #3
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	4093      	lsls	r3, r2
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004818:	4935      	ldr	r1, [pc, #212]	; (80048f0 <HAL_GPIO_Init+0x2ec>)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	3302      	adds	r3, #2
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_GPIO_Init+0x304>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800484a:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <HAL_GPIO_Init+0x304>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_GPIO_Init+0x304>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <HAL_GPIO_Init+0x304>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_GPIO_Init+0x304>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800489e:	4a1a      	ldr	r2, [pc, #104]	; (8004908 <HAL_GPIO_Init+0x304>)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a4:	4b18      	ldr	r3, [pc, #96]	; (8004908 <HAL_GPIO_Init+0x304>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c8:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <HAL_GPIO_Init+0x304>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3301      	adds	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	f67f aea2 	bls.w	8004620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40013800 	.word	0x40013800
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020800 	.word	0x40020800
 8004900:	40020c00 	.word	0x40020c00
 8004904:	40021000 	.word	0x40021000
 8004908:	40013c00 	.word	0x40013c00

0800490c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	e001      	b.n	800492e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
 8004948:	4613      	mov	r3, r2
 800494a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800494c:	787b      	ldrb	r3, [r7, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004958:	e003      	b.n	8004962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800495a:	887b      	ldrh	r3, [r7, #2]
 800495c:	041a      	lsls	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	619a      	str	r2, [r3, #24]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e12b      	b.n	8004bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fd62 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d4:	f001 f888 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80049d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4a81      	ldr	r2, [pc, #516]	; (8004be4 <HAL_I2C_Init+0x274>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d807      	bhi.n	80049f4 <HAL_I2C_Init+0x84>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a80      	ldr	r2, [pc, #512]	; (8004be8 <HAL_I2C_Init+0x278>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bf94      	ite	ls
 80049ec:	2301      	movls	r3, #1
 80049ee:	2300      	movhi	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e006      	b.n	8004a02 <HAL_I2C_Init+0x92>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a7d      	ldr	r2, [pc, #500]	; (8004bec <HAL_I2C_Init+0x27c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bf94      	ite	ls
 80049fc:	2301      	movls	r3, #1
 80049fe:	2300      	movhi	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0e7      	b.n	8004bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a78      	ldr	r2, [pc, #480]	; (8004bf0 <HAL_I2C_Init+0x280>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_I2C_Init+0x274>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d802      	bhi.n	8004a44 <HAL_I2C_Init+0xd4>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3301      	adds	r3, #1
 8004a42:	e009      	b.n	8004a58 <HAL_I2C_Init+0xe8>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	4a69      	ldr	r2, [pc, #420]	; (8004bf4 <HAL_I2C_Init+0x284>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	3301      	adds	r3, #1
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	495c      	ldr	r1, [pc, #368]	; (8004be4 <HAL_I2C_Init+0x274>)
 8004a74:	428b      	cmp	r3, r1
 8004a76:	d819      	bhi.n	8004aac <HAL_I2C_Init+0x13c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1e59      	subs	r1, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a8c:	400b      	ands	r3, r1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_I2C_Init+0x138>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1e59      	subs	r1, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa6:	e051      	b.n	8004b4c <HAL_I2C_Init+0x1dc>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	e04f      	b.n	8004b4c <HAL_I2C_Init+0x1dc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d111      	bne.n	8004ad8 <HAL_I2C_Init+0x168>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e58      	subs	r0, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	440b      	add	r3, r1
 8004ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e012      	b.n	8004afe <HAL_I2C_Init+0x18e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	1e58      	subs	r0, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	0099      	lsls	r1, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aee:	3301      	adds	r3, #1
 8004af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Init+0x196>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e022      	b.n	8004b4c <HAL_I2C_Init+0x1dc>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <HAL_I2C_Init+0x1bc>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1e58      	subs	r0, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	440b      	add	r3, r1
 8004b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	e00f      	b.n	8004b4c <HAL_I2C_Init+0x1dc>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	0099      	lsls	r1, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	6809      	ldr	r1, [r1, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6911      	ldr	r1, [r2, #16]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	000186a0 	.word	0x000186a0
 8004be8:	001e847f 	.word	0x001e847f
 8004bec:	003d08ff 	.word	0x003d08ff
 8004bf0:	431bde83 	.word	0x431bde83
 8004bf4:	10624dd3 	.word	0x10624dd3

08004bf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	460b      	mov	r3, r1
 8004c06:	817b      	strh	r3, [r7, #10]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c0c:	f7ff f87a 	bl	8003d04 <HAL_GetTick>
 8004c10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f040 80e0 	bne.w	8004de0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2319      	movs	r3, #25
 8004c26:	2201      	movs	r2, #1
 8004c28:	4970      	ldr	r1, [pc, #448]	; (8004dec <HAL_I2C_Master_Transmit+0x1f4>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f964 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0d3      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_I2C_Master_Transmit+0x50>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0cc      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d007      	beq.n	8004c6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a50      	ldr	r2, [pc, #320]	; (8004df0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6a3a      	ldr	r2, [r7, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f89c 	bl	8004df4 <I2C_MasterRequestWrite>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e08d      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cdc:	e066      	b.n	8004dac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	6a39      	ldr	r1, [r7, #32]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f9de 	bl	80050a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d107      	bne.n	8004d06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06b      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d11b      	bne.n	8004d80 <HAL_I2C_Master_Transmit+0x188>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	6a39      	ldr	r1, [r7, #32]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f9ce 	bl	8005126 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d107      	bne.n	8004da8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e01a      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d194      	bne.n	8004cde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	00100002 	.word	0x00100002
 8004df0:	ffff0000 	.word	0xffff0000

08004df4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	460b      	mov	r3, r1
 8004e02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d006      	beq.n	8004e1e <I2C_MasterRequestWrite+0x2a>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d003      	beq.n	8004e1e <I2C_MasterRequestWrite+0x2a>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e1c:	d108      	bne.n	8004e30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e00b      	b.n	8004e48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	2b12      	cmp	r3, #18
 8004e36:	d107      	bne.n	8004e48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f84f 	bl	8004ef8 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6e:	d103      	bne.n	8004e78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e035      	b.n	8004ee8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e84:	d108      	bne.n	8004e98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e01b      	b.n	8004ed0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e98:	897b      	ldrh	r3, [r7, #10]
 8004e9a:	11db      	asrs	r3, r3, #7
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 0306 	and.w	r3, r3, #6
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f063 030f 	orn	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <I2C_MasterRequestWrite+0xfc>)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f875 	bl	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e010      	b.n	8004ee8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ec6:	897b      	ldrh	r3, [r7, #10]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <I2C_MasterRequestWrite+0x100>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f865 	bl	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	00010008 	.word	0x00010008
 8004ef4:	00010002 	.word	0x00010002

08004ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f08:	e025      	b.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d021      	beq.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe fef7 	bl	8003d04 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e023      	b.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10d      	bne.n	8004f7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	e00c      	b.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	43da      	mvns	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d0b6      	beq.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb4:	e051      	b.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d123      	bne.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e046      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d021      	beq.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005016:	f7fe fe75 	bl	8003d04 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d116      	bne.n	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e020      	b.n	800509c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10c      	bne.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e00b      	b.n	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d18d      	bne.n	8004fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b0:	e02d      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f878 	bl	80051a8 <I2C_IsAcknowledgeFailed>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e02d      	b.n	800511e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fe fe1b 	bl	8003d04 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e007      	b.n	800511e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d1ca      	bne.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005132:	e02d      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f837 	bl	80051a8 <I2C_IsAcknowledgeFailed>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e02d      	b.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d021      	beq.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fe fdda 	bl	8003d04 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d116      	bne.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e007      	b.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d1ca      	bne.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d11b      	bne.n	80051f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e267      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d075      	beq.n	8005312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005226:	4b88      	ldr	r3, [pc, #544]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b04      	cmp	r3, #4
 8005230:	d00c      	beq.n	800524c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005232:	4b85      	ldr	r3, [pc, #532]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800523a:	2b08      	cmp	r3, #8
 800523c:	d112      	bne.n	8005264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523e:	4b82      	ldr	r3, [pc, #520]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524a:	d10b      	bne.n	8005264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	4b7e      	ldr	r3, [pc, #504]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05b      	beq.n	8005310 <HAL_RCC_OscConfig+0x108>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d157      	bne.n	8005310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e242      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d106      	bne.n	800527c <HAL_RCC_OscConfig+0x74>
 800526e:	4b76      	ldr	r3, [pc, #472]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a75      	ldr	r2, [pc, #468]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e01d      	b.n	80052b8 <HAL_RCC_OscConfig+0xb0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x98>
 8005286:	4b70      	ldr	r3, [pc, #448]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6f      	ldr	r2, [pc, #444]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800528c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4b6d      	ldr	r3, [pc, #436]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a6c      	ldr	r2, [pc, #432]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0xb0>
 80052a0:	4b69      	ldr	r3, [pc, #420]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a68      	ldr	r2, [pc, #416]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	4b66      	ldr	r3, [pc, #408]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a65      	ldr	r2, [pc, #404]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80052b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d013      	beq.n	80052e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fe fd20 	bl	8003d04 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c8:	f7fe fd1c 	bl	8003d04 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	; 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e207      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b5b      	ldr	r3, [pc, #364]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0xc0>
 80052e6:	e014      	b.n	8005312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fd0c 	bl	8003d04 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fe fd08 	bl	8003d04 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1f3      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005302:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0xe8>
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d063      	beq.n	80053e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531e:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532a:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005332:	2b08      	cmp	r3, #8
 8005334:	d11c      	bne.n	8005370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d116      	bne.n	8005370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	4b41      	ldr	r3, [pc, #260]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_RCC_OscConfig+0x152>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e1c7      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535a:	4b3b      	ldr	r3, [pc, #236]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4937      	ldr	r1, [pc, #220]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536e:	e03a      	b.n	80053e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005378:	4b34      	ldr	r3, [pc, #208]	; (800544c <HAL_RCC_OscConfig+0x244>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fe fcc1 	bl	8003d04 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005386:	f7fe fcbd 	bl	8003d04 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e1a8      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b28      	ldr	r3, [pc, #160]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4925      	ldr	r1, [pc, #148]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
 80053b8:	e015      	b.n	80053e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x244>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fe fca0 	bl	8003d04 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c8:	f7fe fc9c 	bl	8003d04 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e187      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d036      	beq.n	8005460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fa:	4b15      	ldr	r3, [pc, #84]	; (8005450 <HAL_RCC_OscConfig+0x248>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fe fc80 	bl	8003d04 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005408:	f7fe fc7c 	bl	8003d04 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e167      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_OscConfig+0x240>)
 800541c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x200>
 8005426:	e01b      	b.n	8005460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_OscConfig+0x248>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542e:	f7fe fc69 	bl	8003d04 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005434:	e00e      	b.n	8005454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005436:	f7fe fc65 	bl	8003d04 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d907      	bls.n	8005454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e150      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
 8005448:	40023800 	.word	0x40023800
 800544c:	42470000 	.word	0x42470000
 8005450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005454:	4b88      	ldr	r3, [pc, #544]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ea      	bne.n	8005436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8097 	beq.w	800559c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005472:	4b81      	ldr	r3, [pc, #516]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	4b7d      	ldr	r3, [pc, #500]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	4a7c      	ldr	r2, [pc, #496]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
 800548e:	4b7a      	ldr	r3, [pc, #488]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549a:	2301      	movs	r3, #1
 800549c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549e:	4b77      	ldr	r3, [pc, #476]	; (800567c <HAL_RCC_OscConfig+0x474>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d118      	bne.n	80054dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054aa:	4b74      	ldr	r3, [pc, #464]	; (800567c <HAL_RCC_OscConfig+0x474>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a73      	ldr	r2, [pc, #460]	; (800567c <HAL_RCC_OscConfig+0x474>)
 80054b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b6:	f7fe fc25 	bl	8003d04 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fe fc21 	bl	8003d04 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e10c      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	4b6a      	ldr	r3, [pc, #424]	; (800567c <HAL_RCC_OscConfig+0x474>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0x2ea>
 80054e4:	4b64      	ldr	r3, [pc, #400]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4a63      	ldr	r2, [pc, #396]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6713      	str	r3, [r2, #112]	; 0x70
 80054f0:	e01c      	b.n	800552c <HAL_RCC_OscConfig+0x324>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d10c      	bne.n	8005514 <HAL_RCC_OscConfig+0x30c>
 80054fa:	4b5f      	ldr	r3, [pc, #380]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4a5e      	ldr	r2, [pc, #376]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005500:	f043 0304 	orr.w	r3, r3, #4
 8005504:	6713      	str	r3, [r2, #112]	; 0x70
 8005506:	4b5c      	ldr	r3, [pc, #368]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	4a5b      	ldr	r2, [pc, #364]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	6713      	str	r3, [r2, #112]	; 0x70
 8005512:	e00b      	b.n	800552c <HAL_RCC_OscConfig+0x324>
 8005514:	4b58      	ldr	r3, [pc, #352]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a57      	ldr	r2, [pc, #348]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
 8005520:	4b55      	ldr	r3, [pc, #340]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	4a54      	ldr	r2, [pc, #336]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005526:	f023 0304 	bic.w	r3, r3, #4
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005534:	f7fe fbe6 	bl	8003d04 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	e00a      	b.n	8005552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553c:	f7fe fbe2 	bl	8003d04 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0cb      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005552:	4b49      	ldr	r3, [pc, #292]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0ee      	beq.n	800553c <HAL_RCC_OscConfig+0x334>
 800555e:	e014      	b.n	800558a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005560:	f7fe fbd0 	bl	8003d04 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005566:	e00a      	b.n	800557e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005568:	f7fe fbcc 	bl	8003d04 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e0b5      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557e:	4b3e      	ldr	r3, [pc, #248]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1ee      	bne.n	8005568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d105      	bne.n	800559c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005590:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	4a38      	ldr	r2, [pc, #224]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80a1 	beq.w	80056e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d05c      	beq.n	800566c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d141      	bne.n	800563e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_OscConfig+0x478>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c0:	f7fe fba0 	bl	8003d04 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fe fb9c 	bl	8003d04 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e087      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055da:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	019b      	lsls	r3, r3, #6
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	3b01      	subs	r3, #1
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	491b      	ldr	r1, [pc, #108]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HAL_RCC_OscConfig+0x478>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fe fb75 	bl	8003d04 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561e:	f7fe fb71 	bl	8003d04 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e05c      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x416>
 800563c:	e054      	b.n	80056e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_OscConfig+0x478>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fe fb5e 	bl	8003d04 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564c:	f7fe fb5a 	bl	8003d04 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e045      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_RCC_OscConfig+0x470>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x444>
 800566a:	e03d      	b.n	80056e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d107      	bne.n	8005684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e038      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
 8005678:	40023800 	.word	0x40023800
 800567c:	40007000 	.word	0x40007000
 8005680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <HAL_RCC_OscConfig+0x4ec>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d028      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d121      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d11a      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b4:	4013      	ands	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056bc:	4293      	cmp	r3, r2
 80056be:	d111      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	3b01      	subs	r3, #1
 80056ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800

080056f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0cc      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800570c:	4b68      	ldr	r3, [pc, #416]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d90c      	bls.n	8005734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	4b63      	ldr	r3, [pc, #396]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0b8      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800574c:	4b59      	ldr	r3, [pc, #356]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a58      	ldr	r2, [pc, #352]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005764:	4b53      	ldr	r3, [pc, #332]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4a52      	ldr	r2, [pc, #328]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800576e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005770:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	494d      	ldr	r1, [pc, #308]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d044      	beq.n	8005818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d107      	bne.n	80057a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d119      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e07f      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d003      	beq.n	80057b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b6:	4b3f      	ldr	r3, [pc, #252]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e06f      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c6:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e067      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d6:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 0203 	bic.w	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	4934      	ldr	r1, [pc, #208]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e8:	f7fe fa8c 	bl	8003d04 <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f0:	f7fe fa88 	bl	8003d04 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e04f      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 020c 	and.w	r2, r3, #12
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	429a      	cmp	r2, r3
 8005816:	d1eb      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d20c      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e032      	b.n	80058a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800584c:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4916      	ldr	r1, [pc, #88]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	490e      	ldr	r1, [pc, #56]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800587e:	f000 f821 	bl	80058c4 <HAL_RCC_GetSysClockFreq>
 8005882:	4602      	mov	r2, r0
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	490a      	ldr	r1, [pc, #40]	; (80058b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	5ccb      	ldrb	r3, [r1, r3]
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <HAL_RCC_ClockConfig+0x1c8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fb fefc 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023c00 	.word	0x40023c00
 80058b4:	40023800 	.word	0x40023800
 80058b8:	0800a1f0 	.word	0x0800a1f0
 80058bc:	20000000 	.word	0x20000000
 80058c0:	20000094 	.word	0x20000094

080058c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c8:	b094      	sub	sp, #80	; 0x50
 80058ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
 80058d0:	2300      	movs	r3, #0
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	2300      	movs	r3, #0
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058dc:	4b79      	ldr	r3, [pc, #484]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d00d      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0x40>
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	f200 80e1 	bhi.w	8005ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x34>
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d003      	beq.n	80058fe <HAL_RCC_GetSysClockFreq+0x3a>
 80058f6:	e0db      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f8:	4b73      	ldr	r3, [pc, #460]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058fc:	e0db      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fe:	4b73      	ldr	r3, [pc, #460]	; (8005acc <HAL_RCC_GetSysClockFreq+0x208>)
 8005900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005902:	e0d8      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005904:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800590e:	4b6d      	ldr	r3, [pc, #436]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d063      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591a:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	099b      	lsrs	r3, r3, #6
 8005920:	2200      	movs	r2, #0
 8005922:	63bb      	str	r3, [r7, #56]	; 0x38
 8005924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	633b      	str	r3, [r7, #48]	; 0x30
 800592e:	2300      	movs	r3, #0
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	f04f 0000 	mov.w	r0, #0
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	0159      	lsls	r1, r3, #5
 8005944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005948:	0150      	lsls	r0, r2, #5
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4621      	mov	r1, r4
 8005950:	1a51      	subs	r1, r2, r1
 8005952:	6139      	str	r1, [r7, #16]
 8005954:	4629      	mov	r1, r5
 8005956:	eb63 0301 	sbc.w	r3, r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	018b      	lsls	r3, r1, #6
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005972:	4651      	mov	r1, sl
 8005974:	018a      	lsls	r2, r1, #6
 8005976:	4651      	mov	r1, sl
 8005978:	ebb2 0801 	subs.w	r8, r2, r1
 800597c:	4659      	mov	r1, fp
 800597e:	eb63 0901 	sbc.w	r9, r3, r1
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800598e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005996:	4690      	mov	r8, r2
 8005998:	4699      	mov	r9, r3
 800599a:	4623      	mov	r3, r4
 800599c:	eb18 0303 	adds.w	r3, r8, r3
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	462b      	mov	r3, r5
 80059a4:	eb49 0303 	adc.w	r3, r9, r3
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059b6:	4629      	mov	r1, r5
 80059b8:	024b      	lsls	r3, r1, #9
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059c0:	4621      	mov	r1, r4
 80059c2:	024a      	lsls	r2, r1, #9
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	2200      	movs	r2, #0
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d4:	f7fa fc04 	bl	80001e0 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4613      	mov	r3, r2
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	e058      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	2200      	movs	r2, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	4611      	mov	r1, r2
 80059ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	2300      	movs	r3, #0
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
 80059f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059fc:	4642      	mov	r2, r8
 80059fe:	464b      	mov	r3, r9
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	0159      	lsls	r1, r3, #5
 8005a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0e:	0150      	lsls	r0, r2, #5
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4641      	mov	r1, r8
 8005a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a34:	ebb2 040a 	subs.w	r4, r2, sl
 8005a38:	eb63 050b 	sbc.w	r5, r3, fp
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	00eb      	lsls	r3, r5, #3
 8005a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a4a:	00e2      	lsls	r2, r4, #3
 8005a4c:	4614      	mov	r4, r2
 8005a4e:	461d      	mov	r5, r3
 8005a50:	4643      	mov	r3, r8
 8005a52:	18e3      	adds	r3, r4, r3
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	464b      	mov	r3, r9
 8005a58:	eb45 0303 	adc.w	r3, r5, r3
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	028b      	lsls	r3, r1, #10
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a74:	4621      	mov	r1, r4
 8005a76:	028a      	lsls	r2, r1, #10
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	2200      	movs	r2, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	61fa      	str	r2, [r7, #28]
 8005a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a88:	f7fa fbaa 	bl	80001e0 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3750      	adds	r7, #80	; 0x50
 8005abc:	46bd      	mov	sp, r7
 8005abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	007a1200 	.word	0x007a1200

08005ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000000 	.word	0x20000000

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aec:	f7ff fff0 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0a9b      	lsrs	r3, r3, #10
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4903      	ldr	r1, [pc, #12]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800a200 	.word	0x0800a200

08005b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0203 	and.w	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <HAL_RCC_GetClockConfig+0x60>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0207 	and.w	r2, r3, #7
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40023c00 	.word	0x40023c00

08005b74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d035      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b9c:	4b67      	ldr	r3, [pc, #412]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fe f8af 	bl	8003d04 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005baa:	f7fe f8ab 	bl	8003d04 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0ba      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bbc:	4b60      	ldr	r3, [pc, #384]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f0      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	019a      	lsls	r2, r3, #6
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	071b      	lsls	r3, r3, #28
 8005bd4:	495a      	ldr	r1, [pc, #360]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bdc:	4b57      	ldr	r3, [pc, #348]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be2:	f7fe f88f 	bl	8003d04 <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bea:	f7fe f88b 	bl	8003d04 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e09a      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bfc:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8083 	beq.w	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	4b49      	ldr	r3, [pc, #292]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	4a48      	ldr	r2, [pc, #288]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6413      	str	r3, [r2, #64]	; 0x40
 8005c26:	4b46      	ldr	r3, [pc, #280]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c32:	4b44      	ldr	r3, [pc, #272]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a43      	ldr	r2, [pc, #268]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3e:	f7fe f861 	bl	8003d04 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fe f85d 	bl	8003d04 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e06c      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c58:	4b3a      	ldr	r3, [pc, #232]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d028      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c8c:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c98:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c9e:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d114      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005caa:	f7fe f82b 	bl	8003d04 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fe f827 	bl	8003d04 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e034      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ee      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce0:	d10d      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ce2:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	4912      	ldr	r1, [pc, #72]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]
 8005cfc:	e005      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d08:	6093      	str	r3, [r2, #8]
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d16:	490a      	ldr	r1, [pc, #40]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7c1a      	ldrb	r2, [r3, #16]
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	42470068 	.word	0x42470068
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40007000 	.word	0x40007000
 8005d48:	42470e40 	.word	0x42470e40
 8005d4c:	424711e0 	.word	0x424711e0

08005d50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e066      	b.n	8005e34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7f5b      	ldrb	r3, [r3, #29]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fb fbba 	bl	80014f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	22ca      	movs	r2, #202	; 0xca
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2253      	movs	r2, #83	; 0x53
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbb0 	bl	80064f8 <RTC_EnterInitMode>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d12c      	bne.n	8005dfc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6899      	ldr	r1, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68d2      	ldr	r2, [r2, #12]
 8005ddc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6919      	ldr	r1, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	041a      	lsls	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fbb7 	bl	8006566 <RTC_ExitInitMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	7f1b      	ldrb	r3, [r3, #28]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_RTC_SetTime+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e087      	b.n	8005f68 <HAL_RTC_SetTime+0x12c>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2202      	movs	r2, #2
 8005e62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d126      	bne.n	8005eb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fb94 	bl	80065b0 <RTC_ByteToBcd2>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fb8d 	bl	80065b0 <RTC_ByteToBcd2>
 8005e96:	4603      	mov	r3, r0
 8005e98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	789b      	ldrb	r3, [r3, #2]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb85 	bl	80065b0 <RTC_ByteToBcd2>
 8005ea6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ea8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e018      	b.n	8005eea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ed8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ede:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	22ca      	movs	r2, #202	; 0xca
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2253      	movs	r2, #83	; 0x53
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fafc 	bl	80064f8 <RTC_EnterInitMode>
 8005f00:	4603      	mov	r3, r0
 8005f02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d120      	bne.n	8005f4c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6899      	ldr	r1, [r3, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fb0f 	bl	8006566 <RTC_ExitInitMode>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	771a      	strb	r2, [r3, #28]

  return status;
 8005f66:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd90      	pop	{r4, r7, pc}

08005f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	7f1b      	ldrb	r3, [r3, #28]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_RTC_SetDate+0x1c>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e071      	b.n	8006070 <HAL_RTC_SetDate+0x100>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2202      	movs	r2, #2
 8005f96:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10e      	bne.n	8005fbc <HAL_RTC_SetDate+0x4c>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	f023 0310 	bic.w	r3, r3, #16
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	330a      	adds	r3, #10
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11c      	bne.n	8005ffc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 faf2 	bl	80065b0 <RTC_ByteToBcd2>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 faeb 	bl	80065b0 <RTC_ByteToBcd2>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	789b      	ldrb	r3, [r3, #2]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fae3 	bl	80065b0 <RTC_ByteToBcd2>
 8005fea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e00e      	b.n	800601a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	78db      	ldrb	r3, [r3, #3]
 8006000:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006008:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800600e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	22ca      	movs	r2, #202	; 0xca
 8006020:	625a      	str	r2, [r3, #36]	; 0x24
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2253      	movs	r2, #83	; 0x53
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fa64 	bl	80064f8 <RTC_EnterInitMode>
 8006030:	4603      	mov	r3, r0
 8006032:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006034:	7cfb      	ldrb	r3, [r7, #19]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006044:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006048:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fa8b 	bl	8006566 <RTC_ExitInitMode>
 8006050:	4603      	mov	r3, r0
 8006052:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	771a      	strb	r2, [r3, #28]

  return status;
 800606e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	bd90      	pop	{r4, r7, pc}

08006078 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006084:	4b9a      	ldr	r3, [pc, #616]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a9a      	ldr	r2, [pc, #616]	; (80062f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0adb      	lsrs	r3, r3, #11
 8006090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006094:	fb02 f303 	mul.w	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	7f1b      	ldrb	r3, [r3, #28]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_RTC_SetAlarm_IT+0x36>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e11c      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x270>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2202      	movs	r2, #2
 80060b8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d137      	bne.n	8006130 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fa69 	bl	80065b0 <RTC_ByteToBcd2>
 80060de:	4603      	mov	r3, r0
 80060e0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fa62 	bl	80065b0 <RTC_ByteToBcd2>
 80060ec:	4603      	mov	r3, r0
 80060ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80060f0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	789b      	ldrb	r3, [r3, #2]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa5a 	bl	80065b0 <RTC_ByteToBcd2>
 80060fc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	78db      	ldrb	r3, [r3, #3]
 8006106:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006108:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa4c 	bl	80065b0 <RTC_ByteToBcd2>
 8006118:	4603      	mov	r3, r0
 800611a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800611c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006124:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800612a:	4313      	orrs	r3, r2
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e023      	b.n	8006178 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006150:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006156:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800615e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006166:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006168:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800616e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006174:	4313      	orrs	r3, r2
 8006176:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006180:	4313      	orrs	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	22ca      	movs	r2, #202	; 0xca
 800618a:	625a      	str	r2, [r3, #36]	; 0x24
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2253      	movs	r2, #83	; 0x53
 8006192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619c:	d141      	bne.n	8006222 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ac:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80061be:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	617a      	str	r2, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2203      	movs	r2, #3
 80061d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e082      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0e7      	beq.n	80061c0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800620e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	e04b      	b.n	80062ba <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006230:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006242:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2a      	ldr	r2, [pc, #168]	; (80062f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	0adb      	lsrs	r3, r3, #11
 8006250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	1e5a      	subs	r2, r3, #1
 800625e:	617a      	str	r2, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2203      	movs	r2, #3
 8006270:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e035      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0e7      	beq.n	800625a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80062c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3724      	adds	r7, #36	; 0x24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}
 80062f0:	20000000 	.word	0x20000000
 80062f4:	10624dd3 	.word	0x10624dd3
 80062f8:	40013c00 	.word	0x40013c00

080062fc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006318:	d10e      	bne.n	8006338 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e00d      	b.n	8006354 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633e:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	0d9b      	lsrs	r3, r3, #22
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	0e1b      	lsrs	r3, r3, #24
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d125      	bne.n	8006410 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f90e 	bl	80065ea <RTC_Bcd2ToByte>
 80063ce:	4603      	mov	r3, r0
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f905 	bl	80065ea <RTC_Bcd2ToByte>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	789b      	ldrb	r3, [r3, #2]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f8fc 	bl	80065ea <RTC_Bcd2ToByte>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f8f2 	bl	80065ea <RTC_Bcd2ToByte>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d012      	beq.n	8006458 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fa fdc1 	bl	8000fc8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006456:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8d4 	bl	8006622 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f462 7220 	orn	r2, r2, #640	; 0x280
 800648a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <HAL_RTC_AlarmIRQHandler+0x88>)
 800648e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006492:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	775a      	strb	r2, [r3, #29]
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40013c00 	.word	0x40013c00

080064a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064c4:	f7fd fc1e 	bl	8003d04 <HAL_GetTick>
 80064c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064ca:	e009      	b.n	80064e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064cc:	f7fd fc1a 	bl	8003d04 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d901      	bls.n	80064e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e007      	b.n	80064f0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0ee      	beq.n	80064cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d122      	bne.n	800655c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006524:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006526:	f7fd fbed 	bl	8003d04 <HAL_GetTick>
 800652a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800652c:	e00c      	b.n	8006548 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800652e:	f7fd fbe9 	bl	8003d04 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653c:	d904      	bls.n	8006548 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <RTC_EnterInitMode+0x64>
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d1e8      	bne.n	800652e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006580:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff ff89 	bl	80064a8 <HAL_RTC_WaitForSynchro>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80065be:	e005      	b.n	80065cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	3301      	adds	r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	3b0a      	subs	r3, #10
 80065ca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d8f6      	bhi.n	80065c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	4313      	orrs	r3, r2
 80065dc:	b2db      	uxtb	r3, r3
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	4603      	mov	r3, r0
 80065f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	0092      	lsls	r2, r2, #2
 8006602:	4413      	add	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	b2da      	uxtb	r2, r3
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	4413      	add	r3, r2
 8006614:	b2db      	uxtb	r3, r3
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e041      	b.n	80066cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f839 	bl	80066d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f000 fe2d 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e044      	b.n	800678a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <HAL_TIM_Base_Start_IT+0xb0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672a:	d013      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1a      	ldr	r2, [pc, #104]	; (800679c <HAL_TIM_Base_Start_IT+0xb4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x6c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d111      	bne.n	8006778 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d010      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	e007      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40014000 	.word	0x40014000

080067ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e041      	b.n	8006842 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fa fec0 	bl	8001558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f000 fd72 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e022      	b.n	80068be <HAL_TIM_PWM_Start_DMA+0x72>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d109      	bne.n	8006892 <HAL_TIM_PWM_Start_DMA+0x46>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	bf0c      	ite	eq
 800688a:	2301      	moveq	r3, #1
 800688c:	2300      	movne	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	e015      	b.n	80068be <HAL_TIM_PWM_Start_DMA+0x72>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d109      	bne.n	80068ac <HAL_TIM_PWM_Start_DMA+0x60>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	bf0c      	ite	eq
 80068a4:	2301      	moveq	r3, #1
 80068a6:	2300      	movne	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	e008      	b.n	80068be <HAL_TIM_PWM_Start_DMA+0x72>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	e15d      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_TIM_PWM_Start_DMA+0x94>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	e022      	b.n	8006926 <HAL_TIM_PWM_Start_DMA+0xda>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d109      	bne.n	80068fa <HAL_TIM_PWM_Start_DMA+0xae>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	bf0c      	ite	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	2300      	movne	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e015      	b.n	8006926 <HAL_TIM_PWM_Start_DMA+0xda>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d109      	bne.n	8006914 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	e008      	b.n	8006926 <HAL_TIM_PWM_Start_DMA+0xda>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d024      	beq.n	8006974 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <HAL_TIM_PWM_Start_DMA+0xee>
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e123      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	e016      	b.n	8006978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006958:	e00e      	b.n	8006978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006968:	e006      	b.n	8006978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006972:	e001      	b.n	8006978 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e104      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b0c      	cmp	r3, #12
 800697c:	f200 80ae 	bhi.w	8006adc <HAL_TIM_PWM_Start_DMA+0x290>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069bd 	.word	0x080069bd
 800698c:	08006add 	.word	0x08006add
 8006990:	08006add 	.word	0x08006add
 8006994:	08006add 	.word	0x08006add
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006add 	.word	0x08006add
 80069a0:	08006add 	.word	0x08006add
 80069a4:	08006add 	.word	0x08006add
 80069a8:	08006a4d 	.word	0x08006a4d
 80069ac:	08006add 	.word	0x08006add
 80069b0:	08006add 	.word	0x08006add
 80069b4:	08006add 	.word	0x08006add
 80069b8:	08006a95 	.word	0x08006a95
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	4a72      	ldr	r2, [pc, #456]	; (8006b8c <HAL_TIM_PWM_Start_DMA+0x340>)
 80069c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	4a71      	ldr	r2, [pc, #452]	; (8006b90 <HAL_TIM_PWM_Start_DMA+0x344>)
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	4a70      	ldr	r2, [pc, #448]	; (8006b94 <HAL_TIM_PWM_Start_DMA+0x348>)
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3334      	adds	r3, #52	; 0x34
 80069e0:	461a      	mov	r2, r3
 80069e2:	887b      	ldrh	r3, [r7, #2]
 80069e4:	f7fd fb2a 	bl	800403c <HAL_DMA_Start_IT>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0c7      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a00:	60da      	str	r2, [r3, #12]
      break;
 8006a02:	e06e      	b.n	8006ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	4a60      	ldr	r2, [pc, #384]	; (8006b8c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006a0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	4a5f      	ldr	r2, [pc, #380]	; (8006b90 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	4a5e      	ldr	r2, [pc, #376]	; (8006b94 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006a1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3338      	adds	r3, #56	; 0x38
 8006a28:	461a      	mov	r2, r3
 8006a2a:	887b      	ldrh	r3, [r7, #2]
 8006a2c:	f7fd fb06 	bl	800403c <HAL_DMA_Start_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e0a3      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a48:	60da      	str	r2, [r3, #12]
      break;
 8006a4a:	e04a      	b.n	8006ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a4e      	ldr	r2, [pc, #312]	; (8006b8c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006a52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	4a4d      	ldr	r2, [pc, #308]	; (8006b90 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a4c      	ldr	r2, [pc, #304]	; (8006b94 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006a62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	333c      	adds	r3, #60	; 0x3c
 8006a70:	461a      	mov	r2, r3
 8006a72:	887b      	ldrh	r3, [r7, #2]
 8006a74:	f7fd fae2 	bl	800403c <HAL_DMA_Start_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e07f      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	60da      	str	r2, [r3, #12]
      break;
 8006a92:	e026      	b.n	8006ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	4a3c      	ldr	r2, [pc, #240]	; (8006b8c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006a9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	4a3b      	ldr	r2, [pc, #236]	; (8006b90 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	4a3a      	ldr	r2, [pc, #232]	; (8006b94 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006aaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3340      	adds	r3, #64	; 0x40
 8006ab8:	461a      	mov	r2, r3
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	f7fd fabe 	bl	800403c <HAL_DMA_Start_IT>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e05b      	b.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ad8:	60da      	str	r2, [r3, #12]
      break;
 8006ada:	e002      	b.n	8006ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d14b      	bne.n	8006b80 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2201      	movs	r2, #1
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fdfb 	bl	80076ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIM_PWM_Start_DMA+0x300>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b22:	d013      	beq.n	8006b4c <HAL_TIM_PWM_Start_DMA+0x300>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <HAL_TIM_PWM_Start_DMA+0x350>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_PWM_Start_DMA+0x300>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_PWM_Start_DMA+0x300>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_PWM_Start_DMA+0x300>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d111      	bne.n	8006b70 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d010      	beq.n	8006b80 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6e:	e007      	b.n	8006b80 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	080071c3 	.word	0x080071c3
 8006b90:	0800726b 	.word	0x0800726b
 8006b94:	08007131 	.word	0x08007131
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40014000 	.word	0x40014000

08006bac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b0c      	cmp	r3, #12
 8006bbe:	d855      	bhi.n	8006c6c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bfd 	.word	0x08006bfd
 8006bcc:	08006c6d 	.word	0x08006c6d
 8006bd0:	08006c6d 	.word	0x08006c6d
 8006bd4:	08006c6d 	.word	0x08006c6d
 8006bd8:	08006c19 	.word	0x08006c19
 8006bdc:	08006c6d 	.word	0x08006c6d
 8006be0:	08006c6d 	.word	0x08006c6d
 8006be4:	08006c6d 	.word	0x08006c6d
 8006be8:	08006c35 	.word	0x08006c35
 8006bec:	08006c6d 	.word	0x08006c6d
 8006bf0:	08006c6d 	.word	0x08006c6d
 8006bf4:	08006c6d 	.word	0x08006c6d
 8006bf8:	08006c51 	.word	0x08006c51
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fd fa6b 	bl	80040ec <HAL_DMA_Abort_IT>
      break;
 8006c16:	e02c      	b.n	8006c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd fa5d 	bl	80040ec <HAL_DMA_Abort_IT>
      break;
 8006c32:	e01e      	b.n	8006c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fa4f 	bl	80040ec <HAL_DMA_Abort_IT>
      break;
 8006c4e:	e010      	b.n	8006c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fd fa41 	bl	80040ec <HAL_DMA_Abort_IT>
      break;
 8006c6a:	e002      	b.n	8006c72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c70:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d157      	bne.n	8006d28 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fd33 	bl	80076ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d117      	bne.n	8006cc0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10f      	bne.n	8006cc0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	f240 4344 	movw	r3, #1092	; 0x444
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10f      	bne.n	8006cf0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	f240 4344 	movw	r3, #1092	; 0x444
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfe:	e013      	b.n	8006d28 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d104      	bne.n	8006d10 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0e:	e00b      	b.n	8006d28 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d104      	bne.n	8006d20 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1e:	e003      	b.n	8006d28 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000

08006d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0202 	mvn.w	r2, #2
 8006d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9b0 	bl	80070e0 <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9a2 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fc fbbb 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d122      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d11b      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0204 	mvn.w	r2, #4
 8006db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f986 	bl	80070e0 <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f978 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fc fb91 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d122      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d11b      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0208 	mvn.w	r2, #8
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f95c 	bl	80070e0 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f94e 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7fc fb67 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0210 	mvn.w	r2, #16
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2208      	movs	r2, #8
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f932 	bl	80070e0 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f924 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fc fb3d 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0201 	mvn.w	r2, #1
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fa f8b5 	bl	8001026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fcf2 	bl	80078cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f8fa 	bl	8007108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0220 	mvn.w	r2, #32
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fcbc 	bl	80078b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0ae      	b.n	80070c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b0c      	cmp	r3, #12
 8006f72:	f200 809f 	bhi.w	80070b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fb1 	.word	0x08006fb1
 8006f80:	080070b5 	.word	0x080070b5
 8006f84:	080070b5 	.word	0x080070b5
 8006f88:	080070b5 	.word	0x080070b5
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	080070b5 	.word	0x080070b5
 8006f94:	080070b5 	.word	0x080070b5
 8006f98:	080070b5 	.word	0x080070b5
 8006f9c:	08007033 	.word	0x08007033
 8006fa0:	080070b5 	.word	0x080070b5
 8006fa4:	080070b5 	.word	0x080070b5
 8006fa8:	080070b5 	.word	0x080070b5
 8006fac:	08007073 	.word	0x08007073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fa0c 	bl	80073d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	619a      	str	r2, [r3, #24]
      break;
 8006fee:	e064      	b.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa52 	bl	80074a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800701a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6999      	ldr	r1, [r3, #24]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	619a      	str	r2, [r3, #24]
      break;
 8007030:	e043      	b.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fa9d 	bl	8007578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0208 	orr.w	r2, r2, #8
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0204 	bic.w	r2, r2, #4
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	61da      	str	r2, [r3, #28]
      break;
 8007070:	e023      	b.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fae7 	bl	800764c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69d9      	ldr	r1, [r3, #28]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	021a      	lsls	r2, r3, #8
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	61da      	str	r2, [r3, #28]
      break;
 80070b2:	e002      	b.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
      break;
 80070b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d107      	bne.n	8007158 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007156:	e02a      	b.n	80071ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d107      	bne.n	8007172 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2202      	movs	r2, #2
 8007166:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007170:	e01d      	b.n	80071ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d107      	bne.n	800718c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2204      	movs	r2, #4
 8007180:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800718a:	e010      	b.n	80071ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d107      	bne.n	80071a6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2208      	movs	r2, #8
 800719a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071a4:	e003      	b.n	80071ae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ffb4 	bl	800711c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	771a      	strb	r2, [r3, #28]
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d10b      	bne.n	80071f2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d136      	bne.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	e031      	b.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d10b      	bne.n	8007214 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2202      	movs	r2, #2
 8007200:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d125      	bne.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007212:	e020      	b.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d10b      	bne.n	8007236 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2204      	movs	r2, #4
 8007222:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d114      	bne.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007234:	e00f      	b.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d10a      	bne.n	8007256 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2208      	movs	r2, #8
 8007244:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7fc f954 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	771a      	strb	r2, [r3, #28]
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d103      	bne.n	800728a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	771a      	strb	r2, [r3, #28]
 8007288:	e019      	b.n	80072be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d103      	bne.n	800729c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2202      	movs	r2, #2
 8007298:	771a      	strb	r2, [r3, #28]
 800729a:	e010      	b.n	80072be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d103      	bne.n	80072ae <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2204      	movs	r2, #4
 80072aa:	771a      	strb	r2, [r3, #28]
 80072ac:	e007      	b.n	80072be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d102      	bne.n	80072be <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2208      	movs	r2, #8
 80072bc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff ff18 	bl	80070f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	771a      	strb	r2, [r3, #28]
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a34      	ldr	r2, [pc, #208]	; (80073b8 <TIM_Base_SetConfig+0xe4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <TIM_Base_SetConfig+0x38>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f2:	d00b      	beq.n	800730c <TIM_Base_SetConfig+0x38>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a31      	ldr	r2, [pc, #196]	; (80073bc <TIM_Base_SetConfig+0xe8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_Base_SetConfig+0x38>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a30      	ldr	r2, [pc, #192]	; (80073c0 <TIM_Base_SetConfig+0xec>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_Base_SetConfig+0x38>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a2f      	ldr	r2, [pc, #188]	; (80073c4 <TIM_Base_SetConfig+0xf0>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d108      	bne.n	800731e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <TIM_Base_SetConfig+0xe4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01b      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d017      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a22      	ldr	r2, [pc, #136]	; (80073bc <TIM_Base_SetConfig+0xe8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <TIM_Base_SetConfig+0xec>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00f      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <TIM_Base_SetConfig+0xf0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00b      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <TIM_Base_SetConfig+0xf4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d007      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <TIM_Base_SetConfig+0xf8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d003      	beq.n	800735e <TIM_Base_SetConfig+0x8a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <TIM_Base_SetConfig+0xfc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d108      	bne.n	8007370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <TIM_Base_SetConfig+0xe4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d103      	bne.n	80073a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	615a      	str	r2, [r3, #20]
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40014000 	.word	0x40014000
 80073cc:	40014400 	.word	0x40014400
 80073d0:	40014800 	.word	0x40014800

080073d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 0302 	bic.w	r3, r3, #2
 800741c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1c      	ldr	r2, [pc, #112]	; (800749c <TIM_OC1_SetConfig+0xc8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10c      	bne.n	800744a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 0308 	bic.w	r3, r3, #8
 8007436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a13      	ldr	r2, [pc, #76]	; (800749c <TIM_OC1_SetConfig+0xc8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d111      	bne.n	8007476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40010000 	.word	0x40010000

080074a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0210 	bic.w	r2, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0320 	bic.w	r3, r3, #32
 80074ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <TIM_OC2_SetConfig+0xd4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10d      	bne.n	800751c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a15      	ldr	r2, [pc, #84]	; (8007574 <TIM_OC2_SetConfig+0xd4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d113      	bne.n	800754c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800752a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000

08007578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <TIM_OC3_SetConfig+0xd0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d10d      	bne.n	80075f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a14      	ldr	r2, [pc, #80]	; (8007648 <TIM_OC3_SetConfig+0xd0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d113      	bne.n	8007622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	40010000 	.word	0x40010000

0800764c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	031b      	lsls	r3, r3, #12
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <TIM_OC4_SetConfig+0x9c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d109      	bne.n	80076c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	019b      	lsls	r3, r3, #6
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40010000 	.word	0x40010000

080076ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2201      	movs	r2, #1
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	43db      	mvns	r3, r3
 800770e:	401a      	ands	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	fa01 f303 	lsl.w	r3, r1, r3
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800774c:	2302      	movs	r3, #2
 800774e:	e050      	b.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1c      	ldr	r2, [pc, #112]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779c:	d013      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a18      	ldr	r2, [pc, #96]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a16      	ldr	r2, [pc, #88]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a13      	ldr	r2, [pc, #76]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d10c      	bne.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40010000 	.word	0x40010000
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40014000 	.word	0x40014000

08007814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800782c:	2302      	movs	r3, #2
 800782e:	e03d      	b.n	80078ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80078ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078f2:	2b84      	cmp	r3, #132	; 0x84
 80078f4:	d005      	beq.n	8007902 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	3303      	adds	r3, #3
 8007900:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007914:	f001 f866 	bl	80089e4 <vTaskStartScheduler>
  
  return osOK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	bd80      	pop	{r7, pc}

0800791e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800791e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007920:	b089      	sub	sp, #36	; 0x24
 8007922:	af04      	add	r7, sp, #16
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d020      	beq.n	8007972 <osThreadCreate+0x54>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01c      	beq.n	8007972 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685c      	ldr	r4, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691e      	ldr	r6, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff ffc8 	bl	80078e0 <makeFreeRtosPriority>
 8007950:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800795a:	9202      	str	r2, [sp, #8]
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	9100      	str	r1, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	4632      	mov	r2, r6
 8007964:	4629      	mov	r1, r5
 8007966:	4620      	mov	r0, r4
 8007968:	f000 fde0 	bl	800852c <xTaskCreateStatic>
 800796c:	4603      	mov	r3, r0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e01c      	b.n	80079ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685c      	ldr	r4, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800797e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ffaa 	bl	80078e0 <makeFreeRtosPriority>
 800798c:	4602      	mov	r2, r0
 800798e:	f107 030c 	add.w	r3, r7, #12
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	9200      	str	r2, [sp, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	4632      	mov	r2, r6
 800799a:	4629      	mov	r1, r5
 800799c:	4620      	mov	r0, r4
 800799e:	f000 fe22 	bl	80085e6 <xTaskCreate>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d001      	beq.n	80079ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <osDelay+0x16>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	e000      	b.n	80079ce <osDelay+0x18>
 80079cc:	2301      	movs	r3, #1
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 ffd4 	bl	800897c <vTaskDelay>
  
  return osOK;
 80079d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0208 	add.w	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f103 0208 	add.w	r2, r3, #8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f103 0208 	add.w	r2, r3, #8
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d103      	bne.n	8007aa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e00c      	b.n	8007aba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e002      	b.n	8007aae <vListInsert+0x2e>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d2f6      	bcs.n	8007aa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	601a      	str	r2, [r3, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6892      	ldr	r2, [r2, #8]
 8007b08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6852      	ldr	r2, [r2, #4]
 8007b12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d103      	bne.n	8007b26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	1e5a      	subs	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b72:	f001 fe97 	bl	80098a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	441a      	add	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ba8:	fb01 f303 	mul.w	r3, r1, r3
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	22ff      	movs	r2, #255	; 0xff
 8007bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d114      	bne.n	8007bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01a      	beq.n	8007c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3310      	adds	r3, #16
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 f957 	bl	8008e88 <xTaskRemoveFromEventList>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d012      	beq.n	8007c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <xQueueGenericReset+0xcc>)
 8007be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	e009      	b.n	8007c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3310      	adds	r3, #16
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fef1 	bl	80079de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3324      	adds	r3, #36	; 0x24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff feec 	bl	80079de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c06:	f001 fe7d 	bl	8009904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c0a:	2301      	movs	r3, #1
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	613b      	str	r3, [r7, #16]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	3348      	adds	r3, #72	; 0x48
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 ff09 	bl	8009a68 <pvPortMalloc>
 8007c56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3348      	adds	r3, #72	; 0x48
 8007c66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c70:	79fa      	ldrb	r2, [r7, #7]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f805 	bl	8007c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c82:	69bb      	ldr	r3, [r7, #24]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e002      	b.n	8007cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cba:	2101      	movs	r1, #1
 8007cbc:	69b8      	ldr	r0, [r7, #24]
 8007cbe:	f7ff ff43 	bl	8007b48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	; 0x38
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericSend+0x32>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueGenericSend+0x40>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <xQueueGenericSend+0x44>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <xQueueGenericSend+0x46>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xQueueGenericSend+0x60>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSend+0x6e>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSend+0x72>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSend+0x74>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericSend+0x8e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5a:	f001 fa55 	bl	8009208 <xTaskGetSchedulerState>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <xQueueGenericSend+0x9e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <xQueueGenericSend+0xa2>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericSend+0xa4>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xQueueGenericSend+0xbe>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	61fb      	str	r3, [r7, #28]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d8a:	f001 fd8b 	bl	80098a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <xQueueGenericSend+0xd4>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d129      	bne.n	8007df4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da6:	f000 fab1 	bl	800830c <prvCopyDataToQueue>
 8007daa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	3324      	adds	r3, #36	; 0x24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 f865 	bl	8008e88 <xTaskRemoveFromEventList>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d013      	beq.n	8007dec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dc4:	4b3f      	ldr	r3, [pc, #252]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	e00a      	b.n	8007dec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ddc:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dec:	f001 fd8a 	bl	8009904 <vPortExitCritical>
				return pdPASS;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e063      	b.n	8007ebc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dfa:	f001 fd83 	bl	8009904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e05c      	b.n	8007ebc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 f89d 	bl	8008f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e16:	f001 fd75 	bl	8009904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e1a:	f000 fe4d 	bl	8008ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e1e:	f001 fd41 	bl	80098a4 <vPortEnterCritical>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d103      	bne.n	8007e38 <xQueueGenericSend+0x16c>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3e:	b25b      	sxtb	r3, r3
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d103      	bne.n	8007e4e <xQueueGenericSend+0x182>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4e:	f001 fd59 	bl	8009904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e52:	1d3a      	adds	r2, r7, #4
 8007e54:	f107 0314 	add.w	r3, r7, #20
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f88c 	bl	8008f78 <xTaskCheckForTimeOut>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d124      	bne.n	8007eb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e68:	f000 fb48 	bl	80084fc <prvIsQueueFull>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d018      	beq.n	8007ea4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	3310      	adds	r3, #16
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ffe0 	bl	8008e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e82:	f000 fad3 	bl	800842c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e86:	f000 fe25 	bl	8008ad4 <xTaskResumeAll>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f47f af7c 	bne.w	8007d8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	e772      	b.n	8007d8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea6:	f000 fac1 	bl	800842c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eaa:	f000 fe13 	bl	8008ad4 <xTaskResumeAll>
 8007eae:	e76c      	b.n	8007d8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb2:	f000 fabb 	bl	800842c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eb6:	f000 fe0d 	bl	8008ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3738      	adds	r7, #56	; 0x38
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <xQueueReceive+0x30>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	623b      	str	r3, [r7, #32]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <xQueueReceive+0x3e>
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueReceive+0x42>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueReceive+0x44>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueReceive+0x5e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61fb      	str	r3, [r7, #28]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f26:	f001 f96f 	bl	8009208 <xTaskGetSchedulerState>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <xQueueReceive+0x6e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <xQueueReceive+0x72>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <xQueueReceive+0x74>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xQueueReceive+0x8e>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61bb      	str	r3, [r7, #24]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f56:	f001 fca5 	bl	80098a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01f      	beq.n	8007fa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6a:	f000 fa39 	bl	80083e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	1e5a      	subs	r2, r3, #1
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00f      	beq.n	8007f9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	3310      	adds	r3, #16
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 ff80 	bl	8008e88 <xTaskRemoveFromEventList>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <xQueueReceive+0x1bc>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f9e:	f001 fcb1 	bl	8009904 <vPortExitCritical>
				return pdPASS;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e069      	b.n	800807a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fac:	f001 fcaa 	bl	8009904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e062      	b.n	800807a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 ffc4 	bl	8008f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fc8:	f001 fc9c 	bl	8009904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fcc:	f000 fd74 	bl	8008ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fd0:	f001 fc68 	bl	80098a4 <vPortEnterCritical>
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d103      	bne.n	8007fea <xQueueReceive+0x122>
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff6:	d103      	bne.n	8008000 <xQueueReceive+0x138>
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008000:	f001 fc80 	bl	8009904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008004:	1d3a      	adds	r2, r7, #4
 8008006:	f107 0310 	add.w	r3, r7, #16
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f000 ffb3 	bl	8008f78 <xTaskCheckForTimeOut>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d123      	bne.n	8008060 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800801a:	f000 fa59 	bl	80084d0 <prvIsQueueEmpty>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d017      	beq.n	8008054 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f000 ff07 	bl	8008e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008034:	f000 f9fa 	bl	800842c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008038:	f000 fd4c 	bl	8008ad4 <xTaskResumeAll>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d189      	bne.n	8007f56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008042:	4b10      	ldr	r3, [pc, #64]	; (8008084 <xQueueReceive+0x1bc>)
 8008044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	e780      	b.n	8007f56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008056:	f000 f9e9 	bl	800842c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800805a:	f000 fd3b 	bl	8008ad4 <xTaskResumeAll>
 800805e:	e77a      	b.n	8007f56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008062:	f000 f9e3 	bl	800842c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008066:	f000 fd35 	bl	8008ad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800806a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806c:	f000 fa30 	bl	80084d0 <prvIsQueueEmpty>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f43f af6f 	beq.w	8007f56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008078:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800807a:	4618      	mov	r0, r3
 800807c:	3730      	adds	r7, #48	; 0x30
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008092:	2300      	movs	r3, #0
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	61fb      	str	r3, [r7, #28]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080d8:	f001 f896 	bl	8009208 <xTaskGetSchedulerState>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <xQueueSemaphoreTake+0x60>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <xQueueSemaphoreTake+0x64>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <xQueueSemaphoreTake+0x66>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	61bb      	str	r3, [r7, #24]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008108:	f001 fbcc 	bl	80098a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d024      	beq.n	8008162 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	1e5a      	subs	r2, r3, #1
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008128:	f001 fa16 	bl	8009558 <pvTaskIncrementMutexHeldCount>
 800812c:	4602      	mov	r2, r0
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00f      	beq.n	800815a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	3310      	adds	r3, #16
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fea2 	bl	8008e88 <xTaskRemoveFromEventList>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800814a:	4b54      	ldr	r3, [pc, #336]	; (800829c <xQueueSemaphoreTake+0x214>)
 800814c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800815a:	f001 fbd3 	bl	8009904 <vPortExitCritical>
				return pdPASS;
 800815e:	2301      	movs	r3, #1
 8008160:	e097      	b.n	8008292 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d111      	bne.n	800818c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	617b      	str	r3, [r7, #20]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008184:	f001 fbbe 	bl	8009904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008188:	2300      	movs	r3, #0
 800818a:	e082      	b.n	8008292 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008192:	f107 030c 	add.w	r3, r7, #12
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fed8 	bl	8008f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a0:	f001 fbb0 	bl	8009904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a4:	f000 fc88 	bl	8008ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081a8:	f001 fb7c 	bl	80098a4 <vPortEnterCritical>
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b2:	b25b      	sxtb	r3, r3
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b8:	d103      	bne.n	80081c2 <xQueueSemaphoreTake+0x13a>
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081c8:	b25b      	sxtb	r3, r3
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d103      	bne.n	80081d8 <xQueueSemaphoreTake+0x150>
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d8:	f001 fb94 	bl	8009904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081dc:	463a      	mov	r2, r7
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fec7 	bl	8008f78 <xTaskCheckForTimeOut>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d132      	bne.n	8008256 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081f2:	f000 f96d 	bl	80084d0 <prvIsQueueEmpty>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d026      	beq.n	800824a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d109      	bne.n	8008218 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008204:	f001 fb4e 	bl	80098a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	4618      	mov	r0, r3
 800820e:	f001 f819 	bl	8009244 <xTaskPriorityInherit>
 8008212:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008214:	f001 fb76 	bl	8009904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	3324      	adds	r3, #36	; 0x24
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	4611      	mov	r1, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fe0d 	bl	8008e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008228:	f000 f900 	bl	800842c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800822c:	f000 fc52 	bl	8008ad4 <xTaskResumeAll>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	f47f af68 	bne.w	8008108 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <xQueueSemaphoreTake+0x214>)
 800823a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	e75e      	b.n	8008108 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800824a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800824c:	f000 f8ee 	bl	800842c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008250:	f000 fc40 	bl	8008ad4 <xTaskResumeAll>
 8008254:	e758      	b.n	8008108 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008258:	f000 f8e8 	bl	800842c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825c:	f000 fc3a 	bl	8008ad4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008262:	f000 f935 	bl	80084d0 <prvIsQueueEmpty>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	f43f af4d 	beq.w	8008108 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00d      	beq.n	8008290 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008274:	f001 fb16 	bl	80098a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800827a:	f000 f82f 	bl	80082dc <prvGetDisinheritPriorityAfterTimeout>
 800827e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f8d8 	bl	800943c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800828c:	f001 fb3a 	bl	8009904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008292:	4618      	mov	r0, r3
 8008294:	3738      	adds	r7, #56	; 0x38
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60bb      	str	r3, [r7, #8]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80082c4:	f001 faee 	bl	80098a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80082ce:	f001 fb19 	bl	8009904 <vPortExitCritical>

	return uxReturn;
 80082d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f1c3 0307 	rsb	r3, r3, #7
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e001      	b.n	80082fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10d      	bne.n	8008346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d14d      	bne.n	80083ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fffa 	bl	8009330 <xTaskPriorityDisinherit>
 800833c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	609a      	str	r2, [r3, #8]
 8008344:	e043      	b.n	80083ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d119      	bne.n	8008380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6858      	ldr	r0, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	461a      	mov	r2, r3
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	f001 fdf4 	bl	8009f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	441a      	add	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d32b      	bcc.n	80083ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	e026      	b.n	80083ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68d8      	ldr	r0, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	461a      	mov	r2, r3
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	f001 fdda 	bl	8009f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	425b      	negs	r3, r3
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d207      	bcs.n	80083bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	425b      	negs	r3, r3
 80083b6:	441a      	add	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d105      	bne.n	80083ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083d6:	697b      	ldr	r3, [r7, #20]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	429a      	cmp	r2, r3
 800840a:	d303      	bcc.n	8008414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68d9      	ldr	r1, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	461a      	mov	r2, r3
 800841e:	6838      	ldr	r0, [r7, #0]
 8008420:	f001 fd90 	bl	8009f44 <memcpy>
	}
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008434:	f001 fa36 	bl	80098a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008440:	e011      	b.n	8008466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	d012      	beq.n	8008470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3324      	adds	r3, #36	; 0x24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fd1a 	bl	8008e88 <xTaskRemoveFromEventList>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800845a:	f000 fdef 	bl	800903c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	3b01      	subs	r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dce9      	bgt.n	8008442 <prvUnlockQueue+0x16>
 800846e:	e000      	b.n	8008472 <prvUnlockQueue+0x46>
					break;
 8008470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	22ff      	movs	r2, #255	; 0xff
 8008476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800847a:	f001 fa43 	bl	8009904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800847e:	f001 fa11 	bl	80098a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800848a:	e011      	b.n	80084b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d012      	beq.n	80084ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3310      	adds	r3, #16
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fcf5 	bl	8008e88 <xTaskRemoveFromEventList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084a4:	f000 fdca 	bl	800903c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dce9      	bgt.n	800848c <prvUnlockQueue+0x60>
 80084b8:	e000      	b.n	80084bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	22ff      	movs	r2, #255	; 0xff
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084c4:	f001 fa1e 	bl	8009904 <vPortExitCritical>
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084d8:	f001 f9e4 	bl	80098a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e001      	b.n	80084ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084ee:	f001 fa09 	bl	8009904 <vPortExitCritical>

	return xReturn;
 80084f2:	68fb      	ldr	r3, [r7, #12]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008504:	f001 f9ce 	bl	80098a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	429a      	cmp	r2, r3
 8008512:	d102      	bne.n	800851a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e001      	b.n	800851e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800851e:	f001 f9f1 	bl	8009904 <vPortExitCritical>

	return xReturn;
 8008522:	68fb      	ldr	r3, [r7, #12]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08e      	sub	sp, #56	; 0x38
 8008530:	af04      	add	r7, sp, #16
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	623b      	str	r3, [r7, #32]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xTaskCreateStatic+0x46>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	61fb      	str	r3, [r7, #28]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008572:	23a0      	movs	r3, #160	; 0xa0
 8008574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2ba0      	cmp	r3, #160	; 0xa0
 800857a:	d00a      	beq.n	8008592 <xTaskCreateStatic+0x66>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01e      	beq.n	80085d8 <xTaskCreateStatic+0xac>
 800859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085b2:	2300      	movs	r3, #0
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f850 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d2:	f000 f8eb 	bl	80087ac <prvAddNewTaskToReadyList>
 80085d6:	e001      	b.n	80085dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085dc:	697b      	ldr	r3, [r7, #20]
	}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b08c      	sub	sp, #48	; 0x30
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fa34 	bl	8009a68 <pvPortMalloc>
 8008600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00e      	beq.n	8008626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008608:	20a0      	movs	r0, #160	; 0xa0
 800860a:	f001 fa2d 	bl	8009a68 <pvPortMalloc>
 800860e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	631a      	str	r2, [r3, #48]	; 0x30
 800861c:	e005      	b.n	800862a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f001 faee 	bl	8009c00 <vPortFree>
 8008624:	e001      	b.n	800862a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d017      	beq.n	8008660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	2300      	movs	r3, #0
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f80e 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008654:	69f8      	ldr	r0, [r7, #28]
 8008656:	f000 f8a9 	bl	80087ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800865a:	2301      	movs	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	e002      	b.n	8008666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008666:	69bb      	ldr	r3, [r7, #24]
	}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008688:	3b01      	subs	r3, #1
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	617b      	str	r3, [r7, #20]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d01f      	beq.n	80086fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086be:	2300      	movs	r3, #0
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	e012      	b.n	80086ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	7819      	ldrb	r1, [r3, #0]
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	3334      	adds	r3, #52	; 0x34
 80086d4:	460a      	mov	r2, r1
 80086d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	3301      	adds	r3, #1
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	2b0f      	cmp	r3, #15
 80086ee:	d9e9      	bls.n	80086c4 <prvInitialiseNewTask+0x54>
 80086f0:	e000      	b.n	80086f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80086f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086fc:	e003      	b.n	8008706 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	2b06      	cmp	r3, #6
 800870a:	d901      	bls.n	8008710 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800870c:	2306      	movs	r3, #6
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800871a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	2200      	movs	r2, #0
 8008720:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	3304      	adds	r3, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff f979 	bl	8007a1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	3318      	adds	r3, #24
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff f974 	bl	8007a1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	f1c3 0207 	rsb	r2, r3, #7
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	2200      	movs	r2, #0
 8008758:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	334c      	adds	r3, #76	; 0x4c
 8008760:	224c      	movs	r2, #76	; 0x4c
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fb69 	bl	8009e3c <memset>
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	4a0c      	ldr	r2, [pc, #48]	; (80087a0 <prvInitialiseNewTask+0x130>)
 800876e:	651a      	str	r2, [r3, #80]	; 0x50
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	4a0c      	ldr	r2, [pc, #48]	; (80087a4 <prvInitialiseNewTask+0x134>)
 8008774:	655a      	str	r2, [r3, #84]	; 0x54
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <prvInitialiseNewTask+0x138>)
 800877a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	69b8      	ldr	r0, [r7, #24]
 8008782:	f000 ff63 	bl	800964c <pxPortInitialiseStack>
 8008786:	4602      	mov	r2, r0
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008796:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008798:	bf00      	nop
 800879a:	3720      	adds	r7, #32
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	2000543c 	.word	0x2000543c
 80087a4:	200054a4 	.word	0x200054a4
 80087a8:	2000550c 	.word	0x2000550c

080087ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087b4:	f001 f876 	bl	80098a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087b8:	4b2a      	ldr	r3, [pc, #168]	; (8008864 <prvAddNewTaskToReadyList+0xb8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	4a29      	ldr	r2, [pc, #164]	; (8008864 <prvAddNewTaskToReadyList+0xb8>)
 80087c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <prvAddNewTaskToReadyList+0xbc>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087ca:	4a27      	ldr	r2, [pc, #156]	; (8008868 <prvAddNewTaskToReadyList+0xbc>)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087d0:	4b24      	ldr	r3, [pc, #144]	; (8008864 <prvAddNewTaskToReadyList+0xb8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d110      	bne.n	80087fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087d8:	f000 fc54 	bl	8009084 <prvInitialiseTaskLists>
 80087dc:	e00d      	b.n	80087fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087de:	4b23      	ldr	r3, [pc, #140]	; (800886c <prvAddNewTaskToReadyList+0xc0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087e6:	4b20      	ldr	r3, [pc, #128]	; (8008868 <prvAddNewTaskToReadyList+0xbc>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d802      	bhi.n	80087fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087f4:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <prvAddNewTaskToReadyList+0xbc>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <prvAddNewTaskToReadyList+0xc4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	4a1b      	ldr	r2, [pc, #108]	; (8008870 <prvAddNewTaskToReadyList+0xc4>)
 8008802:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	2201      	movs	r2, #1
 800880a:	409a      	lsls	r2, r3
 800880c:	4b19      	ldr	r3, [pc, #100]	; (8008874 <prvAddNewTaskToReadyList+0xc8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4313      	orrs	r3, r2
 8008812:	4a18      	ldr	r2, [pc, #96]	; (8008874 <prvAddNewTaskToReadyList+0xc8>)
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvAddNewTaskToReadyList+0xcc>)
 8008824:	441a      	add	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3304      	adds	r3, #4
 800882a:	4619      	mov	r1, r3
 800882c:	4610      	mov	r0, r2
 800882e:	f7ff f903 	bl	8007a38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008832:	f001 f867 	bl	8009904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <prvAddNewTaskToReadyList+0xc0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <prvAddNewTaskToReadyList+0xbc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	429a      	cmp	r2, r3
 800884a:	d207      	bcs.n	800885c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <prvAddNewTaskToReadyList+0xd0>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200017e8 	.word	0x200017e8
 8008868:	200016e8 	.word	0x200016e8
 800886c:	200017f4 	.word	0x200017f4
 8008870:	20001804 	.word	0x20001804
 8008874:	200017f0 	.word	0x200017f0
 8008878:	200016ec 	.word	0x200016ec
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <vTaskDelayUntil+0x2a>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	617b      	str	r3, [r7, #20]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <vTaskDelayUntil+0x46>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	613b      	str	r3, [r7, #16]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80088c6:	4b2a      	ldr	r3, [pc, #168]	; (8008970 <vTaskDelayUntil+0xf0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <vTaskDelayUntil+0x64>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80088e4:	f000 f8e8 	bl	8008ab8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80088e8:	4b22      	ldr	r3, [pc, #136]	; (8008974 <vTaskDelayUntil+0xf4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4413      	add	r3, r2
 80088f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6a3a      	ldr	r2, [r7, #32]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d20b      	bcs.n	800891a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	429a      	cmp	r2, r3
 800890a:	d211      	bcs.n	8008930 <vTaskDelayUntil+0xb0>
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	429a      	cmp	r2, r3
 8008912:	d90d      	bls.n	8008930 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008914:	2301      	movs	r3, #1
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	e00a      	b.n	8008930 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	429a      	cmp	r2, r3
 8008922:	d303      	bcc.n	800892c <vTaskDelayUntil+0xac>
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	429a      	cmp	r2, r3
 800892a:	d901      	bls.n	8008930 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d006      	beq.n	800894a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2100      	movs	r1, #0
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fe1b 	bl	8009580 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800894a:	f000 f8c3 	bl	8008ad4 <xTaskResumeAll>
 800894e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d107      	bne.n	8008966 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008956:	4b08      	ldr	r3, [pc, #32]	; (8008978 <vTaskDelayUntil+0xf8>)
 8008958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008966:	bf00      	nop
 8008968:	3728      	adds	r7, #40	; 0x28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20001810 	.word	0x20001810
 8008974:	200017ec 	.word	0x200017ec
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d017      	beq.n	80089be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <vTaskDelay+0x60>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <vTaskDelay+0x30>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	60bb      	str	r3, [r7, #8]
}
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089ac:	f000 f884 	bl	8008ab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fde4 	bl	8009580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089b8:	f000 f88c 	bl	8008ad4 <xTaskResumeAll>
 80089bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d107      	bne.n	80089d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <vTaskDelay+0x64>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20001810 	.word	0x20001810
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089f2:	463a      	mov	r2, r7
 80089f4:	1d39      	adds	r1, r7, #4
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f7 ff80 	bl	8000900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	9202      	str	r2, [sp, #8]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	460a      	mov	r2, r1
 8008a12:	4921      	ldr	r1, [pc, #132]	; (8008a98 <vTaskStartScheduler+0xb4>)
 8008a14:	4821      	ldr	r0, [pc, #132]	; (8008a9c <vTaskStartScheduler+0xb8>)
 8008a16:	f7ff fd89 	bl	800852c <xTaskCreateStatic>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	4a20      	ldr	r2, [pc, #128]	; (8008aa0 <vTaskStartScheduler+0xbc>)
 8008a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a20:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <vTaskStartScheduler+0xbc>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e001      	b.n	8008a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d11b      	bne.n	8008a70 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	613b      	str	r3, [r7, #16]
}
 8008a4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a4c:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <vTaskStartScheduler+0xc0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	334c      	adds	r3, #76	; 0x4c
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <vTaskStartScheduler+0xc4>)
 8008a54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a56:	4b15      	ldr	r3, [pc, #84]	; (8008aac <vTaskStartScheduler+0xc8>)
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a5e:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <vTaskStartScheduler+0xcc>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a64:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <vTaskStartScheduler+0xd0>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a6a:	f000 fe79 	bl	8009760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a6e:	e00e      	b.n	8008a8e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a76:	d10a      	bne.n	8008a8e <vTaskStartScheduler+0xaa>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	60fb      	str	r3, [r7, #12]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <vTaskStartScheduler+0xa8>
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	0800a1e8 	.word	0x0800a1e8
 8008a9c:	08009055 	.word	0x08009055
 8008aa0:	2000180c 	.word	0x2000180c
 8008aa4:	200016e8 	.word	0x200016e8
 8008aa8:	200000ec 	.word	0x200000ec
 8008aac:	20001808 	.word	0x20001808
 8008ab0:	200017f4 	.word	0x200017f4
 8008ab4:	200017ec 	.word	0x200017ec

08008ab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <vTaskSuspendAll+0x18>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	4a03      	ldr	r2, [pc, #12]	; (8008ad0 <vTaskSuspendAll+0x18>)
 8008ac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ac6:	bf00      	nop
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	20001810 	.word	0x20001810

08008ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ae2:	4b41      	ldr	r3, [pc, #260]	; (8008be8 <xTaskResumeAll+0x114>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <xTaskResumeAll+0x2c>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	603b      	str	r3, [r7, #0]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b00:	f000 fed0 	bl	80098a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b04:	4b38      	ldr	r3, [pc, #224]	; (8008be8 <xTaskResumeAll+0x114>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	4a37      	ldr	r2, [pc, #220]	; (8008be8 <xTaskResumeAll+0x114>)
 8008b0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b0e:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <xTaskResumeAll+0x114>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d161      	bne.n	8008bda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b16:	4b35      	ldr	r3, [pc, #212]	; (8008bec <xTaskResumeAll+0x118>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d05d      	beq.n	8008bda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b1e:	e02e      	b.n	8008b7e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b20:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <xTaskResumeAll+0x11c>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3318      	adds	r3, #24
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe ffe0 	bl	8007af2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe ffdb 	bl	8007af2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	2201      	movs	r2, #1
 8008b42:	409a      	lsls	r2, r3
 8008b44:	4b2b      	ldr	r3, [pc, #172]	; (8008bf4 <xTaskResumeAll+0x120>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	; (8008bf4 <xTaskResumeAll+0x120>)
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4a27      	ldr	r2, [pc, #156]	; (8008bf8 <xTaskResumeAll+0x124>)
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7fe ff67 	bl	8007a38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6e:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <xTaskResumeAll+0x128>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d302      	bcc.n	8008b7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b78:	4b21      	ldr	r3, [pc, #132]	; (8008c00 <xTaskResumeAll+0x12c>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	; (8008bf0 <xTaskResumeAll+0x11c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1cc      	bne.n	8008b20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b8c:	f000 fb1c 	bl	80091c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b90:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <xTaskResumeAll+0x130>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d010      	beq.n	8008bbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b9c:	f000 f836 	bl	8008c0c <xTaskIncrementTick>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008ba6:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <xTaskResumeAll+0x12c>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f1      	bne.n	8008b9c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008bb8:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <xTaskResumeAll+0x130>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bbe:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <xTaskResumeAll+0x12c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <xTaskResumeAll+0x134>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f000 fe93 	bl	8009904 <vPortExitCritical>

	return xAlreadyYielded;
 8008bde:	68bb      	ldr	r3, [r7, #8]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20001810 	.word	0x20001810
 8008bec:	200017e8 	.word	0x200017e8
 8008bf0:	200017a8 	.word	0x200017a8
 8008bf4:	200017f0 	.word	0x200017f0
 8008bf8:	200016ec 	.word	0x200016ec
 8008bfc:	200016e8 	.word	0x200016e8
 8008c00:	200017fc 	.word	0x200017fc
 8008c04:	200017f8 	.word	0x200017f8
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c16:	4b4e      	ldr	r3, [pc, #312]	; (8008d50 <xTaskIncrementTick+0x144>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f040 808e 	bne.w	8008d3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c20:	4b4c      	ldr	r3, [pc, #304]	; (8008d54 <xTaskIncrementTick+0x148>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c28:	4a4a      	ldr	r2, [pc, #296]	; (8008d54 <xTaskIncrementTick+0x148>)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d120      	bne.n	8008c76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c34:	4b48      	ldr	r3, [pc, #288]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	603b      	str	r3, [r7, #0]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xTaskIncrementTick+0x46>
 8008c54:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	4b40      	ldr	r3, [pc, #256]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a3e      	ldr	r2, [pc, #248]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	4a3e      	ldr	r2, [pc, #248]	; (8008d5c <xTaskIncrementTick+0x150>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b3d      	ldr	r3, [pc, #244]	; (8008d60 <xTaskIncrementTick+0x154>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <xTaskIncrementTick+0x154>)
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	f000 faa9 	bl	80091c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c76:	4b3b      	ldr	r3, [pc, #236]	; (8008d64 <xTaskIncrementTick+0x158>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d348      	bcc.n	8008d12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c80:	4b35      	ldr	r3, [pc, #212]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c8a:	4b36      	ldr	r3, [pc, #216]	; (8008d64 <xTaskIncrementTick+0x158>)
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	601a      	str	r2, [r3, #0]
					break;
 8008c92:	e03e      	b.n	8008d12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c94:	4b30      	ldr	r3, [pc, #192]	; (8008d58 <xTaskIncrementTick+0x14c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d203      	bcs.n	8008cb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cac:	4a2d      	ldr	r2, [pc, #180]	; (8008d64 <xTaskIncrementTick+0x158>)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cb2:	e02e      	b.n	8008d12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe ff1a 	bl	8007af2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3318      	adds	r3, #24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe ff11 	bl	8007af2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	409a      	lsls	r2, r3
 8008cd8:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <xTaskIncrementTick+0x15c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	4a22      	ldr	r2, [pc, #136]	; (8008d68 <xTaskIncrementTick+0x15c>)
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4a1f      	ldr	r2, [pc, #124]	; (8008d6c <xTaskIncrementTick+0x160>)
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7fe fe9d 	bl	8007a38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <xTaskIncrementTick+0x164>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d3b9      	bcc.n	8008c80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d10:	e7b6      	b.n	8008c80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d12:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <xTaskIncrementTick+0x164>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4914      	ldr	r1, [pc, #80]	; (8008d6c <xTaskIncrementTick+0x160>)
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d901      	bls.n	8008d2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <xTaskIncrementTick+0x168>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d007      	beq.n	8008d46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e004      	b.n	8008d46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <xTaskIncrementTick+0x16c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	4a0d      	ldr	r2, [pc, #52]	; (8008d78 <xTaskIncrementTick+0x16c>)
 8008d44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d46:	697b      	ldr	r3, [r7, #20]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001810 	.word	0x20001810
 8008d54:	200017ec 	.word	0x200017ec
 8008d58:	200017a0 	.word	0x200017a0
 8008d5c:	200017a4 	.word	0x200017a4
 8008d60:	20001800 	.word	0x20001800
 8008d64:	20001808 	.word	0x20001808
 8008d68:	200017f0 	.word	0x200017f0
 8008d6c:	200016ec 	.word	0x200016ec
 8008d70:	200016e8 	.word	0x200016e8
 8008d74:	200017fc 	.word	0x200017fc
 8008d78:	200017f8 	.word	0x200017f8

08008d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d82:	4b29      	ldr	r3, [pc, #164]	; (8008e28 <vTaskSwitchContext+0xac>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d8a:	4b28      	ldr	r3, [pc, #160]	; (8008e2c <vTaskSwitchContext+0xb0>)
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d90:	e044      	b.n	8008e1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008d92:	4b26      	ldr	r3, [pc, #152]	; (8008e2c <vTaskSwitchContext+0xb0>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d98:	4b25      	ldr	r3, [pc, #148]	; (8008e30 <vTaskSwitchContext+0xb4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	fab3 f383 	clz	r3, r3
 8008da4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	f1c3 031f 	rsb	r3, r3, #31
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	4921      	ldr	r1, [pc, #132]	; (8008e34 <vTaskSwitchContext+0xb8>)
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	607b      	str	r3, [r7, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <vTaskSwitchContext+0x5a>
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a14      	ldr	r2, [pc, #80]	; (8008e34 <vTaskSwitchContext+0xb8>)
 8008de4:	4413      	add	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	605a      	str	r2, [r3, #4]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d104      	bne.n	8008e08 <vTaskSwitchContext+0x8c>
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	605a      	str	r2, [r3, #4]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <vTaskSwitchContext+0xbc>)
 8008e10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e12:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <vTaskSwitchContext+0xbc>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	334c      	adds	r3, #76	; 0x4c
 8008e18:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <vTaskSwitchContext+0xc0>)
 8008e1a:	6013      	str	r3, [r2, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	20001810 	.word	0x20001810
 8008e2c:	200017fc 	.word	0x200017fc
 8008e30:	200017f0 	.word	0x200017f0
 8008e34:	200016ec 	.word	0x200016ec
 8008e38:	200016e8 	.word	0x200016e8
 8008e3c:	200000ec 	.word	0x200000ec

08008e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <vTaskPlaceOnEventList+0x44>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3318      	adds	r3, #24
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fe fe06 	bl	8007a80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e74:	2101      	movs	r1, #1
 8008e76:	6838      	ldr	r0, [r7, #0]
 8008e78:	f000 fb82 	bl	8009580 <prvAddCurrentTaskToDelayedList>
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	200016e8 	.word	0x200016e8

08008e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fe1a 	bl	8007af2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <xTaskRemoveFromEventList+0xac>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11c      	bne.n	8008f00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fe11 	bl	8007af2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	4b17      	ldr	r3, [pc, #92]	; (8008f38 <xTaskRemoveFromEventList+0xb0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <xTaskRemoveFromEventList+0xb0>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <xTaskRemoveFromEventList+0xb4>)
 8008ef0:	441a      	add	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fe fd9d 	bl	8007a38 <vListInsertEnd>
 8008efe:	e005      	b.n	8008f0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3318      	adds	r3, #24
 8008f04:	4619      	mov	r1, r3
 8008f06:	480e      	ldr	r0, [pc, #56]	; (8008f40 <xTaskRemoveFromEventList+0xb8>)
 8008f08:	f7fe fd96 	bl	8007a38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <xTaskRemoveFromEventList+0xbc>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d905      	bls.n	8008f26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <xTaskRemoveFromEventList+0xc0>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e001      	b.n	8008f2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f2a:	697b      	ldr	r3, [r7, #20]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20001810 	.word	0x20001810
 8008f38:	200017f0 	.word	0x200017f0
 8008f3c:	200016ec 	.word	0x200016ec
 8008f40:	200017a8 	.word	0x200017a8
 8008f44:	200016e8 	.word	0x200016e8
 8008f48:	200017fc 	.word	0x200017fc

08008f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <vTaskInternalSetTimeOutState+0x24>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <vTaskInternalSetTimeOutState+0x28>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20001800 	.word	0x20001800
 8008f74:	200017ec 	.word	0x200017ec

08008f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	613b      	str	r3, [r7, #16]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fba:	f000 fc73 	bl	80098a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <xTaskCheckForTimeOut+0xbc>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd6:	d102      	bne.n	8008fde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e023      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xTaskCheckForTimeOut+0xc0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d007      	beq.n	8008ffa <xTaskCheckForTimeOut+0x82>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e015      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	429a      	cmp	r2, r3
 8009002:	d20b      	bcs.n	800901c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ff9b 	bl	8008f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e004      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f000 fc6d 	bl	8009904 <vPortExitCritical>

	return xReturn;
 800902a:	69fb      	ldr	r3, [r7, #28]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200017ec 	.word	0x200017ec
 8009038:	20001800 	.word	0x20001800

0800903c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009040:	4b03      	ldr	r3, [pc, #12]	; (8009050 <vTaskMissedYield+0x14>)
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	200017fc 	.word	0x200017fc

08009054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800905c:	f000 f852 	bl	8009104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <prvIdleTask+0x28>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d9f9      	bls.n	800905c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <prvIdleTask+0x2c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009078:	e7f0      	b.n	800905c <prvIdleTask+0x8>
 800907a:	bf00      	nop
 800907c:	200016ec 	.word	0x200016ec
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	e00c      	b.n	80090aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <prvInitialiseTaskLists+0x60>)
 800909c:	4413      	add	r3, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc9d 	bl	80079de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3301      	adds	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	d9ef      	bls.n	8009090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090b0:	480d      	ldr	r0, [pc, #52]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090b2:	f7fe fc94 	bl	80079de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090b6:	480d      	ldr	r0, [pc, #52]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090b8:	f7fe fc91 	bl	80079de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090bc:	480c      	ldr	r0, [pc, #48]	; (80090f0 <prvInitialiseTaskLists+0x6c>)
 80090be:	f7fe fc8e 	bl	80079de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090c2:	480c      	ldr	r0, [pc, #48]	; (80090f4 <prvInitialiseTaskLists+0x70>)
 80090c4:	f7fe fc8b 	bl	80079de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c8:	480b      	ldr	r0, [pc, #44]	; (80090f8 <prvInitialiseTaskLists+0x74>)
 80090ca:	f7fe fc88 	bl	80079de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <prvInitialiseTaskLists+0x78>)
 80090d0:	4a05      	ldr	r2, [pc, #20]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090d4:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <prvInitialiseTaskLists+0x7c>)
 80090d6:	4a05      	ldr	r2, [pc, #20]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200016ec 	.word	0x200016ec
 80090e8:	20001778 	.word	0x20001778
 80090ec:	2000178c 	.word	0x2000178c
 80090f0:	200017a8 	.word	0x200017a8
 80090f4:	200017bc 	.word	0x200017bc
 80090f8:	200017d4 	.word	0x200017d4
 80090fc:	200017a0 	.word	0x200017a0
 8009100:	200017a4 	.word	0x200017a4

08009104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910a:	e019      	b.n	8009140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800910c:	f000 fbca 	bl	80098a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <prvCheckTasksWaitingTermination+0x50>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fce8 	bl	8007af2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009122:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3b01      	subs	r3, #1
 8009128:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 800912a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	4a0a      	ldr	r2, [pc, #40]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009136:	f000 fbe5 	bl	8009904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f810 	bl	8009160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	200017bc 	.word	0x200017bc
 8009158:	200017e8 	.word	0x200017e8
 800915c:	200017d0 	.word	0x200017d0

08009160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	334c      	adds	r3, #76	; 0x4c
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fe6d 	bl	8009e4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fd3d 	bl	8009c00 <vPortFree>
				vPortFree( pxTCB );
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fd3a 	bl	8009c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800918c:	e018      	b.n	80091c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009194:	2b01      	cmp	r3, #1
 8009196:	d103      	bne.n	80091a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fd31 	bl	8009c00 <vPortFree>
	}
 800919e:	e00f      	b.n	80091c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d00a      	beq.n	80091c0 <prvDeleteTCB+0x60>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60fb      	str	r3, [r7, #12]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <prvDeleteTCB+0x5e>
	}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <prvResetNextTaskUnblockTime+0x38>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <prvResetNextTaskUnblockTime+0x3c>)
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091e0:	e008      	b.n	80091f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <prvResetNextTaskUnblockTime+0x38>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvResetNextTaskUnblockTime+0x3c>)
 80091f2:	6013      	str	r3, [r2, #0]
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200017a0 	.word	0x200017a0
 8009204:	20001808 	.word	0x20001808

08009208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800920e:	4b0b      	ldr	r3, [pc, #44]	; (800923c <xTaskGetSchedulerState+0x34>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009216:	2301      	movs	r3, #1
 8009218:	607b      	str	r3, [r7, #4]
 800921a:	e008      	b.n	800922e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921c:	4b08      	ldr	r3, [pc, #32]	; (8009240 <xTaskGetSchedulerState+0x38>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009224:	2302      	movs	r3, #2
 8009226:	607b      	str	r3, [r7, #4]
 8009228:	e001      	b.n	800922e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800922e:	687b      	ldr	r3, [r7, #4]
	}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200017f4 	.word	0x200017f4
 8009240:	20001810 	.word	0x20001810

08009244 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d05e      	beq.n	8009318 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	4b31      	ldr	r3, [pc, #196]	; (8009324 <xTaskPriorityInherit+0xe0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	429a      	cmp	r2, r3
 8009266:	d24e      	bcs.n	8009306 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	db06      	blt.n	800927e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009270:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <xTaskPriorityInherit+0xe0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	f1c3 0207 	rsb	r2, r3, #7
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6959      	ldr	r1, [r3, #20]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4a26      	ldr	r2, [pc, #152]	; (8009328 <xTaskPriorityInherit+0xe4>)
 8009290:	4413      	add	r3, r2
 8009292:	4299      	cmp	r1, r3
 8009294:	d12f      	bne.n	80092f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	3304      	adds	r3, #4
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fc29 	bl	8007af2 <uxListRemove>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	2201      	movs	r2, #1
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	43da      	mvns	r2, r3
 80092b2:	4b1e      	ldr	r3, [pc, #120]	; (800932c <xTaskPriorityInherit+0xe8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4013      	ands	r3, r2
 80092b8:	4a1c      	ldr	r2, [pc, #112]	; (800932c <xTaskPriorityInherit+0xe8>)
 80092ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <xTaskPriorityInherit+0xe0>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	409a      	lsls	r2, r3
 80092ce:	4b17      	ldr	r3, [pc, #92]	; (800932c <xTaskPriorityInherit+0xe8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <xTaskPriorityInherit+0xe8>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a10      	ldr	r2, [pc, #64]	; (8009328 <xTaskPriorityInherit+0xe4>)
 80092e6:	441a      	add	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe fba2 	bl	8007a38 <vListInsertEnd>
 80092f4:	e004      	b.n	8009300 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092f6:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <xTaskPriorityInherit+0xe0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e008      	b.n	8009318 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800930a:	4b06      	ldr	r3, [pc, #24]	; (8009324 <xTaskPriorityInherit+0xe0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	429a      	cmp	r2, r3
 8009312:	d201      	bcs.n	8009318 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009318:	68fb      	ldr	r3, [r7, #12]
	}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200016e8 	.word	0x200016e8
 8009328:	200016ec 	.word	0x200016ec
 800932c:	200017f0 	.word	0x200017f0

08009330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d06e      	beq.n	8009424 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009346:	4b3a      	ldr	r3, [pc, #232]	; (8009430 <xTaskPriorityDisinherit+0x100>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	429a      	cmp	r2, r3
 800934e:	d00a      	beq.n	8009366 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	60fb      	str	r3, [r7, #12]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60bb      	str	r3, [r7, #8]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009388:	1e5a      	subs	r2, r3, #1
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	429a      	cmp	r2, r3
 8009398:	d044      	beq.n	8009424 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d140      	bne.n	8009424 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fba3 	bl	8007af2 <uxListRemove>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d115      	bne.n	80093de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b6:	491f      	ldr	r1, [pc, #124]	; (8009434 <xTaskPriorityDisinherit+0x104>)
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xTaskPriorityDisinherit+0xae>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	2201      	movs	r2, #1
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	43da      	mvns	r2, r3
 80093d4:	4b18      	ldr	r3, [pc, #96]	; (8009438 <xTaskPriorityDisinherit+0x108>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4013      	ands	r3, r2
 80093da:	4a17      	ldr	r2, [pc, #92]	; (8009438 <xTaskPriorityDisinherit+0x108>)
 80093dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	f1c3 0207 	rsb	r2, r3, #7
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	2201      	movs	r2, #1
 80093f8:	409a      	lsls	r2, r3
 80093fa:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <xTaskPriorityDisinherit+0x108>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4313      	orrs	r3, r2
 8009400:	4a0d      	ldr	r2, [pc, #52]	; (8009438 <xTaskPriorityDisinherit+0x108>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a08      	ldr	r2, [pc, #32]	; (8009434 <xTaskPriorityDisinherit+0x104>)
 8009412:	441a      	add	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7fe fb0c 	bl	8007a38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009424:	697b      	ldr	r3, [r7, #20]
	}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200016e8 	.word	0x200016e8
 8009434:	200016ec 	.word	0x200016ec
 8009438:	200017f0 	.word	0x200017f0

0800943c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800944a:	2301      	movs	r3, #1
 800944c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d077      	beq.n	8009544 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	60fb      	str	r3, [r7, #12]
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d902      	bls.n	8009482 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	61fb      	str	r3, [r7, #28]
 8009480:	e002      	b.n	8009488 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	429a      	cmp	r2, r3
 8009490:	d058      	beq.n	8009544 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	429a      	cmp	r2, r3
 800949a:	d153      	bne.n	8009544 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d10a      	bne.n	80094bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60bb      	str	r3, [r7, #8]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	db04      	blt.n	80094da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f1c3 0207 	rsb	r2, r3, #7
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6959      	ldr	r1, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4a19      	ldr	r2, [pc, #100]	; (8009550 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80094ea:	4413      	add	r3, r2
 80094ec:	4299      	cmp	r1, r3
 80094ee:	d129      	bne.n	8009544 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fafc 	bl	8007af2 <uxListRemove>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	2201      	movs	r2, #1
 8009506:	fa02 f303 	lsl.w	r3, r2, r3
 800950a:	43da      	mvns	r2, r3
 800950c:	4b11      	ldr	r3, [pc, #68]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4013      	ands	r3, r2
 8009512:	4a10      	ldr	r2, [pc, #64]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009514:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	2201      	movs	r2, #1
 800951c:	409a      	lsls	r2, r3
 800951e:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4313      	orrs	r3, r2
 8009524:	4a0b      	ldr	r2, [pc, #44]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4a06      	ldr	r2, [pc, #24]	; (8009550 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009536:	441a      	add	r2, r3
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	3304      	adds	r3, #4
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7fe fa7a 	bl	8007a38 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009544:	bf00      	nop
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200016e8 	.word	0x200016e8
 8009550:	200016ec 	.word	0x200016ec
 8009554:	200017f0 	.word	0x200017f0

08009558 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800955c:	4b07      	ldr	r3, [pc, #28]	; (800957c <pvTaskIncrementMutexHeldCount+0x24>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <pvTaskIncrementMutexHeldCount+0x24>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800956a:	3201      	adds	r2, #1
 800956c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800956e:	4b03      	ldr	r3, [pc, #12]	; (800957c <pvTaskIncrementMutexHeldCount+0x24>)
 8009570:	681b      	ldr	r3, [r3, #0]
	}
 8009572:	4618      	mov	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	200016e8 	.word	0x200016e8

08009580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800958a:	4b29      	ldr	r3, [pc, #164]	; (8009630 <prvAddCurrentTaskToDelayedList+0xb0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe faab 	bl	8007af2 <uxListRemove>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	2201      	movs	r2, #1
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	43da      	mvns	r2, r3
 80095b0:	4b21      	ldr	r3, [pc, #132]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4013      	ands	r3, r2
 80095b6:	4a20      	ldr	r2, [pc, #128]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d10a      	bne.n	80095d8 <prvAddCurrentTaskToDelayedList+0x58>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c8:	4b1a      	ldr	r3, [pc, #104]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3304      	adds	r3, #4
 80095ce:	4619      	mov	r1, r3
 80095d0:	481a      	ldr	r0, [pc, #104]	; (800963c <prvAddCurrentTaskToDelayedList+0xbc>)
 80095d2:	f7fe fa31 	bl	8007a38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095d6:	e026      	b.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d209      	bcs.n	8009604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f0:	4b13      	ldr	r3, [pc, #76]	; (8009640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7fe fa3f 	bl	8007a80 <vListInsert>
}
 8009602:	e010      	b.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe fa35 	bl	8007a80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	d202      	bcs.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009620:	4a09      	ldr	r2, [pc, #36]	; (8009648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6013      	str	r3, [r2, #0]
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	200017ec 	.word	0x200017ec
 8009634:	200016e8 	.word	0x200016e8
 8009638:	200017f0 	.word	0x200017f0
 800963c:	200017d4 	.word	0x200017d4
 8009640:	200017a4 	.word	0x200017a4
 8009644:	200017a0 	.word	0x200017a0
 8009648:	20001808 	.word	0x20001808

0800964c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b04      	subs	r3, #4
 800965c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3b04      	subs	r3, #4
 800966a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3b04      	subs	r3, #4
 800967a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800967c:	4a0c      	ldr	r2, [pc, #48]	; (80096b0 <pxPortInitialiseStack+0x64>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b14      	subs	r3, #20
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f06f 0202 	mvn.w	r2, #2
 800969a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3b20      	subs	r3, #32
 80096a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	080096b5 	.word	0x080096b5

080096b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <prvTaskExitError+0x54>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d00a      	beq.n	80096de <prvTaskExitError+0x2a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	60fb      	str	r3, [r7, #12]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <prvTaskExitError+0x28>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60bb      	str	r3, [r7, #8]
}
 80096f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096f2:	bf00      	nop
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0fc      	beq.n	80096f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	2000009c 	.word	0x2000009c
 800970c:	00000000 	.word	0x00000000

08009710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <pxCurrentTCBConst2>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	f380 8809 	msr	PSP, r0
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8811 	msr	BASEPRI, r0
 800972a:	4770      	bx	lr
 800972c:	f3af 8000 	nop.w

08009730 <pxCurrentTCBConst2>:
 8009730:	200016e8 	.word	0x200016e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop

08009738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009738:	4808      	ldr	r0, [pc, #32]	; (800975c <prvPortStartFirstTask+0x24>)
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	6800      	ldr	r0, [r0, #0]
 800973e:	f380 8808 	msr	MSP, r0
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f380 8814 	msr	CONTROL, r0
 800974a:	b662      	cpsie	i
 800974c:	b661      	cpsie	f
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	df00      	svc	0
 8009758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800975a:	bf00      	nop
 800975c:	e000ed08 	.word	0xe000ed08

08009760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009766:	4b46      	ldr	r3, [pc, #280]	; (8009880 <xPortStartScheduler+0x120>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a46      	ldr	r2, [pc, #280]	; (8009884 <xPortStartScheduler+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d10a      	bne.n	8009786 <xPortStartScheduler+0x26>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	613b      	str	r3, [r7, #16]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009786:	4b3e      	ldr	r3, [pc, #248]	; (8009880 <xPortStartScheduler+0x120>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a3f      	ldr	r2, [pc, #252]	; (8009888 <xPortStartScheduler+0x128>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d10a      	bne.n	80097a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097a6:	4b39      	ldr	r3, [pc, #228]	; (800988c <xPortStartScheduler+0x12c>)
 80097a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	22ff      	movs	r2, #255	; 0xff
 80097b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4b31      	ldr	r3, [pc, #196]	; (8009890 <xPortStartScheduler+0x130>)
 80097cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097ce:	4b31      	ldr	r3, [pc, #196]	; (8009894 <xPortStartScheduler+0x134>)
 80097d0:	2207      	movs	r2, #7
 80097d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d4:	e009      	b.n	80097ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097d6:	4b2f      	ldr	r3, [pc, #188]	; (8009894 <xPortStartScheduler+0x134>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a2d      	ldr	r2, [pc, #180]	; (8009894 <xPortStartScheduler+0x134>)
 80097de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f2:	2b80      	cmp	r3, #128	; 0x80
 80097f4:	d0ef      	beq.n	80097d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097f6:	4b27      	ldr	r3, [pc, #156]	; (8009894 <xPortStartScheduler+0x134>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1c3 0307 	rsb	r3, r3, #7
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d00a      	beq.n	8009818 <xPortStartScheduler+0xb8>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009818:	4b1e      	ldr	r3, [pc, #120]	; (8009894 <xPortStartScheduler+0x134>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <xPortStartScheduler+0x134>)
 8009820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009822:	4b1c      	ldr	r3, [pc, #112]	; (8009894 <xPortStartScheduler+0x134>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800982a:	4a1a      	ldr	r2, [pc, #104]	; (8009894 <xPortStartScheduler+0x134>)
 800982c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009836:	4b18      	ldr	r3, [pc, #96]	; (8009898 <xPortStartScheduler+0x138>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <xPortStartScheduler+0x138>)
 800983c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <xPortStartScheduler+0x138>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a14      	ldr	r2, [pc, #80]	; (8009898 <xPortStartScheduler+0x138>)
 8009848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800984c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800984e:	f000 f8dd 	bl	8009a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <xPortStartScheduler+0x13c>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009858:	f000 f8fc 	bl	8009a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <xPortStartScheduler+0x140>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0f      	ldr	r2, [pc, #60]	; (80098a0 <xPortStartScheduler+0x140>)
 8009862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009868:	f7ff ff66 	bl	8009738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800986c:	f7ff fa86 	bl	8008d7c <vTaskSwitchContext>
	prvTaskExitError();
 8009870:	f7ff ff20 	bl	80096b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	e000ed00 	.word	0xe000ed00
 8009884:	410fc271 	.word	0x410fc271
 8009888:	410fc270 	.word	0x410fc270
 800988c:	e000e400 	.word	0xe000e400
 8009890:	20001814 	.word	0x20001814
 8009894:	20001818 	.word	0x20001818
 8009898:	e000ed20 	.word	0xe000ed20
 800989c:	2000009c 	.word	0x2000009c
 80098a0:	e000ef34 	.word	0xe000ef34

080098a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
}
 80098bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <vPortEnterCritical+0x58>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	4a0d      	ldr	r2, [pc, #52]	; (80098fc <vPortEnterCritical+0x58>)
 80098c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <vPortEnterCritical+0x58>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d10f      	bne.n	80098f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098d0:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <vPortEnterCritical+0x5c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	603b      	str	r3, [r7, #0]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortEnterCritical+0x4a>
	}
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	2000009c 	.word	0x2000009c
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <vPortExitCritical+0x50>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <vPortExitCritical+0x24>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	607b      	str	r3, [r7, #4]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <vPortExitCritical+0x50>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3b01      	subs	r3, #1
 800992e:	4a09      	ldr	r2, [pc, #36]	; (8009954 <vPortExitCritical+0x50>)
 8009930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <vPortExitCritical+0x50>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <vPortExitCritical+0x42>
 800993a:	2300      	movs	r3, #0
 800993c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	2000009c 	.word	0x2000009c
	...

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b15      	ldr	r3, [pc, #84]	; (80099c0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f01e 0f10 	tst.w	lr, #16
 8009970:	bf08      	it	eq
 8009972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009984:	f380 8811 	msr	BASEPRI, r0
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f7ff f9f4 	bl	8008d7c <vTaskSwitchContext>
 8009994:	f04f 0000 	mov.w	r0, #0
 8009998:	f380 8811 	msr	BASEPRI, r0
 800999c:	bc09      	pop	{r0, r3}
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	6808      	ldr	r0, [r1, #0]
 80099a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a6:	f01e 0f10 	tst.w	lr, #16
 80099aa:	bf08      	it	eq
 80099ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099b0:	f380 8809 	msr	PSP, r0
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst>:
 80099c0:	200016e8 	.word	0x200016e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e2:	f7ff f913 	bl	8008c0c <xTaskIncrementTick>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <SysTick_Handler+0x40>)
 80099ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <vPortSetupTimerInterrupt+0x38>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <vPortSetupTimerInterrupt+0x3c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <vPortSetupTimerInterrupt+0x40>)
 8009a22:	fba2 2303 	umull	r2, r3, r2, r3
 8009a26:	099b      	lsrs	r3, r3, #6
 8009a28:	4a09      	ldr	r2, [pc, #36]	; (8009a50 <vPortSetupTimerInterrupt+0x44>)
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a30:	2207      	movs	r2, #7
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	e000e010 	.word	0xe000e010
 8009a44:	e000e018 	.word	0xe000e018
 8009a48:	20000000 	.word	0x20000000
 8009a4c:	10624dd3 	.word	0x10624dd3
 8009a50:	e000e014 	.word	0xe000e014

08009a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a64 <vPortEnableVFP+0x10>
 8009a58:	6801      	ldr	r1, [r0, #0]
 8009a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a5e:	6001      	str	r1, [r0, #0]
 8009a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a62:	bf00      	nop
 8009a64:	e000ed88 	.word	0xe000ed88

08009a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a74:	f7ff f820 	bl	8008ab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a78:	4b5b      	ldr	r3, [pc, #364]	; (8009be8 <pvPortMalloc+0x180>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a80:	f000 f920 	bl	8009cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a84:	4b59      	ldr	r3, [pc, #356]	; (8009bec <pvPortMalloc+0x184>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 8093 	bne.w	8009bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01d      	beq.n	8009ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a98:	2208      	movs	r2, #8
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d014      	beq.n	8009ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f023 0307 	bic.w	r3, r3, #7
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	617b      	str	r3, [r7, #20]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06e      	beq.n	8009bb8 <pvPortMalloc+0x150>
 8009ada:	4b45      	ldr	r3, [pc, #276]	; (8009bf0 <pvPortMalloc+0x188>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d869      	bhi.n	8009bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ae4:	4b43      	ldr	r3, [pc, #268]	; (8009bf4 <pvPortMalloc+0x18c>)
 8009ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ae8:	4b42      	ldr	r3, [pc, #264]	; (8009bf4 <pvPortMalloc+0x18c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aee:	e004      	b.n	8009afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d903      	bls.n	8009b0c <pvPortMalloc+0xa4>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f1      	bne.n	8009af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b0c:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <pvPortMalloc+0x180>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d050      	beq.n	8009bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	2308      	movs	r3, #8
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d91f      	bls.n	8009b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <pvPortMalloc+0xf8>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	613b      	str	r3, [r7, #16]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b72:	69b8      	ldr	r0, [r7, #24]
 8009b74:	f000 f908 	bl	8009d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b78:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4b1b      	ldr	r3, [pc, #108]	; (8009bf8 <pvPortMalloc+0x190>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d203      	bcs.n	8009b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b92:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a18      	ldr	r2, [pc, #96]	; (8009bf8 <pvPortMalloc+0x190>)
 8009b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <pvPortMalloc+0x184>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <pvPortMalloc+0x194>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a11      	ldr	r2, [pc, #68]	; (8009bfc <pvPortMalloc+0x194>)
 8009bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bb8:	f7fe ff8c 	bl	8008ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <pvPortMalloc+0x174>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	60fb      	str	r3, [r7, #12]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <pvPortMalloc+0x172>
	return pvReturn;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3728      	adds	r7, #40	; 0x28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20005424 	.word	0x20005424
 8009bec:	20005438 	.word	0x20005438
 8009bf0:	20005428 	.word	0x20005428
 8009bf4:	2000541c 	.word	0x2000541c
 8009bf8:	2000542c 	.word	0x2000542c
 8009bfc:	20005430 	.word	0x20005430

08009c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04d      	beq.n	8009cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c12:	2308      	movs	r3, #8
 8009c14:	425b      	negs	r3, r3
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4413      	add	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <vPortFree+0xb8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <vPortFree+0x44>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <vPortFree+0x62>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	60bb      	str	r3, [r7, #8]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <vPortFree+0xb8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d01e      	beq.n	8009cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11a      	bne.n	8009cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <vPortFree+0xb8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	401a      	ands	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c88:	f7fe ff16 	bl	8008ab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <vPortFree+0xbc>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <vPortFree+0xbc>)
 8009c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c9a:	6938      	ldr	r0, [r7, #16]
 8009c9c:	f000 f874 	bl	8009d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <vPortFree+0xc0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	4a06      	ldr	r2, [pc, #24]	; (8009cc0 <vPortFree+0xc0>)
 8009ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009caa:	f7fe ff13 	bl	8008ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20005438 	.word	0x20005438
 8009cbc:	20005428 	.word	0x20005428
 8009cc0:	20005434 	.word	0x20005434

08009cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cd0:	4b27      	ldr	r3, [pc, #156]	; (8009d70 <prvHeapInit+0xac>)
 8009cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00c      	beq.n	8009cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3307      	adds	r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <prvHeapInit+0xac>)
 8009cf4:	4413      	add	r3, r2
 8009cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	; (8009d74 <prvHeapInit+0xb0>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d02:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <prvHeapInit+0xb0>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d10:	2208      	movs	r2, #8
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a15      	ldr	r2, [pc, #84]	; (8009d78 <prvHeapInit+0xb4>)
 8009d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <prvHeapInit+0xb4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d2e:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <prvHeapInit+0xb4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <prvHeapInit+0xb4>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4a0a      	ldr	r2, [pc, #40]	; (8009d7c <prvHeapInit+0xb8>)
 8009d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <prvHeapInit+0xbc>)
 8009d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <prvHeapInit+0xc0>)
 8009d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	2000181c 	.word	0x2000181c
 8009d74:	2000541c 	.word	0x2000541c
 8009d78:	20005424 	.word	0x20005424
 8009d7c:	2000542c 	.word	0x2000542c
 8009d80:	20005428 	.word	0x20005428
 8009d84:	20005438 	.word	0x20005438

08009d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d90:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <prvInsertBlockIntoFreeList+0xac>)
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e002      	b.n	8009d9c <prvInsertBlockIntoFreeList+0x14>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d8f7      	bhi.n	8009d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d108      	bne.n	8009dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d118      	bne.n	8009e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <prvInsertBlockIntoFreeList+0xb0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d00d      	beq.n	8009e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	441a      	add	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	e008      	b.n	8009e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <prvInsertBlockIntoFreeList+0xb0>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	e003      	b.n	8009e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d002      	beq.n	8009e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	2000541c 	.word	0x2000541c
 8009e38:	20005424 	.word	0x20005424

08009e3c <memset>:
 8009e3c:	4402      	add	r2, r0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d100      	bne.n	8009e46 <memset+0xa>
 8009e44:	4770      	bx	lr
 8009e46:	f803 1b01 	strb.w	r1, [r3], #1
 8009e4a:	e7f9      	b.n	8009e40 <memset+0x4>

08009e4c <_reclaim_reent>:
 8009e4c:	4b29      	ldr	r3, [pc, #164]	; (8009ef4 <_reclaim_reent+0xa8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4283      	cmp	r3, r0
 8009e52:	b570      	push	{r4, r5, r6, lr}
 8009e54:	4604      	mov	r4, r0
 8009e56:	d04b      	beq.n	8009ef0 <_reclaim_reent+0xa4>
 8009e58:	69c3      	ldr	r3, [r0, #28]
 8009e5a:	b143      	cbz	r3, 8009e6e <_reclaim_reent+0x22>
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d144      	bne.n	8009eec <_reclaim_reent+0xa0>
 8009e62:	69e3      	ldr	r3, [r4, #28]
 8009e64:	6819      	ldr	r1, [r3, #0]
 8009e66:	b111      	cbz	r1, 8009e6e <_reclaim_reent+0x22>
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 f879 	bl	8009f60 <_free_r>
 8009e6e:	6961      	ldr	r1, [r4, #20]
 8009e70:	b111      	cbz	r1, 8009e78 <_reclaim_reent+0x2c>
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f874 	bl	8009f60 <_free_r>
 8009e78:	69e1      	ldr	r1, [r4, #28]
 8009e7a:	b111      	cbz	r1, 8009e82 <_reclaim_reent+0x36>
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 f86f 	bl	8009f60 <_free_r>
 8009e82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009e84:	b111      	cbz	r1, 8009e8c <_reclaim_reent+0x40>
 8009e86:	4620      	mov	r0, r4
 8009e88:	f000 f86a 	bl	8009f60 <_free_r>
 8009e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e8e:	b111      	cbz	r1, 8009e96 <_reclaim_reent+0x4a>
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 f865 	bl	8009f60 <_free_r>
 8009e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e98:	b111      	cbz	r1, 8009ea0 <_reclaim_reent+0x54>
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 f860 	bl	8009f60 <_free_r>
 8009ea0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ea2:	b111      	cbz	r1, 8009eaa <_reclaim_reent+0x5e>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 f85b 	bl	8009f60 <_free_r>
 8009eaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009eac:	b111      	cbz	r1, 8009eb4 <_reclaim_reent+0x68>
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 f856 	bl	8009f60 <_free_r>
 8009eb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009eb6:	b111      	cbz	r1, 8009ebe <_reclaim_reent+0x72>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 f851 	bl	8009f60 <_free_r>
 8009ebe:	6a23      	ldr	r3, [r4, #32]
 8009ec0:	b1b3      	cbz	r3, 8009ef0 <_reclaim_reent+0xa4>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ec8:	4718      	bx	r3
 8009eca:	5949      	ldr	r1, [r1, r5]
 8009ecc:	b941      	cbnz	r1, 8009ee0 <_reclaim_reent+0x94>
 8009ece:	3504      	adds	r5, #4
 8009ed0:	69e3      	ldr	r3, [r4, #28]
 8009ed2:	2d80      	cmp	r5, #128	; 0x80
 8009ed4:	68d9      	ldr	r1, [r3, #12]
 8009ed6:	d1f8      	bne.n	8009eca <_reclaim_reent+0x7e>
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 f841 	bl	8009f60 <_free_r>
 8009ede:	e7c0      	b.n	8009e62 <_reclaim_reent+0x16>
 8009ee0:	680e      	ldr	r6, [r1, #0]
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f83c 	bl	8009f60 <_free_r>
 8009ee8:	4631      	mov	r1, r6
 8009eea:	e7ef      	b.n	8009ecc <_reclaim_reent+0x80>
 8009eec:	2500      	movs	r5, #0
 8009eee:	e7ef      	b.n	8009ed0 <_reclaim_reent+0x84>
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200000ec 	.word	0x200000ec

08009ef8 <__libc_init_array>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4d0d      	ldr	r5, [pc, #52]	; (8009f30 <__libc_init_array+0x38>)
 8009efc:	4c0d      	ldr	r4, [pc, #52]	; (8009f34 <__libc_init_array+0x3c>)
 8009efe:	1b64      	subs	r4, r4, r5
 8009f00:	10a4      	asrs	r4, r4, #2
 8009f02:	2600      	movs	r6, #0
 8009f04:	42a6      	cmp	r6, r4
 8009f06:	d109      	bne.n	8009f1c <__libc_init_array+0x24>
 8009f08:	4d0b      	ldr	r5, [pc, #44]	; (8009f38 <__libc_init_array+0x40>)
 8009f0a:	4c0c      	ldr	r4, [pc, #48]	; (8009f3c <__libc_init_array+0x44>)
 8009f0c:	f000 f880 	bl	800a010 <_init>
 8009f10:	1b64      	subs	r4, r4, r5
 8009f12:	10a4      	asrs	r4, r4, #2
 8009f14:	2600      	movs	r6, #0
 8009f16:	42a6      	cmp	r6, r4
 8009f18:	d105      	bne.n	8009f26 <__libc_init_array+0x2e>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f20:	4798      	blx	r3
 8009f22:	3601      	adds	r6, #1
 8009f24:	e7ee      	b.n	8009f04 <__libc_init_array+0xc>
 8009f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2a:	4798      	blx	r3
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	e7f2      	b.n	8009f16 <__libc_init_array+0x1e>
 8009f30:	0800a218 	.word	0x0800a218
 8009f34:	0800a218 	.word	0x0800a218
 8009f38:	0800a218 	.word	0x0800a218
 8009f3c:	0800a21c 	.word	0x0800a21c

08009f40 <__retarget_lock_acquire_recursive>:
 8009f40:	4770      	bx	lr

08009f42 <__retarget_lock_release_recursive>:
 8009f42:	4770      	bx	lr

08009f44 <memcpy>:
 8009f44:	440a      	add	r2, r1
 8009f46:	4291      	cmp	r1, r2
 8009f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f4c:	d100      	bne.n	8009f50 <memcpy+0xc>
 8009f4e:	4770      	bx	lr
 8009f50:	b510      	push	{r4, lr}
 8009f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f5a:	4291      	cmp	r1, r2
 8009f5c:	d1f9      	bne.n	8009f52 <memcpy+0xe>
 8009f5e:	bd10      	pop	{r4, pc}

08009f60 <_free_r>:
 8009f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d044      	beq.n	8009ff0 <_free_r+0x90>
 8009f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6a:	9001      	str	r0, [sp, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f72:	bfb8      	it	lt
 8009f74:	18e4      	addlt	r4, r4, r3
 8009f76:	f000 f83f 	bl	8009ff8 <__malloc_lock>
 8009f7a:	4a1e      	ldr	r2, [pc, #120]	; (8009ff4 <_free_r+0x94>)
 8009f7c:	9801      	ldr	r0, [sp, #4]
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	b933      	cbnz	r3, 8009f90 <_free_r+0x30>
 8009f82:	6063      	str	r3, [r4, #4]
 8009f84:	6014      	str	r4, [r2, #0]
 8009f86:	b003      	add	sp, #12
 8009f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f8c:	f000 b83a 	b.w	800a004 <__malloc_unlock>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d908      	bls.n	8009fa6 <_free_r+0x46>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf01      	itttt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	1949      	addeq	r1, r1, r5
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	e7ed      	b.n	8009f82 <_free_r+0x22>
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	b10b      	cbz	r3, 8009fb0 <_free_r+0x50>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d9fa      	bls.n	8009fa6 <_free_r+0x46>
 8009fb0:	6811      	ldr	r1, [r2, #0]
 8009fb2:	1855      	adds	r5, r2, r1
 8009fb4:	42a5      	cmp	r5, r4
 8009fb6:	d10b      	bne.n	8009fd0 <_free_r+0x70>
 8009fb8:	6824      	ldr	r4, [r4, #0]
 8009fba:	4421      	add	r1, r4
 8009fbc:	1854      	adds	r4, r2, r1
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	6011      	str	r1, [r2, #0]
 8009fc2:	d1e0      	bne.n	8009f86 <_free_r+0x26>
 8009fc4:	681c      	ldr	r4, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	6053      	str	r3, [r2, #4]
 8009fca:	440c      	add	r4, r1
 8009fcc:	6014      	str	r4, [r2, #0]
 8009fce:	e7da      	b.n	8009f86 <_free_r+0x26>
 8009fd0:	d902      	bls.n	8009fd8 <_free_r+0x78>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	e7d6      	b.n	8009f86 <_free_r+0x26>
 8009fd8:	6825      	ldr	r5, [r4, #0]
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf04      	itt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	bf04      	itt	eq
 8009fe8:	1949      	addeq	r1, r1, r5
 8009fea:	6021      	streq	r1, [r4, #0]
 8009fec:	6054      	str	r4, [r2, #4]
 8009fee:	e7ca      	b.n	8009f86 <_free_r+0x26>
 8009ff0:	b003      	add	sp, #12
 8009ff2:	bd30      	pop	{r4, r5, pc}
 8009ff4:	20005578 	.word	0x20005578

08009ff8 <__malloc_lock>:
 8009ff8:	4801      	ldr	r0, [pc, #4]	; (800a000 <__malloc_lock+0x8>)
 8009ffa:	f7ff bfa1 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 8009ffe:	bf00      	nop
 800a000:	20005574 	.word	0x20005574

0800a004 <__malloc_unlock>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__malloc_unlock+0x8>)
 800a006:	f7ff bf9c 	b.w	8009f42 <__retarget_lock_release_recursive>
 800a00a:	bf00      	nop
 800a00c:	20005574 	.word	0x20005574

0800a010 <_init>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr

0800a01c <_fini>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr
