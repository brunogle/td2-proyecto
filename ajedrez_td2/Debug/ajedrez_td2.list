
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000660c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069cc  080069cc  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d4  080069d4  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013cc  200000f8  08006ad4  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  08006ad4  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c937  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7d  00000000  00000000  0002caa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d6  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e68  00000000  00000000  00030cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103c7  00000000  00000000  00048b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008df7d  00000000  00000000  00058f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e3c  00000000  00000000  000e6ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006794 	.word	0x08006794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	08006794 	.word	0x08006794

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e00d      	b.n	80005a6 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	3380      	adds	r3, #128	; 0x80
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	2206      	movs	r2, #6
 800059e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b7f      	cmp	r3, #127	; 0x7f
 80005aa:	ddee      	ble.n	800058a <clear_game_state+0xe>
    }
    return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	4608      	mov	r0, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	461a      	mov	r2, r3
 80005c8:	4603      	mov	r3, r0
 80005ca:	70fb      	strb	r3, [r7, #3]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70bb      	strb	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 80005d4:	787b      	ldrb	r3, [r7, #1]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	78f9      	ldrb	r1, [r7, #3]
 80005da:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 80005dc:	787b      	ldrb	r3, [r7, #1]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	78ba      	ldrb	r2, [r7, #2]
 80005e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	2106      	movs	r1, #6
 8000608:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	2202      	movs	r2, #2
 8000612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8000628:	4902      	ldr	r1, [pc, #8]	; (8000634 <engine_reset+0x10>)
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <engine_reset+0x14>)
 800062c:	f000 f838 	bl	80006a0 <load_fen>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	080067ac 	.word	0x080067ac
 8000638:	20000114 	.word	0x20000114

0800063c <engine_move_piece>:

char engine_move_piece(move_t move){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    return make_move(&game_state, move, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <engine_move_piece+0x20>)
 800064a:	f000 f9d7 	bl	80009fc <make_move>
 800064e:	4603      	mov	r3, r0
 8000650:	b2db      	uxtb	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000114 	.word	0x20000114

08000660 <engine_list_moves>:

int engine_list_moves(move_t * moves){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    return generate_moves(&game_state, moves);
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <engine_list_moves+0x1c>)
 800066c:	f000 fad0 	bl	8000c10 <generate_moves>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000114 	.word	0x20000114

08000680 <engine_get_piece>:

char engine_get_piece(uint8_t square){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    return game_state.pieces[square];
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <engine_get_piece+0x1c>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000114 	.word	0x20000114

080006a0 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff66 	bl	800057c <clear_game_state>

    char * f = (char *)fen;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	60fb      	str	r3, [r7, #12]

    char col = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3b2f      	subs	r3, #47	; 0x2f
 80006c2:	2b43      	cmp	r3, #67	; 0x43
 80006c4:	f200 8166 	bhi.w	8000994 <load_fen+0x2f4>
 80006c8:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <load_fen+0x30>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	08000949 	.word	0x08000949
 80006d4:	08000995 	.word	0x08000995
 80006d8:	08000955 	.word	0x08000955
 80006dc:	0800095d 	.word	0x0800095d
 80006e0:	08000965 	.word	0x08000965
 80006e4:	0800096d 	.word	0x0800096d
 80006e8:	08000975 	.word	0x08000975
 80006ec:	0800097d 	.word	0x0800097d
 80006f0:	08000985 	.word	0x08000985
 80006f4:	0800098d 	.word	0x0800098d
 80006f8:	08000995 	.word	0x08000995
 80006fc:	08000995 	.word	0x08000995
 8000700:	08000995 	.word	0x08000995
 8000704:	08000995 	.word	0x08000995
 8000708:	08000995 	.word	0x08000995
 800070c:	08000995 	.word	0x08000995
 8000710:	08000995 	.word	0x08000995
 8000714:	08000995 	.word	0x08000995
 8000718:	08000995 	.word	0x08000995
 800071c:	0800083b 	.word	0x0800083b
 8000720:	08000995 	.word	0x08000995
 8000724:	08000995 	.word	0x08000995
 8000728:	08000995 	.word	0x08000995
 800072c:	08000995 	.word	0x08000995
 8000730:	08000995 	.word	0x08000995
 8000734:	08000995 	.word	0x08000995
 8000738:	08000995 	.word	0x08000995
 800073c:	08000995 	.word	0x08000995
 8000740:	080007e1 	.word	0x080007e1
 8000744:	08000995 	.word	0x08000995
 8000748:	08000995 	.word	0x08000995
 800074c:	08000859 	.word	0x08000859
 8000750:	08000995 	.word	0x08000995
 8000754:	08000877 	.word	0x08000877
 8000758:	080007ff 	.word	0x080007ff
 800075c:	0800081d 	.word	0x0800081d
 8000760:	08000995 	.word	0x08000995
 8000764:	08000995 	.word	0x08000995
 8000768:	08000995 	.word	0x08000995
 800076c:	08000995 	.word	0x08000995
 8000770:	08000995 	.word	0x08000995
 8000774:	08000995 	.word	0x08000995
 8000778:	08000995 	.word	0x08000995
 800077c:	08000995 	.word	0x08000995
 8000780:	08000995 	.word	0x08000995
 8000784:	08000995 	.word	0x08000995
 8000788:	08000995 	.word	0x08000995
 800078c:	08000995 	.word	0x08000995
 8000790:	08000995 	.word	0x08000995
 8000794:	08000995 	.word	0x08000995
 8000798:	08000995 	.word	0x08000995
 800079c:	080008ef 	.word	0x080008ef
 80007a0:	08000995 	.word	0x08000995
 80007a4:	08000995 	.word	0x08000995
 80007a8:	08000995 	.word	0x08000995
 80007ac:	08000995 	.word	0x08000995
 80007b0:	08000995 	.word	0x08000995
 80007b4:	08000995 	.word	0x08000995
 80007b8:	08000995 	.word	0x08000995
 80007bc:	08000995 	.word	0x08000995
 80007c0:	08000895 	.word	0x08000895
 80007c4:	08000995 	.word	0x08000995
 80007c8:	08000995 	.word	0x08000995
 80007cc:	0800090d 	.word	0x0800090d
 80007d0:	08000995 	.word	0x08000995
 80007d4:	0800092b 	.word	0x0800092b
 80007d8:	080008b3 	.word	0x080008b3
 80007dc:	080008d1 	.word	0x080008d1
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 80007e0:	7abb      	ldrb	r3, [r7, #10]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fee2 	bl	80005ba <place_piece>
            col++;
 80007f6:	7afb      	ldrb	r3, [r7, #11]
 80007f8:	3301      	adds	r3, #1
 80007fa:	72fb      	strb	r3, [r7, #11]
            break;
 80007fc:	e0ca      	b.n	8000994 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 80007fe:	7abb      	ldrb	r3, [r7, #10]
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b2da      	uxtb	r2, r3
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	4413      	add	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fed3 	bl	80005ba <place_piece>
            col++;
 8000814:	7afb      	ldrb	r3, [r7, #11]
 8000816:	3301      	adds	r3, #1
 8000818:	72fb      	strb	r3, [r7, #11]
            break;
 800081a:	e0bb      	b.n	8000994 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b2da      	uxtb	r2, r3
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4413      	add	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fec4 	bl	80005ba <place_piece>
            col++;
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	3301      	adds	r3, #1
 8000836:	72fb      	strb	r3, [r7, #11]
            break;
 8000838:	e0ac      	b.n	8000994 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 800083a:	7abb      	ldrb	r3, [r7, #10]
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	b2da      	uxtb	r2, r3
 8000840:	7afb      	ldrb	r3, [r7, #11]
 8000842:	4413      	add	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2200      	movs	r2, #0
 8000848:	2103      	movs	r1, #3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff feb5 	bl	80005ba <place_piece>
            col++;
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	3301      	adds	r3, #1
 8000854:	72fb      	strb	r3, [r7, #11]
            break;
 8000856:	e09d      	b.n	8000994 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8000858:	7abb      	ldrb	r3, [r7, #10]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	4413      	add	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fea6 	bl	80005ba <place_piece>
            col++;
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	3301      	adds	r3, #1
 8000872:	72fb      	strb	r3, [r7, #11]
            break;
 8000874:	e08e      	b.n	8000994 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 8000876:	7abb      	ldrb	r3, [r7, #10]
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	b2da      	uxtb	r2, r3
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	4413      	add	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2200      	movs	r2, #0
 8000884:	2105      	movs	r1, #5
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fe97 	bl	80005ba <place_piece>
            col++;
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	3301      	adds	r3, #1
 8000890:	72fb      	strb	r3, [r7, #11]
            break;
 8000892:	e07f      	b.n	8000994 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	b2da      	uxtb	r2, r3
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	2100      	movs	r1, #0
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fe88 	bl	80005ba <place_piece>
            col++;
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	3301      	adds	r3, #1
 80008ae:	72fb      	strb	r3, [r7, #11]
            break;
 80008b0:	e070      	b.n	8000994 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	4413      	add	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2201      	movs	r2, #1
 80008c0:	2101      	movs	r1, #1
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe79 	bl	80005ba <place_piece>
            col++;
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	3301      	adds	r3, #1
 80008cc:	72fb      	strb	r3, [r7, #11]
            break;
 80008ce:	e061      	b.n	8000994 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 80008d0:	7abb      	ldrb	r3, [r7, #10]
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	4413      	add	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fe6a 	bl	80005ba <place_piece>
            col++;
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	3301      	adds	r3, #1
 80008ea:	72fb      	strb	r3, [r7, #11]
            break;
 80008ec:	e052      	b.n	8000994 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 80008ee:	7abb      	ldrb	r3, [r7, #10]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2201      	movs	r2, #1
 80008fc:	2103      	movs	r1, #3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fe5b 	bl	80005ba <place_piece>
            col++;
 8000904:	7afb      	ldrb	r3, [r7, #11]
 8000906:	3301      	adds	r3, #1
 8000908:	72fb      	strb	r3, [r7, #11]
            break;
 800090a:	e043      	b.n	8000994 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 800090c:	7abb      	ldrb	r3, [r7, #10]
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	b2da      	uxtb	r2, r3
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	4413      	add	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2201      	movs	r2, #1
 800091a:	2104      	movs	r1, #4
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fe4c 	bl	80005ba <place_piece>
            col++;
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	3301      	adds	r3, #1
 8000926:	72fb      	strb	r3, [r7, #11]
            break;
 8000928:	e034      	b.n	8000994 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 800092a:	7abb      	ldrb	r3, [r7, #10]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	b2da      	uxtb	r2, r3
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	4413      	add	r3, r2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2201      	movs	r2, #1
 8000938:	2105      	movs	r1, #5
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe3d 	bl	80005ba <place_piece>
            col++;
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	3301      	adds	r3, #1
 8000944:	72fb      	strb	r3, [r7, #11]
            break;
 8000946:	e025      	b.n	8000994 <load_fen+0x2f4>
        case '/':
            row--;
 8000948:	7abb      	ldrb	r3, [r7, #10]
 800094a:	3b01      	subs	r3, #1
 800094c:	72bb      	strb	r3, [r7, #10]
            col=0;
 800094e:	2300      	movs	r3, #0
 8000950:	72fb      	strb	r3, [r7, #11]
            break;
 8000952:	e01f      	b.n	8000994 <load_fen+0x2f4>
        case '1':
            col+=1;
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	3301      	adds	r3, #1
 8000958:	72fb      	strb	r3, [r7, #11]
            break;
 800095a:	e01b      	b.n	8000994 <load_fen+0x2f4>
        case '2':
            col+=2;
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	3302      	adds	r3, #2
 8000960:	72fb      	strb	r3, [r7, #11]
            break;
 8000962:	e017      	b.n	8000994 <load_fen+0x2f4>
        case '3':
            col+=3;
 8000964:	7afb      	ldrb	r3, [r7, #11]
 8000966:	3303      	adds	r3, #3
 8000968:	72fb      	strb	r3, [r7, #11]
            break;
 800096a:	e013      	b.n	8000994 <load_fen+0x2f4>
        case '4':
            col+=4;
 800096c:	7afb      	ldrb	r3, [r7, #11]
 800096e:	3304      	adds	r3, #4
 8000970:	72fb      	strb	r3, [r7, #11]
            break;
 8000972:	e00f      	b.n	8000994 <load_fen+0x2f4>
        case '5':
            col+=5;
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	3305      	adds	r3, #5
 8000978:	72fb      	strb	r3, [r7, #11]
            break;
 800097a:	e00b      	b.n	8000994 <load_fen+0x2f4>
        case '6':
            col+=6;
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	3306      	adds	r3, #6
 8000980:	72fb      	strb	r3, [r7, #11]
            break;
 8000982:	e007      	b.n	8000994 <load_fen+0x2f4>
        case '7':
            col+=7;
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	3307      	adds	r3, #7
 8000988:	72fb      	strb	r3, [r7, #11]
            break;
 800098a:	e003      	b.n	8000994 <load_fen+0x2f4>
        case '8':
            col+=8;
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	3308      	adds	r3, #8
 8000990:	72fb      	strb	r3, [r7, #11]
            break;
 8000992:	bf00      	nop
        };

        f++;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b20      	cmp	r3, #32
 80009a0:	f47f ae8c 	bne.w	80006bc <load_fen+0x1c>

    f++;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b77      	cmp	r3, #119	; 0x77
 80009b0:	d104      	bne.n	80009bc <load_fen+0x31c>
        state->side_to_move = WHITE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80009ba:	e003      	b.n	80009c4 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2201      	movs	r2, #1
 80009c0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3302      	adds	r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3301      	adds	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d1f8      	bne.n	80009ca <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b20      	cmp	r3, #32
 80009ea:	d1f8      	bne.n	80009de <load_fen+0x33e>
    f++;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a08:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000a0c:	6018      	str	r0, [r3, #0]
 8000a0e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a12:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000a16:	6019      	str	r1, [r3, #0]
 8000a18:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a1c:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8000a20:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8000a22:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a26:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a30:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d101      	bne.n	8000a3e <make_move+0x42>
        return 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e0da      	b.n	8000bf4 <make_move+0x1f8>

    if(safe){
 8000a3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a42:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d04c      	beq.n	8000ae6 <make_move+0xea>
        uint8_t move_ok = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8000a52:	f107 0214 	add.w	r2, r7, #20
 8000a56:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a5a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000a5e:	4611      	mov	r1, r2
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	f000 f8d5 	bl	8000c10 <generate_moves>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8000a72:	e02c      	b.n	8000ace <make_move+0xd2>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8000a74:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8000a78:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a7c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000a8e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d115      	bne.n	8000ac4 <make_move+0xc8>
 8000a98:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8000a9c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000aa0:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	3301      	adds	r3, #1
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ab4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d102      	bne.n	8000ac4 <make_move+0xc8>
                move_ok = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        for(uint8_t i = 0; i < nmoves; i++){
 8000ac4:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8000ace:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8000ad2:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d3cc      	bcc.n	8000a74 <make_move+0x78>
            }
        }
        if(!move_ok){
 8000ada:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <make_move+0xea>
            return 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e086      	b.n	8000bf4 <make_move+0x1f8>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8000ae6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000aea:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000af4:	f1c3 0301 	rsb	r3, r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000afe:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8000b08:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b0c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	461a      	mov	r2, r3
 8000b14:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b18:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	5c9b      	ldrb	r3, [r3, r2]
 8000b20:	2b06      	cmp	r3, #6
 8000b22:	d00c      	beq.n	8000b3e <make_move+0x142>
        remove_piece(state, move.to);
 8000b24:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b28:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b2c:	785a      	ldrb	r2, [r3, #1]
 8000b2e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b32:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000b36:	4611      	mov	r1, r2
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f7ff fd5c 	bl	80005f6 <remove_piece>

    if(move.promotion != 0)
 8000b3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b42:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d01f      	beq.n	8000b8c <make_move+0x190>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 8000b4c:	f000 f857 	bl	8000bfe <check_promotion>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461c      	mov	r4, r3
 8000b54:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b58:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b64:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8000b70:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b74:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8000b7e:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8000b82:	4621      	mov	r1, r4
 8000b84:	6800      	ldr	r0, [r0, #0]
 8000b86:	f7ff fd18 	bl	80005ba <place_piece>
 8000b8a:	e025      	b.n	8000bd8 <make_move+0x1dc>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8000b8c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b90:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000b9c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	5c99      	ldrb	r1, [r3, r2]
 8000ba4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ba8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000bb4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8000bc0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000bc4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8000bce:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8000bd2:	6800      	ldr	r0, [r0, #0]
 8000bd4:	f7ff fcf1 	bl	80005ba <place_piece>
    }

    remove_piece(state, move.from);
 8000bd8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000bdc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000be6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8000bea:	4611      	mov	r1, r2
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f7ff fd02 	bl	80005f6 <remove_piece>
    return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}

08000bfe <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
    return get_promotion();
 8000c02:	f001 f861 	bl	8001cc8 <get_promotion>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b2db      	uxtb	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e281      	b.n	8001128 <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 8000c2e:	7b7b      	ldrb	r3, [r7, #13]
 8000c30:	2b06      	cmp	r3, #6
 8000c32:	f000 8273 	beq.w	800111c <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3380      	adds	r3, #128	; 0x80
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000c46:	429a      	cmp	r2, r3
 8000c48:	f040 826a 	bne.w	8001120 <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 8000c4c:	7b7b      	ldrb	r3, [r7, #13]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	f040 81e2 	bne.w	8001018 <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 80ee 	bne.w	8000e3c <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	3310      	adds	r3, #16
 8000c64:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d162      	bne.n	8000d32 <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	3310      	adds	r3, #16
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d15c      	bne.n	8000d32 <generate_moves+0x122>
                        moves[n_moves].from = square;
 8000c78:	8afa      	ldrh	r2, [r7, #22]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	b2d9      	uxtb	r1, r3
 8000c8e:	8afa      	ldrh	r2, [r7, #22]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	f101 0210 	add.w	r2, r1, #16
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000ca2:	8afa      	ldrh	r2, [r7, #22]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2200      	movs	r2, #0
 8000cb0:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8000cb2:	8afa      	ldrh	r2, [r7, #22]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	785b      	ldrb	r3, [r3, #1]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d107      	bne.n	8000cd8 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8000cc8:	8afa      	ldrh	r2, [r7, #22]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8000cd8:	8afb      	ldrh	r3, [r7, #22]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	111b      	asrs	r3, r3, #4
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d125      	bne.n	8000d32 <generate_moves+0x122>
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3320      	adds	r3, #32
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d11f      	bne.n	8000d32 <generate_moves+0x122>
                            moves[n_moves].from = square;
 8000cf2:	8afa      	ldrh	r2, [r7, #22]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	b2d9      	uxtb	r1, r3
 8000d08:	8afa      	ldrh	r2, [r7, #22]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	f101 0220 	add.w	r2, r1, #32
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 8000d1c:	8afa      	ldrh	r2, [r7, #22]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 8000d2c:	8afb      	ldrh	r3, [r7, #22]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3311      	adds	r3, #17
 8000d36:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d13a      	bne.n	8000db4 <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3311      	adds	r3, #17
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d132      	bne.n	8000db4 <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 8000d4e:	8afa      	ldrh	r2, [r7, #22]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	b2d9      	uxtb	r1, r3
 8000d64:	8afa      	ldrh	r2, [r7, #22]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	f101 0211 	add.w	r2, r1, #17
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000d78:	8afa      	ldrh	r2, [r7, #22]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8000d88:	8afa      	ldrh	r2, [r7, #22]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	785b      	ldrb	r3, [r3, #1]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b07      	cmp	r3, #7
 8000d9c:	d107      	bne.n	8000dae <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 8000d9e:	8afa      	ldrh	r2, [r7, #22]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	2201      	movs	r2, #1
 8000dac:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8000dae:	8afb      	ldrh	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	330f      	adds	r3, #15
 8000db8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 81b0 	bne.w	8001122 <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	330f      	adds	r3, #15
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	f040 81a7 	bne.w	8001122 <generate_moves+0x512>
                        moves[n_moves].from = square;
 8000dd4:	8afa      	ldrh	r2, [r7, #22]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	b2d9      	uxtb	r1, r3
 8000dea:	8afa      	ldrh	r2, [r7, #22]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	f101 020f 	add.w	r2, r1, #15
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000dfe:	8afa      	ldrh	r2, [r7, #22]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8000e0e:	8afa      	ldrh	r2, [r7, #22]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d107      	bne.n	8000e34 <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 8000e24:	8afa      	ldrh	r2, [r7, #22]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8000e34:	8afb      	ldrh	r3, [r7, #22]
 8000e36:	3301      	adds	r3, #1
 8000e38:	82fb      	strh	r3, [r7, #22]
 8000e3a:	e172      	b.n	8001122 <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	3b10      	subs	r3, #16
 8000e40:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d162      	bne.n	8000f0e <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	3b10      	subs	r3, #16
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	2b06      	cmp	r3, #6
 8000e52:	d15c      	bne.n	8000f0e <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 8000e54:	8afa      	ldrh	r2, [r7, #22]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	b2d9      	uxtb	r1, r3
 8000e6a:	8afa      	ldrh	r2, [r7, #22]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	f1a1 0210 	sub.w	r2, r1, #16
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000e7e:	8afa      	ldrh	r2, [r7, #22]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8000e8e:	8afa      	ldrh	r2, [r7, #22]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	785b      	ldrb	r3, [r3, #1]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d107      	bne.n	8000eb4 <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 8000ea4:	8afa      	ldrh	r2, [r7, #22]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8000eb4:	8afb      	ldrh	r3, [r7, #22]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	111b      	asrs	r3, r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d125      	bne.n	8000f0e <generate_moves+0x2fe>
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3b20      	subs	r3, #32
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d11f      	bne.n	8000f0e <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 8000ece:	8afa      	ldrh	r2, [r7, #22]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	b2d9      	uxtb	r1, r3
 8000ee4:	8afa      	ldrh	r2, [r7, #22]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	f1a1 0220 	sub.w	r2, r1, #32
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8000ef8:	8afa      	ldrh	r2, [r7, #22]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 8000f08:	8afb      	ldrh	r3, [r7, #22]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3b0f      	subs	r3, #15
 8000f12:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d13a      	bne.n	8000f90 <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3b0f      	subs	r3, #15
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d132      	bne.n	8000f90 <generate_moves+0x380>
                        moves[n_moves].from = square;
 8000f2a:	8afa      	ldrh	r2, [r7, #22]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	8afa      	ldrh	r2, [r7, #22]
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f1a1 020f 	sub.w	r2, r1, #15
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000f54:	8afa      	ldrh	r2, [r7, #22]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	2200      	movs	r2, #0
 8000f62:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8000f64:	8afa      	ldrh	r2, [r7, #22]
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d107      	bne.n	8000f8a <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 8000f7a:	8afa      	ldrh	r2, [r7, #22]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	2201      	movs	r2, #1
 8000f88:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3b11      	subs	r3, #17
 8000f94:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 80c2 	bne.w	8001122 <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3b11      	subs	r3, #17
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 80b9 	bne.w	8001122 <generate_moves+0x512>
                        moves[n_moves].from = square;
 8000fb0:	8afa      	ldrh	r2, [r7, #22]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	8afa      	ldrh	r2, [r7, #22]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f1a1 0211 	sub.w	r2, r1, #17
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8000fda:	8afa      	ldrh	r2, [r7, #22]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8000fea:	8afa      	ldrh	r2, [r7, #22]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d107      	bne.n	8001010 <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 8001000:	8afa      	ldrh	r2, [r7, #22]
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	2201      	movs	r2, #1
 800100e:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	3301      	adds	r3, #1
 8001014:	82fb      	strh	r3, [r7, #22]
 8001016:	e084      	b.n	8001122 <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e076      	b.n	800110c <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 800101e:	7b7a      	ldrb	r2, [r7, #13]
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4946      	ldr	r1, [pc, #280]	; (8001140 <generate_moves+0x530>)
 8001026:	00d2      	lsls	r2, r2, #3
 8001028:	440a      	add	r2, r1
 800102a:	4413      	add	r3, r2
 800102c:	f993 3000 	ldrsb.w	r3, [r3]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 800103a:	e05a      	b.n	80010f2 <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	2b06      	cmp	r3, #6
 8001044:	d121      	bne.n	800108a <generate_moves+0x47a>
                        moves[n_moves].from = square;
 8001046:	8afa      	ldrh	r2, [r7, #22]
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 8001058:	8afa      	ldrh	r2, [r7, #22]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	7bba      	ldrb	r2, [r7, #14]
 8001066:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8001068:	8afa      	ldrh	r2, [r7, #22]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	3301      	adds	r3, #1
 800107c:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <generate_moves+0x534>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d127      	bne.n	80010d8 <generate_moves+0x4c8>
                        break;
 8001088:	e03a      	b.n	8001100 <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800109a:	429a      	cmp	r2, r3
 800109c:	d02f      	beq.n	80010fe <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 800109e:	8afa      	ldrh	r2, [r7, #22]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 80010b0:	8afa      	ldrh	r2, [r7, #22]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	7bba      	ldrb	r2, [r7, #14]
 80010be:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 80010c0:	8afa      	ldrh	r2, [r7, #22]
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	3301      	adds	r3, #1
 80010d4:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80010d6:	e012      	b.n	80010fe <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 80010d8:	7b7a      	ldrb	r2, [r7, #13]
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4918      	ldr	r1, [pc, #96]	; (8001140 <generate_moves+0x530>)
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	440a      	add	r2, r1
 80010e4:	4413      	add	r3, r2
 80010e6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	4413      	add	r3, r2
 80010f0:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d09f      	beq.n	800103c <generate_moves+0x42c>
 80010fc:	e000      	b.n	8001100 <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80010fe:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3301      	adds	r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	7b7a      	ldrb	r2, [r7, #13]
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <generate_moves+0x538>)
 8001114:	5c8a      	ldrb	r2, [r1, r2]
 8001116:	4293      	cmp	r3, r2
 8001118:	db81      	blt.n	800101e <generate_moves+0x40e>
 800111a:	e002      	b.n	8001122 <generate_moves+0x512>
            continue;
 800111c:	bf00      	nop
 800111e:	e000      	b.n	8001122 <generate_moves+0x512>
            continue;
 8001120:	bf00      	nop
    for(int square = 0; square < 128; square++){
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3301      	adds	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b7f      	cmp	r3, #127	; 0x7f
 800112c:	f77f ad7a 	ble.w	8000c24 <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 8001130:	8afb      	ldrh	r3, [r7, #22]
}
 8001132:	4618      	mov	r0, r3
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000000 	.word	0x20000000
 8001144:	20000030 	.word	0x20000030
 8001148:	20000028 	.word	0x20000028

0800114c <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <game_set_sensor_reader+0x20>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <game_set_sensor_reader+0x24>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000218 	.word	0x20000218
 8001170:	200002d4 	.word	0x200002d4

08001174 <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 feb3 	bl	8001ee8 <lighting_set_output>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <game_fsm>:


void game_fsm(){
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0

    movement_fsm();
 800118e:	f000 fae5 	bl	800175c <movement_fsm>

    lighting_refresh();
 8001192:	f000 ffed 	bl	8002170 <lighting_refresh>

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <game_reset>:

void game_reset(){
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0

    engine_reset();
 800119e:	f7ff fa41 	bl	8000624 <engine_reset>

 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f001 f996 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f812 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 f91c 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b8:	f000 f8fa 	bl	80013b0 <MX_DMA_Init>
  MX_TIM1_Init();
 80011bc:	f000 f878 	bl	80012b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  user_htim1 = &htim1;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <main+0x28>)
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <main+0x2c>)
 80011c4:	601a      	str	r2, [r3, #0]
  user_init();
 80011c6:	f000 fd6d 	bl	8001ca4 <user_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 user_loop();
 80011ca:	f000 fda9 	bl	8001d20 <user_loop>
 80011ce:	e7fc      	b.n	80011ca <main+0x22>
 80011d0:	200005e4 	.word	0x200005e4
 80011d4:	2000021c 	.word	0x2000021c

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 ff8a 	bl	8005100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <SystemClock_Config+0xd0>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <SystemClock_Config+0xd0>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <SystemClock_Config+0xd0>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <SystemClock_Config+0xd4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <SystemClock_Config+0xd4>)
 8001226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <SystemClock_Config+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800124c:	2310      	movs	r3, #16
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001256:	2304      	movs	r3, #4
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800125a:	2307      	movs	r3, #7
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f002 f82a 	bl	80032bc <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126e:	f000 f971 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2302      	movs	r3, #2
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fa8c 	bl	80037ac <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800129a:	f000 f95b 	bl	8001554 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b092      	sub	sp, #72	; 0x48
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2220      	movs	r2, #32
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 ff10 	bl	8005100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_TIM1_Init+0xf8>)
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <MX_TIM1_Init+0xfc>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <MX_TIM1_Init+0xf8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_TIM1_Init+0xf8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <MX_TIM1_Init+0xf8>)
 80012f4:	2268      	movs	r2, #104	; 0x68
 80012f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_TIM1_Init+0xf8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_TIM1_Init+0xf8>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MX_TIM1_Init+0xf8>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800130a:	4827      	ldr	r0, [pc, #156]	; (80013a8 <MX_TIM1_Init+0xf8>)
 800130c:	f002 fc3a 	bl	8003b84 <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001316:	f000 f91d 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001326:	4619      	mov	r1, r3
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <MX_TIM1_Init+0xf8>)
 800132a:	f003 fbfb 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001334:	f000 f90e 	bl	8001554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	220c      	movs	r2, #12
 8001356:	4619      	mov	r1, r3
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM1_Init+0xf8>)
 800135a:	f002 ffe1 	bl	8004320 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001364:	f000 f8f6 	bl	8001554 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0xf8>)
 800138c:	f003 fc38 	bl	8004c00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001396:	f000 f8dd 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0xf8>)
 800139c:	f000 fb54 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 80013a0:	bf00      	nop
 80013a2:	3748      	adds	r7, #72	; 0x48
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000021c 	.word	0x2000021c
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_DMA_Init+0x3c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <MX_DMA_Init+0x3c>)
 80013c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_DMA_Init+0x3c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	203c      	movs	r0, #60	; 0x3c
 80013d8:	f001 f9f1 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80013dc:	203c      	movs	r0, #60	; 0x3c
 80013de:	f001 fa0a 	bl	80027f6 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <MX_GPIO_Init+0x154>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a4d      	ldr	r2, [pc, #308]	; (8001544 <MX_GPIO_Init+0x154>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <MX_GPIO_Init+0x154>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <MX_GPIO_Init+0x154>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <MX_GPIO_Init+0x154>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <MX_GPIO_Init+0x154>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <MX_GPIO_Init+0x154>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <MX_GPIO_Init+0x154>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a38      	ldr	r2, [pc, #224]	; (8001544 <MX_GPIO_Init+0x154>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_GPIO_Init+0x154>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2183      	movs	r1, #131	; 0x83
 800147a:	4833      	ldr	r0, [pc, #204]	; (8001548 <MX_GPIO_Init+0x158>)
 800147c:	f001 ff04 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001486:	4831      	ldr	r0, [pc, #196]	; (800154c <MX_GPIO_Init+0x15c>)
 8001488:	f001 fefe 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2141      	movs	r1, #65	; 0x41
 8001490:	482f      	ldr	r0, [pc, #188]	; (8001550 <MX_GPIO_Init+0x160>)
 8001492:	f001 fef9 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4826      	ldr	r0, [pc, #152]	; (8001548 <MX_GPIO_Init+0x158>)
 80014ae:	f001 fd4f 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 80014b2:	2383      	movs	r3, #131	; 0x83
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <MX_GPIO_Init+0x158>)
 80014ca:	f001 fd41 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin;
 80014ce:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <MX_GPIO_Init+0x15c>)
 80014e8:	f001 fd32 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 80014ec:	2341      	movs	r3, #65	; 0x41
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_GPIO_Init+0x160>)
 8001504:	f001 fd24 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
                           REED_C_Pin REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_D_Pin
 8001508:	f246 4338 	movw	r3, #25656	; 0x6438
 800150c:	617b      	str	r3, [r7, #20]
                          |REED_C_Pin|REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x160>)
 800151e:	f001 fd17 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8001522:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800152c:	2302      	movs	r3, #2
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_GPIO_Init+0x15c>)
 8001538:	f001 fd0a 	bl	8002f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <get_last_sensor_change>:
char previous_sensor_state[8];
char new_sensor_state[8];

void (*get_sensors)(char[8]);

piece_change_t get_last_sensor_change(){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

    get_sensors(new_sensor_state);
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <get_last_sensor_change+0xe8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <get_last_sensor_change+0xec>)
 800156c:	4798      	blx	r3

    piece_change_t ret = {0, NONE};
 800156e:	2300      	movs	r3, #0
 8001570:	713b      	strb	r3, [r7, #4]
 8001572:	2300      	movs	r3, #0
 8001574:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e054      	b.n	8001626 <get_last_sensor_change+0xc6>
        for (int file = 0; file < 8; file++) {
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	e04b      	b.n	800161a <get_last_sensor_change+0xba>
            char new_state = (new_sensor_state[rank]&(1<<file)) != 0;
 8001582:	4a32      	ldr	r2, [pc, #200]	; (800164c <get_last_sensor_change+0xec>)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	fa42 f303 	asr.w	r3, r2, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 80015a2:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <get_last_sensor_change+0xf0>)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	fa42 f303 	asr.w	r3, r2, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 80015c2:	7afa      	ldrb	r2, [r7, #11]
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d024      	beq.n	8001614 <get_last_sensor_change+0xb4>
                ret.square_affected = COORD2SQ(rank, file);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <get_last_sensor_change+0x86>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e000      	b.n	80015e8 <get_last_sensor_change+0x88>
 80015e6:	2301      	movs	r3, #1
 80015e8:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e00b      	b.n	8001608 <get_last_sensor_change+0xa8>
                    previous_sensor_state[i] = new_sensor_state[i];
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <get_last_sensor_change+0xec>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <get_last_sensor_change+0xf0>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b07      	cmp	r3, #7
 800160c:	ddf0      	ble.n	80015f0 <get_last_sensor_change+0x90>
                }
                return ret;
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	813b      	strh	r3, [r7, #8]
 8001612:	e00d      	b.n	8001630 <get_last_sensor_change+0xd0>
        for (int file = 0; file < 8; file++) {
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3301      	adds	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b07      	cmp	r3, #7
 800161e:	ddb0      	ble.n	8001582 <get_last_sensor_change+0x22>
    for (int rank = 0; rank < 8; rank++) {
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b07      	cmp	r3, #7
 800162a:	dda7      	ble.n	800157c <get_last_sensor_change+0x1c>
            }
        }
    }
    return ret;
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	813b      	strh	r3, [r7, #8]
}
 8001630:	2300      	movs	r3, #0
 8001632:	7a3a      	ldrb	r2, [r7, #8]
 8001634:	f362 0307 	bfi	r3, r2, #0, #8
 8001638:	7a7a      	ldrb	r2, [r7, #9]
 800163a:	f362 230f 	bfi	r3, r2, #8, #8
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002d4 	.word	0x200002d4
 800164c:	200002cc 	.word	0x200002cc
 8001650:	200002c4 	.word	0x200002c4

08001654 <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <is_board_ok+0xb4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1d3a      	adds	r2, r7, #4
 8001660:	4610      	mov	r0, r2
 8001662:	4798      	blx	r3
    char board_ok = 1;
 8001664:	2301      	movs	r3, #1
 8001666:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	e044      	b.n	80016f8 <is_board_ok+0xa4>
        for (int file = 0; file < 8; file++) {
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e03b      	b.n	80016ec <is_board_ok+0x98>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8001674:	1d3a      	adds	r2, r7, #4
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <is_board_ok+0x5a>
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b2da      	uxtb	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ffef 	bl	8000680 <engine_get_piece>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d102      	bne.n	80016ae <is_board_ok+0x5a>
                board_ok = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	75fb      	strb	r3, [r7, #23]
 80016ac:	e01b      	b.n	80016e6 <is_board_ok+0x92>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 80016ae:	1d3a      	adds	r2, r7, #4
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	fa42 f303 	asr.w	r3, r2, r3
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <is_board_ok+0x92>
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ffd2 	bl	8000680 <engine_get_piece>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d001      	beq.n	80016e6 <is_board_ok+0x92>
                board_ok = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	ddc0      	ble.n	8001674 <is_board_ok+0x20>
    for (int rank = 0; rank < 8; rank++) {
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	ddb7      	ble.n	800166e <is_board_ok+0x1a>
            }
        }
    }
    return board_ok;
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002d4 	.word	0x200002d4

0800170c <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e00f      	b.n	8001744 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	429a      	cmp	r2, r3
 8001736:	d102      	bne.n	800173e <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbeb      	blt.n	8001724 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 800174c:	697b      	ldr	r3, [r7, #20]
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <movement_fsm>:

int total_valid_moves;
move_t valid_moves[255];

void movement_fsm(){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 8001762:	f7ff fefd 	bl	8001560 <get_last_sensor_change>
 8001766:	4603      	mov	r3, r0
 8001768:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 800176a:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <movement_fsm+0x1bc>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b03      	cmp	r3, #3
 8001770:	f000 80b8 	beq.w	80018e4 <movement_fsm+0x188>
 8001774:	2b03      	cmp	r3, #3
 8001776:	f300 80c3 	bgt.w	8001900 <movement_fsm+0x1a4>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <movement_fsm+0x28>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d03f      	beq.n	8001802 <movement_fsm+0xa6>
        break;



    default:
        break;
 8001782:	e0bd      	b.n	8001900 <movement_fsm+0x1a4>
        if(piece_change.piece_action == REMOVED){
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d130      	bne.n	80017ec <movement_fsm+0x90>
            movement_state = PIECE_LIFTED_STATE;
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <movement_fsm+0x1bc>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001790:	793a      	ldrb	r2, [r7, #4]
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <movement_fsm+0x1c0>)
 8001794:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves);
 8001796:	4862      	ldr	r0, [pc, #392]	; (8001920 <movement_fsm+0x1c4>)
 8001798:	f7fe ff62 	bl	8000660 <engine_list_moves>
 800179c:	4603      	mov	r3, r0
 800179e:	4a61      	ldr	r2, [pc, #388]	; (8001924 <movement_fsm+0x1c8>)
 80017a0:	6013      	str	r3, [r2, #0]
            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <movement_fsm+0x1c0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <movement_fsm+0x1c8>)
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	495d      	ldr	r1, [pc, #372]	; (8001920 <movement_fsm+0x1c4>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffad 	bl	800170c <get_lifted_moves>
 80017b2:	60b8      	str	r0, [r7, #8]
            if(lifted_piece_valid_moves == 0){
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <movement_fsm+0x6c>
                movement_state = ERROR_STATE;
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <movement_fsm+0x1bc>)
 80017bc:	2203      	movs	r2, #3
 80017be:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80017c0:	2002      	movs	r0, #2
 80017c2:	f000 fc9f 	bl	8002104 <lighting_set_state>
        break;
 80017c6:	e09d      	b.n	8001904 <movement_fsm+0x1a8>
                movement_state = PIECE_LIFTED_STATE;
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <movement_fsm+0x1bc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <movement_fsm+0x1c0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fca6 	bl	8002124 <lighting_piece_lifted_square>
                set_valid_moves(valid_moves, total_valid_moves);
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <movement_fsm+0x1c8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	4850      	ldr	r0, [pc, #320]	; (8001920 <movement_fsm+0x1c4>)
 80017e0:	f000 fcb0 	bl	8002144 <set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 fc8d 	bl	8002104 <lighting_set_state>
        break;
 80017ea:	e08b      	b.n	8001904 <movement_fsm+0x1a8>
        else if(piece_change.piece_action == PLACED){
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f040 8088 	bne.w	8001904 <movement_fsm+0x1a8>
            movement_state = ERROR_STATE;
 80017f4:	4b48      	ldr	r3, [pc, #288]	; (8001918 <movement_fsm+0x1bc>)
 80017f6:	2203      	movs	r2, #3
 80017f8:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 80017fa:	2002      	movs	r0, #2
 80017fc:	f000 fc82 	bl	8002104 <lighting_set_state>
        break;
 8001800:	e080      	b.n	8001904 <movement_fsm+0x1a8>
        if(piece_change.piece_action == PLACED){
 8001802:	797b      	ldrb	r3, [r7, #5]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d11a      	bne.n	800183e <movement_fsm+0xe2>
            move_played.from = square_lifted;
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <movement_fsm+0x1c0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f7fe ff12 	bl	800063c <engine_move_piece>
 8001818:	4603      	mov	r3, r0
 800181a:	73bb      	strb	r3, [r7, #14]
            if(move_ok){
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <movement_fsm+0xd4>
                movement_state = WAIT_STATE;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <movement_fsm+0x1bc>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_IDLE_STATE);
 8001828:	2000      	movs	r0, #0
 800182a:	f000 fc6b 	bl	8002104 <lighting_set_state>
        break;
 800182e:	e06b      	b.n	8001908 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <movement_fsm+0x1bc>)
 8001832:	2203      	movs	r2, #3
 8001834:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001836:	2002      	movs	r0, #2
 8001838:	f000 fc64 	bl	8002104 <lighting_set_state>
        break;
 800183c:	e064      	b.n	8001908 <movement_fsm+0x1ac>
        else if(piece_change.piece_action == REMOVED){
 800183e:	797b      	ldrb	r3, [r7, #5]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d161      	bne.n	8001908 <movement_fsm+0x1ac>
            total_valid_moves = engine_list_moves(valid_moves);
 8001844:	4836      	ldr	r0, [pc, #216]	; (8001920 <movement_fsm+0x1c4>)
 8001846:	f7fe ff0b 	bl	8000660 <engine_list_moves>
 800184a:	4603      	mov	r3, r0
 800184c:	4a35      	ldr	r2, [pc, #212]	; (8001924 <movement_fsm+0x1c8>)
 800184e:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	e035      	b.n	80018c6 <movement_fsm+0x16a>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 800185a:	4931      	ldr	r1, [pc, #196]	; (8001920 <movement_fsm+0x1c4>)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	440b      	add	r3, r1
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <movement_fsm+0x1c0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d127      	bne.n	80018c0 <movement_fsm+0x164>
 8001870:	492b      	ldr	r1, [pc, #172]	; (8001920 <movement_fsm+0x1c4>)
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	440b      	add	r3, r1
 800187c:	3301      	adds	r3, #1
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	793b      	ldrb	r3, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d11c      	bne.n	80018c0 <movement_fsm+0x164>
                    captured_piece_is_valid = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 800188a:	793b      	ldrb	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fc49 	bl	8002124 <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 8001892:	2003      	movs	r0, #3
 8001894:	f000 fc36 	bl	8002104 <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 8001898:	4921      	ldr	r1, [pc, #132]	; (8001920 <movement_fsm+0x1c4>)
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	7859      	ldrb	r1, [r3, #1]
 80018a8:	0209      	lsls	r1, r1, #8
 80018aa:	430a      	orrs	r2, r1
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	2300      	movs	r3, #0
 80018b4:	f362 0317 	bfi	r3, r2, #0, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe febf 	bl	800063c <engine_move_piece>
                    break;
 80018be:	e007      	b.n	80018d0 <movement_fsm+0x174>
            for(int i = 0; i < total_valid_moves; i++){
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	3301      	adds	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <movement_fsm+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbc4      	blt.n	800185a <movement_fsm+0xfe>
            if(!captured_piece_is_valid){
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <movement_fsm+0x1bc>)
 80018d8:	2203      	movs	r2, #3
 80018da:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80018dc:	2002      	movs	r0, #2
 80018de:	f000 fc11 	bl	8002104 <lighting_set_state>
        break;
 80018e2:	e011      	b.n	8001908 <movement_fsm+0x1ac>
        board_ok = is_board_ok();
 80018e4:	f7ff feb6 	bl	8001654 <is_board_ok>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
        if(board_ok){
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <movement_fsm+0x1b0>
            movement_state = WAIT_STATE;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <movement_fsm+0x1bc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fc03 	bl	8002104 <lighting_set_state>
        break;
 80018fe:	e005      	b.n	800190c <movement_fsm+0x1b0>
        break;
 8001900:	bf00      	nop
 8001902:	e004      	b.n	800190e <movement_fsm+0x1b2>
        break;
 8001904:	bf00      	nop
 8001906:	e002      	b.n	800190e <movement_fsm+0x1b2>
        break;
 8001908:	bf00      	nop
 800190a:	e000      	b.n	800190e <movement_fsm+0x1b2>
        break;
 800190c:	bf00      	nop
    }
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002d8 	.word	0x200002d8
 800191c:	200002d9 	.word	0x200002d9
 8001920:	200002e0 	.word	0x200002e0
 8001924:	200002dc 	.word	0x200002dc

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_MspInit+0x4c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001966:	2007      	movs	r0, #7
 8001968:	f000 ff1e 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_TIM_PWM_MspInit+0xc0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d151      	bne.n	8001a2e <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_TIM_PWM_MspInit+0xc4>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_TIM_PWM_MspInit+0xc4>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_TIM_PWM_MspInit+0xc4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_TIM_PWM_MspInit+0xcc>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019ae:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ce:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019ec:	f000 ff1e 	bl	800282c <HAL_DMA_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80019f6:	f7ff fdad 	bl	8001554 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
 8001a18:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	201a      	movs	r0, #26
 8001a24:	f000 fecb 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a28:	201a      	movs	r0, #26
 8001a2a:	f000 fee4 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	20000264 	.word	0x20000264
 8001a44:	40026470 	.word	0x40026470

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11e      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8001a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_TIM_MspPostInit+0x70>)
 8001aa4:	f001 fa54 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 fd3a 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b16:	f002 fafb 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000021c 	.word	0x2000021c

08001b24 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <DMA2_Stream4_IRQHandler+0x10>)
 8001b2a:	f000 ffa7 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000264 	.word	0x20000264

08001b38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e00a      	b.n	8001b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4a:	f3af 8000 	nop.w
 8001b4e:	4601      	mov	r1, r0
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf0      	blt.n	8001b4a <_read+0x12>
  }

  return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e009      	b.n	8001b98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	60ba      	str	r2, [r7, #8]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf1      	blt.n	8001b84 <_write+0x12>
  }
  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_close>:

int _close(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_isatty>:

int _isatty(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f003 faaa 	bl	800519c <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20018000 	.word	0x20018000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	200005e0 	.word	0x200005e0
 8001c7c:	200014c8 	.word	0x200014c8

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <user_init>:

TIM_HandleTypeDef * user_htim1;



void user_init(){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	ws2812_init();
 8001ca8:	f000 f864 	bl	8001d74 <ws2812_init>

	game_set_sensor_reader((sensor_reader_t)reed_scan_sensors);
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <user_init+0x1c>)
 8001cae:	f7ff fa4d 	bl	800114c <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 8001cb2:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <user_init+0x20>)
 8001cb4:	f7ff fa5e 	bl	8001174 <game_set_led_output_array>

	game_reset();
 8001cb8:	f7ff fa6f 	bl	800119a <game_reset>

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	0800220d 	.word	0x0800220d
 8001cc4:	20001260 	.word	0x20001260

08001cc8 <get_promotion>:


piece_t get_promotion()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
    printf("Ingrese numero de pieza para seleccionar la promocion:\n");
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <get_promotion+0x40>)
 8001cd0:	f003 f924 	bl	8004f1c <puts>
    printf("Caballo: %d\n", KNIGHT);
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <get_promotion+0x44>)
 8001cd8:	f003 f8ba 	bl	8004e50 <iprintf>
    printf("Alfil: %d\n", BISHOP);
 8001cdc:	2103      	movs	r1, #3
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <get_promotion+0x48>)
 8001ce0:	f003 f8b6 	bl	8004e50 <iprintf>
    printf("Reina: %d\n", QUEEN);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <get_promotion+0x4c>)
 8001ce8:	f003 f8b2 	bl	8004e50 <iprintf>

    unsigned int prom;

    printf("Seleccion: ");
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <get_promotion+0x50>)
 8001cee:	f003 f8af 	bl	8004e50 <iprintf>
    scanf("%u", &prom);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <get_promotion+0x54>)
 8001cf8:	f003 f918 	bl	8004f2c <iscanf>

    return (piece_t) prom;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	b2db      	uxtb	r3, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	080067e8 	.word	0x080067e8
 8001d0c:	08006820 	.word	0x08006820
 8001d10:	08006830 	.word	0x08006830
 8001d14:	0800683c 	.word	0x0800683c
 8001d18:	08006848 	.word	0x08006848
 8001d1c:	08006854 	.word	0x08006854

08001d20 <user_loop>:


uint8_t sensor_data[64];

void user_loop(){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0


	game_fsm();
 8001d24:	f7ff fa31 	bl	800118a <game_fsm>


	ws2812_update_leds_from_data(user_htim1);
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <user_loop+0x28>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f8c3 	bl	8001eb8 <ws2812_update_leds_from_data>
	while(ws2812_finished_dma == 0){}
 8001d32:	bf00      	nop
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <user_loop+0x2c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0fb      	beq.n	8001d34 <user_loop+0x14>

	HAL_Delay(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 fc3f 	bl	80025c0 <HAL_Delay>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200005e4 	.word	0x200005e4
 8001d4c:	20001360 	.word	0x20001360

08001d50 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8001d58:	210c      	movs	r1, #12
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f002 f912 	bl	8003f84 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20001360 	.word	0x20001360

08001d74 <ws2812_init>:

void ws2812_init(){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	e010      	b.n	8001da2 <ws2812_init+0x2e>
		if(i < 60)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b3b      	cmp	r3, #59	; 0x3b
 8001d84:	dc05      	bgt.n	8001d92 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 8001d86:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <ws2812_init+0x48>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d90:	e004      	b.n	8001d9c <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <ws2812_init+0x48>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	211c      	movs	r1, #28
 8001d98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f240 623b 	movw	r2, #1595	; 0x63b
 8001da8:	4293      	cmp	r3, r2
 8001daa:	dde9      	ble.n	8001d80 <ws2812_init+0xc>
	}
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	200005e8 	.word	0x200005e8

08001dc0 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e065      	b.n	8001e98 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e05c      	b.n	8001e8c <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8001ddc:	4933      	ldr	r1, [pc, #204]	; (8001eac <ws2812_update_pwm_data+0xec>)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	00da      	lsls	r2, r3, #3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 8001df0:	482e      	ldr	r0, [pc, #184]	; (8001eac <ws2812_update_pwm_data+0xec>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	00d9      	lsls	r1, r3, #3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	440b      	add	r3, r1
 8001dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8001e04:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 8001e06:	4829      	ldr	r0, [pc, #164]	; (8001eac <ws2812_update_pwm_data+0xec>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	00d9      	lsls	r1, r3, #3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	440b      	add	r3, r1
 8001e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e14:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e02f      	b.n	8001e80 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 8001e20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	fa42 f303 	asr.w	r3, r2, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d011      	beq.n	8001e58 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <ws2812_update_pwm_data+0xf0>)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <ws2812_update_pwm_data+0xf4>)
 8001e50:	214c      	movs	r1, #76	; 0x4c
 8001e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e56:	e010      	b.n	8001e7a <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <ws2812_update_pwm_data+0xf0>)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <ws2812_update_pwm_data+0xf4>)
 8001e74:	211c      	movs	r1, #28
 8001e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b17      	cmp	r3, #23
 8001e84:	ddcc      	ble.n	8001e20 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b07      	cmp	r3, #7
 8001e90:	dd9f      	ble.n	8001dd2 <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	dd96      	ble.n	8001dcc <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	20001260 	.word	0x20001260
 8001eb0:	2000003c 	.word	0x2000003c
 8001eb4:	200005e8 	.word	0x200005e8

08001eb8 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8001ec0:	f7ff ff7e 	bl	8001dc0 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <ws2812_update_leds_from_data+0x28>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 8001eca:	f240 633c 	movw	r3, #1596	; 0x63c
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <ws2812_update_leds_from_data+0x2c>)
 8001ed0:	210c      	movs	r1, #12
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f001 fea6 	bl	8003c24 <HAL_TIM_PWM_Start_DMA>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20001360 	.word	0x20001360
 8001ee4:	200005e8 	.word	0x200005e8

08001ee8 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <lighting_set_output+0x1c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20001364 	.word	0x20001364

08001f08 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	4613      	mov	r3, r2
 8001f14:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <set_color+0x34>)
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	00d8      	lsls	r0, r3, #3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4403      	add	r3, r0
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	4905      	ldr	r1, [pc, #20]	; (8001f40 <set_color+0x38>)
 8001f2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f2e:	601a      	str	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20001364 	.word	0x20001364
 8001f40:	2000007c 	.word	0x2000007c

08001f44 <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	e01a      	b.n	8001f86 <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 8001f50:	2300      	movs	r3, #0
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	e011      	b.n	8001f7a <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4053      	eors	r3, r2
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffca 	bl	8001f08 <set_color>
    for (int file = 0; file < 8; file++) {
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	ddea      	ble.n	8001f56 <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	dde1      	ble.n	8001f50 <paint_board+0xc>
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

    total_valid_moves = engine_list_moves(valid_moves);
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f7fe fb59 	bl	8000660 <engine_list_moves>
 8001fae:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < total_valid_moves; i++){
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e026      	b.n	8002004 <paint_valid_moves+0x6e>
        if(valid_moves[i].from == square_lifted){
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d119      	bne.n	8001ffe <paint_valid_moves+0x68>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7ff ff88 	bl	8001f08 <set_color>
            lifted_piece_valid_moves ++;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	3301      	adds	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbd4      	blt.n	8001fb6 <paint_valid_moves+0x20>
        }
    }
    return lifted_piece_valid_moves;
 800200c:	697b      	ldr	r3, [r7, #20]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <paint_differences+0xc8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1d3a      	adds	r2, r7, #4
 8002024:	4610      	mov	r0, r2
 8002026:	4798      	blx	r3
    char board_ok = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e04e      	b.n	80020d0 <paint_differences+0xb8>
        for (int file = 0; file < 8; file++) {
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e045      	b.n	80020c4 <paint_differences+0xac>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	fa42 f303 	asr.w	r3, r2, r3
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <paint_differences+0x64>
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fb0d 	bl	8000680 <engine_get_piece>
 8002066:	4603      	mov	r3, r0
 8002068:	2b06      	cmp	r3, #6
 800206a:	d107      	bne.n	800207c <paint_differences+0x64>
                set_color(rank, file, INVALID_ID);
 800206c:	2205      	movs	r2, #5
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	6938      	ldr	r0, [r7, #16]
 8002072:	f7ff ff49 	bl	8001f08 <set_color>
                board_ok = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
 800207a:	e020      	b.n	80020be <paint_differences+0xa6>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800207c:	1d3a      	adds	r2, r7, #4
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	fa42 f303 	asr.w	r3, r2, r3
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d114      	bne.n	80020be <paint_differences+0xa6>
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe faeb 	bl	8000680 <engine_get_piece>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d006      	beq.n	80020be <paint_differences+0xa6>
                set_color(rank, file, MISSING_ID);
 80020b0:	2204      	movs	r2, #4
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	6938      	ldr	r0, [r7, #16]
 80020b6:	f7ff ff27 	bl	8001f08 <set_color>
                board_ok = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	ddb6      	ble.n	8002038 <paint_differences+0x20>
    for (int rank = 0; rank < 8; rank++) {
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3301      	adds	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	ddad      	ble.n	8002032 <paint_differences+0x1a>
            }
        }
    }
    return board_ok;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200002d4 	.word	0x200002d4

080020e4 <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 80020ee:	2202      	movs	r2, #2
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff08 	bl	8001f08 <set_color>
    return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <lighting_set_state>:

uint8_t square_lifted_lighting;
move_t * valid_moves_lighting;
int total_valid_moves_lighting;

void lighting_set_state(char state){
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <lighting_set_state+0x1c>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	7013      	strb	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20001361 	.word	0x20001361

08002124 <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <lighting_piece_lifted_square+0x1c>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	7013      	strb	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20001368 	.word	0x20001368

08002144 <set_valid_moves>:

void set_valid_moves(move_t * moves, int total_valid_moves){
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <set_valid_moves+0x24>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <set_valid_moves+0x28>)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6013      	str	r3, [r2, #0]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	2000136c 	.word	0x2000136c
 800216c:	20001370 	.word	0x20001370

08002170 <lighting_refresh>:

void lighting_refresh(){
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <lighting_refresh+0x8c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d83c      	bhi.n	80021f6 <lighting_refresh+0x86>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <lighting_refresh+0x14>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	0800219b 	.word	0x0800219b
 800218c:	080021cd 	.word	0x080021cd
 8002190:	080021d7 	.word	0x080021d7
        case LIGHTING_IDLE_STATE:
            paint_board();
 8002194:	f7ff fed6 	bl	8001f44 <paint_board>
        break;
 8002198:	e02d      	b.n	80021f6 <lighting_refresh+0x86>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 800219a:	f7ff fed3 	bl	8001f44 <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <lighting_refresh+0x90>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <lighting_refresh+0x90>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	2203      	movs	r2, #3
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7ff fea8 	bl	8001f08 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <lighting_refresh+0x90>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <lighting_refresh+0x94>)
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <lighting_refresh+0x98>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fee6 	bl	8001f96 <paint_valid_moves>
        break;
 80021ca:	e014      	b.n	80021f6 <lighting_refresh+0x86>

        case LIGHTING_ERROR_STATE:
            paint_board();
 80021cc:	f7ff feba 	bl	8001f44 <paint_board>
            paint_differences();
 80021d0:	f7ff ff22 	bl	8002018 <paint_differences>
        break;
 80021d4:	e00f      	b.n	80021f6 <lighting_refresh+0x86>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 80021d6:	f7ff feb5 	bl	8001f44 <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <lighting_refresh+0x90>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <lighting_refresh+0x90>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f7ff ff78 	bl	80020e4 <paint_capture>
        break;
 80021f4:	bf00      	nop
    }
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20001361 	.word	0x20001361
 8002200:	20001368 	.word	0x20001368
 8002204:	2000136c 	.word	0x2000136c
 8002208:	20001370 	.word	0x20001370

0800220c <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e127      	b.n	800246a <reed_scan_sensors+0x25e>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	2101      	movs	r1, #1
 800222a:	4894      	ldr	r0, [pc, #592]	; (800247c <reed_scan_sensors+0x270>)
 800222c:	f001 f82c 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	2102      	movs	r1, #2
 8002240:	488e      	ldr	r0, [pc, #568]	; (800247c <reed_scan_sensors+0x270>)
 8002242:	f001 f821 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b02      	cmp	r3, #2
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	2101      	movs	r1, #1
 8002256:	488a      	ldr	r0, [pc, #552]	; (8002480 <reed_scan_sensors+0x274>)
 8002258:	f001 f816 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b03      	cmp	r3, #3
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4885      	ldr	r0, [pc, #532]	; (8002484 <reed_scan_sensors+0x278>)
 800226e:	f001 f80b 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b04      	cmp	r3, #4
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	4880      	ldr	r0, [pc, #512]	; (8002484 <reed_scan_sensors+0x278>)
 8002284:	f001 f800 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b05      	cmp	r3, #5
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	4879      	ldr	r0, [pc, #484]	; (8002480 <reed_scan_sensors+0x274>)
 800229a:	f000 fff5 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	4873      	ldr	r0, [pc, #460]	; (800247c <reed_scan_sensors+0x270>)
 80022b0:	f000 ffea 	bl	8003288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c6:	486f      	ldr	r0, [pc, #444]	; (8002484 <reed_scan_sensors+0x278>)
 80022c8:	f000 ffde 	bl	8003288 <HAL_GPIO_WritePin>

	for(int i = 0; i < 10; i++){ } //Delay chico para dejar que la señal se propage
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	e002      	b.n	80022d8 <reed_scan_sensors+0xcc>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3301      	adds	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b09      	cmp	r3, #9
 80022dc:	ddf9      	ble.n	80022d2 <reed_scan_sensors+0xc6>


    data[row] = 0;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 80022e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ec:	4865      	ldr	r0, [pc, #404]	; (8002484 <reed_scan_sensors+0x278>)
 80022ee:	f000 ffb3 	bl	8003258 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25a      	sxtb	r2, r3
 800230a:	b24b      	sxtb	r3, r1
 800230c:	4313      	orrs	r3, r2
 800230e:	b259      	sxtb	r1, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 800231a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800231e:	4858      	ldr	r0, [pc, #352]	; (8002480 <reed_scan_sensors+0x274>)
 8002320:	f000 ff9a 	bl	8003258 <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <reed_scan_sensors+0x122>
 800232a:	2102      	movs	r1, #2
 800232c:	e000      	b.n	8002330 <reed_scan_sensors+0x124>
 800232e:	2100      	movs	r1, #0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b25a      	sxtb	r2, r3
 800233a:	b24b      	sxtb	r3, r1
 800233c:	4313      	orrs	r3, r2
 800233e:	b259      	sxtb	r1, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	b2ca      	uxtb	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 800234a:	2110      	movs	r1, #16
 800234c:	484c      	ldr	r0, [pc, #304]	; (8002480 <reed_scan_sensors+0x274>)
 800234e:	f000 ff83 	bl	8003258 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <reed_scan_sensors+0x150>
 8002358:	2104      	movs	r1, #4
 800235a:	e000      	b.n	800235e <reed_scan_sensors+0x152>
 800235c:	2100      	movs	r1, #0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b25a      	sxtb	r2, r3
 8002368:	b24b      	sxtb	r3, r1
 800236a:	4313      	orrs	r3, r2
 800236c:	b259      	sxtb	r1, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8002378:	2108      	movs	r1, #8
 800237a:	4841      	ldr	r0, [pc, #260]	; (8002480 <reed_scan_sensors+0x274>)
 800237c:	f000 ff6c 	bl	8003258 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <reed_scan_sensors+0x17e>
 8002386:	2108      	movs	r1, #8
 8002388:	e000      	b.n	800238c <reed_scan_sensors+0x180>
 800238a:	2100      	movs	r1, #0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b25a      	sxtb	r2, r3
 8002396:	b24b      	sxtb	r3, r1
 8002398:	4313      	orrs	r3, r2
 800239a:	b259      	sxtb	r1, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	b2ca      	uxtb	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 80023a6:	2120      	movs	r1, #32
 80023a8:	4835      	ldr	r0, [pc, #212]	; (8002480 <reed_scan_sensors+0x274>)
 80023aa:	f000 ff55 	bl	8003258 <HAL_GPIO_ReadPin>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <reed_scan_sensors+0x1ac>
 80023b4:	2110      	movs	r1, #16
 80023b6:	e000      	b.n	80023ba <reed_scan_sensors+0x1ae>
 80023b8:	2100      	movs	r1, #0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b25a      	sxtb	r2, r3
 80023c4:	b24b      	sxtb	r3, r1
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b259      	sxtb	r1, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 80023d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d8:	482a      	ldr	r0, [pc, #168]	; (8002484 <reed_scan_sensors+0x278>)
 80023da:	f000 ff3d 	bl	8003258 <HAL_GPIO_ReadPin>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <reed_scan_sensors+0x1dc>
 80023e4:	2120      	movs	r1, #32
 80023e6:	e000      	b.n	80023ea <reed_scan_sensors+0x1de>
 80023e8:	2100      	movs	r1, #0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b25a      	sxtb	r2, r3
 80023f4:	b24b      	sxtb	r3, r1
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b259      	sxtb	r1, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8002404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002408:	481d      	ldr	r0, [pc, #116]	; (8002480 <reed_scan_sensors+0x274>)
 800240a:	f000 ff25 	bl	8003258 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <reed_scan_sensors+0x20c>
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	e000      	b.n	800241a <reed_scan_sensors+0x20e>
 8002418:	2100      	movs	r1, #0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25a      	sxtb	r2, r3
 8002424:	b24b      	sxtb	r3, r1
 8002426:	4313      	orrs	r3, r2
 8002428:	b259      	sxtb	r1, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8002434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002438:	4811      	ldr	r0, [pc, #68]	; (8002480 <reed_scan_sensors+0x274>)
 800243a:	f000 ff0d 	bl	8003258 <HAL_GPIO_ReadPin>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <reed_scan_sensors+0x23c>
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	e000      	b.n	800244a <reed_scan_sensors+0x23e>
 8002448:	2100      	movs	r1, #0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b25a      	sxtb	r2, r3
 8002454:	b24b      	sxtb	r3, r1
 8002456:	4313      	orrs	r3, r2
 8002458:	b259      	sxtb	r1, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b07      	cmp	r3, #7
 800246e:	f77f aed4 	ble.w	800221a <reed_scan_sensors+0xe>

  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020800 	.word	0x40020800
 8002480:	40020400 	.word	0x40020400
 8002484:	40020000 	.word	0x40020000

08002488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a4:	4c0b      	ldr	r4, [pc, #44]	; (80024d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024b2:	f7ff fbe5 	bl	8001c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f002 fe77 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ba:	f7fe fe75 	bl	80011a8 <main>
  bx  lr    
 80024be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80024cc:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 80024d0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80024d4:	200014c4 	.word	0x200014c4

080024d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_Init+0x40>)
 80024e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_Init+0x40>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x40>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f94f 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fa0a 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f967 	bl	8002812 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f92f 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000038 	.word	0x20000038
 8002578:	20000098 	.word	0x20000098
 800257c:	20000094 	.word	0x20000094

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000098 	.word	0x20000098
 80025a4:	20001374 	.word	0x20001374

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20001374 	.word	0x20001374

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000098 	.word	0x20000098

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff feb6 	bl	80025a8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e099      	b.n	800297c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	e00f      	b.n	800288a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7ff fe9d 	bl	80025a8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d908      	bls.n	800288a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e078      	b.n	800297c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e8      	bne.n	800286a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_DMA_Init+0x158>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4313      	orrs	r3, r2
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b04      	cmp	r3, #4
 800291c:	d117      	bne.n	800294e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa91 	bl	8002e58 <DMA_CheckFifoParam>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294a:	2301      	movs	r3, #1
 800294c:	e016      	b.n	800297c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa48 	bl	8002dec <DMA_CalcBaseAndBitshift>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	223f      	movs	r2, #63	; 0x3f
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	f010803f 	.word	0xf010803f

08002988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Start_IT+0x26>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e040      	b.n	8002a30 <HAL_DMA_Start_IT+0xa8>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d12f      	bne.n	8002a22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f9da 	bl	8002d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	223f      	movs	r2, #63	; 0x3f
 80029e2:	409a      	lsls	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0216 	orr.w	r2, r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0208 	orr.w	r2, r2, #8
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e005      	b.n	8002a2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00c      	b.n	8002a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2205      	movs	r2, #5
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a88:	4b8e      	ldr	r3, [pc, #568]	; (8002cc4 <HAL_DMA_IRQHandler+0x248>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a8e      	ldr	r2, [pc, #568]	; (8002cc8 <HAL_DMA_IRQHandler+0x24c>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0204 	bic.w	r2, r2, #4
 8002ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2204      	movs	r2, #4
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2204      	movs	r2, #4
 8002b42:	409a      	lsls	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	2210      	movs	r2, #16
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d043      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03c      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	2210      	movs	r2, #16
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e01f      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e016      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0208 	bic.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 808f 	beq.w	8002d1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8087 	beq.w	8002d1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2220      	movs	r2, #32
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d136      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0216 	bic.w	r2, r2, #22
 8002c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x1da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0208 	bic.w	r2, r2, #8
 8002c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	223f      	movs	r2, #63	; 0x3f
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d07e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
        }
        return;
 8002c92:	e079      	b.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e02c      	b.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
 8002cc2:	bf00      	nop
 8002cc4:	20000038 	.word	0x20000038
 8002cc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d023      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
 8002cdc:	e01e      	b.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10f      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0210 	bic.w	r2, r2, #16
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d032      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2205      	movs	r2, #5
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d307      	bcc.n	8002d64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f2      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x2cc>
 8002d62:	e000      	b.n	8002d66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
 8002d86:	e000      	b.n	8002d8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d88:	bf00      	nop
    }
  }
}
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d108      	bne.n	8002dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dce:	e007      	b.n	8002de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3b10      	subs	r3, #16
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <DMA_CalcBaseAndBitshift+0x64>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <DMA_CalcBaseAndBitshift+0x68>)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d909      	bls.n	8002e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e2c:	e007      	b.n	8002e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	aaaaaaab 	.word	0xaaaaaaab
 8002e54:	08006874 	.word	0x08006874

08002e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d856      	bhi.n	8002f26 <DMA_CheckFifoParam+0xce>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <DMA_CheckFifoParam+0x28>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002ea3 	.word	0x08002ea3
 8002e88:	08002e91 	.word	0x08002e91
 8002e8c:	08002f27 	.word	0x08002f27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d046      	beq.n	8002f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e043      	b.n	8002f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eaa:	d140      	bne.n	8002f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e03d      	b.n	8002f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d121      	bne.n	8002f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d837      	bhi.n	8002f32 <DMA_CheckFifoParam+0xda>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <DMA_CheckFifoParam+0x70>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002edf 	.word	0x08002edf
 8002ed0:	08002ed9 	.word	0x08002ed9
 8002ed4:	08002ef1 	.word	0x08002ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e030      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d025      	beq.n	8002f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eee:	e022      	b.n	8002f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002efe:	e01c      	b.n	8002f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d903      	bls.n	8002f0e <DMA_CheckFifoParam+0xb6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0c:	e018      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      break;
 8002f12:	e015      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e00b      	b.n	8002f3e <DMA_CheckFifoParam+0xe6>
      break;
 8002f26:	bf00      	nop
 8002f28:	e00a      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e008      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e006      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e004      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e159      	b.n	8003220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8148 	bne.w	800321a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a2 	beq.w	800321a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b54      	ldr	r3, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_GPIO_Init+0x2ec>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a49      	ldr	r2, [pc, #292]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x202>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1fe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1fa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	; (800324c <HAL_GPIO_Init+0x2fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1f6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x300>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1f2>
 800313e:	2304      	movs	r3, #4
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003142:	2307      	movs	r3, #7
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <HAL_GPIO_Init+0x2ec>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a2f      	ldr	r2, [pc, #188]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_GPIO_Init+0x304>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ea:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f aea2 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e001      	b.n	800327a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a4:	e003      	b.n	80032ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e267      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e242      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6c      	ldr	r2, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b69      	ldr	r3, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a68      	ldr	r2, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff f918 	bl	80025a8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff f914 	bl	80025a8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e207      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff f904 	bl	80025a8 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f900 	bl	80025a8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1f3      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7ff f8b9 	bl	80025a8 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7ff f8b5 	bl	80025a8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1a8      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4925      	ldr	r1, [pc, #148]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x244>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff f898 	bl	80025a8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7ff f894 	bl	80025a8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e187      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d036      	beq.n	8003514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7ff f878 	bl	80025a8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7ff f874 	bl	80025a8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e167      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x240>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e01b      	b.n	8003514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x248>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7ff f861 	bl	80025a8 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e00e      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7ff f85d 	bl	80025a8 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e150      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 80034fc:	40023800 	.word	0x40023800
 8003500:	42470000 	.word	0x42470000
 8003504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ea      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8097 	beq.w	8003650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b7d      	ldr	r3, [pc, #500]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a7c      	ldr	r2, [pc, #496]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b7a      	ldr	r3, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b77      	ldr	r3, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7ff f81d 	bl	80025a8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7ff f819 	bl	80025a8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e10c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x474>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ea>
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x30c>
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x324>
 80035c8:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe ffde 	bl	80025a8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe ffda 	bl	80025a8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0cb      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ee      	beq.n	80035f0 <HAL_RCC_OscConfig+0x334>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe ffc8 	bl	80025a8 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe ffc4 	bl	80025a8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b5      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a1 	beq.w	800379c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_OscConfig+0x470>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d05c      	beq.n	8003720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d141      	bne.n	80036f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe ff98 	bl	80025a8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe ff94 	bl	80025a8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e087      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe ff6d 	bl	80025a8 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe ff69 	bl	80025a8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e05c      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x470>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x416>
 80036f0:	e054      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe ff56 	bl	80025a8 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe ff52 	bl	80025a8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x470>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x444>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e038      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4ec>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d028      	beq.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d121      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d11a      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7fe fe84 	bl	80025a8 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe fe80 	bl	80025a8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003932:	f000 f821 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fde4 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	08006864 	.word	0x08006864
 8003970:	20000038 	.word	0x20000038
 8003974:	20000094 	.word	0x20000094

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b094      	sub	sp, #80	; 0x50
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	647b      	str	r3, [r7, #68]	; 0x44
 8003984:	2300      	movs	r3, #0
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	2300      	movs	r3, #0
 800398a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d00d      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x40>
 800399c:	2b08      	cmp	r3, #8
 800399e:	f200 80e1 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039aa:	e0db      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b73      	ldr	r3, [pc, #460]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039b0:	e0db      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b6:	e0d8      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d063      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
 80039e2:	2300      	movs	r3, #0
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
 80039e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	f04f 0000 	mov.w	r0, #0
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	0159      	lsls	r1, r3, #5
 80039f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fc:	0150      	lsls	r0, r2, #5
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4621      	mov	r1, r4
 8003a04:	1a51      	subs	r1, r2, r1
 8003a06:	6139      	str	r1, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	018b      	lsls	r3, r1, #6
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a26:	4651      	mov	r1, sl
 8003a28:	018a      	lsls	r2, r1, #6
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a30:	4659      	mov	r1, fp
 8003a32:	eb63 0901 	sbc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	462b      	mov	r3, r5
 8003a58:	eb49 0303 	adc.w	r3, r9, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	024b      	lsls	r3, r1, #9
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a74:	4621      	mov	r1, r4
 8003a76:	024a      	lsls	r2, r1, #9
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a88:	f7fc fbfa 	bl	8000280 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	e058      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	0159      	lsls	r1, r3, #5
 8003abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac2:	0150      	lsls	r0, r2, #5
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8003aec:	eb63 050b 	sbc.w	r5, r3, fp
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	00eb      	lsls	r3, r5, #3
 8003afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afe:	00e2      	lsls	r2, r4, #3
 8003b00:	4614      	mov	r4, r2
 8003b02:	461d      	mov	r5, r3
 8003b04:	4643      	mov	r3, r8
 8003b06:	18e3      	adds	r3, r4, r3
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	eb45 0303 	adc.w	r3, r5, r3
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	028b      	lsls	r3, r1, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b28:	4621      	mov	r1, r4
 8003b2a:	028a      	lsls	r2, r1, #10
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b32:	2200      	movs	r2, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	61fa      	str	r2, [r7, #28]
 8003b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3c:	f7fc fba0 	bl	8000280 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3750      	adds	r7, #80	; 0x50
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e041      	b.n	8003c1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fee4 	bl	8001978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fd7c 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e022      	b.n	8003c96 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d109      	bne.n	8003c6a <HAL_TIM_PWM_Start_DMA+0x46>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e015      	b.n	8003c96 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d109      	bne.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e008      	b.n	8003c96 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e15d      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e022      	b.n	8003cfe <HAL_TIM_PWM_Start_DMA+0xda>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d109      	bne.n	8003cd2 <HAL_TIM_PWM_Start_DMA+0xae>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e015      	b.n	8003cfe <HAL_TIM_PWM_Start_DMA+0xda>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_PWM_Start_DMA+0xda>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d024      	beq.n	8003d4c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xee>
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e123      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	e016      	b.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	e00e      	b.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d40:	e006      	b.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d4a:	e001      	b.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e104      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	f200 80ae 	bhi.w	8003eb4 <HAL_TIM_PWM_Start_DMA+0x290>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003eb5 	.word	0x08003eb5
 8003d68:	08003eb5 	.word	0x08003eb5
 8003d6c:	08003eb5 	.word	0x08003eb5
 8003d70:	08003ddd 	.word	0x08003ddd
 8003d74:	08003eb5 	.word	0x08003eb5
 8003d78:	08003eb5 	.word	0x08003eb5
 8003d7c:	08003eb5 	.word	0x08003eb5
 8003d80:	08003e25 	.word	0x08003e25
 8003d84:	08003eb5 	.word	0x08003eb5
 8003d88:	08003eb5 	.word	0x08003eb5
 8003d8c:	08003eb5 	.word	0x08003eb5
 8003d90:	08003e6d 	.word	0x08003e6d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	4a72      	ldr	r2, [pc, #456]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4a71      	ldr	r2, [pc, #452]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	4a70      	ldr	r2, [pc, #448]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3334      	adds	r3, #52	; 0x34
 8003db8:	461a      	mov	r2, r3
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	f7fe fde4 	bl	8002988 <HAL_DMA_Start_IT>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0c7      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	60da      	str	r2, [r3, #12]
      break;
 8003dda:	e06e      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	4a60      	ldr	r2, [pc, #384]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	4a5f      	ldr	r2, [pc, #380]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003df2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3338      	adds	r3, #56	; 0x38
 8003e00:	461a      	mov	r2, r3
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	f7fe fdc0 	bl	8002988 <HAL_DMA_Start_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0a3      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e20:	60da      	str	r2, [r3, #12]
      break;
 8003e22:	e04a      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a4e      	ldr	r2, [pc, #312]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a4c      	ldr	r2, [pc, #304]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003e3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	461a      	mov	r2, r3
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	f7fe fd9c 	bl	8002988 <HAL_DMA_Start_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e68:	60da      	str	r2, [r3, #12]
      break;
 8003e6a:	e026      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	4a3a      	ldr	r2, [pc, #232]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003e82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3340      	adds	r3, #64	; 0x40
 8003e90:	461a      	mov	r2, r3
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	f7fe fd78 	bl	8002988 <HAL_DMA_Start_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e05b      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eb0:	60da      	str	r2, [r3, #12]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d14b      	bne.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe05 	bl	8004ad8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x300>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d013      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x300>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x300>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x300>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_PWM_Start_DMA+0x358>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x300>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d010      	beq.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e007      	b.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	080045af 	.word	0x080045af
 8003f68:	08004657 	.word	0x08004657
 8003f6c:	0800451d 	.word	0x0800451d
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40014000 	.word	0x40014000

08003f84 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d855      	bhi.n	8004044 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08004045 	.word	0x08004045
 8003fa8:	08004045 	.word	0x08004045
 8003fac:	08004045 	.word	0x08004045
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08004045 	.word	0x08004045
 8003fb8:	08004045 	.word	0x08004045
 8003fbc:	08004045 	.word	0x08004045
 8003fc0:	0800400d 	.word	0x0800400d
 8003fc4:	08004045 	.word	0x08004045
 8003fc8:	08004045 	.word	0x08004045
 8003fcc:	08004045 	.word	0x08004045
 8003fd0:	08004029 	.word	0x08004029
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fe2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fd25 	bl	8002a38 <HAL_DMA_Abort_IT>
      break;
 8003fee:	e02c      	b.n	800404a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fd17 	bl	8002a38 <HAL_DMA_Abort_IT>
      break;
 800400a:	e01e      	b.n	800404a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fd09 	bl	8002a38 <HAL_DMA_Abort_IT>
      break;
 8004026:	e010      	b.n	800404a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004036:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fcfb 	bl	8002a38 <HAL_DMA_Abort_IT>
      break;
 8004042:	e002      	b.n	800404a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      break;
 8004048:	bf00      	nop
  }

  if (status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fd3d 	bl	8004ad8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2a      	ldr	r2, [pc, #168]	; (800410c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d117      	bne.n	8004098 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a1a      	ldr	r2, [r3, #32]
 800406e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	f240 4344 	movw	r3, #1092	; 0x444
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	f241 1311 	movw	r3, #4369	; 0x1111
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10f      	bne.n	80040c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	f240 4344 	movw	r3, #1092	; 0x444
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d6:	e013      	b.n	8004100 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d104      	bne.n	80040e8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e6:	e00b      	b.n	8004100 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d104      	bne.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f6:	e003      	b.n	8004100 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000

08004110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9ba 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9ac 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fd fdf5 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0204 	mvn.w	r2, #4
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f990 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f982 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fd fdcb 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0208 	mvn.w	r2, #8
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f966 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f958 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fda1 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f93c 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f92e 	bl	80044b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fd fd77 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f908 	bl	80044a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fcfc 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f904 	bl	80044f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b20      	cmp	r3, #32
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0220 	mvn.w	r2, #32
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fcc6 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800433a:	2302      	movs	r3, #2
 800433c:	e0ae      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	f200 809f 	bhi.w	800448c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004389 	.word	0x08004389
 8004358:	0800448d 	.word	0x0800448d
 800435c:	0800448d 	.word	0x0800448d
 8004360:	0800448d 	.word	0x0800448d
 8004364:	080043c9 	.word	0x080043c9
 8004368:	0800448d 	.word	0x0800448d
 800436c:	0800448d 	.word	0x0800448d
 8004370:	0800448d 	.word	0x0800448d
 8004374:	0800440b 	.word	0x0800440b
 8004378:	0800448d 	.word	0x0800448d
 800437c:	0800448d 	.word	0x0800448d
 8004380:	0800448d 	.word	0x0800448d
 8004384:	0800444b 	.word	0x0800444b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fa16 	bl	80047c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]
      break;
 80043c6:	e064      	b.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa5c 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	619a      	str	r2, [r3, #24]
      break;
 8004408:	e043      	b.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 faa7 	bl	8004964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0204 	bic.w	r2, r2, #4
 8004434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
      break;
 8004448:	e023      	b.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 faf1 	bl	8004a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	021a      	lsls	r2, r3, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	61da      	str	r2, [r3, #28]
      break;
 800448a:	e002      	b.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
      break;
 8004490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800449a:	7dfb      	ldrb	r3, [r7, #23]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004542:	e02a      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d107      	bne.n	800455e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	e01d      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2204      	movs	r2, #4
 800456c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004576:	e010      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d107      	bne.n	8004592 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004590:	e003      	b.n	800459a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ffb4 	bl	8004508 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10b      	bne.n	80045de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d136      	bne.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045dc:	e031      	b.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d10b      	bne.n	8004600 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2202      	movs	r2, #2
 80045ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d125      	bne.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fe:	e020      	b.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d10b      	bne.n	8004622 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d114      	bne.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	e00f      	b.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d10a      	bne.n	8004642 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2208      	movs	r2, #8
 8004630:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fd fb84 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	771a      	strb	r2, [r3, #28]
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d103      	bne.n	8004676 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	771a      	strb	r2, [r3, #28]
 8004674:	e019      	b.n	80046aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d103      	bne.n	8004688 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2202      	movs	r2, #2
 8004684:	771a      	strb	r2, [r3, #28]
 8004686:	e010      	b.n	80046aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d103      	bne.n	800469a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2204      	movs	r2, #4
 8004696:	771a      	strb	r2, [r3, #28]
 8004698:	e007      	b.n	80046aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d102      	bne.n	80046aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2208      	movs	r2, #8
 80046a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff18 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	771a      	strb	r2, [r3, #28]
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a34      	ldr	r2, [pc, #208]	; (80047a4 <TIM_Base_SetConfig+0xe4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_Base_SetConfig+0x38>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0x38>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <TIM_Base_SetConfig+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a30      	ldr	r2, [pc, #192]	; (80047ac <TIM_Base_SetConfig+0xec>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0x38>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2f      	ldr	r2, [pc, #188]	; (80047b0 <TIM_Base_SetConfig+0xf0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <TIM_Base_SetConfig+0xe4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01b      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d017      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <TIM_Base_SetConfig+0xe8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a21      	ldr	r2, [pc, #132]	; (80047ac <TIM_Base_SetConfig+0xec>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <TIM_Base_SetConfig+0xf0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <TIM_Base_SetConfig+0xf4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <TIM_Base_SetConfig+0xf8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <TIM_Base_SetConfig+0xfc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <TIM_Base_SetConfig+0xe4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d103      	bne.n	8004790 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	615a      	str	r2, [r3, #20]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <TIM_OC1_SetConfig+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10c      	bne.n	8004836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0308 	bic.w	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <TIM_OC1_SetConfig+0xc8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40010000 	.word	0x40010000

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <TIM_OC2_SetConfig+0xd4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10d      	bne.n	8004908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <TIM_OC2_SetConfig+0xd4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d113      	bne.n	8004938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000

08004964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <TIM_OC3_SetConfig+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10d      	bne.n	80049de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <TIM_OC3_SetConfig+0xd0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d113      	bne.n	8004a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40010000 	.word	0x40010000

08004a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <TIM_OC4_SetConfig+0x9c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d109      	bne.n	8004aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000

08004ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2201      	movs	r2, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	401a      	ands	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e050      	b.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d018      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10c      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40014000 	.word	0x40014000

08004c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e03d      	b.n	8004c98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <std>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cda:	6083      	str	r3, [r0, #8]
 8004cdc:	8181      	strh	r1, [r0, #12]
 8004cde:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce0:	81c2      	strh	r2, [r0, #14]
 8004ce2:	6183      	str	r3, [r0, #24]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	305c      	adds	r0, #92	; 0x5c
 8004cea:	f000 fa09 	bl	8005100 <memset>
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <std+0x58>)
 8004cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <std+0x5c>)
 8004cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <std+0x60>)
 8004cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <std+0x64>)
 8004cfc:	6323      	str	r3, [r4, #48]	; 0x30
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <std+0x68>)
 8004d00:	6224      	str	r4, [r4, #32]
 8004d02:	429c      	cmp	r4, r3
 8004d04:	d006      	beq.n	8004d14 <std+0x48>
 8004d06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d0a:	4294      	cmp	r4, r2
 8004d0c:	d002      	beq.n	8004d14 <std+0x48>
 8004d0e:	33d0      	adds	r3, #208	; 0xd0
 8004d10:	429c      	cmp	r4, r3
 8004d12:	d105      	bne.n	8004d20 <std+0x54>
 8004d14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f000 ba68 	b.w	80051f0 <__retarget_lock_init_recursive>
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop
 8004d24:	08004f51 	.word	0x08004f51
 8004d28:	08004f73 	.word	0x08004f73
 8004d2c:	08004fab 	.word	0x08004fab
 8004d30:	08004fcf 	.word	0x08004fcf
 8004d34:	20001378 	.word	0x20001378

08004d38 <stdio_exit_handler>:
 8004d38:	4a02      	ldr	r2, [pc, #8]	; (8004d44 <stdio_exit_handler+0xc>)
 8004d3a:	4903      	ldr	r1, [pc, #12]	; (8004d48 <stdio_exit_handler+0x10>)
 8004d3c:	4803      	ldr	r0, [pc, #12]	; (8004d4c <stdio_exit_handler+0x14>)
 8004d3e:	f000 b869 	b.w	8004e14 <_fwalk_sglue>
 8004d42:	bf00      	nop
 8004d44:	2000009c 	.word	0x2000009c
 8004d48:	080060a5 	.word	0x080060a5
 8004d4c:	200000a8 	.word	0x200000a8

08004d50 <cleanup_stdio>:
 8004d50:	6841      	ldr	r1, [r0, #4]
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <cleanup_stdio+0x34>)
 8004d54:	4299      	cmp	r1, r3
 8004d56:	b510      	push	{r4, lr}
 8004d58:	4604      	mov	r4, r0
 8004d5a:	d001      	beq.n	8004d60 <cleanup_stdio+0x10>
 8004d5c:	f001 f9a2 	bl	80060a4 <_fflush_r>
 8004d60:	68a1      	ldr	r1, [r4, #8]
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <cleanup_stdio+0x38>)
 8004d64:	4299      	cmp	r1, r3
 8004d66:	d002      	beq.n	8004d6e <cleanup_stdio+0x1e>
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f001 f99b 	bl	80060a4 <_fflush_r>
 8004d6e:	68e1      	ldr	r1, [r4, #12]
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <cleanup_stdio+0x3c>)
 8004d72:	4299      	cmp	r1, r3
 8004d74:	d004      	beq.n	8004d80 <cleanup_stdio+0x30>
 8004d76:	4620      	mov	r0, r4
 8004d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7c:	f001 b992 	b.w	80060a4 <_fflush_r>
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	20001378 	.word	0x20001378
 8004d88:	200013e0 	.word	0x200013e0
 8004d8c:	20001448 	.word	0x20001448

08004d90 <global_stdio_init.part.0>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <global_stdio_init.part.0+0x30>)
 8004d94:	4c0b      	ldr	r4, [pc, #44]	; (8004dc4 <global_stdio_init.part.0+0x34>)
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <global_stdio_init.part.0+0x38>)
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2104      	movs	r1, #4
 8004da0:	f7ff ff94 	bl	8004ccc <std>
 8004da4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004da8:	2201      	movs	r2, #1
 8004daa:	2109      	movs	r1, #9
 8004dac:	f7ff ff8e 	bl	8004ccc <std>
 8004db0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004db4:	2202      	movs	r2, #2
 8004db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dba:	2112      	movs	r1, #18
 8004dbc:	f7ff bf86 	b.w	8004ccc <std>
 8004dc0:	200014b0 	.word	0x200014b0
 8004dc4:	20001378 	.word	0x20001378
 8004dc8:	08004d39 	.word	0x08004d39

08004dcc <__sfp_lock_acquire>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_acquire+0x8>)
 8004dce:	f000 ba10 	b.w	80051f2 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200014b9 	.word	0x200014b9

08004dd8 <__sfp_lock_release>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__sfp_lock_release+0x8>)
 8004dda:	f000 ba0b 	b.w	80051f4 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	200014b9 	.word	0x200014b9

08004de4 <__sinit>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4604      	mov	r4, r0
 8004de8:	f7ff fff0 	bl	8004dcc <__sfp_lock_acquire>
 8004dec:	6a23      	ldr	r3, [r4, #32]
 8004dee:	b11b      	cbz	r3, 8004df8 <__sinit+0x14>
 8004df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df4:	f7ff bff0 	b.w	8004dd8 <__sfp_lock_release>
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <__sinit+0x28>)
 8004dfa:	6223      	str	r3, [r4, #32]
 8004dfc:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <__sinit+0x2c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f5      	bne.n	8004df0 <__sinit+0xc>
 8004e04:	f7ff ffc4 	bl	8004d90 <global_stdio_init.part.0>
 8004e08:	e7f2      	b.n	8004df0 <__sinit+0xc>
 8004e0a:	bf00      	nop
 8004e0c:	08004d51 	.word	0x08004d51
 8004e10:	200014b0 	.word	0x200014b0

08004e14 <_fwalk_sglue>:
 8004e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e18:	4607      	mov	r7, r0
 8004e1a:	4688      	mov	r8, r1
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	2600      	movs	r6, #0
 8004e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e24:	f1b9 0901 	subs.w	r9, r9, #1
 8004e28:	d505      	bpl.n	8004e36 <_fwalk_sglue+0x22>
 8004e2a:	6824      	ldr	r4, [r4, #0]
 8004e2c:	2c00      	cmp	r4, #0
 8004e2e:	d1f7      	bne.n	8004e20 <_fwalk_sglue+0xc>
 8004e30:	4630      	mov	r0, r6
 8004e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e36:	89ab      	ldrh	r3, [r5, #12]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d907      	bls.n	8004e4c <_fwalk_sglue+0x38>
 8004e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e40:	3301      	adds	r3, #1
 8004e42:	d003      	beq.n	8004e4c <_fwalk_sglue+0x38>
 8004e44:	4629      	mov	r1, r5
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	4306      	orrs	r6, r0
 8004e4c:	3568      	adds	r5, #104	; 0x68
 8004e4e:	e7e9      	b.n	8004e24 <_fwalk_sglue+0x10>

08004e50 <iprintf>:
 8004e50:	b40f      	push	{r0, r1, r2, r3}
 8004e52:	b507      	push	{r0, r1, r2, lr}
 8004e54:	4906      	ldr	r1, [pc, #24]	; (8004e70 <iprintf+0x20>)
 8004e56:	ab04      	add	r3, sp, #16
 8004e58:	6808      	ldr	r0, [r1, #0]
 8004e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e5e:	6881      	ldr	r1, [r0, #8]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	f000 faeb 	bl	800543c <_vfiprintf_r>
 8004e66:	b003      	add	sp, #12
 8004e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e6c:	b004      	add	sp, #16
 8004e6e:	4770      	bx	lr
 8004e70:	200000f4 	.word	0x200000f4

08004e74 <_puts_r>:
 8004e74:	6a03      	ldr	r3, [r0, #32]
 8004e76:	b570      	push	{r4, r5, r6, lr}
 8004e78:	6884      	ldr	r4, [r0, #8]
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_puts_r+0x10>
 8004e80:	f7ff ffb0 	bl	8004de4 <__sinit>
 8004e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e86:	07db      	lsls	r3, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_puts_r+0x22>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	0598      	lsls	r0, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_puts_r+0x22>
 8004e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e92:	f000 f9ae 	bl	80051f2 <__retarget_lock_acquire_recursive>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	0719      	lsls	r1, r3, #28
 8004e9a:	d513      	bpl.n	8004ec4 <_puts_r+0x50>
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	b18b      	cbz	r3, 8004ec4 <_puts_r+0x50>
 8004ea0:	3e01      	subs	r6, #1
 8004ea2:	68a3      	ldr	r3, [r4, #8]
 8004ea4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	60a3      	str	r3, [r4, #8]
 8004eac:	b9e9      	cbnz	r1, 8004eea <_puts_r+0x76>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da2e      	bge.n	8004f10 <_puts_r+0x9c>
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	210a      	movs	r1, #10
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 f88d 	bl	8004fd6 <__swbuf_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d007      	beq.n	8004ed0 <_puts_r+0x5c>
 8004ec0:	250a      	movs	r5, #10
 8004ec2:	e007      	b.n	8004ed4 <_puts_r+0x60>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 f8c2 	bl	8005050 <__swsetup_r>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d0e7      	beq.n	8004ea0 <_puts_r+0x2c>
 8004ed0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed6:	07da      	lsls	r2, r3, #31
 8004ed8:	d405      	bmi.n	8004ee6 <_puts_r+0x72>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	059b      	lsls	r3, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_puts_r+0x72>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee2:	f000 f987 	bl	80051f4 <__retarget_lock_release_recursive>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da04      	bge.n	8004ef8 <_puts_r+0x84>
 8004eee:	69a2      	ldr	r2, [r4, #24]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	dc06      	bgt.n	8004f02 <_puts_r+0x8e>
 8004ef4:	290a      	cmp	r1, #10
 8004ef6:	d004      	beq.n	8004f02 <_puts_r+0x8e>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	6022      	str	r2, [r4, #0]
 8004efe:	7019      	strb	r1, [r3, #0]
 8004f00:	e7cf      	b.n	8004ea2 <_puts_r+0x2e>
 8004f02:	4622      	mov	r2, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f866 	bl	8004fd6 <__swbuf_r>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d1c9      	bne.n	8004ea2 <_puts_r+0x2e>
 8004f0e:	e7df      	b.n	8004ed0 <_puts_r+0x5c>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	250a      	movs	r5, #10
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	6022      	str	r2, [r4, #0]
 8004f18:	701d      	strb	r5, [r3, #0]
 8004f1a:	e7db      	b.n	8004ed4 <_puts_r+0x60>

08004f1c <puts>:
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <puts+0xc>)
 8004f1e:	4601      	mov	r1, r0
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	f7ff bfa7 	b.w	8004e74 <_puts_r>
 8004f26:	bf00      	nop
 8004f28:	200000f4 	.word	0x200000f4

08004f2c <iscanf>:
 8004f2c:	b40f      	push	{r0, r1, r2, r3}
 8004f2e:	b507      	push	{r0, r1, r2, lr}
 8004f30:	4906      	ldr	r1, [pc, #24]	; (8004f4c <iscanf+0x20>)
 8004f32:	ab04      	add	r3, sp, #16
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3a:	6841      	ldr	r1, [r0, #4]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f000 fec9 	bl	8005cd4 <_vfiscanf_r>
 8004f42:	b003      	add	sp, #12
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	200000f4 	.word	0x200000f4

08004f50 <__sread>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	460c      	mov	r4, r1
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f8fc 	bl	8005154 <_read_r>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	bfab      	itete	ge
 8004f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f62:	89a3      	ldrhlt	r3, [r4, #12]
 8004f64:	181b      	addge	r3, r3, r0
 8004f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f6a:	bfac      	ite	ge
 8004f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f6e:	81a3      	strhlt	r3, [r4, #12]
 8004f70:	bd10      	pop	{r4, pc}

08004f72 <__swrite>:
 8004f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	461f      	mov	r7, r3
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	05db      	lsls	r3, r3, #23
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4616      	mov	r6, r2
 8004f82:	d505      	bpl.n	8004f90 <__swrite+0x1e>
 8004f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f88:	2302      	movs	r3, #2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f000 f8d0 	bl	8005130 <_lseek_r>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	f000 b8e7 	b.w	8005178 <_write_r>

08004faa <__sseek>:
 8004faa:	b510      	push	{r4, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb2:	f000 f8bd 	bl	8005130 <_lseek_r>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	bf15      	itete	ne
 8004fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fc6:	81a3      	strheq	r3, [r4, #12]
 8004fc8:	bf18      	it	ne
 8004fca:	81a3      	strhne	r3, [r4, #12]
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <__sclose>:
 8004fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd2:	f000 b89d 	b.w	8005110 <_close_r>

08004fd6 <__swbuf_r>:
 8004fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd8:	460e      	mov	r6, r1
 8004fda:	4614      	mov	r4, r2
 8004fdc:	4605      	mov	r5, r0
 8004fde:	b118      	cbz	r0, 8004fe8 <__swbuf_r+0x12>
 8004fe0:	6a03      	ldr	r3, [r0, #32]
 8004fe2:	b90b      	cbnz	r3, 8004fe8 <__swbuf_r+0x12>
 8004fe4:	f7ff fefe 	bl	8004de4 <__sinit>
 8004fe8:	69a3      	ldr	r3, [r4, #24]
 8004fea:	60a3      	str	r3, [r4, #8]
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	071a      	lsls	r2, r3, #28
 8004ff0:	d525      	bpl.n	800503e <__swbuf_r+0x68>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	b31b      	cbz	r3, 800503e <__swbuf_r+0x68>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	1a98      	subs	r0, r3, r2
 8004ffc:	6963      	ldr	r3, [r4, #20]
 8004ffe:	b2f6      	uxtb	r6, r6
 8005000:	4283      	cmp	r3, r0
 8005002:	4637      	mov	r7, r6
 8005004:	dc04      	bgt.n	8005010 <__swbuf_r+0x3a>
 8005006:	4621      	mov	r1, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f001 f84b 	bl	80060a4 <_fflush_r>
 800500e:	b9e0      	cbnz	r0, 800504a <__swbuf_r+0x74>
 8005010:	68a3      	ldr	r3, [r4, #8]
 8005012:	3b01      	subs	r3, #1
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	701e      	strb	r6, [r3, #0]
 800501e:	6962      	ldr	r2, [r4, #20]
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	429a      	cmp	r2, r3
 8005024:	d004      	beq.n	8005030 <__swbuf_r+0x5a>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	07db      	lsls	r3, r3, #31
 800502a:	d506      	bpl.n	800503a <__swbuf_r+0x64>
 800502c:	2e0a      	cmp	r6, #10
 800502e:	d104      	bne.n	800503a <__swbuf_r+0x64>
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f001 f836 	bl	80060a4 <_fflush_r>
 8005038:	b938      	cbnz	r0, 800504a <__swbuf_r+0x74>
 800503a:	4638      	mov	r0, r7
 800503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 f805 	bl	8005050 <__swsetup_r>
 8005046:	2800      	cmp	r0, #0
 8005048:	d0d5      	beq.n	8004ff6 <__swbuf_r+0x20>
 800504a:	f04f 37ff 	mov.w	r7, #4294967295
 800504e:	e7f4      	b.n	800503a <__swbuf_r+0x64>

08005050 <__swsetup_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <__swsetup_r+0xac>)
 8005054:	4605      	mov	r5, r0
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	460c      	mov	r4, r1
 800505a:	b118      	cbz	r0, 8005064 <__swsetup_r+0x14>
 800505c:	6a03      	ldr	r3, [r0, #32]
 800505e:	b90b      	cbnz	r3, 8005064 <__swsetup_r+0x14>
 8005060:	f7ff fec0 	bl	8004de4 <__sinit>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800506a:	0718      	lsls	r0, r3, #28
 800506c:	d422      	bmi.n	80050b4 <__swsetup_r+0x64>
 800506e:	06d9      	lsls	r1, r3, #27
 8005070:	d407      	bmi.n	8005082 <__swsetup_r+0x32>
 8005072:	2309      	movs	r3, #9
 8005074:	602b      	str	r3, [r5, #0]
 8005076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	e034      	b.n	80050ec <__swsetup_r+0x9c>
 8005082:	0758      	lsls	r0, r3, #29
 8005084:	d512      	bpl.n	80050ac <__swsetup_r+0x5c>
 8005086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005088:	b141      	cbz	r1, 800509c <__swsetup_r+0x4c>
 800508a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800508e:	4299      	cmp	r1, r3
 8005090:	d002      	beq.n	8005098 <__swsetup_r+0x48>
 8005092:	4628      	mov	r0, r5
 8005094:	f000 f8b0 	bl	80051f8 <_free_r>
 8005098:	2300      	movs	r3, #0
 800509a:	6363      	str	r3, [r4, #52]	; 0x34
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	2300      	movs	r3, #0
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f043 0308 	orr.w	r3, r3, #8
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	b94b      	cbnz	r3, 80050cc <__swsetup_r+0x7c>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c2:	d003      	beq.n	80050cc <__swsetup_r+0x7c>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	f001 f83a 	bl	8006140 <__smakebuf_r>
 80050cc:	89a0      	ldrh	r0, [r4, #12]
 80050ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d2:	f010 0301 	ands.w	r3, r0, #1
 80050d6:	d00a      	beq.n	80050ee <__swsetup_r+0x9e>
 80050d8:	2300      	movs	r3, #0
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	6963      	ldr	r3, [r4, #20]
 80050de:	425b      	negs	r3, r3
 80050e0:	61a3      	str	r3, [r4, #24]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b943      	cbnz	r3, 80050f8 <__swsetup_r+0xa8>
 80050e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050ea:	d1c4      	bne.n	8005076 <__swsetup_r+0x26>
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	0781      	lsls	r1, r0, #30
 80050f0:	bf58      	it	pl
 80050f2:	6963      	ldrpl	r3, [r4, #20]
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	e7f4      	b.n	80050e2 <__swsetup_r+0x92>
 80050f8:	2000      	movs	r0, #0
 80050fa:	e7f7      	b.n	80050ec <__swsetup_r+0x9c>
 80050fc:	200000f4 	.word	0x200000f4

08005100 <memset>:
 8005100:	4402      	add	r2, r0
 8005102:	4603      	mov	r3, r0
 8005104:	4293      	cmp	r3, r2
 8005106:	d100      	bne.n	800510a <memset+0xa>
 8005108:	4770      	bx	lr
 800510a:	f803 1b01 	strb.w	r1, [r3], #1
 800510e:	e7f9      	b.n	8005104 <memset+0x4>

08005110 <_close_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d06      	ldr	r5, [pc, #24]	; (800512c <_close_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fc fd45 	bl	8001baa <_close>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_close_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_close_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200014b4 	.word	0x200014b4

08005130 <_lseek_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4d07      	ldr	r5, [pc, #28]	; (8005150 <_lseek_r+0x20>)
 8005134:	4604      	mov	r4, r0
 8005136:	4608      	mov	r0, r1
 8005138:	4611      	mov	r1, r2
 800513a:	2200      	movs	r2, #0
 800513c:	602a      	str	r2, [r5, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	f7fc fd5a 	bl	8001bf8 <_lseek>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_lseek_r+0x1e>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_lseek_r+0x1e>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	200014b4 	.word	0x200014b4

08005154 <_read_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d07      	ldr	r5, [pc, #28]	; (8005174 <_read_r+0x20>)
 8005158:	4604      	mov	r4, r0
 800515a:	4608      	mov	r0, r1
 800515c:	4611      	mov	r1, r2
 800515e:	2200      	movs	r2, #0
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	f7fc fce8 	bl	8001b38 <_read>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_read_r+0x1e>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_read_r+0x1e>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	200014b4 	.word	0x200014b4

08005178 <_write_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d07      	ldr	r5, [pc, #28]	; (8005198 <_write_r+0x20>)
 800517c:	4604      	mov	r4, r0
 800517e:	4608      	mov	r0, r1
 8005180:	4611      	mov	r1, r2
 8005182:	2200      	movs	r2, #0
 8005184:	602a      	str	r2, [r5, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f7fc fcf3 	bl	8001b72 <_write>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d102      	bne.n	8005196 <_write_r+0x1e>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b103      	cbz	r3, 8005196 <_write_r+0x1e>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	200014b4 	.word	0x200014b4

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	200000f4 	.word	0x200000f4

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f001 faea 	bl	8006794 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	080069d4 	.word	0x080069d4
 80051e4:	080069d4 	.word	0x080069d4
 80051e8:	080069d4 	.word	0x080069d4
 80051ec:	080069d8 	.word	0x080069d8

080051f0 <__retarget_lock_init_recursive>:
 80051f0:	4770      	bx	lr

080051f2 <__retarget_lock_acquire_recursive>:
 80051f2:	4770      	bx	lr

080051f4 <__retarget_lock_release_recursive>:
 80051f4:	4770      	bx	lr
	...

080051f8 <_free_r>:
 80051f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d044      	beq.n	8005288 <_free_r+0x90>
 80051fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005202:	9001      	str	r0, [sp, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f1a1 0404 	sub.w	r4, r1, #4
 800520a:	bfb8      	it	lt
 800520c:	18e4      	addlt	r4, r4, r3
 800520e:	f000 f8df 	bl	80053d0 <__malloc_lock>
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <_free_r+0x94>)
 8005214:	9801      	ldr	r0, [sp, #4]
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	b933      	cbnz	r3, 8005228 <_free_r+0x30>
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	6014      	str	r4, [r2, #0]
 800521e:	b003      	add	sp, #12
 8005220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005224:	f000 b8da 	b.w	80053dc <__malloc_unlock>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d908      	bls.n	800523e <_free_r+0x46>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf01      	itttt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	1949      	addeq	r1, r1, r5
 800523a:	6021      	streq	r1, [r4, #0]
 800523c:	e7ed      	b.n	800521a <_free_r+0x22>
 800523e:	461a      	mov	r2, r3
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b10b      	cbz	r3, 8005248 <_free_r+0x50>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d9fa      	bls.n	800523e <_free_r+0x46>
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	1855      	adds	r5, r2, r1
 800524c:	42a5      	cmp	r5, r4
 800524e:	d10b      	bne.n	8005268 <_free_r+0x70>
 8005250:	6824      	ldr	r4, [r4, #0]
 8005252:	4421      	add	r1, r4
 8005254:	1854      	adds	r4, r2, r1
 8005256:	42a3      	cmp	r3, r4
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	d1e0      	bne.n	800521e <_free_r+0x26>
 800525c:	681c      	ldr	r4, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	6053      	str	r3, [r2, #4]
 8005262:	440c      	add	r4, r1
 8005264:	6014      	str	r4, [r2, #0]
 8005266:	e7da      	b.n	800521e <_free_r+0x26>
 8005268:	d902      	bls.n	8005270 <_free_r+0x78>
 800526a:	230c      	movs	r3, #12
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	e7d6      	b.n	800521e <_free_r+0x26>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf04      	itt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	bf04      	itt	eq
 8005280:	1949      	addeq	r1, r1, r5
 8005282:	6021      	streq	r1, [r4, #0]
 8005284:	6054      	str	r4, [r2, #4]
 8005286:	e7ca      	b.n	800521e <_free_r+0x26>
 8005288:	b003      	add	sp, #12
 800528a:	bd30      	pop	{r4, r5, pc}
 800528c:	200014bc 	.word	0x200014bc

08005290 <sbrk_aligned>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4e0e      	ldr	r6, [pc, #56]	; (80052cc <sbrk_aligned+0x3c>)
 8005294:	460c      	mov	r4, r1
 8005296:	6831      	ldr	r1, [r6, #0]
 8005298:	4605      	mov	r5, r0
 800529a:	b911      	cbnz	r1, 80052a2 <sbrk_aligned+0x12>
 800529c:	f001 f92c 	bl	80064f8 <_sbrk_r>
 80052a0:	6030      	str	r0, [r6, #0]
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f001 f927 	bl	80064f8 <_sbrk_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d00a      	beq.n	80052c4 <sbrk_aligned+0x34>
 80052ae:	1cc4      	adds	r4, r0, #3
 80052b0:	f024 0403 	bic.w	r4, r4, #3
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d007      	beq.n	80052c8 <sbrk_aligned+0x38>
 80052b8:	1a21      	subs	r1, r4, r0
 80052ba:	4628      	mov	r0, r5
 80052bc:	f001 f91c 	bl	80064f8 <_sbrk_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	d101      	bne.n	80052c8 <sbrk_aligned+0x38>
 80052c4:	f04f 34ff 	mov.w	r4, #4294967295
 80052c8:	4620      	mov	r0, r4
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	200014c0 	.word	0x200014c0

080052d0 <_malloc_r>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	1ccd      	adds	r5, r1, #3
 80052d6:	f025 0503 	bic.w	r5, r5, #3
 80052da:	3508      	adds	r5, #8
 80052dc:	2d0c      	cmp	r5, #12
 80052de:	bf38      	it	cc
 80052e0:	250c      	movcc	r5, #12
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	4607      	mov	r7, r0
 80052e6:	db01      	blt.n	80052ec <_malloc_r+0x1c>
 80052e8:	42a9      	cmp	r1, r5
 80052ea:	d905      	bls.n	80052f8 <_malloc_r+0x28>
 80052ec:	230c      	movs	r3, #12
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	2600      	movs	r6, #0
 80052f2:	4630      	mov	r0, r6
 80052f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053cc <_malloc_r+0xfc>
 80052fc:	f000 f868 	bl	80053d0 <__malloc_lock>
 8005300:	f8d8 3000 	ldr.w	r3, [r8]
 8005304:	461c      	mov	r4, r3
 8005306:	bb5c      	cbnz	r4, 8005360 <_malloc_r+0x90>
 8005308:	4629      	mov	r1, r5
 800530a:	4638      	mov	r0, r7
 800530c:	f7ff ffc0 	bl	8005290 <sbrk_aligned>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	4604      	mov	r4, r0
 8005314:	d155      	bne.n	80053c2 <_malloc_r+0xf2>
 8005316:	f8d8 4000 	ldr.w	r4, [r8]
 800531a:	4626      	mov	r6, r4
 800531c:	2e00      	cmp	r6, #0
 800531e:	d145      	bne.n	80053ac <_malloc_r+0xdc>
 8005320:	2c00      	cmp	r4, #0
 8005322:	d048      	beq.n	80053b6 <_malloc_r+0xe6>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	4631      	mov	r1, r6
 8005328:	4638      	mov	r0, r7
 800532a:	eb04 0903 	add.w	r9, r4, r3
 800532e:	f001 f8e3 	bl	80064f8 <_sbrk_r>
 8005332:	4581      	cmp	r9, r0
 8005334:	d13f      	bne.n	80053b6 <_malloc_r+0xe6>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1a6d      	subs	r5, r5, r1
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ffa7 	bl	8005290 <sbrk_aligned>
 8005342:	3001      	adds	r0, #1
 8005344:	d037      	beq.n	80053b6 <_malloc_r+0xe6>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	442b      	add	r3, r5
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	f8d8 3000 	ldr.w	r3, [r8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d038      	beq.n	80053c6 <_malloc_r+0xf6>
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	42a2      	cmp	r2, r4
 8005358:	d12b      	bne.n	80053b2 <_malloc_r+0xe2>
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e00f      	b.n	8005380 <_malloc_r+0xb0>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	1b52      	subs	r2, r2, r5
 8005364:	d41f      	bmi.n	80053a6 <_malloc_r+0xd6>
 8005366:	2a0b      	cmp	r2, #11
 8005368:	d917      	bls.n	800539a <_malloc_r+0xca>
 800536a:	1961      	adds	r1, r4, r5
 800536c:	42a3      	cmp	r3, r4
 800536e:	6025      	str	r5, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	6059      	strne	r1, [r3, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	bf08      	it	eq
 8005378:	f8c8 1000 	streq.w	r1, [r8]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4638      	mov	r0, r7
 8005382:	f104 060b 	add.w	r6, r4, #11
 8005386:	f000 f829 	bl	80053dc <__malloc_unlock>
 800538a:	f026 0607 	bic.w	r6, r6, #7
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	1af2      	subs	r2, r6, r3
 8005392:	d0ae      	beq.n	80052f2 <_malloc_r+0x22>
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	50a3      	str	r3, [r4, r2]
 8005398:	e7ab      	b.n	80052f2 <_malloc_r+0x22>
 800539a:	42a3      	cmp	r3, r4
 800539c:	6862      	ldr	r2, [r4, #4]
 800539e:	d1dd      	bne.n	800535c <_malloc_r+0x8c>
 80053a0:	f8c8 2000 	str.w	r2, [r8]
 80053a4:	e7ec      	b.n	8005380 <_malloc_r+0xb0>
 80053a6:	4623      	mov	r3, r4
 80053a8:	6864      	ldr	r4, [r4, #4]
 80053aa:	e7ac      	b.n	8005306 <_malloc_r+0x36>
 80053ac:	4634      	mov	r4, r6
 80053ae:	6876      	ldr	r6, [r6, #4]
 80053b0:	e7b4      	b.n	800531c <_malloc_r+0x4c>
 80053b2:	4613      	mov	r3, r2
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x80>
 80053b6:	230c      	movs	r3, #12
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4638      	mov	r0, r7
 80053bc:	f000 f80e 	bl	80053dc <__malloc_unlock>
 80053c0:	e797      	b.n	80052f2 <_malloc_r+0x22>
 80053c2:	6025      	str	r5, [r4, #0]
 80053c4:	e7dc      	b.n	8005380 <_malloc_r+0xb0>
 80053c6:	605b      	str	r3, [r3, #4]
 80053c8:	deff      	udf	#255	; 0xff
 80053ca:	bf00      	nop
 80053cc:	200014bc 	.word	0x200014bc

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f7ff bf0e 	b.w	80051f2 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	200014b8 	.word	0x200014b8

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f7ff bf09 	b.w	80051f4 <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	200014b8 	.word	0x200014b8

080053e8 <__sfputc_r>:
 80053e8:	6893      	ldr	r3, [r2, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	b410      	push	{r4}
 80053f0:	6093      	str	r3, [r2, #8]
 80053f2:	da08      	bge.n	8005406 <__sfputc_r+0x1e>
 80053f4:	6994      	ldr	r4, [r2, #24]
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	db01      	blt.n	80053fe <__sfputc_r+0x16>
 80053fa:	290a      	cmp	r1, #10
 80053fc:	d103      	bne.n	8005406 <__sfputc_r+0x1e>
 80053fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005402:	f7ff bde8 	b.w	8004fd6 <__swbuf_r>
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	1c58      	adds	r0, r3, #1
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	7019      	strb	r1, [r3, #0]
 800540e:	4608      	mov	r0, r1
 8005410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005414:	4770      	bx	lr

08005416 <__sfputs_r>:
 8005416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	4614      	mov	r4, r2
 800541e:	18d5      	adds	r5, r2, r3
 8005420:	42ac      	cmp	r4, r5
 8005422:	d101      	bne.n	8005428 <__sfputs_r+0x12>
 8005424:	2000      	movs	r0, #0
 8005426:	e007      	b.n	8005438 <__sfputs_r+0x22>
 8005428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542c:	463a      	mov	r2, r7
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ffda 	bl	80053e8 <__sfputc_r>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d1f3      	bne.n	8005420 <__sfputs_r+0xa>
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800543c <_vfiprintf_r>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	460d      	mov	r5, r1
 8005442:	b09d      	sub	sp, #116	; 0x74
 8005444:	4614      	mov	r4, r2
 8005446:	4698      	mov	r8, r3
 8005448:	4606      	mov	r6, r0
 800544a:	b118      	cbz	r0, 8005454 <_vfiprintf_r+0x18>
 800544c:	6a03      	ldr	r3, [r0, #32]
 800544e:	b90b      	cbnz	r3, 8005454 <_vfiprintf_r+0x18>
 8005450:	f7ff fcc8 	bl	8004de4 <__sinit>
 8005454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005456:	07d9      	lsls	r1, r3, #31
 8005458:	d405      	bmi.n	8005466 <_vfiprintf_r+0x2a>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	059a      	lsls	r2, r3, #22
 800545e:	d402      	bmi.n	8005466 <_vfiprintf_r+0x2a>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f7ff fec6 	bl	80051f2 <__retarget_lock_acquire_recursive>
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	d501      	bpl.n	8005470 <_vfiprintf_r+0x34>
 800546c:	692b      	ldr	r3, [r5, #16]
 800546e:	b99b      	cbnz	r3, 8005498 <_vfiprintf_r+0x5c>
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff fdec 	bl	8005050 <__swsetup_r>
 8005478:	b170      	cbz	r0, 8005498 <_vfiprintf_r+0x5c>
 800547a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800547c:	07dc      	lsls	r4, r3, #31
 800547e:	d504      	bpl.n	800548a <_vfiprintf_r+0x4e>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	b01d      	add	sp, #116	; 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	89ab      	ldrh	r3, [r5, #12]
 800548c:	0598      	lsls	r0, r3, #22
 800548e:	d4f7      	bmi.n	8005480 <_vfiprintf_r+0x44>
 8005490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005492:	f7ff feaf 	bl	80051f4 <__retarget_lock_release_recursive>
 8005496:	e7f3      	b.n	8005480 <_vfiprintf_r+0x44>
 8005498:	2300      	movs	r3, #0
 800549a:	9309      	str	r3, [sp, #36]	; 0x24
 800549c:	2320      	movs	r3, #32
 800549e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054a6:	2330      	movs	r3, #48	; 0x30
 80054a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800565c <_vfiprintf_r+0x220>
 80054ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b0:	f04f 0901 	mov.w	r9, #1
 80054b4:	4623      	mov	r3, r4
 80054b6:	469a      	mov	sl, r3
 80054b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054bc:	b10a      	cbz	r2, 80054c2 <_vfiprintf_r+0x86>
 80054be:	2a25      	cmp	r2, #37	; 0x25
 80054c0:	d1f9      	bne.n	80054b6 <_vfiprintf_r+0x7a>
 80054c2:	ebba 0b04 	subs.w	fp, sl, r4
 80054c6:	d00b      	beq.n	80054e0 <_vfiprintf_r+0xa4>
 80054c8:	465b      	mov	r3, fp
 80054ca:	4622      	mov	r2, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7ff ffa1 	bl	8005416 <__sfputs_r>
 80054d4:	3001      	adds	r0, #1
 80054d6:	f000 80a9 	beq.w	800562c <_vfiprintf_r+0x1f0>
 80054da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054dc:	445a      	add	r2, fp
 80054de:	9209      	str	r2, [sp, #36]	; 0x24
 80054e0:	f89a 3000 	ldrb.w	r3, [sl]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a1 	beq.w	800562c <_vfiprintf_r+0x1f0>
 80054ea:	2300      	movs	r3, #0
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054f4:	f10a 0a01 	add.w	sl, sl, #1
 80054f8:	9304      	str	r3, [sp, #16]
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005500:	931a      	str	r3, [sp, #104]	; 0x68
 8005502:	4654      	mov	r4, sl
 8005504:	2205      	movs	r2, #5
 8005506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550a:	4854      	ldr	r0, [pc, #336]	; (800565c <_vfiprintf_r+0x220>)
 800550c:	f7fa fe68 	bl	80001e0 <memchr>
 8005510:	9a04      	ldr	r2, [sp, #16]
 8005512:	b9d8      	cbnz	r0, 800554c <_vfiprintf_r+0x110>
 8005514:	06d1      	lsls	r1, r2, #27
 8005516:	bf44      	itt	mi
 8005518:	2320      	movmi	r3, #32
 800551a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551e:	0713      	lsls	r3, r2, #28
 8005520:	bf44      	itt	mi
 8005522:	232b      	movmi	r3, #43	; 0x2b
 8005524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005528:	f89a 3000 	ldrb.w	r3, [sl]
 800552c:	2b2a      	cmp	r3, #42	; 0x2a
 800552e:	d015      	beq.n	800555c <_vfiprintf_r+0x120>
 8005530:	9a07      	ldr	r2, [sp, #28]
 8005532:	4654      	mov	r4, sl
 8005534:	2000      	movs	r0, #0
 8005536:	f04f 0c0a 	mov.w	ip, #10
 800553a:	4621      	mov	r1, r4
 800553c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005540:	3b30      	subs	r3, #48	; 0x30
 8005542:	2b09      	cmp	r3, #9
 8005544:	d94d      	bls.n	80055e2 <_vfiprintf_r+0x1a6>
 8005546:	b1b0      	cbz	r0, 8005576 <_vfiprintf_r+0x13a>
 8005548:	9207      	str	r2, [sp, #28]
 800554a:	e014      	b.n	8005576 <_vfiprintf_r+0x13a>
 800554c:	eba0 0308 	sub.w	r3, r0, r8
 8005550:	fa09 f303 	lsl.w	r3, r9, r3
 8005554:	4313      	orrs	r3, r2
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	46a2      	mov	sl, r4
 800555a:	e7d2      	b.n	8005502 <_vfiprintf_r+0xc6>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	1d19      	adds	r1, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	9103      	str	r1, [sp, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	bfbb      	ittet	lt
 8005568:	425b      	neglt	r3, r3
 800556a:	f042 0202 	orrlt.w	r2, r2, #2
 800556e:	9307      	strge	r3, [sp, #28]
 8005570:	9307      	strlt	r3, [sp, #28]
 8005572:	bfb8      	it	lt
 8005574:	9204      	strlt	r2, [sp, #16]
 8005576:	7823      	ldrb	r3, [r4, #0]
 8005578:	2b2e      	cmp	r3, #46	; 0x2e
 800557a:	d10c      	bne.n	8005596 <_vfiprintf_r+0x15a>
 800557c:	7863      	ldrb	r3, [r4, #1]
 800557e:	2b2a      	cmp	r3, #42	; 0x2a
 8005580:	d134      	bne.n	80055ec <_vfiprintf_r+0x1b0>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	9203      	str	r2, [sp, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfb8      	it	lt
 800558e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005592:	3402      	adds	r4, #2
 8005594:	9305      	str	r3, [sp, #20]
 8005596:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800566c <_vfiprintf_r+0x230>
 800559a:	7821      	ldrb	r1, [r4, #0]
 800559c:	2203      	movs	r2, #3
 800559e:	4650      	mov	r0, sl
 80055a0:	f7fa fe1e 	bl	80001e0 <memchr>
 80055a4:	b138      	cbz	r0, 80055b6 <_vfiprintf_r+0x17a>
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	eba0 000a 	sub.w	r0, r0, sl
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	4082      	lsls	r2, r0
 80055b0:	4313      	orrs	r3, r2
 80055b2:	3401      	adds	r4, #1
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ba:	4829      	ldr	r0, [pc, #164]	; (8005660 <_vfiprintf_r+0x224>)
 80055bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055c0:	2206      	movs	r2, #6
 80055c2:	f7fa fe0d 	bl	80001e0 <memchr>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d03f      	beq.n	800564a <_vfiprintf_r+0x20e>
 80055ca:	4b26      	ldr	r3, [pc, #152]	; (8005664 <_vfiprintf_r+0x228>)
 80055cc:	bb1b      	cbnz	r3, 8005616 <_vfiprintf_r+0x1da>
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	3307      	adds	r3, #7
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	3308      	adds	r3, #8
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	443b      	add	r3, r7
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	e768      	b.n	80054b4 <_vfiprintf_r+0x78>
 80055e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055e6:	460c      	mov	r4, r1
 80055e8:	2001      	movs	r0, #1
 80055ea:	e7a6      	b.n	800553a <_vfiprintf_r+0xfe>
 80055ec:	2300      	movs	r3, #0
 80055ee:	3401      	adds	r4, #1
 80055f0:	9305      	str	r3, [sp, #20]
 80055f2:	4619      	mov	r1, r3
 80055f4:	f04f 0c0a 	mov.w	ip, #10
 80055f8:	4620      	mov	r0, r4
 80055fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055fe:	3a30      	subs	r2, #48	; 0x30
 8005600:	2a09      	cmp	r2, #9
 8005602:	d903      	bls.n	800560c <_vfiprintf_r+0x1d0>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0c6      	beq.n	8005596 <_vfiprintf_r+0x15a>
 8005608:	9105      	str	r1, [sp, #20]
 800560a:	e7c4      	b.n	8005596 <_vfiprintf_r+0x15a>
 800560c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005610:	4604      	mov	r4, r0
 8005612:	2301      	movs	r3, #1
 8005614:	e7f0      	b.n	80055f8 <_vfiprintf_r+0x1bc>
 8005616:	ab03      	add	r3, sp, #12
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	462a      	mov	r2, r5
 800561c:	4b12      	ldr	r3, [pc, #72]	; (8005668 <_vfiprintf_r+0x22c>)
 800561e:	a904      	add	r1, sp, #16
 8005620:	4630      	mov	r0, r6
 8005622:	f3af 8000 	nop.w
 8005626:	4607      	mov	r7, r0
 8005628:	1c78      	adds	r0, r7, #1
 800562a:	d1d6      	bne.n	80055da <_vfiprintf_r+0x19e>
 800562c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800562e:	07d9      	lsls	r1, r3, #31
 8005630:	d405      	bmi.n	800563e <_vfiprintf_r+0x202>
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	059a      	lsls	r2, r3, #22
 8005636:	d402      	bmi.n	800563e <_vfiprintf_r+0x202>
 8005638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800563a:	f7ff fddb 	bl	80051f4 <__retarget_lock_release_recursive>
 800563e:	89ab      	ldrh	r3, [r5, #12]
 8005640:	065b      	lsls	r3, r3, #25
 8005642:	f53f af1d 	bmi.w	8005480 <_vfiprintf_r+0x44>
 8005646:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005648:	e71c      	b.n	8005484 <_vfiprintf_r+0x48>
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462a      	mov	r2, r5
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <_vfiprintf_r+0x22c>)
 8005652:	a904      	add	r1, sp, #16
 8005654:	4630      	mov	r0, r6
 8005656:	f000 f879 	bl	800574c <_printf_i>
 800565a:	e7e4      	b.n	8005626 <_vfiprintf_r+0x1ea>
 800565c:	0800687c 	.word	0x0800687c
 8005660:	08006886 	.word	0x08006886
 8005664:	00000000 	.word	0x00000000
 8005668:	08005417 	.word	0x08005417
 800566c:	08006882 	.word	0x08006882

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4699      	mov	r9, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005680:	4293      	cmp	r3, r2
 8005682:	bfb8      	it	lt
 8005684:	4613      	movlt	r3, r2
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800568c:	4607      	mov	r7, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc26      	bgt.n	8005706 <_printf_common+0x96>
 80056b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056bc:	1e13      	subs	r3, r2, #0
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d42b      	bmi.n	8005720 <_printf_common+0xb0>
 80056c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056cc:	4649      	mov	r1, r9
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c0      	blx	r8
 80056d2:	3001      	adds	r0, #1
 80056d4:	d01e      	beq.n	8005714 <_printf_common+0xa4>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	f003 0306 	and.w	r3, r3, #6
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf02      	ittt	eq
 80056e2:	68e5      	ldreq	r5, [r4, #12]
 80056e4:	6833      	ldreq	r3, [r6, #0]
 80056e6:	1aed      	subeq	r5, r5, r3
 80056e8:	68a3      	ldr	r3, [r4, #8]
 80056ea:	bf0c      	ite	eq
 80056ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f0:	2500      	movne	r5, #0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfc4      	itt	gt
 80056f6:	1a9b      	subgt	r3, r3, r2
 80056f8:	18ed      	addgt	r5, r5, r3
 80056fa:	2600      	movs	r6, #0
 80056fc:	341a      	adds	r4, #26
 80056fe:	42b5      	cmp	r5, r6
 8005700:	d11a      	bne.n	8005738 <_printf_common+0xc8>
 8005702:	2000      	movs	r0, #0
 8005704:	e008      	b.n	8005718 <_printf_common+0xa8>
 8005706:	2301      	movs	r3, #1
 8005708:	4652      	mov	r2, sl
 800570a:	4649      	mov	r1, r9
 800570c:	4638      	mov	r0, r7
 800570e:	47c0      	blx	r8
 8005710:	3001      	adds	r0, #1
 8005712:	d103      	bne.n	800571c <_printf_common+0xac>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571c:	3501      	adds	r5, #1
 800571e:	e7c6      	b.n	80056ae <_printf_common+0x3e>
 8005720:	18e1      	adds	r1, r4, r3
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	2030      	movs	r0, #48	; 0x30
 8005726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572a:	4422      	add	r2, r4
 800572c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005734:	3302      	adds	r3, #2
 8005736:	e7c7      	b.n	80056c8 <_printf_common+0x58>
 8005738:	2301      	movs	r3, #1
 800573a:	4622      	mov	r2, r4
 800573c:	4649      	mov	r1, r9
 800573e:	4638      	mov	r0, r7
 8005740:	47c0      	blx	r8
 8005742:	3001      	adds	r0, #1
 8005744:	d0e6      	beq.n	8005714 <_printf_common+0xa4>
 8005746:	3601      	adds	r6, #1
 8005748:	e7d9      	b.n	80056fe <_printf_common+0x8e>
	...

0800574c <_printf_i>:
 800574c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	7e0f      	ldrb	r7, [r1, #24]
 8005752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005754:	2f78      	cmp	r7, #120	; 0x78
 8005756:	4691      	mov	r9, r2
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	469a      	mov	sl, r3
 800575e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005762:	d807      	bhi.n	8005774 <_printf_i+0x28>
 8005764:	2f62      	cmp	r7, #98	; 0x62
 8005766:	d80a      	bhi.n	800577e <_printf_i+0x32>
 8005768:	2f00      	cmp	r7, #0
 800576a:	f000 80d4 	beq.w	8005916 <_printf_i+0x1ca>
 800576e:	2f58      	cmp	r7, #88	; 0x58
 8005770:	f000 80c0 	beq.w	80058f4 <_printf_i+0x1a8>
 8005774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800577c:	e03a      	b.n	80057f4 <_printf_i+0xa8>
 800577e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005782:	2b15      	cmp	r3, #21
 8005784:	d8f6      	bhi.n	8005774 <_printf_i+0x28>
 8005786:	a101      	add	r1, pc, #4	; (adr r1, 800578c <_printf_i+0x40>)
 8005788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800578c:	080057e5 	.word	0x080057e5
 8005790:	080057f9 	.word	0x080057f9
 8005794:	08005775 	.word	0x08005775
 8005798:	08005775 	.word	0x08005775
 800579c:	08005775 	.word	0x08005775
 80057a0:	08005775 	.word	0x08005775
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005775 	.word	0x08005775
 80057ac:	08005775 	.word	0x08005775
 80057b0:	08005775 	.word	0x08005775
 80057b4:	08005775 	.word	0x08005775
 80057b8:	080058fd 	.word	0x080058fd
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080058b7 	.word	0x080058b7
 80057c4:	08005775 	.word	0x08005775
 80057c8:	08005775 	.word	0x08005775
 80057cc:	0800591f 	.word	0x0800591f
 80057d0:	08005775 	.word	0x08005775
 80057d4:	08005825 	.word	0x08005825
 80057d8:	08005775 	.word	0x08005775
 80057dc:	08005775 	.word	0x08005775
 80057e0:	080058bf 	.word	0x080058bf
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	602a      	str	r2, [r5, #0]
 80057ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f4:	2301      	movs	r3, #1
 80057f6:	e09f      	b.n	8005938 <_printf_i+0x1ec>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	0607      	lsls	r7, r0, #24
 80057fe:	f103 0104 	add.w	r1, r3, #4
 8005802:	6029      	str	r1, [r5, #0]
 8005804:	d501      	bpl.n	800580a <_printf_i+0xbe>
 8005806:	681e      	ldr	r6, [r3, #0]
 8005808:	e003      	b.n	8005812 <_printf_i+0xc6>
 800580a:	0646      	lsls	r6, r0, #25
 800580c:	d5fb      	bpl.n	8005806 <_printf_i+0xba>
 800580e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005812:	2e00      	cmp	r6, #0
 8005814:	da03      	bge.n	800581e <_printf_i+0xd2>
 8005816:	232d      	movs	r3, #45	; 0x2d
 8005818:	4276      	negs	r6, r6
 800581a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581e:	485a      	ldr	r0, [pc, #360]	; (8005988 <_printf_i+0x23c>)
 8005820:	230a      	movs	r3, #10
 8005822:	e012      	b.n	800584a <_printf_i+0xfe>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	6029      	str	r1, [r5, #0]
 800582c:	0605      	lsls	r5, r0, #24
 800582e:	d501      	bpl.n	8005834 <_printf_i+0xe8>
 8005830:	681e      	ldr	r6, [r3, #0]
 8005832:	e002      	b.n	800583a <_printf_i+0xee>
 8005834:	0641      	lsls	r1, r0, #25
 8005836:	d5fb      	bpl.n	8005830 <_printf_i+0xe4>
 8005838:	881e      	ldrh	r6, [r3, #0]
 800583a:	4853      	ldr	r0, [pc, #332]	; (8005988 <_printf_i+0x23c>)
 800583c:	2f6f      	cmp	r7, #111	; 0x6f
 800583e:	bf0c      	ite	eq
 8005840:	2308      	moveq	r3, #8
 8005842:	230a      	movne	r3, #10
 8005844:	2100      	movs	r1, #0
 8005846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800584a:	6865      	ldr	r5, [r4, #4]
 800584c:	60a5      	str	r5, [r4, #8]
 800584e:	2d00      	cmp	r5, #0
 8005850:	bfa2      	ittt	ge
 8005852:	6821      	ldrge	r1, [r4, #0]
 8005854:	f021 0104 	bicge.w	r1, r1, #4
 8005858:	6021      	strge	r1, [r4, #0]
 800585a:	b90e      	cbnz	r6, 8005860 <_printf_i+0x114>
 800585c:	2d00      	cmp	r5, #0
 800585e:	d04b      	beq.n	80058f8 <_printf_i+0x1ac>
 8005860:	4615      	mov	r5, r2
 8005862:	fbb6 f1f3 	udiv	r1, r6, r3
 8005866:	fb03 6711 	mls	r7, r3, r1, r6
 800586a:	5dc7      	ldrb	r7, [r0, r7]
 800586c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005870:	4637      	mov	r7, r6
 8005872:	42bb      	cmp	r3, r7
 8005874:	460e      	mov	r6, r1
 8005876:	d9f4      	bls.n	8005862 <_printf_i+0x116>
 8005878:	2b08      	cmp	r3, #8
 800587a:	d10b      	bne.n	8005894 <_printf_i+0x148>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07de      	lsls	r6, r3, #31
 8005880:	d508      	bpl.n	8005894 <_printf_i+0x148>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	6861      	ldr	r1, [r4, #4]
 8005886:	4299      	cmp	r1, r3
 8005888:	bfde      	ittt	le
 800588a:	2330      	movle	r3, #48	; 0x30
 800588c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005890:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005894:	1b52      	subs	r2, r2, r5
 8005896:	6122      	str	r2, [r4, #16]
 8005898:	f8cd a000 	str.w	sl, [sp]
 800589c:	464b      	mov	r3, r9
 800589e:	aa03      	add	r2, sp, #12
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff fee4 	bl	8005670 <_printf_common>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d14a      	bne.n	8005942 <_printf_i+0x1f6>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	b004      	add	sp, #16
 80058b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f043 0320 	orr.w	r3, r3, #32
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	4833      	ldr	r0, [pc, #204]	; (800598c <_printf_i+0x240>)
 80058c0:	2778      	movs	r7, #120	; 0x78
 80058c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	6829      	ldr	r1, [r5, #0]
 80058ca:	061f      	lsls	r7, r3, #24
 80058cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058d0:	d402      	bmi.n	80058d8 <_printf_i+0x18c>
 80058d2:	065f      	lsls	r7, r3, #25
 80058d4:	bf48      	it	mi
 80058d6:	b2b6      	uxthmi	r6, r6
 80058d8:	07df      	lsls	r7, r3, #31
 80058da:	bf48      	it	mi
 80058dc:	f043 0320 	orrmi.w	r3, r3, #32
 80058e0:	6029      	str	r1, [r5, #0]
 80058e2:	bf48      	it	mi
 80058e4:	6023      	strmi	r3, [r4, #0]
 80058e6:	b91e      	cbnz	r6, 80058f0 <_printf_i+0x1a4>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	f023 0320 	bic.w	r3, r3, #32
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	2310      	movs	r3, #16
 80058f2:	e7a7      	b.n	8005844 <_printf_i+0xf8>
 80058f4:	4824      	ldr	r0, [pc, #144]	; (8005988 <_printf_i+0x23c>)
 80058f6:	e7e4      	b.n	80058c2 <_printf_i+0x176>
 80058f8:	4615      	mov	r5, r2
 80058fa:	e7bd      	b.n	8005878 <_printf_i+0x12c>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6826      	ldr	r6, [r4, #0]
 8005900:	6961      	ldr	r1, [r4, #20]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6028      	str	r0, [r5, #0]
 8005906:	0635      	lsls	r5, r6, #24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	d501      	bpl.n	8005910 <_printf_i+0x1c4>
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	e002      	b.n	8005916 <_printf_i+0x1ca>
 8005910:	0670      	lsls	r0, r6, #25
 8005912:	d5fb      	bpl.n	800590c <_printf_i+0x1c0>
 8005914:	8019      	strh	r1, [r3, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	4615      	mov	r5, r2
 800591c:	e7bc      	b.n	8005898 <_printf_i+0x14c>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	602a      	str	r2, [r5, #0]
 8005924:	681d      	ldr	r5, [r3, #0]
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4628      	mov	r0, r5
 800592c:	f7fa fc58 	bl	80001e0 <memchr>
 8005930:	b108      	cbz	r0, 8005936 <_printf_i+0x1ea>
 8005932:	1b40      	subs	r0, r0, r5
 8005934:	6060      	str	r0, [r4, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005940:	e7aa      	b.n	8005898 <_printf_i+0x14c>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	462a      	mov	r2, r5
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d0ad      	beq.n	80058ac <_printf_i+0x160>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	d413      	bmi.n	800597e <_printf_i+0x232>
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	4298      	cmp	r0, r3
 800595c:	bfb8      	it	lt
 800595e:	4618      	movlt	r0, r3
 8005960:	e7a6      	b.n	80058b0 <_printf_i+0x164>
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d09d      	beq.n	80058ac <_printf_i+0x160>
 8005970:	3501      	adds	r5, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	42ab      	cmp	r3, r5
 800597a:	dcf2      	bgt.n	8005962 <_printf_i+0x216>
 800597c:	e7eb      	b.n	8005956 <_printf_i+0x20a>
 800597e:	2500      	movs	r5, #0
 8005980:	f104 0619 	add.w	r6, r4, #25
 8005984:	e7f5      	b.n	8005972 <_printf_i+0x226>
 8005986:	bf00      	nop
 8005988:	0800688d 	.word	0x0800688d
 800598c:	0800689e 	.word	0x0800689e

08005990 <__svfiscanf_r>:
 8005990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	461d      	mov	r5, r3
 8005996:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005998:	07df      	lsls	r7, r3, #31
 800599a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	4692      	mov	sl, r2
 80059a4:	d405      	bmi.n	80059b2 <__svfiscanf_r+0x22>
 80059a6:	898b      	ldrh	r3, [r1, #12]
 80059a8:	0598      	lsls	r0, r3, #22
 80059aa:	d402      	bmi.n	80059b2 <__svfiscanf_r+0x22>
 80059ac:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80059ae:	f7ff fc20 	bl	80051f2 <__retarget_lock_acquire_recursive>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80059b8:	4baa      	ldr	r3, [pc, #680]	; (8005c64 <__svfiscanf_r+0x2d4>)
 80059ba:	93a0      	str	r3, [sp, #640]	; 0x280
 80059bc:	f10d 0804 	add.w	r8, sp, #4
 80059c0:	4ba9      	ldr	r3, [pc, #676]	; (8005c68 <__svfiscanf_r+0x2d8>)
 80059c2:	4faa      	ldr	r7, [pc, #680]	; (8005c6c <__svfiscanf_r+0x2dc>)
 80059c4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8005c70 <__svfiscanf_r+0x2e0>
 80059c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80059cc:	93a1      	str	r3, [sp, #644]	; 0x284
 80059ce:	9500      	str	r5, [sp, #0]
 80059d0:	f89a 3000 	ldrb.w	r3, [sl]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8170 	beq.w	8005cba <__svfiscanf_r+0x32a>
 80059da:	5cf9      	ldrb	r1, [r7, r3]
 80059dc:	f011 0108 	ands.w	r1, r1, #8
 80059e0:	f10a 0501 	add.w	r5, sl, #1
 80059e4:	d019      	beq.n	8005a1a <__svfiscanf_r+0x8a>
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	dd0f      	ble.n	8005a0c <__svfiscanf_r+0x7c>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	5cba      	ldrb	r2, [r7, r2]
 80059f2:	0711      	lsls	r1, r2, #28
 80059f4:	d401      	bmi.n	80059fa <__svfiscanf_r+0x6a>
 80059f6:	46aa      	mov	sl, r5
 80059f8:	e7ea      	b.n	80059d0 <__svfiscanf_r+0x40>
 80059fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80059fc:	3201      	adds	r2, #1
 80059fe:	9245      	str	r2, [sp, #276]	; 0x114
 8005a00:	6862      	ldr	r2, [r4, #4]
 8005a02:	3301      	adds	r3, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	6062      	str	r2, [r4, #4]
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	e7ec      	b.n	80059e6 <__svfiscanf_r+0x56>
 8005a0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4630      	mov	r0, r6
 8005a12:	4798      	blx	r3
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d0e9      	beq.n	80059ec <__svfiscanf_r+0x5c>
 8005a18:	e7ed      	b.n	80059f6 <__svfiscanf_r+0x66>
 8005a1a:	2b25      	cmp	r3, #37	; 0x25
 8005a1c:	d012      	beq.n	8005a44 <__svfiscanf_r+0xb4>
 8005a1e:	469a      	mov	sl, r3
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f340 8093 	ble.w	8005b4e <__svfiscanf_r+0x1be>
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	7813      	ldrb	r3, [r2, #0]
 8005a2c:	4553      	cmp	r3, sl
 8005a2e:	f040 8144 	bne.w	8005cba <__svfiscanf_r+0x32a>
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	6022      	str	r2, [r4, #0]
 8005a40:	9345      	str	r3, [sp, #276]	; 0x114
 8005a42:	e7d8      	b.n	80059f6 <__svfiscanf_r+0x66>
 8005a44:	9141      	str	r1, [sp, #260]	; 0x104
 8005a46:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a48:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4e:	bf02      	ittt	eq
 8005a50:	2310      	moveq	r3, #16
 8005a52:	9341      	streq	r3, [sp, #260]	; 0x104
 8005a54:	f10a 0502 	addeq.w	r5, sl, #2
 8005a58:	220a      	movs	r2, #10
 8005a5a:	46aa      	mov	sl, r5
 8005a5c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005a60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	d91d      	bls.n	8005aa4 <__svfiscanf_r+0x114>
 8005a68:	4881      	ldr	r0, [pc, #516]	; (8005c70 <__svfiscanf_r+0x2e0>)
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	f7fa fbb8 	bl	80001e0 <memchr>
 8005a70:	b138      	cbz	r0, 8005a82 <__svfiscanf_r+0xf2>
 8005a72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a74:	eba0 0009 	sub.w	r0, r0, r9
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4083      	lsls	r3, r0
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	9341      	str	r3, [sp, #260]	; 0x104
 8005a80:	4655      	mov	r5, sl
 8005a82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a86:	2b78      	cmp	r3, #120	; 0x78
 8005a88:	d807      	bhi.n	8005a9a <__svfiscanf_r+0x10a>
 8005a8a:	2b57      	cmp	r3, #87	; 0x57
 8005a8c:	d811      	bhi.n	8005ab2 <__svfiscanf_r+0x122>
 8005a8e:	2b25      	cmp	r3, #37	; 0x25
 8005a90:	d0c5      	beq.n	8005a1e <__svfiscanf_r+0x8e>
 8005a92:	d857      	bhi.n	8005b44 <__svfiscanf_r+0x1b4>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80c6 	beq.w	8005c26 <__svfiscanf_r+0x296>
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	9342      	str	r3, [sp, #264]	; 0x108
 8005aa2:	e07f      	b.n	8005ba4 <__svfiscanf_r+0x214>
 8005aa4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005aa6:	fb02 1103 	mla	r1, r2, r3, r1
 8005aaa:	3930      	subs	r1, #48	; 0x30
 8005aac:	9143      	str	r1, [sp, #268]	; 0x10c
 8005aae:	4655      	mov	r5, sl
 8005ab0:	e7d3      	b.n	8005a5a <__svfiscanf_r+0xca>
 8005ab2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005ab6:	2a20      	cmp	r2, #32
 8005ab8:	d8ef      	bhi.n	8005a9a <__svfiscanf_r+0x10a>
 8005aba:	a101      	add	r1, pc, #4	; (adr r1, 8005ac0 <__svfiscanf_r+0x130>)
 8005abc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ac0:	08005b87 	.word	0x08005b87
 8005ac4:	08005a9b 	.word	0x08005a9b
 8005ac8:	08005a9b 	.word	0x08005a9b
 8005acc:	08005be5 	.word	0x08005be5
 8005ad0:	08005a9b 	.word	0x08005a9b
 8005ad4:	08005a9b 	.word	0x08005a9b
 8005ad8:	08005a9b 	.word	0x08005a9b
 8005adc:	08005a9b 	.word	0x08005a9b
 8005ae0:	08005a9b 	.word	0x08005a9b
 8005ae4:	08005a9b 	.word	0x08005a9b
 8005ae8:	08005a9b 	.word	0x08005a9b
 8005aec:	08005bfb 	.word	0x08005bfb
 8005af0:	08005be1 	.word	0x08005be1
 8005af4:	08005b4b 	.word	0x08005b4b
 8005af8:	08005b4b 	.word	0x08005b4b
 8005afc:	08005b4b 	.word	0x08005b4b
 8005b00:	08005a9b 	.word	0x08005a9b
 8005b04:	08005b9d 	.word	0x08005b9d
 8005b08:	08005a9b 	.word	0x08005a9b
 8005b0c:	08005a9b 	.word	0x08005a9b
 8005b10:	08005a9b 	.word	0x08005a9b
 8005b14:	08005a9b 	.word	0x08005a9b
 8005b18:	08005c0b 	.word	0x08005c0b
 8005b1c:	08005bd9 	.word	0x08005bd9
 8005b20:	08005b7f 	.word	0x08005b7f
 8005b24:	08005a9b 	.word	0x08005a9b
 8005b28:	08005a9b 	.word	0x08005a9b
 8005b2c:	08005c07 	.word	0x08005c07
 8005b30:	08005a9b 	.word	0x08005a9b
 8005b34:	08005be1 	.word	0x08005be1
 8005b38:	08005a9b 	.word	0x08005a9b
 8005b3c:	08005a9b 	.word	0x08005a9b
 8005b40:	08005b87 	.word	0x08005b87
 8005b44:	3b45      	subs	r3, #69	; 0x45
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d8a7      	bhi.n	8005a9a <__svfiscanf_r+0x10a>
 8005b4a:	2305      	movs	r3, #5
 8005b4c:	e029      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005b4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b50:	4621      	mov	r1, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	4798      	blx	r3
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f43f af66 	beq.w	8005a28 <__svfiscanf_r+0x98>
 8005b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5e:	07da      	lsls	r2, r3, #31
 8005b60:	f140 80a3 	bpl.w	8005caa <__svfiscanf_r+0x31a>
 8005b64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d066      	beq.n	8005c38 <__svfiscanf_r+0x2a8>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b70:	bf18      	it	ne
 8005b72:	f04f 30ff 	movne.w	r0, #4294967295
 8005b76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b80:	f042 0220 	orr.w	r2, r2, #32
 8005b84:	9241      	str	r2, [sp, #260]	; 0x104
 8005b86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8c:	9241      	str	r2, [sp, #260]	; 0x104
 8005b8e:	2210      	movs	r2, #16
 8005b90:	2b6f      	cmp	r3, #111	; 0x6f
 8005b92:	9242      	str	r2, [sp, #264]	; 0x108
 8005b94:	bf34      	ite	cc
 8005b96:	2303      	movcc	r3, #3
 8005b98:	2304      	movcs	r3, #4
 8005b9a:	e002      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9342      	str	r3, [sp, #264]	; 0x108
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dd49      	ble.n	8005c3e <__svfiscanf_r+0x2ae>
 8005baa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bac:	065b      	lsls	r3, r3, #25
 8005bae:	d404      	bmi.n	8005bba <__svfiscanf_r+0x22a>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	5cba      	ldrb	r2, [r7, r2]
 8005bb6:	0710      	lsls	r0, r2, #28
 8005bb8:	d448      	bmi.n	8005c4c <__svfiscanf_r+0x2bc>
 8005bba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	dc60      	bgt.n	8005c82 <__svfiscanf_r+0x2f2>
 8005bc0:	466b      	mov	r3, sp
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	a941      	add	r1, sp, #260	; 0x104
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f000 f898 	bl	8005cfc <_scanf_chars>
 8005bcc:	2801      	cmp	r0, #1
 8005bce:	d074      	beq.n	8005cba <__svfiscanf_r+0x32a>
 8005bd0:	2802      	cmp	r0, #2
 8005bd2:	f47f af10 	bne.w	80059f6 <__svfiscanf_r+0x66>
 8005bd6:	e7c1      	b.n	8005b5c <__svfiscanf_r+0x1cc>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	9342      	str	r3, [sp, #264]	; 0x108
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e7e0      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005be0:	220a      	movs	r2, #10
 8005be2:	e7d5      	b.n	8005b90 <__svfiscanf_r+0x200>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4640      	mov	r0, r8
 8005be8:	f000 fb6c 	bl	80062c4 <__sccl>
 8005bec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf2:	9341      	str	r3, [sp, #260]	; 0x104
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e7d3      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005bfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c00:	9341      	str	r3, [sp, #260]	; 0x104
 8005c02:	2300      	movs	r3, #0
 8005c04:	e7cd      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e7cb      	b.n	8005ba2 <__svfiscanf_r+0x212>
 8005c0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005c0c:	06c3      	lsls	r3, r0, #27
 8005c0e:	f53f aef2 	bmi.w	80059f6 <__svfiscanf_r+0x66>
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c16:	1d19      	adds	r1, r3, #4
 8005c18:	9100      	str	r1, [sp, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	07c0      	lsls	r0, r0, #31
 8005c1e:	bf4c      	ite	mi
 8005c20:	801a      	strhmi	r2, [r3, #0]
 8005c22:	601a      	strpl	r2, [r3, #0]
 8005c24:	e6e7      	b.n	80059f6 <__svfiscanf_r+0x66>
 8005c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c28:	07d8      	lsls	r0, r3, #31
 8005c2a:	d405      	bmi.n	8005c38 <__svfiscanf_r+0x2a8>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	0599      	lsls	r1, r3, #22
 8005c30:	d402      	bmi.n	8005c38 <__svfiscanf_r+0x2a8>
 8005c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c34:	f7ff fade 	bl	80051f4 <__retarget_lock_release_recursive>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e79b      	b.n	8005b76 <__svfiscanf_r+0x1e6>
 8005c3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c40:	4621      	mov	r1, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	4798      	blx	r3
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d0af      	beq.n	8005baa <__svfiscanf_r+0x21a>
 8005c4a:	e787      	b.n	8005b5c <__svfiscanf_r+0x1cc>
 8005c4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c4e:	3201      	adds	r2, #1
 8005c50:	9245      	str	r2, [sp, #276]	; 0x114
 8005c52:	6862      	ldr	r2, [r4, #4]
 8005c54:	3a01      	subs	r2, #1
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	6062      	str	r2, [r4, #4]
 8005c5a:	dd0b      	ble.n	8005c74 <__svfiscanf_r+0x2e4>
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	e7a6      	b.n	8005bb0 <__svfiscanf_r+0x220>
 8005c62:	bf00      	nop
 8005c64:	080063ab 	.word	0x080063ab
 8005c68:	080061d5 	.word	0x080061d5
 8005c6c:	080068cb 	.word	0x080068cb
 8005c70:	08006882 	.word	0x08006882
 8005c74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c76:	4621      	mov	r1, r4
 8005c78:	4630      	mov	r0, r6
 8005c7a:	4798      	blx	r3
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d097      	beq.n	8005bb0 <__svfiscanf_r+0x220>
 8005c80:	e76c      	b.n	8005b5c <__svfiscanf_r+0x1cc>
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	dc06      	bgt.n	8005c94 <__svfiscanf_r+0x304>
 8005c86:	466b      	mov	r3, sp
 8005c88:	4622      	mov	r2, r4
 8005c8a:	a941      	add	r1, sp, #260	; 0x104
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f88f 	bl	8005db0 <_scanf_i>
 8005c92:	e79b      	b.n	8005bcc <__svfiscanf_r+0x23c>
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <__svfiscanf_r+0x340>)
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f43f aead 	beq.w	80059f6 <__svfiscanf_r+0x66>
 8005c9c:	466b      	mov	r3, sp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	a941      	add	r1, sp, #260	; 0x104
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	e790      	b.n	8005bcc <__svfiscanf_r+0x23c>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	0599      	lsls	r1, r3, #22
 8005cae:	f53f af59 	bmi.w	8005b64 <__svfiscanf_r+0x1d4>
 8005cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb4:	f7ff fa9e 	bl	80051f4 <__retarget_lock_release_recursive>
 8005cb8:	e754      	b.n	8005b64 <__svfiscanf_r+0x1d4>
 8005cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cbc:	07da      	lsls	r2, r3, #31
 8005cbe:	d405      	bmi.n	8005ccc <__svfiscanf_r+0x33c>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	059b      	lsls	r3, r3, #22
 8005cc4:	d402      	bmi.n	8005ccc <__svfiscanf_r+0x33c>
 8005cc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc8:	f7ff fa94 	bl	80051f4 <__retarget_lock_release_recursive>
 8005ccc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005cce:	e752      	b.n	8005b76 <__svfiscanf_r+0x1e6>
 8005cd0:	00000000 	.word	0x00000000

08005cd4 <_vfiscanf_r>:
 8005cd4:	b530      	push	{r4, r5, lr}
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	b085      	sub	sp, #20
 8005cda:	b148      	cbz	r0, 8005cf0 <_vfiscanf_r+0x1c>
 8005cdc:	6a05      	ldr	r5, [r0, #32]
 8005cde:	b93d      	cbnz	r5, 8005cf0 <_vfiscanf_r+0x1c>
 8005ce0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ce4:	9101      	str	r1, [sp, #4]
 8005ce6:	f7ff f87d 	bl	8004de4 <__sinit>
 8005cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cee:	9901      	ldr	r1, [sp, #4]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	b005      	add	sp, #20
 8005cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf8:	f7ff be4a 	b.w	8005990 <__svfiscanf_r>

08005cfc <_scanf_chars>:
 8005cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	4615      	mov	r5, r2
 8005d02:	688a      	ldr	r2, [r1, #8]
 8005d04:	4680      	mov	r8, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b932      	cbnz	r2, 8005d18 <_scanf_chars+0x1c>
 8005d0a:	698a      	ldr	r2, [r1, #24]
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	bf0c      	ite	eq
 8005d10:	2201      	moveq	r2, #1
 8005d12:	f04f 32ff 	movne.w	r2, #4294967295
 8005d16:	608a      	str	r2, [r1, #8]
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005dac <_scanf_chars+0xb0>
 8005d1e:	06d1      	lsls	r1, r2, #27
 8005d20:	bf5f      	itttt	pl
 8005d22:	681a      	ldrpl	r2, [r3, #0]
 8005d24:	1d11      	addpl	r1, r2, #4
 8005d26:	6019      	strpl	r1, [r3, #0]
 8005d28:	6816      	ldrpl	r6, [r2, #0]
 8005d2a:	2700      	movs	r7, #0
 8005d2c:	69a0      	ldr	r0, [r4, #24]
 8005d2e:	b188      	cbz	r0, 8005d54 <_scanf_chars+0x58>
 8005d30:	2801      	cmp	r0, #1
 8005d32:	d107      	bne.n	8005d44 <_scanf_chars+0x48>
 8005d34:	682a      	ldr	r2, [r5, #0]
 8005d36:	7811      	ldrb	r1, [r2, #0]
 8005d38:	6962      	ldr	r2, [r4, #20]
 8005d3a:	5c52      	ldrb	r2, [r2, r1]
 8005d3c:	b952      	cbnz	r2, 8005d54 <_scanf_chars+0x58>
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	d031      	beq.n	8005da6 <_scanf_chars+0xaa>
 8005d42:	e022      	b.n	8005d8a <_scanf_chars+0x8e>
 8005d44:	2802      	cmp	r0, #2
 8005d46:	d120      	bne.n	8005d8a <_scanf_chars+0x8e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	d41a      	bmi.n	8005d8a <_scanf_chars+0x8e>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	06da      	lsls	r2, r3, #27
 8005d58:	bf5e      	ittt	pl
 8005d5a:	682b      	ldrpl	r3, [r5, #0]
 8005d5c:	781b      	ldrbpl	r3, [r3, #0]
 8005d5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005d62:	682a      	ldr	r2, [r5, #0]
 8005d64:	686b      	ldr	r3, [r5, #4]
 8005d66:	3201      	adds	r2, #1
 8005d68:	602a      	str	r2, [r5, #0]
 8005d6a:	68a2      	ldr	r2, [r4, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	3a01      	subs	r2, #1
 8005d70:	606b      	str	r3, [r5, #4]
 8005d72:	3701      	adds	r7, #1
 8005d74:	60a2      	str	r2, [r4, #8]
 8005d76:	b142      	cbz	r2, 8005d8a <_scanf_chars+0x8e>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dcd7      	bgt.n	8005d2c <_scanf_chars+0x30>
 8005d7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d80:	4629      	mov	r1, r5
 8005d82:	4640      	mov	r0, r8
 8005d84:	4798      	blx	r3
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d0d0      	beq.n	8005d2c <_scanf_chars+0x30>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	f013 0310 	ands.w	r3, r3, #16
 8005d90:	d105      	bne.n	8005d9e <_scanf_chars+0xa2>
 8005d92:	68e2      	ldr	r2, [r4, #12]
 8005d94:	3201      	adds	r2, #1
 8005d96:	60e2      	str	r2, [r4, #12]
 8005d98:	69a2      	ldr	r2, [r4, #24]
 8005d9a:	b102      	cbz	r2, 8005d9e <_scanf_chars+0xa2>
 8005d9c:	7033      	strb	r3, [r6, #0]
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	443b      	add	r3, r7
 8005da2:	6123      	str	r3, [r4, #16]
 8005da4:	2000      	movs	r0, #0
 8005da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005daa:	bf00      	nop
 8005dac:	080068cb 	.word	0x080068cb

08005db0 <_scanf_i>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	4698      	mov	r8, r3
 8005db6:	4b74      	ldr	r3, [pc, #464]	; (8005f88 <_scanf_i+0x1d8>)
 8005db8:	460c      	mov	r4, r1
 8005dba:	4682      	mov	sl, r0
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	ab03      	add	r3, sp, #12
 8005dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005dca:	4b70      	ldr	r3, [pc, #448]	; (8005f8c <_scanf_i+0x1dc>)
 8005dcc:	69a1      	ldr	r1, [r4, #24]
 8005dce:	4a70      	ldr	r2, [pc, #448]	; (8005f90 <_scanf_i+0x1e0>)
 8005dd0:	2903      	cmp	r1, #3
 8005dd2:	bf18      	it	ne
 8005dd4:	461a      	movne	r2, r3
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	9201      	str	r2, [sp, #4]
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005de0:	bf88      	it	hi
 8005de2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005de6:	4627      	mov	r7, r4
 8005de8:	bf82      	ittt	hi
 8005dea:	eb03 0905 	addhi.w	r9, r3, r5
 8005dee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005df2:	60a3      	strhi	r3, [r4, #8]
 8005df4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005df8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005dfc:	bf98      	it	ls
 8005dfe:	f04f 0900 	movls.w	r9, #0
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	463d      	mov	r5, r7
 8005e06:	f04f 0b00 	mov.w	fp, #0
 8005e0a:	6831      	ldr	r1, [r6, #0]
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	7809      	ldrb	r1, [r1, #0]
 8005e10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f7fa f9e3 	bl	80001e0 <memchr>
 8005e1a:	b328      	cbz	r0, 8005e68 <_scanf_i+0xb8>
 8005e1c:	f1bb 0f01 	cmp.w	fp, #1
 8005e20:	d159      	bne.n	8005ed6 <_scanf_i+0x126>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	b92a      	cbnz	r2, 8005e32 <_scanf_i+0x82>
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005e38:	6022      	str	r2, [r4, #0]
 8005e3a:	68a2      	ldr	r2, [r4, #8]
 8005e3c:	1e51      	subs	r1, r2, #1
 8005e3e:	60a1      	str	r1, [r4, #8]
 8005e40:	b192      	cbz	r2, 8005e68 <_scanf_i+0xb8>
 8005e42:	6832      	ldr	r2, [r6, #0]
 8005e44:	1c51      	adds	r1, r2, #1
 8005e46:	6031      	str	r1, [r6, #0]
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	f805 2b01 	strb.w	r2, [r5], #1
 8005e4e:	6872      	ldr	r2, [r6, #4]
 8005e50:	3a01      	subs	r2, #1
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	6072      	str	r2, [r6, #4]
 8005e56:	dc07      	bgt.n	8005e68 <_scanf_i+0xb8>
 8005e58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4650      	mov	r0, sl
 8005e60:	4790      	blx	r2
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f040 8085 	bne.w	8005f72 <_scanf_i+0x1c2>
 8005e68:	f10b 0b01 	add.w	fp, fp, #1
 8005e6c:	f1bb 0f03 	cmp.w	fp, #3
 8005e70:	d1cb      	bne.n	8005e0a <_scanf_i+0x5a>
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	b90b      	cbnz	r3, 8005e7a <_scanf_i+0xca>
 8005e76:	230a      	movs	r3, #10
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	4945      	ldr	r1, [pc, #276]	; (8005f94 <_scanf_i+0x1e4>)
 8005e7e:	6960      	ldr	r0, [r4, #20]
 8005e80:	1ac9      	subs	r1, r1, r3
 8005e82:	f000 fa1f 	bl	80062c4 <__sccl>
 8005e86:	f04f 0b00 	mov.w	fp, #0
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d03d      	beq.n	8005f0e <_scanf_i+0x15e>
 8005e92:	6831      	ldr	r1, [r6, #0]
 8005e94:	6960      	ldr	r0, [r4, #20]
 8005e96:	f891 c000 	ldrb.w	ip, [r1]
 8005e9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d035      	beq.n	8005f0e <_scanf_i+0x15e>
 8005ea2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005ea6:	d124      	bne.n	8005ef2 <_scanf_i+0x142>
 8005ea8:	0510      	lsls	r0, r2, #20
 8005eaa:	d522      	bpl.n	8005ef2 <_scanf_i+0x142>
 8005eac:	f10b 0b01 	add.w	fp, fp, #1
 8005eb0:	f1b9 0f00 	cmp.w	r9, #0
 8005eb4:	d003      	beq.n	8005ebe <_scanf_i+0x10e>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	6873      	ldr	r3, [r6, #4]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	6073      	str	r3, [r6, #4]
 8005ec6:	dd1b      	ble.n	8005f00 <_scanf_i+0x150>
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60a3      	str	r3, [r4, #8]
 8005ed4:	e7d9      	b.n	8005e8a <_scanf_i+0xda>
 8005ed6:	f1bb 0f02 	cmp.w	fp, #2
 8005eda:	d1ae      	bne.n	8005e3a <_scanf_i+0x8a>
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005ee2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005ee6:	d1bf      	bne.n	8005e68 <_scanf_i+0xb8>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	6063      	str	r3, [r4, #4]
 8005eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef0:	e7a2      	b.n	8005e38 <_scanf_i+0x88>
 8005ef2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	780b      	ldrb	r3, [r1, #0]
 8005efa:	f805 3b01 	strb.w	r3, [r5], #1
 8005efe:	e7de      	b.n	8005ebe <_scanf_i+0x10e>
 8005f00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f04:	4631      	mov	r1, r6
 8005f06:	4650      	mov	r0, sl
 8005f08:	4798      	blx	r3
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0df      	beq.n	8005ece <_scanf_i+0x11e>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	05d9      	lsls	r1, r3, #23
 8005f12:	d50d      	bpl.n	8005f30 <_scanf_i+0x180>
 8005f14:	42bd      	cmp	r5, r7
 8005f16:	d909      	bls.n	8005f2c <_scanf_i+0x17c>
 8005f18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f20:	4632      	mov	r2, r6
 8005f22:	4650      	mov	r0, sl
 8005f24:	4798      	blx	r3
 8005f26:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f2a:	464d      	mov	r5, r9
 8005f2c:	42bd      	cmp	r5, r7
 8005f2e:	d028      	beq.n	8005f82 <_scanf_i+0x1d2>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	f012 0210 	ands.w	r2, r2, #16
 8005f36:	d113      	bne.n	8005f60 <_scanf_i+0x1b0>
 8005f38:	702a      	strb	r2, [r5, #0]
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	9e01      	ldr	r6, [sp, #4]
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4650      	mov	r0, sl
 8005f42:	47b0      	blx	r6
 8005f44:	f8d8 3000 	ldr.w	r3, [r8]
 8005f48:	6821      	ldr	r1, [r4, #0]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	f8c8 2000 	str.w	r2, [r8]
 8005f50:	f011 0f20 	tst.w	r1, #32
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	d00f      	beq.n	8005f78 <_scanf_i+0x1c8>
 8005f58:	6018      	str	r0, [r3, #0]
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60e3      	str	r3, [r4, #12]
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	1bed      	subs	r5, r5, r7
 8005f64:	445d      	add	r5, fp
 8005f66:	442b      	add	r3, r5
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	b007      	add	sp, #28
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	f04f 0b00 	mov.w	fp, #0
 8005f76:	e7ca      	b.n	8005f0e <_scanf_i+0x15e>
 8005f78:	07ca      	lsls	r2, r1, #31
 8005f7a:	bf4c      	ite	mi
 8005f7c:	8018      	strhmi	r0, [r3, #0]
 8005f7e:	6018      	strpl	r0, [r3, #0]
 8005f80:	e7eb      	b.n	8005f5a <_scanf_i+0x1aa>
 8005f82:	2001      	movs	r0, #1
 8005f84:	e7f2      	b.n	8005f6c <_scanf_i+0x1bc>
 8005f86:	bf00      	nop
 8005f88:	08006858 	.word	0x08006858
 8005f8c:	08006781 	.word	0x08006781
 8005f90:	08006699 	.word	0x08006699
 8005f94:	080068bf 	.word	0x080068bf

08005f98 <__sflush_r>:
 8005f98:	898a      	ldrh	r2, [r1, #12]
 8005f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	0710      	lsls	r0, r2, #28
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	d458      	bmi.n	8006058 <__sflush_r+0xc0>
 8005fa6:	684b      	ldr	r3, [r1, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc05      	bgt.n	8005fb8 <__sflush_r+0x20>
 8005fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dc02      	bgt.n	8005fb8 <__sflush_r+0x20>
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	d0f9      	beq.n	8005fb2 <__sflush_r+0x1a>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fc4:	682f      	ldr	r7, [r5, #0]
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	d032      	beq.n	8006032 <__sflush_r+0x9a>
 8005fcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	075a      	lsls	r2, r3, #29
 8005fd2:	d505      	bpl.n	8005fe0 <__sflush_r+0x48>
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	1ac0      	subs	r0, r0, r3
 8005fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fda:	b10b      	cbz	r3, 8005fe0 <__sflush_r+0x48>
 8005fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fde:	1ac0      	subs	r0, r0, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fe6:	6a21      	ldr	r1, [r4, #32]
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b0      	blx	r6
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	d106      	bne.n	8006000 <__sflush_r+0x68>
 8005ff2:	6829      	ldr	r1, [r5, #0]
 8005ff4:	291d      	cmp	r1, #29
 8005ff6:	d82b      	bhi.n	8006050 <__sflush_r+0xb8>
 8005ff8:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <__sflush_r+0x108>)
 8005ffa:	410a      	asrs	r2, r1
 8005ffc:	07d6      	lsls	r6, r2, #31
 8005ffe:	d427      	bmi.n	8006050 <__sflush_r+0xb8>
 8006000:	2200      	movs	r2, #0
 8006002:	6062      	str	r2, [r4, #4]
 8006004:	04d9      	lsls	r1, r3, #19
 8006006:	6922      	ldr	r2, [r4, #16]
 8006008:	6022      	str	r2, [r4, #0]
 800600a:	d504      	bpl.n	8006016 <__sflush_r+0x7e>
 800600c:	1c42      	adds	r2, r0, #1
 800600e:	d101      	bne.n	8006014 <__sflush_r+0x7c>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b903      	cbnz	r3, 8006016 <__sflush_r+0x7e>
 8006014:	6560      	str	r0, [r4, #84]	; 0x54
 8006016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006018:	602f      	str	r7, [r5, #0]
 800601a:	2900      	cmp	r1, #0
 800601c:	d0c9      	beq.n	8005fb2 <__sflush_r+0x1a>
 800601e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006022:	4299      	cmp	r1, r3
 8006024:	d002      	beq.n	800602c <__sflush_r+0x94>
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff f8e6 	bl	80051f8 <_free_r>
 800602c:	2000      	movs	r0, #0
 800602e:	6360      	str	r0, [r4, #52]	; 0x34
 8006030:	e7c0      	b.n	8005fb4 <__sflush_r+0x1c>
 8006032:	2301      	movs	r3, #1
 8006034:	4628      	mov	r0, r5
 8006036:	47b0      	blx	r6
 8006038:	1c41      	adds	r1, r0, #1
 800603a:	d1c8      	bne.n	8005fce <__sflush_r+0x36>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0c5      	beq.n	8005fce <__sflush_r+0x36>
 8006042:	2b1d      	cmp	r3, #29
 8006044:	d001      	beq.n	800604a <__sflush_r+0xb2>
 8006046:	2b16      	cmp	r3, #22
 8006048:	d101      	bne.n	800604e <__sflush_r+0xb6>
 800604a:	602f      	str	r7, [r5, #0]
 800604c:	e7b1      	b.n	8005fb2 <__sflush_r+0x1a>
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	e7ad      	b.n	8005fb4 <__sflush_r+0x1c>
 8006058:	690f      	ldr	r7, [r1, #16]
 800605a:	2f00      	cmp	r7, #0
 800605c:	d0a9      	beq.n	8005fb2 <__sflush_r+0x1a>
 800605e:	0793      	lsls	r3, r2, #30
 8006060:	680e      	ldr	r6, [r1, #0]
 8006062:	bf08      	it	eq
 8006064:	694b      	ldreq	r3, [r1, #20]
 8006066:	600f      	str	r7, [r1, #0]
 8006068:	bf18      	it	ne
 800606a:	2300      	movne	r3, #0
 800606c:	eba6 0807 	sub.w	r8, r6, r7
 8006070:	608b      	str	r3, [r1, #8]
 8006072:	f1b8 0f00 	cmp.w	r8, #0
 8006076:	dd9c      	ble.n	8005fb2 <__sflush_r+0x1a>
 8006078:	6a21      	ldr	r1, [r4, #32]
 800607a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800607c:	4643      	mov	r3, r8
 800607e:	463a      	mov	r2, r7
 8006080:	4628      	mov	r0, r5
 8006082:	47b0      	blx	r6
 8006084:	2800      	cmp	r0, #0
 8006086:	dc06      	bgt.n	8006096 <__sflush_r+0xfe>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e78e      	b.n	8005fb4 <__sflush_r+0x1c>
 8006096:	4407      	add	r7, r0
 8006098:	eba8 0800 	sub.w	r8, r8, r0
 800609c:	e7e9      	b.n	8006072 <__sflush_r+0xda>
 800609e:	bf00      	nop
 80060a0:	dfbffffe 	.word	0xdfbffffe

080060a4 <_fflush_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	690b      	ldr	r3, [r1, #16]
 80060a8:	4605      	mov	r5, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	b913      	cbnz	r3, 80060b4 <_fflush_r+0x10>
 80060ae:	2500      	movs	r5, #0
 80060b0:	4628      	mov	r0, r5
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	b118      	cbz	r0, 80060be <_fflush_r+0x1a>
 80060b6:	6a03      	ldr	r3, [r0, #32]
 80060b8:	b90b      	cbnz	r3, 80060be <_fflush_r+0x1a>
 80060ba:	f7fe fe93 	bl	8004de4 <__sinit>
 80060be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f3      	beq.n	80060ae <_fflush_r+0xa>
 80060c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060c8:	07d0      	lsls	r0, r2, #31
 80060ca:	d404      	bmi.n	80060d6 <_fflush_r+0x32>
 80060cc:	0599      	lsls	r1, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_fflush_r+0x32>
 80060d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d2:	f7ff f88e 	bl	80051f2 <__retarget_lock_acquire_recursive>
 80060d6:	4628      	mov	r0, r5
 80060d8:	4621      	mov	r1, r4
 80060da:	f7ff ff5d 	bl	8005f98 <__sflush_r>
 80060de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e0:	07da      	lsls	r2, r3, #31
 80060e2:	4605      	mov	r5, r0
 80060e4:	d4e4      	bmi.n	80060b0 <_fflush_r+0xc>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	d4e1      	bmi.n	80060b0 <_fflush_r+0xc>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f7ff f881 	bl	80051f4 <__retarget_lock_release_recursive>
 80060f2:	e7dd      	b.n	80060b0 <_fflush_r+0xc>

080060f4 <__swhatbuf_r>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	2900      	cmp	r1, #0
 80060fe:	b096      	sub	sp, #88	; 0x58
 8006100:	4615      	mov	r5, r2
 8006102:	461e      	mov	r6, r3
 8006104:	da0d      	bge.n	8006122 <__swhatbuf_r+0x2e>
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	f013 0f80 	tst.w	r3, #128	; 0x80
 800610c:	f04f 0100 	mov.w	r1, #0
 8006110:	bf0c      	ite	eq
 8006112:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006116:	2340      	movne	r3, #64	; 0x40
 8006118:	2000      	movs	r0, #0
 800611a:	6031      	str	r1, [r6, #0]
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	b016      	add	sp, #88	; 0x58
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	466a      	mov	r2, sp
 8006124:	f000 f9c6 	bl	80064b4 <_fstat_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	dbec      	blt.n	8006106 <__swhatbuf_r+0x12>
 800612c:	9901      	ldr	r1, [sp, #4]
 800612e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006132:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006136:	4259      	negs	r1, r3
 8006138:	4159      	adcs	r1, r3
 800613a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800613e:	e7eb      	b.n	8006118 <__swhatbuf_r+0x24>

08006140 <__smakebuf_r>:
 8006140:	898b      	ldrh	r3, [r1, #12]
 8006142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006144:	079d      	lsls	r5, r3, #30
 8006146:	4606      	mov	r6, r0
 8006148:	460c      	mov	r4, r1
 800614a:	d507      	bpl.n	800615c <__smakebuf_r+0x1c>
 800614c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	2301      	movs	r3, #1
 8006156:	6163      	str	r3, [r4, #20]
 8006158:	b002      	add	sp, #8
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	ab01      	add	r3, sp, #4
 800615e:	466a      	mov	r2, sp
 8006160:	f7ff ffc8 	bl	80060f4 <__swhatbuf_r>
 8006164:	9900      	ldr	r1, [sp, #0]
 8006166:	4605      	mov	r5, r0
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff f8b1 	bl	80052d0 <_malloc_r>
 800616e:	b948      	cbnz	r0, 8006184 <__smakebuf_r+0x44>
 8006170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006174:	059a      	lsls	r2, r3, #22
 8006176:	d4ef      	bmi.n	8006158 <__smakebuf_r+0x18>
 8006178:	f023 0303 	bic.w	r3, r3, #3
 800617c:	f043 0302 	orr.w	r3, r3, #2
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	e7e3      	b.n	800614c <__smakebuf_r+0xc>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	6020      	str	r0, [r4, #0]
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	6163      	str	r3, [r4, #20]
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	6120      	str	r0, [r4, #16]
 8006196:	b15b      	cbz	r3, 80061b0 <__smakebuf_r+0x70>
 8006198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800619c:	4630      	mov	r0, r6
 800619e:	f000 f99b 	bl	80064d8 <_isatty_r>
 80061a2:	b128      	cbz	r0, 80061b0 <__smakebuf_r+0x70>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	431d      	orrs	r5, r3
 80061b4:	81a5      	strh	r5, [r4, #12]
 80061b6:	e7cf      	b.n	8006158 <__smakebuf_r+0x18>

080061b8 <lflush>:
 80061b8:	898b      	ldrh	r3, [r1, #12]
 80061ba:	f003 0309 	and.w	r3, r3, #9
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d103      	bne.n	80061ca <lflush+0x12>
 80061c2:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <lflush+0x18>)
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f7ff bf6d 	b.w	80060a4 <_fflush_r>
 80061ca:	2000      	movs	r0, #0
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	200000f4 	.word	0x200000f4

080061d4 <__srefill_r>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	4605      	mov	r5, r0
 80061da:	b118      	cbz	r0, 80061e4 <__srefill_r+0x10>
 80061dc:	6a03      	ldr	r3, [r0, #32]
 80061de:	b90b      	cbnz	r3, 80061e4 <__srefill_r+0x10>
 80061e0:	f7fe fe00 	bl	8004de4 <__sinit>
 80061e4:	2300      	movs	r3, #0
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ee:	069e      	lsls	r6, r3, #26
 80061f0:	d502      	bpl.n	80061f8 <__srefill_r+0x24>
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e05c      	b.n	80062b2 <__srefill_r+0xde>
 80061f8:	0758      	lsls	r0, r3, #29
 80061fa:	d448      	bmi.n	800628e <__srefill_r+0xba>
 80061fc:	06d9      	lsls	r1, r3, #27
 80061fe:	d405      	bmi.n	800620c <__srefill_r+0x38>
 8006200:	2309      	movs	r3, #9
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	e7f2      	b.n	80061f2 <__srefill_r+0x1e>
 800620c:	071a      	lsls	r2, r3, #28
 800620e:	d50b      	bpl.n	8006228 <__srefill_r+0x54>
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f7ff ff46 	bl	80060a4 <_fflush_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	d1ea      	bne.n	80061f2 <__srefill_r+0x1e>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	60a0      	str	r0, [r4, #8]
 8006220:	f023 0308 	bic.w	r3, r3, #8
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	61a0      	str	r0, [r4, #24]
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	b91b      	cbnz	r3, 800623c <__srefill_r+0x68>
 8006234:	4621      	mov	r1, r4
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff ff82 	bl	8006140 <__smakebuf_r>
 800623c:	89a6      	ldrh	r6, [r4, #12]
 800623e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006242:	07b3      	lsls	r3, r6, #30
 8006244:	d00f      	beq.n	8006266 <__srefill_r+0x92>
 8006246:	2301      	movs	r3, #1
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <__srefill_r+0xe4>)
 800624a:	491c      	ldr	r1, [pc, #112]	; (80062bc <__srefill_r+0xe8>)
 800624c:	481c      	ldr	r0, [pc, #112]	; (80062c0 <__srefill_r+0xec>)
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	f006 0609 	and.w	r6, r6, #9
 8006254:	f7fe fdde 	bl	8004e14 <_fwalk_sglue>
 8006258:	2e09      	cmp	r6, #9
 800625a:	81a7      	strh	r7, [r4, #12]
 800625c:	d103      	bne.n	8006266 <__srefill_r+0x92>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f7ff fe99 	bl	8005f98 <__sflush_r>
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800626a:	6963      	ldr	r3, [r4, #20]
 800626c:	6a21      	ldr	r1, [r4, #32]
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	4628      	mov	r0, r5
 8006272:	47b0      	blx	r6
 8006274:	2800      	cmp	r0, #0
 8006276:	6060      	str	r0, [r4, #4]
 8006278:	dc1c      	bgt.n	80062b4 <__srefill_r+0xe0>
 800627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627e:	bf17      	itett	ne
 8006280:	2200      	movne	r2, #0
 8006282:	f043 0320 	orreq.w	r3, r3, #32
 8006286:	6062      	strne	r2, [r4, #4]
 8006288:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800628c:	e7bc      	b.n	8006208 <__srefill_r+0x34>
 800628e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006290:	2900      	cmp	r1, #0
 8006292:	d0cd      	beq.n	8006230 <__srefill_r+0x5c>
 8006294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <__srefill_r+0xce>
 800629c:	4628      	mov	r0, r5
 800629e:	f7fe ffab 	bl	80051f8 <_free_r>
 80062a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	2000      	movs	r0, #0
 80062a8:	6360      	str	r0, [r4, #52]	; 0x34
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0c0      	beq.n	8006230 <__srefill_r+0x5c>
 80062ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7fc      	b.n	80062b2 <__srefill_r+0xde>
 80062b8:	2000009c 	.word	0x2000009c
 80062bc:	080061b9 	.word	0x080061b9
 80062c0:	200000a8 	.word	0x200000a8

080062c4 <__sccl>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	780b      	ldrb	r3, [r1, #0]
 80062c8:	4604      	mov	r4, r0
 80062ca:	2b5e      	cmp	r3, #94	; 0x5e
 80062cc:	bf0b      	itete	eq
 80062ce:	784b      	ldrbeq	r3, [r1, #1]
 80062d0:	1c4a      	addne	r2, r1, #1
 80062d2:	1c8a      	addeq	r2, r1, #2
 80062d4:	2100      	movne	r1, #0
 80062d6:	bf08      	it	eq
 80062d8:	2101      	moveq	r1, #1
 80062da:	3801      	subs	r0, #1
 80062dc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80062e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80062e4:	42a8      	cmp	r0, r5
 80062e6:	d1fb      	bne.n	80062e0 <__sccl+0x1c>
 80062e8:	b90b      	cbnz	r3, 80062ee <__sccl+0x2a>
 80062ea:	1e50      	subs	r0, r2, #1
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	f081 0101 	eor.w	r1, r1, #1
 80062f2:	54e1      	strb	r1, [r4, r3]
 80062f4:	4610      	mov	r0, r2
 80062f6:	4602      	mov	r2, r0
 80062f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062fc:	2d2d      	cmp	r5, #45	; 0x2d
 80062fe:	d005      	beq.n	800630c <__sccl+0x48>
 8006300:	2d5d      	cmp	r5, #93	; 0x5d
 8006302:	d016      	beq.n	8006332 <__sccl+0x6e>
 8006304:	2d00      	cmp	r5, #0
 8006306:	d0f1      	beq.n	80062ec <__sccl+0x28>
 8006308:	462b      	mov	r3, r5
 800630a:	e7f2      	b.n	80062f2 <__sccl+0x2e>
 800630c:	7846      	ldrb	r6, [r0, #1]
 800630e:	2e5d      	cmp	r6, #93	; 0x5d
 8006310:	d0fa      	beq.n	8006308 <__sccl+0x44>
 8006312:	42b3      	cmp	r3, r6
 8006314:	dcf8      	bgt.n	8006308 <__sccl+0x44>
 8006316:	3002      	adds	r0, #2
 8006318:	461a      	mov	r2, r3
 800631a:	3201      	adds	r2, #1
 800631c:	4296      	cmp	r6, r2
 800631e:	54a1      	strb	r1, [r4, r2]
 8006320:	dcfb      	bgt.n	800631a <__sccl+0x56>
 8006322:	1af2      	subs	r2, r6, r3
 8006324:	3a01      	subs	r2, #1
 8006326:	1c5d      	adds	r5, r3, #1
 8006328:	42b3      	cmp	r3, r6
 800632a:	bfa8      	it	ge
 800632c:	2200      	movge	r2, #0
 800632e:	18ab      	adds	r3, r5, r2
 8006330:	e7e1      	b.n	80062f6 <__sccl+0x32>
 8006332:	4610      	mov	r0, r2
 8006334:	e7da      	b.n	80062ec <__sccl+0x28>

08006336 <__submore>:
 8006336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800633e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006342:	4299      	cmp	r1, r3
 8006344:	d11d      	bne.n	8006382 <__submore+0x4c>
 8006346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800634a:	f7fe ffc1 	bl	80052d0 <_malloc_r>
 800634e:	b918      	cbnz	r0, 8006358 <__submore+0x22>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800635c:	63a3      	str	r3, [r4, #56]	; 0x38
 800635e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006362:	6360      	str	r0, [r4, #52]	; 0x34
 8006364:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006368:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800636c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006370:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006374:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006378:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800637c:	6020      	str	r0, [r4, #0]
 800637e:	2000      	movs	r0, #0
 8006380:	e7e8      	b.n	8006354 <__submore+0x1e>
 8006382:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006384:	0077      	lsls	r7, r6, #1
 8006386:	463a      	mov	r2, r7
 8006388:	f000 f8d4 	bl	8006534 <_realloc_r>
 800638c:	4605      	mov	r5, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	d0de      	beq.n	8006350 <__submore+0x1a>
 8006392:	eb00 0806 	add.w	r8, r0, r6
 8006396:	4601      	mov	r1, r0
 8006398:	4632      	mov	r2, r6
 800639a:	4640      	mov	r0, r8
 800639c:	f000 f8bc 	bl	8006518 <memcpy>
 80063a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063a4:	f8c4 8000 	str.w	r8, [r4]
 80063a8:	e7e9      	b.n	800637e <__submore+0x48>

080063aa <_ungetc_r>:
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	4614      	mov	r4, r2
 80063ae:	1c4a      	adds	r2, r1, #1
 80063b0:	4606      	mov	r6, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	d103      	bne.n	80063be <_ungetc_r+0x14>
 80063b6:	f04f 35ff 	mov.w	r5, #4294967295
 80063ba:	4628      	mov	r0, r5
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	b118      	cbz	r0, 80063c8 <_ungetc_r+0x1e>
 80063c0:	6a03      	ldr	r3, [r0, #32]
 80063c2:	b90b      	cbnz	r3, 80063c8 <_ungetc_r+0x1e>
 80063c4:	f7fe fd0e 	bl	8004de4 <__sinit>
 80063c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063ca:	07db      	lsls	r3, r3, #31
 80063cc:	d405      	bmi.n	80063da <_ungetc_r+0x30>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	0598      	lsls	r0, r3, #22
 80063d2:	d402      	bmi.n	80063da <_ungetc_r+0x30>
 80063d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063d6:	f7fe ff0c 	bl	80051f2 <__retarget_lock_acquire_recursive>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	f023 0320 	bic.w	r3, r3, #32
 80063e2:	0759      	lsls	r1, r3, #29
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	d423      	bmi.n	8006432 <_ungetc_r+0x88>
 80063ea:	06d3      	lsls	r3, r2, #27
 80063ec:	d409      	bmi.n	8006402 <_ungetc_r+0x58>
 80063ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f0:	07dd      	lsls	r5, r3, #31
 80063f2:	d4e0      	bmi.n	80063b6 <_ungetc_r+0xc>
 80063f4:	f412 7f00 	tst.w	r2, #512	; 0x200
 80063f8:	d1dd      	bne.n	80063b6 <_ungetc_r+0xc>
 80063fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fc:	f7fe fefa 	bl	80051f4 <__retarget_lock_release_recursive>
 8006400:	e7d9      	b.n	80063b6 <_ungetc_r+0xc>
 8006402:	0710      	lsls	r0, r2, #28
 8006404:	d511      	bpl.n	800642a <_ungetc_r+0x80>
 8006406:	4621      	mov	r1, r4
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff fe4b 	bl	80060a4 <_fflush_r>
 800640e:	b130      	cbz	r0, 800641e <_ungetc_r+0x74>
 8006410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006412:	07d9      	lsls	r1, r3, #31
 8006414:	d4cf      	bmi.n	80063b6 <_ungetc_r+0xc>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	f413 7f00 	tst.w	r3, #512	; 0x200
 800641c:	e7ec      	b.n	80063f8 <_ungetc_r+0x4e>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	60a0      	str	r0, [r4, #8]
 8006422:	f023 0308 	bic.w	r3, r3, #8
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	61a0      	str	r0, [r4, #24]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	b2ed      	uxtb	r5, r5
 8006438:	b1d3      	cbz	r3, 8006470 <_ungetc_r+0xc6>
 800643a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800643c:	4293      	cmp	r3, r2
 800643e:	dc05      	bgt.n	800644c <_ungetc_r+0xa2>
 8006440:	4621      	mov	r1, r4
 8006442:	4630      	mov	r0, r6
 8006444:	f7ff ff77 	bl	8006336 <__submore>
 8006448:	2800      	cmp	r0, #0
 800644a:	d1e1      	bne.n	8006410 <_ungetc_r+0x66>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006456:	6863      	ldr	r3, [r4, #4]
 8006458:	3301      	adds	r3, #1
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645e:	07da      	lsls	r2, r3, #31
 8006460:	d4ab      	bmi.n	80063ba <_ungetc_r+0x10>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	059b      	lsls	r3, r3, #22
 8006466:	d4a8      	bmi.n	80063ba <_ungetc_r+0x10>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f7fe fec3 	bl	80051f4 <__retarget_lock_release_recursive>
 800646e:	e7a4      	b.n	80063ba <_ungetc_r+0x10>
 8006470:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006472:	6920      	ldr	r0, [r4, #16]
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f001 0101 	and.w	r1, r1, #1
 800647a:	b160      	cbz	r0, 8006496 <_ungetc_r+0xec>
 800647c:	4298      	cmp	r0, r3
 800647e:	d20a      	bcs.n	8006496 <_ungetc_r+0xec>
 8006480:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006484:	42a8      	cmp	r0, r5
 8006486:	d106      	bne.n	8006496 <_ungetc_r+0xec>
 8006488:	3b01      	subs	r3, #1
 800648a:	3201      	adds	r2, #1
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	6062      	str	r2, [r4, #4]
 8006490:	2900      	cmp	r1, #0
 8006492:	d192      	bne.n	80063ba <_ungetc_r+0x10>
 8006494:	e7e5      	b.n	8006462 <_ungetc_r+0xb8>
 8006496:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800649a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800649e:	6363      	str	r3, [r4, #52]	; 0x34
 80064a0:	2303      	movs	r3, #3
 80064a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80064a4:	4623      	mov	r3, r4
 80064a6:	f803 5f46 	strb.w	r5, [r3, #70]!
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	e7ee      	b.n	8006490 <_ungetc_r+0xe6>
	...

080064b4 <_fstat_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <_fstat_r+0x20>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	f7fb fb7e 	bl	8001bc2 <_fstat>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	d102      	bne.n	80064d0 <_fstat_r+0x1c>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	b103      	cbz	r3, 80064d0 <_fstat_r+0x1c>
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	bd38      	pop	{r3, r4, r5, pc}
 80064d2:	bf00      	nop
 80064d4:	200014b4 	.word	0x200014b4

080064d8 <_isatty_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d06      	ldr	r5, [pc, #24]	; (80064f4 <_isatty_r+0x1c>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fb fb7d 	bl	8001be2 <_isatty>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_isatty_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_isatty_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	200014b4 	.word	0x200014b4

080064f8 <_sbrk_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_sbrk_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fb fb86 	bl	8001c14 <_sbrk>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_sbrk_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_sbrk_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200014b4 	.word	0x200014b4

08006518 <memcpy>:
 8006518:	440a      	add	r2, r1
 800651a:	4291      	cmp	r1, r2
 800651c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006520:	d100      	bne.n	8006524 <memcpy+0xc>
 8006522:	4770      	bx	lr
 8006524:	b510      	push	{r4, lr}
 8006526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652e:	4291      	cmp	r1, r2
 8006530:	d1f9      	bne.n	8006526 <memcpy+0xe>
 8006532:	bd10      	pop	{r4, pc}

08006534 <_realloc_r>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4680      	mov	r8, r0
 800653a:	4614      	mov	r4, r2
 800653c:	460e      	mov	r6, r1
 800653e:	b921      	cbnz	r1, 800654a <_realloc_r+0x16>
 8006540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	4611      	mov	r1, r2
 8006546:	f7fe bec3 	b.w	80052d0 <_malloc_r>
 800654a:	b92a      	cbnz	r2, 8006558 <_realloc_r+0x24>
 800654c:	f7fe fe54 	bl	80051f8 <_free_r>
 8006550:	4625      	mov	r5, r4
 8006552:	4628      	mov	r0, r5
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006558:	f000 f914 	bl	8006784 <_malloc_usable_size_r>
 800655c:	4284      	cmp	r4, r0
 800655e:	4607      	mov	r7, r0
 8006560:	d802      	bhi.n	8006568 <_realloc_r+0x34>
 8006562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006566:	d812      	bhi.n	800658e <_realloc_r+0x5a>
 8006568:	4621      	mov	r1, r4
 800656a:	4640      	mov	r0, r8
 800656c:	f7fe feb0 	bl	80052d0 <_malloc_r>
 8006570:	4605      	mov	r5, r0
 8006572:	2800      	cmp	r0, #0
 8006574:	d0ed      	beq.n	8006552 <_realloc_r+0x1e>
 8006576:	42bc      	cmp	r4, r7
 8006578:	4622      	mov	r2, r4
 800657a:	4631      	mov	r1, r6
 800657c:	bf28      	it	cs
 800657e:	463a      	movcs	r2, r7
 8006580:	f7ff ffca 	bl	8006518 <memcpy>
 8006584:	4631      	mov	r1, r6
 8006586:	4640      	mov	r0, r8
 8006588:	f7fe fe36 	bl	80051f8 <_free_r>
 800658c:	e7e1      	b.n	8006552 <_realloc_r+0x1e>
 800658e:	4635      	mov	r5, r6
 8006590:	e7df      	b.n	8006552 <_realloc_r+0x1e>
	...

08006594 <_strtol_l.constprop.0>:
 8006594:	2b01      	cmp	r3, #1
 8006596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659a:	d001      	beq.n	80065a0 <_strtol_l.constprop.0+0xc>
 800659c:	2b24      	cmp	r3, #36	; 0x24
 800659e:	d906      	bls.n	80065ae <_strtol_l.constprop.0+0x1a>
 80065a0:	f7fe fdfc 	bl	800519c <__errno>
 80065a4:	2316      	movs	r3, #22
 80065a6:	6003      	str	r3, [r0, #0]
 80065a8:	2000      	movs	r0, #0
 80065aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006694 <_strtol_l.constprop.0+0x100>
 80065b2:	460d      	mov	r5, r1
 80065b4:	462e      	mov	r6, r5
 80065b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80065be:	f017 0708 	ands.w	r7, r7, #8
 80065c2:	d1f7      	bne.n	80065b4 <_strtol_l.constprop.0+0x20>
 80065c4:	2c2d      	cmp	r4, #45	; 0x2d
 80065c6:	d132      	bne.n	800662e <_strtol_l.constprop.0+0x9a>
 80065c8:	782c      	ldrb	r4, [r5, #0]
 80065ca:	2701      	movs	r7, #1
 80065cc:	1cb5      	adds	r5, r6, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d05b      	beq.n	800668a <_strtol_l.constprop.0+0xf6>
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d109      	bne.n	80065ea <_strtol_l.constprop.0+0x56>
 80065d6:	2c30      	cmp	r4, #48	; 0x30
 80065d8:	d107      	bne.n	80065ea <_strtol_l.constprop.0+0x56>
 80065da:	782c      	ldrb	r4, [r5, #0]
 80065dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065e0:	2c58      	cmp	r4, #88	; 0x58
 80065e2:	d14d      	bne.n	8006680 <_strtol_l.constprop.0+0xec>
 80065e4:	786c      	ldrb	r4, [r5, #1]
 80065e6:	2310      	movs	r3, #16
 80065e8:	3502      	adds	r5, #2
 80065ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80065f2:	f04f 0e00 	mov.w	lr, #0
 80065f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80065fa:	4676      	mov	r6, lr
 80065fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006600:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006604:	f1bc 0f09 	cmp.w	ip, #9
 8006608:	d816      	bhi.n	8006638 <_strtol_l.constprop.0+0xa4>
 800660a:	4664      	mov	r4, ip
 800660c:	42a3      	cmp	r3, r4
 800660e:	dd24      	ble.n	800665a <_strtol_l.constprop.0+0xc6>
 8006610:	f1be 3fff 	cmp.w	lr, #4294967295
 8006614:	d008      	beq.n	8006628 <_strtol_l.constprop.0+0x94>
 8006616:	45b1      	cmp	r9, r6
 8006618:	d31c      	bcc.n	8006654 <_strtol_l.constprop.0+0xc0>
 800661a:	d101      	bne.n	8006620 <_strtol_l.constprop.0+0x8c>
 800661c:	45a2      	cmp	sl, r4
 800661e:	db19      	blt.n	8006654 <_strtol_l.constprop.0+0xc0>
 8006620:	fb06 4603 	mla	r6, r6, r3, r4
 8006624:	f04f 0e01 	mov.w	lr, #1
 8006628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800662c:	e7e8      	b.n	8006600 <_strtol_l.constprop.0+0x6c>
 800662e:	2c2b      	cmp	r4, #43	; 0x2b
 8006630:	bf04      	itt	eq
 8006632:	782c      	ldrbeq	r4, [r5, #0]
 8006634:	1cb5      	addeq	r5, r6, #2
 8006636:	e7ca      	b.n	80065ce <_strtol_l.constprop.0+0x3a>
 8006638:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800663c:	f1bc 0f19 	cmp.w	ip, #25
 8006640:	d801      	bhi.n	8006646 <_strtol_l.constprop.0+0xb2>
 8006642:	3c37      	subs	r4, #55	; 0x37
 8006644:	e7e2      	b.n	800660c <_strtol_l.constprop.0+0x78>
 8006646:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800664a:	f1bc 0f19 	cmp.w	ip, #25
 800664e:	d804      	bhi.n	800665a <_strtol_l.constprop.0+0xc6>
 8006650:	3c57      	subs	r4, #87	; 0x57
 8006652:	e7db      	b.n	800660c <_strtol_l.constprop.0+0x78>
 8006654:	f04f 3eff 	mov.w	lr, #4294967295
 8006658:	e7e6      	b.n	8006628 <_strtol_l.constprop.0+0x94>
 800665a:	f1be 3fff 	cmp.w	lr, #4294967295
 800665e:	d105      	bne.n	800666c <_strtol_l.constprop.0+0xd8>
 8006660:	2322      	movs	r3, #34	; 0x22
 8006662:	6003      	str	r3, [r0, #0]
 8006664:	4646      	mov	r6, r8
 8006666:	b942      	cbnz	r2, 800667a <_strtol_l.constprop.0+0xe6>
 8006668:	4630      	mov	r0, r6
 800666a:	e79e      	b.n	80065aa <_strtol_l.constprop.0+0x16>
 800666c:	b107      	cbz	r7, 8006670 <_strtol_l.constprop.0+0xdc>
 800666e:	4276      	negs	r6, r6
 8006670:	2a00      	cmp	r2, #0
 8006672:	d0f9      	beq.n	8006668 <_strtol_l.constprop.0+0xd4>
 8006674:	f1be 0f00 	cmp.w	lr, #0
 8006678:	d000      	beq.n	800667c <_strtol_l.constprop.0+0xe8>
 800667a:	1e69      	subs	r1, r5, #1
 800667c:	6011      	str	r1, [r2, #0]
 800667e:	e7f3      	b.n	8006668 <_strtol_l.constprop.0+0xd4>
 8006680:	2430      	movs	r4, #48	; 0x30
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1b1      	bne.n	80065ea <_strtol_l.constprop.0+0x56>
 8006686:	2308      	movs	r3, #8
 8006688:	e7af      	b.n	80065ea <_strtol_l.constprop.0+0x56>
 800668a:	2c30      	cmp	r4, #48	; 0x30
 800668c:	d0a5      	beq.n	80065da <_strtol_l.constprop.0+0x46>
 800668e:	230a      	movs	r3, #10
 8006690:	e7ab      	b.n	80065ea <_strtol_l.constprop.0+0x56>
 8006692:	bf00      	nop
 8006694:	080068cb 	.word	0x080068cb

08006698 <_strtol_r>:
 8006698:	f7ff bf7c 	b.w	8006594 <_strtol_l.constprop.0>

0800669c <_strtoul_l.constprop.0>:
 800669c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066a0:	4f36      	ldr	r7, [pc, #216]	; (800677c <_strtoul_l.constprop.0+0xe0>)
 80066a2:	4686      	mov	lr, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	4628      	mov	r0, r5
 80066a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ac:	5d3e      	ldrb	r6, [r7, r4]
 80066ae:	f016 0608 	ands.w	r6, r6, #8
 80066b2:	d1f8      	bne.n	80066a6 <_strtoul_l.constprop.0+0xa>
 80066b4:	2c2d      	cmp	r4, #45	; 0x2d
 80066b6:	d130      	bne.n	800671a <_strtoul_l.constprop.0+0x7e>
 80066b8:	782c      	ldrb	r4, [r5, #0]
 80066ba:	2601      	movs	r6, #1
 80066bc:	1c85      	adds	r5, r0, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d057      	beq.n	8006772 <_strtoul_l.constprop.0+0xd6>
 80066c2:	2b10      	cmp	r3, #16
 80066c4:	d109      	bne.n	80066da <_strtoul_l.constprop.0+0x3e>
 80066c6:	2c30      	cmp	r4, #48	; 0x30
 80066c8:	d107      	bne.n	80066da <_strtoul_l.constprop.0+0x3e>
 80066ca:	7828      	ldrb	r0, [r5, #0]
 80066cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80066d0:	2858      	cmp	r0, #88	; 0x58
 80066d2:	d149      	bne.n	8006768 <_strtoul_l.constprop.0+0xcc>
 80066d4:	786c      	ldrb	r4, [r5, #1]
 80066d6:	2310      	movs	r3, #16
 80066d8:	3502      	adds	r5, #2
 80066da:	f04f 38ff 	mov.w	r8, #4294967295
 80066de:	2700      	movs	r7, #0
 80066e0:	fbb8 f8f3 	udiv	r8, r8, r3
 80066e4:	fb03 f908 	mul.w	r9, r3, r8
 80066e8:	ea6f 0909 	mvn.w	r9, r9
 80066ec:	4638      	mov	r0, r7
 80066ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80066f2:	f1bc 0f09 	cmp.w	ip, #9
 80066f6:	d815      	bhi.n	8006724 <_strtoul_l.constprop.0+0x88>
 80066f8:	4664      	mov	r4, ip
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	dd23      	ble.n	8006746 <_strtoul_l.constprop.0+0xaa>
 80066fe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006702:	d007      	beq.n	8006714 <_strtoul_l.constprop.0+0x78>
 8006704:	4580      	cmp	r8, r0
 8006706:	d31b      	bcc.n	8006740 <_strtoul_l.constprop.0+0xa4>
 8006708:	d101      	bne.n	800670e <_strtoul_l.constprop.0+0x72>
 800670a:	45a1      	cmp	r9, r4
 800670c:	db18      	blt.n	8006740 <_strtoul_l.constprop.0+0xa4>
 800670e:	fb00 4003 	mla	r0, r0, r3, r4
 8006712:	2701      	movs	r7, #1
 8006714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006718:	e7e9      	b.n	80066ee <_strtoul_l.constprop.0+0x52>
 800671a:	2c2b      	cmp	r4, #43	; 0x2b
 800671c:	bf04      	itt	eq
 800671e:	782c      	ldrbeq	r4, [r5, #0]
 8006720:	1c85      	addeq	r5, r0, #2
 8006722:	e7cc      	b.n	80066be <_strtoul_l.constprop.0+0x22>
 8006724:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006728:	f1bc 0f19 	cmp.w	ip, #25
 800672c:	d801      	bhi.n	8006732 <_strtoul_l.constprop.0+0x96>
 800672e:	3c37      	subs	r4, #55	; 0x37
 8006730:	e7e3      	b.n	80066fa <_strtoul_l.constprop.0+0x5e>
 8006732:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006736:	f1bc 0f19 	cmp.w	ip, #25
 800673a:	d804      	bhi.n	8006746 <_strtoul_l.constprop.0+0xaa>
 800673c:	3c57      	subs	r4, #87	; 0x57
 800673e:	e7dc      	b.n	80066fa <_strtoul_l.constprop.0+0x5e>
 8006740:	f04f 37ff 	mov.w	r7, #4294967295
 8006744:	e7e6      	b.n	8006714 <_strtoul_l.constprop.0+0x78>
 8006746:	1c7b      	adds	r3, r7, #1
 8006748:	d106      	bne.n	8006758 <_strtoul_l.constprop.0+0xbc>
 800674a:	2322      	movs	r3, #34	; 0x22
 800674c:	f8ce 3000 	str.w	r3, [lr]
 8006750:	4638      	mov	r0, r7
 8006752:	b932      	cbnz	r2, 8006762 <_strtoul_l.constprop.0+0xc6>
 8006754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006758:	b106      	cbz	r6, 800675c <_strtoul_l.constprop.0+0xc0>
 800675a:	4240      	negs	r0, r0
 800675c:	2a00      	cmp	r2, #0
 800675e:	d0f9      	beq.n	8006754 <_strtoul_l.constprop.0+0xb8>
 8006760:	b107      	cbz	r7, 8006764 <_strtoul_l.constprop.0+0xc8>
 8006762:	1e69      	subs	r1, r5, #1
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	e7f5      	b.n	8006754 <_strtoul_l.constprop.0+0xb8>
 8006768:	2430      	movs	r4, #48	; 0x30
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1b5      	bne.n	80066da <_strtoul_l.constprop.0+0x3e>
 800676e:	2308      	movs	r3, #8
 8006770:	e7b3      	b.n	80066da <_strtoul_l.constprop.0+0x3e>
 8006772:	2c30      	cmp	r4, #48	; 0x30
 8006774:	d0a9      	beq.n	80066ca <_strtoul_l.constprop.0+0x2e>
 8006776:	230a      	movs	r3, #10
 8006778:	e7af      	b.n	80066da <_strtoul_l.constprop.0+0x3e>
 800677a:	bf00      	nop
 800677c:	080068cb 	.word	0x080068cb

08006780 <_strtoul_r>:
 8006780:	f7ff bf8c 	b.w	800669c <_strtoul_l.constprop.0>

08006784 <_malloc_usable_size_r>:
 8006784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006788:	1f18      	subs	r0, r3, #4
 800678a:	2b00      	cmp	r3, #0
 800678c:	bfbc      	itt	lt
 800678e:	580b      	ldrlt	r3, [r1, r0]
 8006790:	18c0      	addlt	r0, r0, r3
 8006792:	4770      	bx	lr

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
