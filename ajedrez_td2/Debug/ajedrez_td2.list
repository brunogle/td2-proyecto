
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008770  08008770  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008778  08008778  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000545c  200000f0  08008870  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000554c  08008870  0002554c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b49  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004676  00000000  00000000  00038cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b0  00000000  00000000  0003e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199fa  00000000  00000000  0003f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c21b  00000000  00000000  0005938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097e3f  00000000  00000000  000755a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005abc  00000000  00000000  0010d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00112ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008660 	.word	0x08008660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08008660 	.word	0x08008660

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f006 fd71 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f006 fd6b 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f006 fd65 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f006 fd5f 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f006 fd59 	bl	8006fc8 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f006 fd53 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f006 fd4d 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f006 fd47 	bl	8006fc8 <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f006 fd44 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f006 fd3e 	bl	8006fc8 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f003 fc2b 	bl	8003e00 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003b0 	.word	0x200003b0

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f003 fbfb 	bl	8003e00 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003b0 	.word	0x200003b0

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
#include "debounce.h"

void debounce_init(Debounce_t *s, uint8_t activo_en_cero, uint16_t debounce) {
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero) ? 1 : 0;
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t) BTN_LIBRE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t) BTN_PRESIONADO;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:

void debounce_run(Debounce_t *s, uint32_t estado) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

	switch (s->estado) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
	case 0:
		if (boton) {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
			s->debounce_ticks = s->debounce;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
		break;
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
	case 1:
		if (!(--(s->debounce_ticks))) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
			if (boton) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
				s->estado_pin = BTN_PRESIONADO;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 0;
			}
		}
		break;
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
				s->estado = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
		break;
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
	case 2:
		if (!boton) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
			s->debounce_ticks = s->debounce;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
		break;
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
	case 3:
		if (!(--(s->debounce_ticks))) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
			if (!boton) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
				s->estado_pin = BTN_LIBRE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 2;
			}
		}
		break;
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
				s->estado = 2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
		break;
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:

int debounce_flank(Debounce_t *s) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
			&& (s->estado_anterior_pin == BTN_LIBRE);
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <vApplicationGetIdleTaskMemory+0x2c>)
 8000910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <vApplicationGetIdleTaskMemory+0x30>)
 8000916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200001ac 	.word	0x200001ac

08000934 <game_set_sensor_reader>:
#include "movement.h"
#include "lighting/lighting.h"

sensor_reader_t sensor_reader = (sensor_reader_t)0;

void game_set_sensor_reader(sensor_reader_t reader){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    sensor_reader = reader;
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <game_set_sensor_reader+0x20>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
    get_sensors = reader;
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <game_set_sensor_reader+0x24>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200003ac 	.word	0x200003ac
 8000958:	200004cc 	.word	0x200004cc

0800095c <game_set_led_output_array>:

void game_set_led_output_array(led_color output_array[8][8]){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f001 ff9f 	bl	80028a8 <lighting_set_output>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <game_fsm>:


void game_fsm(){
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

    movement_fsm();
 8000976:	f000 fbab 	bl	80010d0 <movement_fsm>

    lighting_refresh();
 800097a:	f002 f8d9 	bl	8002b30 <lighting_refresh>

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <game_reset>:

void game_reset(){
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

    engine_reset();
 8000986:	f001 f92f 	bl	8001be8 <engine_reset>

 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000996:	f002 fa83 	bl	8002ea0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800099a:	f000 f877 	bl	8000a8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800099e:	f000 f9af 	bl	8000d00 <MX_GPIO_Init>
	MX_DMA_Init();
 80009a2:	f000 f98d 	bl	8000cc0 <MX_DMA_Init>
	MX_TIM1_Init();
 80009a6:	f000 f90b 	bl	8000bc0 <MX_TIM1_Init>
	MX_I2C1_Init();
 80009aa:	f000 f8db 	bl	8000b64 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 80009ae:	2200      	movs	r2, #0
 80009b0:	2118      	movs	r1, #24
 80009b2:	2014      	movs	r0, #20
 80009b4:	f005 fcd4 	bl	8006360 <xQueueGenericCreate>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <main+0xc8>)
 80009bc:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 80009be:	2200      	movs	r2, #0
 80009c0:	2101      	movs	r1, #1
 80009c2:	2014      	movs	r0, #20
 80009c4:	f005 fccc 	bl	8006360 <xQueueGenericCreate>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <main+0xcc>)
 80009cc:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009ce:	2203      	movs	r2, #3
 80009d0:	2100      	movs	r1, #0
 80009d2:	2001      	movs	r0, #1
 80009d4:	f005 fcc4 	bl	8006360 <xQueueGenericCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <main+0xd0>)
 80009dc:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <main+0xd4>)
 80009e0:	1d3c      	adds	r4, r7, #4
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fb36 	bl	8006066 <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <main+0xd8>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */

	xTaskCreate(t_LCD, "t_LCD",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2304      	movs	r3, #4
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	4917      	ldr	r1, [pc, #92]	; (8000a6c <main+0xdc>)
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <main+0xe0>)
 8000a10:	f006 f98d 	bl	8006d2e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 4,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4914      	ldr	r1, [pc, #80]	; (8000a74 <main+0xe4>)
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <main+0xe8>)
 8000a24:	f006 f983 	bl	8006d2e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <main+0xec>)
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <main+0xf0>)
 8000a38:	f006 f979 	bl	8006d2e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	490e      	ldr	r1, [pc, #56]	; (8000a84 <main+0xf4>)
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <main+0xf8>)
 8000a4c:	f006 f96f 	bl	8006d2e <xTaskCreate>

	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000a50:	f005 fb02 	bl	8006058 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <main+0xc4>
 8000a56:	bf00      	nop
 8000a58:	200004b0 	.word	0x200004b0
 8000a5c:	200004b4 	.word	0x200004b4
 8000a60:	200004b8 	.word	0x200004b8
 8000a64:	080086b0 	.word	0x080086b0
 8000a68:	200004ac 	.word	0x200004ac
 8000a6c:	08008678 	.word	0x08008678
 8000a70:	0800164d 	.word	0x0800164d
 8000a74:	08008680 	.word	0x08008680
 8000a78:	080016bd 	.word	0x080016bd
 8000a7c:	0800868c 	.word	0x0800868c
 8000a80:	0800185d 	.word	0x0800185d
 8000a84:	08008698 	.word	0x08008698
 8000a88:	08001801 	.word	0x08001801

08000a8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fcf6 	bl	800848c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <SystemClock_Config+0xd0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000b00:	2310      	movs	r3, #16
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fc7a 	bl	8004410 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x9a>
		Error_Handler();
 8000b22:	f000 f9d2 	bl	8000eca <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2102      	movs	r1, #2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fedc 	bl	8004900 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xc6>
		Error_Handler();
 8000b4e:	f000 f9bc 	bl	8000eca <Error_Handler>
	}
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	; 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_I2C1_Init+0x54>)
 8000b6c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x58>)
 8000b72:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2C1_Init+0x50>)
 8000ba2:	f002 ffe9 	bl	8003b78 <HAL_I2C_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000bac:	f000 f98d 	bl	8000eca <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200003b0 	.word	0x200003b0
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	000186a0 	.word	0x000186a0

08000bc0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b092      	sub	sp, #72	; 0x48
 8000bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2220      	movs	r2, #32
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fc4e 	bl	800848c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <MX_TIM1_Init+0xfc>)
 8000bf4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c04:	2268      	movs	r2, #104	; 0x68
 8000c06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c1a:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c1c:	f004 f96a 	bl	8004ef4 <HAL_TIM_PWM_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x6a>
		Error_Handler();
 8000c26:	f000 f950 	bl	8000eca <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c36:	4619      	mov	r1, r3
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c3a:	f005 f921 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8000c44:	f000 f941 	bl	8000eca <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	220c      	movs	r2, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c6a:	f004 fd11 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000c74:	f000 f929 	bl	8000eca <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000c9c:	f005 f95e 	bl	8005f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 8000ca6:	f000 f910 	bl	8000eca <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000caa:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <MX_TIM1_Init+0xf8>)
 8000cac:	f000 fbd2 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8000cb0:	bf00      	nop
 8000cb2:	3748      	adds	r7, #72	; 0x48
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000404 	.word	0x20000404
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	203c      	movs	r0, #60	; 0x3c
 8000ce8:	f002 f9d4 	bl	8003094 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000cec:	203c      	movs	r0, #60	; 0x3c
 8000cee:	f002 f9ed 	bl	80030cc <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b5c      	ldr	r3, [pc, #368]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b59      	ldr	r3, [pc, #356]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b55      	ldr	r3, [pc, #340]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a4d      	ldr	r2, [pc, #308]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REED_1_Pin | REED_2_Pin | REED_7_Pin,
 8000d86:	2200      	movs	r2, #0
 8000d88:	2183      	movs	r1, #131	; 0x83
 8000d8a:	4841      	ldr	r0, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000d8c:	f002 feda 	bl	8003b44 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | REED_4_Pin | REED_5_Pin | REED_8_Pin,
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000d96:	483f      	ldr	r0, [pc, #252]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000d98:	f002 fed4 	bl	8003b44 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, REED_3_Pin | REED_6_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2141      	movs	r1, #65	; 0x41
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000da2:	f002 fecf 	bl	8003b44 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4834      	ldr	r0, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000dbe:	f002 fd25 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
	GPIO_InitStruct.Pin = REED_1_Pin | REED_2_Pin | REED_7_Pin;
 8000dc2:	2383      	movs	r3, #131	; 0x83
 8000dc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000dda:	f002 fd17 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000dde:	2320      	movs	r3, #32
 8000de0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000df6:	f002 fd09 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
	GPIO_InitStruct.Pin = REED_4_Pin | REED_5_Pin | REED_8_Pin;
 8000dfa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000dfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4820      	ldr	r0, [pc, #128]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000e14:	f002 fcfa 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_3_Pin REED_6_Pin */
	GPIO_InitStruct.Pin = REED_3_Pin | REED_6_Pin;
 8000e18:	2341      	movs	r3, #65	; 0x41
 8000e1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000e30:	f002 fcec 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_D_Pin
	 REED_C_Pin REED_E_Pin */
	GPIO_InitStruct.Pin = REED_B_Pin | REED_H_Pin | REED_G_Pin | REED_D_Pin
 8000e34:	f246 4338 	movw	r3, #25656	; 0x6438
 8000e38:	617b      	str	r3, [r7, #20]
			| REED_C_Pin | REED_E_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000e4a:	f002 fcdf 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
	GPIO_InitStruct.Pin = BOTON_1_Pin | BOTON_2_Pin | BOTON_3_Pin;
 8000e4e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000e64:	f002 fcd2 	bl	800380c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_A_Pin REED_F_Pin */
	GPIO_InitStruct.Pin = REED_A_Pin | REED_F_Pin;
 8000e68:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000e7e:	f002 fcc5 	bl	800380c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400

08000e9c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f005 f92a 	bl	80060fe <osDelay>
 8000eaa:	e7fb      	b.n	8000ea4 <StartDefaultTask+0x8>

08000eac <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ebe:	f002 f811 	bl	8002ee4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
}
 8000ed0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed2:	e7fe      	b.n	8000ed2 <Error_Handler+0x8>

08000ed4 <get_last_sensor_change>:
char previous_sensor_state[8];
char new_sensor_state[8];

void (*get_sensors)(char[8]);

piece_change_t get_last_sensor_change(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

    get_sensors(new_sensor_state);
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <get_last_sensor_change+0xe8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000ee0:	4798      	blx	r3

    piece_change_t ret = {0, NONE};
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	713b      	strb	r3, [r7, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e054      	b.n	8000f9a <get_last_sensor_change+0xc6>
        for (int file = 0; file < 8; file++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e04b      	b.n	8000f8e <get_last_sensor_change+0xba>
            char new_state = (new_sensor_state[rank]&(1<<file)) != 0;
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	fa42 f303 	asr.w	r3, r2, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <get_last_sensor_change+0xf0>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fa42 f303 	asr.w	r3, r2, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f36:	7afa      	ldrb	r2, [r7, #11]
 8000f38:	7abb      	ldrb	r3, [r7, #10]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d024      	beq.n	8000f88 <get_last_sensor_change+0xb4>
                ret.square_affected = COORD2SQ(rank, file);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <get_last_sensor_change+0x86>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e000      	b.n	8000f5c <get_last_sensor_change+0x88>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e00b      	b.n	8000f7c <get_last_sensor_change+0xa8>
                    previous_sensor_state[i] = new_sensor_state[i];
 8000f64:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <get_last_sensor_change+0xec>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	7819      	ldrb	r1, [r3, #0]
 8000f6c:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <get_last_sensor_change+0xf0>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	460a      	mov	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	ddf0      	ble.n	8000f64 <get_last_sensor_change+0x90>
                }
                return ret;
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	813b      	strh	r3, [r7, #8]
 8000f86:	e00d      	b.n	8000fa4 <get_last_sensor_change+0xd0>
        for (int file = 0; file < 8; file++) {
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	ddb0      	ble.n	8000ef6 <get_last_sensor_change+0x22>
    for (int rank = 0; rank < 8; rank++) {
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	dda7      	ble.n	8000ef0 <get_last_sensor_change+0x1c>
            }
        }
    }
    return ret;
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	813b      	strh	r3, [r7, #8]
}
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	7a3a      	ldrb	r2, [r7, #8]
 8000fa8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fac:	7a7a      	ldrb	r2, [r7, #9]
 8000fae:	f362 230f 	bfi	r3, r2, #8, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200004cc 	.word	0x200004cc
 8000fc0:	200004c4 	.word	0x200004c4
 8000fc4:	200004bc 	.word	0x200004bc

08000fc8 <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <is_board_ok+0xb4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1d3a      	adds	r2, r7, #4
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4798      	blx	r3
    char board_ok = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e044      	b.n	800106c <is_board_ok+0xa4>
        for (int file = 0; file < 8; file++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e03b      	b.n	8001060 <is_board_ok+0x98>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	fa42 f303 	asr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d010      	beq.n	8001022 <is_board_ok+0x5a>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fe17 	bl	8001c44 <engine_get_piece>
 8001016:	4603      	mov	r3, r0
 8001018:	2b06      	cmp	r3, #6
 800101a:	d102      	bne.n	8001022 <is_board_ok+0x5a>
                board_ok = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	75fb      	strb	r3, [r7, #23]
 8001020:	e01b      	b.n	800105a <is_board_ok+0x92>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	fa42 f303 	asr.w	r3, r2, r3
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <is_board_ok+0x92>
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4413      	add	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fdfa 	bl	8001c44 <engine_get_piece>
 8001050:	4603      	mov	r3, r0
 8001052:	2b06      	cmp	r3, #6
 8001054:	d001      	beq.n	800105a <is_board_ok+0x92>
                board_ok = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b07      	cmp	r3, #7
 8001064:	ddc0      	ble.n	8000fe8 <is_board_ok+0x20>
    for (int rank = 0; rank < 8; rank++) {
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	3301      	adds	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2b07      	cmp	r3, #7
 8001070:	ddb7      	ble.n	8000fe2 <is_board_ok+0x1a>
            }
        }
    }
    return board_ok;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200004cc 	.word	0x200004cc

08001080 <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	e00f      	b.n	80010b8 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d102      	bne.n	80010b2 <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3301      	adds	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbeb      	blt.n	8001098 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010c0:	697b      	ldr	r3, [r7, #20]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <movement_fsm>:

int total_valid_moves;
move_t valid_moves[255];

void movement_fsm(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 80010d6:	f7ff fefd 	bl	8000ed4 <get_last_sensor_change>
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 80010de:	4b6b      	ldr	r3, [pc, #428]	; (800128c <movement_fsm+0x1bc>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	f000 80b8 	beq.w	8001258 <movement_fsm+0x188>
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	f300 80c3 	bgt.w	8001274 <movement_fsm+0x1a4>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <movement_fsm+0x28>
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d03f      	beq.n	8001176 <movement_fsm+0xa6>
        break;



    default:
        break;
 80010f6:	e0bd      	b.n	8001274 <movement_fsm+0x1a4>
        if(piece_change.piece_action == REMOVED){
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d130      	bne.n	8001160 <movement_fsm+0x90>
            movement_state = PIECE_LIFTED_STATE;
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <movement_fsm+0x1bc>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001104:	793a      	ldrb	r2, [r7, #4]
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <movement_fsm+0x1c0>)
 8001108:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves);
 800110a:	4862      	ldr	r0, [pc, #392]	; (8001294 <movement_fsm+0x1c4>)
 800110c:	f000 fd8a 	bl	8001c24 <engine_list_moves>
 8001110:	4603      	mov	r3, r0
 8001112:	4a61      	ldr	r2, [pc, #388]	; (8001298 <movement_fsm+0x1c8>)
 8001114:	6013      	str	r3, [r2, #0]
            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <movement_fsm+0x1c0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <movement_fsm+0x1c8>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	495d      	ldr	r1, [pc, #372]	; (8001294 <movement_fsm+0x1c4>)
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffad 	bl	8001080 <get_lifted_moves>
 8001126:	60b8      	str	r0, [r7, #8]
            if(lifted_piece_valid_moves == 0){
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <movement_fsm+0x6c>
                movement_state = ERROR_STATE;
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <movement_fsm+0x1bc>)
 8001130:	2203      	movs	r2, #3
 8001132:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001134:	2002      	movs	r0, #2
 8001136:	f001 fcc5 	bl	8002ac4 <lighting_set_state>
        break;
 800113a:	e09d      	b.n	8001278 <movement_fsm+0x1a8>
                movement_state = PIECE_LIFTED_STATE;
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <movement_fsm+0x1bc>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 8001142:	4b53      	ldr	r3, [pc, #332]	; (8001290 <movement_fsm+0x1c0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fccc 	bl	8002ae4 <lighting_piece_lifted_square>
                set_valid_moves(valid_moves, total_valid_moves);
 800114c:	4b52      	ldr	r3, [pc, #328]	; (8001298 <movement_fsm+0x1c8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4850      	ldr	r0, [pc, #320]	; (8001294 <movement_fsm+0x1c4>)
 8001154:	f001 fcd6 	bl	8002b04 <set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 8001158:	2001      	movs	r0, #1
 800115a:	f001 fcb3 	bl	8002ac4 <lighting_set_state>
        break;
 800115e:	e08b      	b.n	8001278 <movement_fsm+0x1a8>
        else if(piece_change.piece_action == PLACED){
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	2b02      	cmp	r3, #2
 8001164:	f040 8088 	bne.w	8001278 <movement_fsm+0x1a8>
            movement_state = ERROR_STATE;
 8001168:	4b48      	ldr	r3, [pc, #288]	; (800128c <movement_fsm+0x1bc>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 800116e:	2002      	movs	r0, #2
 8001170:	f001 fca8 	bl	8002ac4 <lighting_set_state>
        break;
 8001174:	e080      	b.n	8001278 <movement_fsm+0x1a8>
        if(piece_change.piece_action == PLACED){
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d11a      	bne.n	80011b2 <movement_fsm+0xe2>
            move_played.from = square_lifted;
 800117c:	4b44      	ldr	r3, [pc, #272]	; (8001290 <movement_fsm+0x1c0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 8001182:	793b      	ldrb	r3, [r7, #4]
 8001184:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f000 fd3a 	bl	8001c00 <engine_move_piece>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]
            if(move_ok){
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <movement_fsm+0xd4>
                movement_state = WAIT_STATE;
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <movement_fsm+0x1bc>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_IDLE_STATE);
 800119c:	2000      	movs	r0, #0
 800119e:	f001 fc91 	bl	8002ac4 <lighting_set_state>
        break;
 80011a2:	e06b      	b.n	800127c <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <movement_fsm+0x1bc>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80011aa:	2002      	movs	r0, #2
 80011ac:	f001 fc8a 	bl	8002ac4 <lighting_set_state>
        break;
 80011b0:	e064      	b.n	800127c <movement_fsm+0x1ac>
        else if(piece_change.piece_action == REMOVED){
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d161      	bne.n	800127c <movement_fsm+0x1ac>
            total_valid_moves = engine_list_moves(valid_moves);
 80011b8:	4836      	ldr	r0, [pc, #216]	; (8001294 <movement_fsm+0x1c4>)
 80011ba:	f000 fd33 	bl	8001c24 <engine_list_moves>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a35      	ldr	r2, [pc, #212]	; (8001298 <movement_fsm+0x1c8>)
 80011c2:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	e035      	b.n	800123a <movement_fsm+0x16a>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 80011ce:	4931      	ldr	r1, [pc, #196]	; (8001294 <movement_fsm+0x1c4>)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	440b      	add	r3, r1
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <movement_fsm+0x1c0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d127      	bne.n	8001234 <movement_fsm+0x164>
 80011e4:	492b      	ldr	r1, [pc, #172]	; (8001294 <movement_fsm+0x1c4>)
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	3301      	adds	r3, #1
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11c      	bne.n	8001234 <movement_fsm+0x164>
                    captured_piece_is_valid = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fc6f 	bl	8002ae4 <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 8001206:	2003      	movs	r0, #3
 8001208:	f001 fc5c 	bl	8002ac4 <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 800120c:	4921      	ldr	r1, [pc, #132]	; (8001294 <movement_fsm+0x1c4>)
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	440b      	add	r3, r1
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	7859      	ldrb	r1, [r3, #1]
 800121c:	0209      	lsls	r1, r1, #8
 800121e:	430a      	orrs	r2, r1
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431a      	orrs	r2, r3
 8001226:	2300      	movs	r3, #0
 8001228:	f362 0317 	bfi	r3, r2, #0, #24
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fce7 	bl	8001c00 <engine_move_piece>
                    break;
 8001232:	e007      	b.n	8001244 <movement_fsm+0x174>
            for(int i = 0; i < total_valid_moves; i++){
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	3301      	adds	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <movement_fsm+0x1c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbc4      	blt.n	80011ce <movement_fsm+0xfe>
            if(!captured_piece_is_valid){
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <movement_fsm+0x1bc>)
 800124c:	2203      	movs	r2, #3
 800124e:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001250:	2002      	movs	r0, #2
 8001252:	f001 fc37 	bl	8002ac4 <lighting_set_state>
        break;
 8001256:	e011      	b.n	800127c <movement_fsm+0x1ac>
        board_ok = is_board_ok();
 8001258:	f7ff feb6 	bl	8000fc8 <is_board_ok>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
        if(board_ok){
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00c      	beq.n	8001280 <movement_fsm+0x1b0>
            movement_state = WAIT_STATE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <movement_fsm+0x1bc>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 800126c:	2000      	movs	r0, #0
 800126e:	f001 fc29 	bl	8002ac4 <lighting_set_state>
        break;
 8001272:	e005      	b.n	8001280 <movement_fsm+0x1b0>
        break;
 8001274:	bf00      	nop
 8001276:	e004      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <movement_fsm+0x1b2>
        break;
 8001280:	bf00      	nop
    }
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004d0 	.word	0x200004d0
 8001290:	200004d1 	.word	0x200004d1
 8001294:	200004d8 	.word	0x200004d8
 8001298:	200004d4 	.word	0x200004d4

0800129c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x54>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_MspInit+0x54>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x54>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x54>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_MspInit+0x54>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_MspInit+0x54>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	f06f 0001 	mvn.w	r0, #1
 80012e2:	f001 fed7 	bl	8003094 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_I2C_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12c      	bne.n	8001370 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_I2C_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001344:	2304      	movs	r3, #4
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <HAL_I2C_MspInit+0x8c>)
 8001350:	f002 fa5c 	bl	800380c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_I2C_MspInit+0x88>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_I2C_MspInit+0x88>)
 800135e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40005400 	.word	0x40005400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400

08001384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <HAL_TIM_PWM_MspInit+0xc0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d151      	bne.n	800143a <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_TIM_PWM_MspInit+0xc4>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_TIM_PWM_MspInit+0xcc>)
 80013b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 80013f8:	f001 fe76 	bl	80030e8 <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001402:	f7ff fd62 	bl	8000eca <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_TIM_PWM_MspInit+0xc8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	201a      	movs	r0, #26
 8001430:	f001 fe30 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001434:	201a      	movs	r0, #26
 8001436:	f001 fe49 	bl	80030cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800
 800144c:	2000044c 	.word	0x2000044c
 8001450:	40026470 	.word	0x40026470

08001454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d11e      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_TIM_MspPostInit+0x70>)
 80014b0:	f002 f9ac 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_InitTick+0xe8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_InitTick+0xe8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_InitTick+0xe8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f4:	f107 0210 	add.w	r2, r7, #16
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fc0a 	bl	8004d18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800150e:	f003 fbef 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8001512:	6378      	str	r0, [r7, #52]	; 0x34
 8001514:	e004      	b.n	8001520 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001516:	f003 fbeb 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 800151a:	4603      	mov	r3, r0
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_InitTick+0xec>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	3b01      	subs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_InitTick+0xf0>)
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_InitTick+0xf0>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_InitTick+0xf0>)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_InitTick+0xf0>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_InitTick+0xf0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_InitTick+0xf0>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_InitTick+0xf0>)
 8001558:	f003 fc10 	bl	8004d7c <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11b      	bne.n	80015a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <HAL_InitTick+0xf0>)
 800156c:	f003 fc60 	bl	8004e30 <HAL_TIM_Base_Start_IT>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157a:	2b00      	cmp	r3, #0
 800157c:	d111      	bne.n	80015a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800157e:	201c      	movs	r0, #28
 8001580:	f001 fda4 	bl	80030cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d808      	bhi.n	800159c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800158a:	2200      	movs	r2, #0
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	201c      	movs	r0, #28
 8001590:	f001 fd80 	bl	8003094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_InitTick+0xf4>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e002      	b.n	80015a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3738      	adds	r7, #56	; 0x38
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	200007d8 	.word	0x200007d8
 80015bc:	20000094 	.word	0x20000094

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80015f2:	f003 ff45 	bl	8005480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000404 	.word	0x20000404

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f003 ff3b 	bl	8005480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200007d8 	.word	0x200007d8

08001614 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA2_Stream4_IRQHandler+0x10>)
 800161a:	f001 fe8d 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000044c 	.word	0x2000044c

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <t_LCD>:

extern TIM_HandleTypeDef htim1;

void tareas_error_handler(uint8_t);

void t_LCD(void*) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <t_LCD+0x6c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <t_LCD+0x16>
		tareas_error_handler(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f000 f92b 	bl	80018b8 <tareas_error_handler>
	}

	lcd_init();
 8001662:	f7fe ff3b 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <t_LCD+0x6c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	f04f 32ff 	mov.w	r2, #4294967295
 8001672:	4618      	mov	r0, r3
 8001674:	f004 ffcc 	bl	8006610 <xQueueReceive>
		switch (msg.type) {
 8001678:	7a3b      	ldrb	r3, [r7, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d014      	beq.n	80016a8 <t_LCD+0x5c>
 800167e:	2b02      	cmp	r3, #2
 8001680:	dcf1      	bgt.n	8001666 <t_LCD+0x1a>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <t_LCD+0x40>
 8001686:	2b01      	cmp	r3, #1
 8001688:	d009      	beq.n	800169e <t_LCD+0x52>
 800168a:	e014      	b.n	80016b6 <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 800168c:	7a7b      	ldrb	r3, [r7, #9]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff62 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fc96 	bl	8006fc8 <vTaskDelay>
			break;
 800169c:	e00b      	b.n	80016b6 <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 800169e:	7a7b      	ldrb	r3, [r7, #9]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff89 	bl	80005b8 <lcd_send_data>
			break;
 80016a6:	e006      	b.n	80016b6 <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	3301      	adds	r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ffb2 	bl	8000618 <lcd_send_string>
			break;
 80016b4:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80016b6:	e7d6      	b.n	8001666 <t_LCD+0x1a>
 80016b8:	200004b0 	.word	0x200004b0

080016bc <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	2202      	movs	r2, #2
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f856 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2202      	movs	r2, #2
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f84f 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2202      	movs	r2, #2
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f848 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 80016ee:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <t_Botones+0x13c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <t_Botones+0x40>
		tareas_error_handler(4);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f000 f8de 	bl	80018b8 <tareas_error_handler>
	}

	uint8_t msg = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	483e      	ldr	r0, [pc, #248]	; (80017fc <t_Botones+0x140>)
 8001704:	f002 fa06 	bl	8003b14 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f85a 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	4837      	ldr	r0, [pc, #220]	; (80017fc <t_Botones+0x140>)
 800171e:	f002 f9f9 	bl	8003b14 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f84d 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4831      	ldr	r0, [pc, #196]	; (80017fc <t_Botones+0x140>)
 8001738:	f002 f9ec 	bl	8003b14 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f840 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) {
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f8bf 	bl	80008d4 <debounce_flank>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d012      	beq.n	8001782 <t_Botones+0xc6>
			msg = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <t_Botones+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f93f 	bl	80069e8 <uxQueueMessagesWaiting>
 800176a:	4603      	mov	r3, r0
 800176c:	2b13      	cmp	r3, #19
 800176e:	d808      	bhi.n	8001782 <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <t_Botones+0x13c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	f107 010f 	add.w	r1, r7, #15
 8001778:	2300      	movs	r3, #0
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	f004 fe49 	bl	8006414 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) {
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f8a4 	bl	80008d4 <debounce_flank>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <t_Botones+0xfc>
			msg = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <t_Botones+0x13c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 f924 	bl	80069e8 <uxQueueMessagesWaiting>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b13      	cmp	r3, #19
 80017a4:	d808      	bhi.n	80017b8 <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <t_Botones+0x13c>)
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f107 010f 	add.w	r1, r7, #15
 80017ae:	2300      	movs	r3, #0
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	f004 fe2e 	bl	8006414 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) {
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f889 	bl	80008d4 <debounce_flank>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <t_Botones+0x132>
			msg = 3;
 80017c8:	2303      	movs	r3, #3
 80017ca:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <t_Botones+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f909 	bl	80069e8 <uxQueueMessagesWaiting>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b13      	cmp	r3, #19
 80017da:	d808      	bhi.n	80017ee <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <t_Botones+0x13c>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	f107 010f 	add.w	r1, r7, #15
 80017e4:	2300      	movs	r3, #0
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	f004 fe13 	bl	8006414 <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 80017ee:	200a      	movs	r0, #10
 80017f0:	f005 fbea 	bl	8006fc8 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 80017f4:	e784      	b.n	8001700 <t_Botones+0x44>
 80017f6:	bf00      	nop
 80017f8:	200004b4 	.word	0x200004b4
 80017fc:	40020800 	.word	0x40020800

08001800 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <t_userLoop+0x4c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <t_userLoop+0x16>
		tareas_error_handler(2);
 8001810:	2002      	movs	r0, #2
 8001812:	f000 f851 	bl	80018b8 <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <t_userLoop+0x50>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <t_userLoop+0x24>
		tareas_error_handler(4);
 800181e:	2004      	movs	r0, #4
 8001820:	f000 f84a 	bl	80018b8 <tareas_error_handler>
	}

	user_htim1 = &htim1;
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <t_userLoop+0x54>)
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <t_userLoop+0x58>)
 8001828:	601a      	str	r2, [r3, #0]
	user_init();
 800182a:	f000 f84b 	bl	80018c4 <user_init>

	ws2812_init();
 800182e:	f000 ff81 	bl	8002734 <ws2812_init>

	while (1) {
		user_loop();
 8001832:	f000 f97f 	bl	8001b34 <user_loop>
		xSemaphoreGive(ws2812_sem);
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <t_userLoop+0x4c>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	f004 fde8 	bl	8006414 <xQueueGenericSend>
		//ws2812_update_leds_from_data(user_htim1);
		vTaskDelay(33); //30 fps aprox
 8001844:	2021      	movs	r0, #33	; 0x21
 8001846:	f005 fbbf 	bl	8006fc8 <vTaskDelay>
		user_loop();
 800184a:	e7f2      	b.n	8001832 <t_userLoop+0x32>
 800184c:	200004b8 	.word	0x200004b8
 8001850:	200004b4 	.word	0x200004b4
 8001854:	20000820 	.word	0x20000820
 8001858:	20000404 	.word	0x20000404

0800185c <t_WS2812>:
	}
}

void t_WS2812(void*) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <t_WS2812+0x50>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <t_WS2812+0x16>
		tareas_error_handler(2);
 800186c:	2002      	movs	r0, #2
 800186e:	f000 f823 	bl	80018b8 <tareas_error_handler>
	}

	ws2812_init();
 8001872:	f000 ff5f 	bl	8002734 <ws2812_init>

	while (1) {

		if (xSemaphoreTake(ws2812_sem,portMAX_DELAY) != pdTRUE) {
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <t_WS2812+0x50>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f04f 31ff 	mov.w	r1, #4294967295
 800187e:	4618      	mov	r0, r3
 8001880:	f004 ffa6 	bl	80067d0 <xQueueSemaphoreTake>
 8001884:	4603      	mov	r3, r0
 8001886:	2b01      	cmp	r3, #1
 8001888:	d002      	beq.n	8001890 <t_WS2812+0x34>
			tareas_error_handler(3);
 800188a:	2003      	movs	r0, #3
 800188c:	f000 f814 	bl	80018b8 <tareas_error_handler>
		}

		ws2812_update_leds_from_data(user_htim1);
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <t_WS2812+0x54>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 ffef 	bl	8002878 <ws2812_update_leds_from_data>

		while (!ws2812_finished_dma) {
 800189a:	e002      	b.n	80018a2 <t_WS2812+0x46>
			vTaskDelay(5);
 800189c:	2005      	movs	r0, #5
 800189e:	f005 fb93 	bl	8006fc8 <vTaskDelay>
		while (!ws2812_finished_dma) {
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <t_WS2812+0x58>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f8      	beq.n	800189c <t_WS2812+0x40>
		if (xSemaphoreTake(ws2812_sem,portMAX_DELAY) != pdTRUE) {
 80018aa:	e7e4      	b.n	8001876 <t_WS2812+0x1a>
 80018ac:	200004b8 	.word	0x200004b8
 80018b0:	20000820 	.word	0x20000820
 80018b4:	200016a0 	.word	0x200016a0

080018b8 <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(uint8_t error) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	while (1) {
		UNUSED(error);
 80018c2:	e7fe      	b.n	80018c2 <tareas_error_handler+0xa>

080018c4 <user_init>:
#include "characterLCD.h"

TIM_HandleTypeDef *user_htim1;
extern xQueueHandle buttons_queue;

void user_init() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <user_init+0x18>)
 80018ca:	f7ff f833 	bl	8000934 <game_set_sensor_reader>

	game_set_led_output_array(ws2812_color_data);
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <user_init+0x1c>)
 80018d0:	f7ff f844 	bl	800095c <game_set_led_output_array>

	game_reset();
 80018d4:	f7ff f855 	bl	8000982 <game_reset>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08002bcd 	.word	0x08002bcd
 80018e0:	200015a0 	.word	0x200015a0

080018e4 <get_promotion>:

piece_t get_promotion() {
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 BISHOP,
	 KNIGHT,
	 PAWN,
	 */

	xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <get_promotion+0x238>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fcbf 	bl	8006290 <xQueueGenericReset>

	while (1) {
		msg = lcd_msg_clear();
 8001912:	463b      	mov	r3, r7
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fecc 	bl	80006b2 <lcd_msg_clear>
 800191a:	f107 041c 	add.w	r4, r7, #28
 800191e:	463d      	mov	r5, r7
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001924:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001928:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 800192c:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <get_promotion+0x238>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	f107 011c 	add.w	r1, r7, #28
 8001934:	2300      	movs	r3, #0
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	f004 fd6b 	bl	8006414 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 800193e:	463b      	mov	r3, r7
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fed8 	bl	80006f6 <lcd_msg_first_line>
 8001946:	f107 041c 	add.w	r4, r7, #28
 800194a:	463d      	mov	r5, r7
 800194c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001950:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001954:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <get_promotion+0x238>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f107 011c 	add.w	r1, r7, #28
 8001960:	2300      	movs	r3, #0
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	f004 fd55 	bl	8006414 <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 800196a:	463b      	mov	r3, r7
 800196c:	496c      	ldr	r1, [pc, #432]	; (8001b20 <get_promotion+0x23c>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe67 	bl	8000642 <lcd_msg_from_string>
 8001974:	f107 041c 	add.w	r4, r7, #28
 8001978:	463d      	mov	r5, r7
 800197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001982:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <get_promotion+0x238>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f107 011c 	add.w	r1, r7, #28
 800198e:	2300      	movs	r3, #0
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	f004 fd3e 	bl	8006414 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001998:	463b      	mov	r3, r7
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fecd 	bl	800073a <lcd_msg_second_line>
 80019a0:	f107 041c 	add.w	r4, r7, #28
 80019a4:	463d      	mov	r5, r7
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019ae:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <get_promotion+0x238>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f107 011c 	add.w	r1, r7, #28
 80019ba:	2300      	movs	r3, #0
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	f004 fd28 	bl	8006414 <xQueueGenericSend>
		switch (piece) {
 80019c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019c8:	3b01      	subs	r3, #1
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d86a      	bhi.n	8001aa4 <get_promotion+0x1c0>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <get_promotion+0xf0>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	08001a15 	.word	0x08001a15
 80019dc:	08001a75 	.word	0x08001a75
 80019e0:	08001a45 	.word	0x08001a45
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 80019e4:	463b      	mov	r3, r7
 80019e6:	494f      	ldr	r1, [pc, #316]	; (8001b24 <get_promotion+0x240>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fe2a 	bl	8000642 <lcd_msg_from_string>
 80019ee:	f107 041c 	add.w	r4, r7, #28
 80019f2:	463d      	mov	r5, r7
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019fc:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <get_promotion+0x238>)
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	f107 011c 	add.w	r1, r7, #28
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	f004 fd01 	bl	8006414 <xQueueGenericSend>
			break;
 8001a12:	e047      	b.n	8001aa4 <get_promotion+0x1c0>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 8001a14:	463b      	mov	r3, r7
 8001a16:	4944      	ldr	r1, [pc, #272]	; (8001b28 <get_promotion+0x244>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fe12 	bl	8000642 <lcd_msg_from_string>
 8001a1e:	f107 041c 	add.w	r4, r7, #28
 8001a22:	463d      	mov	r5, r7
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a2c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <get_promotion+0x238>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	f107 011c 	add.w	r1, r7, #28
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3e:	f004 fce9 	bl	8006414 <xQueueGenericSend>
			break;
 8001a42:	e02f      	b.n	8001aa4 <get_promotion+0x1c0>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8001a44:	463b      	mov	r3, r7
 8001a46:	4939      	ldr	r1, [pc, #228]	; (8001b2c <get_promotion+0x248>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fdfa 	bl	8000642 <lcd_msg_from_string>
 8001a4e:	f107 041c 	add.w	r4, r7, #28
 8001a52:	463d      	mov	r5, r7
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a5c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <get_promotion+0x238>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f107 011c 	add.w	r1, r7, #28
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	f004 fcd1 	bl	8006414 <xQueueGenericSend>
			break;
 8001a72:	e017      	b.n	8001aa4 <get_promotion+0x1c0>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8001a74:	463b      	mov	r3, r7
 8001a76:	492e      	ldr	r1, [pc, #184]	; (8001b30 <get_promotion+0x24c>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fde2 	bl	8000642 <lcd_msg_from_string>
 8001a7e:	f107 041c 	add.w	r4, r7, #28
 8001a82:	463d      	mov	r5, r7
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a8c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <get_promotion+0x238>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f107 011c 	add.w	r1, r7, #28
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9e:	f004 fcb9 	bl	8006414 <xQueueGenericSend>
			break;
 8001aa2:	bf00      	nop
		default:
		}

		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <get_promotion+0x238>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f107 011b 	add.w	r1, r7, #27
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fdad 	bl	8006610 <xQueueReceive>

		switch (button) {
 8001ab6:	7efb      	ldrb	r3, [r7, #27]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d014      	beq.n	8001ae6 <get_promotion+0x202>
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	dc22      	bgt.n	8001b06 <get_promotion+0x222>
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d01f      	beq.n	8001b04 <get_promotion+0x220>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d11e      	bne.n	8001b06 <get_promotion+0x222>
		case 1: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8001ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001acc:	3301      	adds	r3, #1
 8001ace:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 8001ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d902      	bls.n	8001ae0 <get_promotion+0x1fc>
				piece = 1; // Salteo el rey
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	76fb      	strb	r3, [r7, #27]
			break;
 8001ae4:	e00f      	b.n	8001b06 <get_promotion+0x222>
		case 3: // Cambio de pieza "descendentemente"
			piece--;
 8001ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 8001af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <get_promotion+0x21a>
				piece = 4; // Salteon el peon
 8001af8:	2304      	movs	r3, #4
 8001afa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	76fb      	strb	r3, [r7, #27]
			break;
 8001b02:	e000      	b.n	8001b06 <get_promotion+0x222>
			break;
 8001b04:	bf00      	nop
		}

		if (button)
 8001b06:	7efb      	ldrb	r3, [r7, #27]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <get_promotion+0x22a>
		msg = lcd_msg_clear();
 8001b0c:	e701      	b.n	8001912 <get_promotion+0x2e>
			break;
 8001b0e:	bf00      	nop
	}

	return piece;
 8001b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	200004b4 	.word	0x200004b4
 8001b20:	080086cc 	.word	0x080086cc
 8001b24:	080086dc 	.word	0x080086dc
 8001b28:	080086e8 	.word	0x080086e8
 8001b2c:	080086f4 	.word	0x080086f4
 8001b30:	08008700 	.word	0x08008700

08001b34 <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	game_fsm();
 8001b38:	f7fe ff1b 	bl	8000972 <game_fsm>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e00d      	b.n	8001b6a <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	3380      	adds	r3, #128	; 0x80
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2206      	movs	r2, #6
 8001b62:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b6e:	ddee      	ble.n	8001b4e <clear_game_state+0xe>
    }
    return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	4608      	mov	r0, r1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	70fb      	strb	r3, [r7, #3]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70bb      	strb	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	78f9      	ldrb	r1, [r7, #3]
 8001b9e:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	2106      	movs	r1, #6
 8001bcc:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8001bec:	4902      	ldr	r1, [pc, #8]	; (8001bf8 <engine_reset+0x10>)
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <engine_reset+0x14>)
 8001bf0:	f000 f838 	bl	8001c64 <load_fen>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0800870c 	.word	0x0800870c
 8001bfc:	20000824 	.word	0x20000824

08001c00 <engine_move_piece>:

char engine_move_piece(move_t move){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    return make_move(&game_state, move, 1);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <engine_move_piece+0x20>)
 8001c0e:	f000 f9d7 	bl	8001fc0 <make_move>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b2db      	uxtb	r3, r3
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000824 	.word	0x20000824

08001c24 <engine_list_moves>:

int engine_list_moves(move_t * moves){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    return generate_moves(&game_state, moves);
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <engine_list_moves+0x1c>)
 8001c30:	f000 fad0 	bl	80021d4 <generate_moves>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000824 	.word	0x20000824

08001c44 <engine_get_piece>:

char engine_get_piece(uint8_t square){
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
    return game_state.pieces[square];
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <engine_get_piece+0x1c>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000824 	.word	0x20000824

08001c64 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff66 	bl	8001b40 <clear_game_state>

    char * f = (char *)fen;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3b2f      	subs	r3, #47	; 0x2f
 8001c86:	2b43      	cmp	r3, #67	; 0x43
 8001c88:	f200 8166 	bhi.w	8001f58 <load_fen+0x2f4>
 8001c8c:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <load_fen+0x30>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001f0d 	.word	0x08001f0d
 8001c98:	08001f59 	.word	0x08001f59
 8001c9c:	08001f19 	.word	0x08001f19
 8001ca0:	08001f21 	.word	0x08001f21
 8001ca4:	08001f29 	.word	0x08001f29
 8001ca8:	08001f31 	.word	0x08001f31
 8001cac:	08001f39 	.word	0x08001f39
 8001cb0:	08001f41 	.word	0x08001f41
 8001cb4:	08001f49 	.word	0x08001f49
 8001cb8:	08001f51 	.word	0x08001f51
 8001cbc:	08001f59 	.word	0x08001f59
 8001cc0:	08001f59 	.word	0x08001f59
 8001cc4:	08001f59 	.word	0x08001f59
 8001cc8:	08001f59 	.word	0x08001f59
 8001ccc:	08001f59 	.word	0x08001f59
 8001cd0:	08001f59 	.word	0x08001f59
 8001cd4:	08001f59 	.word	0x08001f59
 8001cd8:	08001f59 	.word	0x08001f59
 8001cdc:	08001f59 	.word	0x08001f59
 8001ce0:	08001dff 	.word	0x08001dff
 8001ce4:	08001f59 	.word	0x08001f59
 8001ce8:	08001f59 	.word	0x08001f59
 8001cec:	08001f59 	.word	0x08001f59
 8001cf0:	08001f59 	.word	0x08001f59
 8001cf4:	08001f59 	.word	0x08001f59
 8001cf8:	08001f59 	.word	0x08001f59
 8001cfc:	08001f59 	.word	0x08001f59
 8001d00:	08001f59 	.word	0x08001f59
 8001d04:	08001da5 	.word	0x08001da5
 8001d08:	08001f59 	.word	0x08001f59
 8001d0c:	08001f59 	.word	0x08001f59
 8001d10:	08001e1d 	.word	0x08001e1d
 8001d14:	08001f59 	.word	0x08001f59
 8001d18:	08001e3b 	.word	0x08001e3b
 8001d1c:	08001dc3 	.word	0x08001dc3
 8001d20:	08001de1 	.word	0x08001de1
 8001d24:	08001f59 	.word	0x08001f59
 8001d28:	08001f59 	.word	0x08001f59
 8001d2c:	08001f59 	.word	0x08001f59
 8001d30:	08001f59 	.word	0x08001f59
 8001d34:	08001f59 	.word	0x08001f59
 8001d38:	08001f59 	.word	0x08001f59
 8001d3c:	08001f59 	.word	0x08001f59
 8001d40:	08001f59 	.word	0x08001f59
 8001d44:	08001f59 	.word	0x08001f59
 8001d48:	08001f59 	.word	0x08001f59
 8001d4c:	08001f59 	.word	0x08001f59
 8001d50:	08001f59 	.word	0x08001f59
 8001d54:	08001f59 	.word	0x08001f59
 8001d58:	08001f59 	.word	0x08001f59
 8001d5c:	08001f59 	.word	0x08001f59
 8001d60:	08001eb3 	.word	0x08001eb3
 8001d64:	08001f59 	.word	0x08001f59
 8001d68:	08001f59 	.word	0x08001f59
 8001d6c:	08001f59 	.word	0x08001f59
 8001d70:	08001f59 	.word	0x08001f59
 8001d74:	08001f59 	.word	0x08001f59
 8001d78:	08001f59 	.word	0x08001f59
 8001d7c:	08001f59 	.word	0x08001f59
 8001d80:	08001f59 	.word	0x08001f59
 8001d84:	08001e59 	.word	0x08001e59
 8001d88:	08001f59 	.word	0x08001f59
 8001d8c:	08001f59 	.word	0x08001f59
 8001d90:	08001ed1 	.word	0x08001ed1
 8001d94:	08001f59 	.word	0x08001f59
 8001d98:	08001eef 	.word	0x08001eef
 8001d9c:	08001e77 	.word	0x08001e77
 8001da0:	08001e95 	.word	0x08001e95
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fee2 	bl	8001b7e <place_piece>
            col++;
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	72fb      	strb	r3, [r7, #11]
            break;
 8001dc0:	e0ca      	b.n	8001f58 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8001dc2:	7abb      	ldrb	r3, [r7, #10]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fed3 	bl	8001b7e <place_piece>
            col++;
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	72fb      	strb	r3, [r7, #11]
            break;
 8001dde:	e0bb      	b.n	8001f58 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8001de0:	7abb      	ldrb	r3, [r7, #10]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	2102      	movs	r1, #2
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fec4 	bl	8001b7e <place_piece>
            col++;
 8001df6:	7afb      	ldrb	r3, [r7, #11]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	72fb      	strb	r3, [r7, #11]
            break;
 8001dfc:	e0ac      	b.n	8001f58 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 8001dfe:	7abb      	ldrb	r3, [r7, #10]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	4413      	add	r3, r2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff feb5 	bl	8001b7e <place_piece>
            col++;
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	3301      	adds	r3, #1
 8001e18:	72fb      	strb	r3, [r7, #11]
            break;
 8001e1a:	e09d      	b.n	8001f58 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8001e1c:	7abb      	ldrb	r3, [r7, #10]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	4413      	add	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fea6 	bl	8001b7e <place_piece>
            col++;
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	3301      	adds	r3, #1
 8001e36:	72fb      	strb	r3, [r7, #11]
            break;
 8001e38:	e08e      	b.n	8001f58 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 8001e3a:	7abb      	ldrb	r3, [r7, #10]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe97 	bl	8001b7e <place_piece>
            col++;
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	3301      	adds	r3, #1
 8001e54:	72fb      	strb	r3, [r7, #11]
            break;
 8001e56:	e07f      	b.n	8001f58 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8001e58:	7abb      	ldrb	r3, [r7, #10]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	4413      	add	r3, r2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fe88 	bl	8001b7e <place_piece>
            col++;
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	3301      	adds	r3, #1
 8001e72:	72fb      	strb	r3, [r7, #11]
            break;
 8001e74:	e070      	b.n	8001f58 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 8001e76:	7abb      	ldrb	r3, [r7, #10]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	2101      	movs	r1, #1
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fe79 	bl	8001b7e <place_piece>
            col++;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	72fb      	strb	r3, [r7, #11]
            break;
 8001e92:	e061      	b.n	8001f58 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8001e94:	7abb      	ldrb	r3, [r7, #10]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fe6a 	bl	8001b7e <place_piece>
            col++;
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	3301      	adds	r3, #1
 8001eae:	72fb      	strb	r3, [r7, #11]
            break;
 8001eb0:	e052      	b.n	8001f58 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 8001eb2:	7abb      	ldrb	r3, [r7, #10]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe5b 	bl	8001b7e <place_piece>
            col++;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	72fb      	strb	r3, [r7, #11]
            break;
 8001ece:	e043      	b.n	8001f58 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8001ed0:	7abb      	ldrb	r3, [r7, #10]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2201      	movs	r2, #1
 8001ede:	2104      	movs	r1, #4
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe4c 	bl	8001b7e <place_piece>
            col++;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	72fb      	strb	r3, [r7, #11]
            break;
 8001eec:	e034      	b.n	8001f58 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 8001eee:	7abb      	ldrb	r3, [r7, #10]
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2201      	movs	r2, #1
 8001efc:	2105      	movs	r1, #5
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe3d 	bl	8001b7e <place_piece>
            col++;
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	3301      	adds	r3, #1
 8001f08:	72fb      	strb	r3, [r7, #11]
            break;
 8001f0a:	e025      	b.n	8001f58 <load_fen+0x2f4>
        case '/':
            row--;
 8001f0c:	7abb      	ldrb	r3, [r7, #10]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	72bb      	strb	r3, [r7, #10]
            col=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	72fb      	strb	r3, [r7, #11]
            break;
 8001f16:	e01f      	b.n	8001f58 <load_fen+0x2f4>
        case '1':
            col+=1;
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	72fb      	strb	r3, [r7, #11]
            break;
 8001f1e:	e01b      	b.n	8001f58 <load_fen+0x2f4>
        case '2':
            col+=2;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	3302      	adds	r3, #2
 8001f24:	72fb      	strb	r3, [r7, #11]
            break;
 8001f26:	e017      	b.n	8001f58 <load_fen+0x2f4>
        case '3':
            col+=3;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	72fb      	strb	r3, [r7, #11]
            break;
 8001f2e:	e013      	b.n	8001f58 <load_fen+0x2f4>
        case '4':
            col+=4;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	3304      	adds	r3, #4
 8001f34:	72fb      	strb	r3, [r7, #11]
            break;
 8001f36:	e00f      	b.n	8001f58 <load_fen+0x2f4>
        case '5':
            col+=5;
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	3305      	adds	r3, #5
 8001f3c:	72fb      	strb	r3, [r7, #11]
            break;
 8001f3e:	e00b      	b.n	8001f58 <load_fen+0x2f4>
        case '6':
            col+=6;
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	3306      	adds	r3, #6
 8001f44:	72fb      	strb	r3, [r7, #11]
            break;
 8001f46:	e007      	b.n	8001f58 <load_fen+0x2f4>
        case '7':
            col+=7;
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	3307      	adds	r3, #7
 8001f4c:	72fb      	strb	r3, [r7, #11]
            break;
 8001f4e:	e003      	b.n	8001f58 <load_fen+0x2f4>
        case '8':
            col+=8;
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	3308      	adds	r3, #8
 8001f54:	72fb      	strb	r3, [r7, #11]
            break;
 8001f56:	bf00      	nop
        };

        f++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	f47f ae8c 	bne.w	8001c80 <load_fen+0x1c>

    f++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b77      	cmp	r3, #119	; 0x77
 8001f74:	d104      	bne.n	8001f80 <load_fen+0x31c>
        state->side_to_move = WHITE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001f7e:	e003      	b.n	8001f88 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d1f8      	bne.n	8001f8e <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d1f8      	bne.n	8001fa2 <load_fen+0x33e>
    f++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fcc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8001fd0:	6018      	str	r0, [r3, #0]
 8001fd2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fd6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001fda:	6019      	str	r1, [r3, #0]
 8001fdc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fe0:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001fe4:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8001fe6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fea:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ff4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d101      	bne.n	8002002 <make_move+0x42>
        return 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e0da      	b.n	80021b8 <make_move+0x1f8>

    if(safe){
 8002002:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002006:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d04c      	beq.n	80020aa <make_move+0xea>
        uint8_t move_ok = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8002016:	f107 0214 	add.w	r2, r7, #20
 800201a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800201e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002022:	4611      	mov	r1, r2
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	f000 f8d5 	bl	80021d4 <generate_moves>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002036:	e02c      	b.n	8002092 <make_move+0xd2>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8002038:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 800203c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002040:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	440b      	add	r3, r1
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002052:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d115      	bne.n	8002088 <make_move+0xc8>
 800205c:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002060:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002064:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	440b      	add	r3, r1
 8002070:	3301      	adds	r3, #1
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002078:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	429a      	cmp	r2, r3
 8002080:	d102      	bne.n	8002088 <make_move+0xc8>
                move_ok = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        for(uint8_t i = 0; i < nmoves; i++){
 8002088:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 800208c:	3301      	adds	r3, #1
 800208e:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002092:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002096:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 800209a:	429a      	cmp	r2, r3
 800209c:	d3cc      	bcc.n	8002038 <make_move+0x78>
            }
        }
        if(!move_ok){
 800209e:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <make_move+0xea>
            return 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e086      	b.n	80021b8 <make_move+0x1f8>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 80020aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020ae:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80020b8:	f1c3 0301 	rsb	r3, r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020c2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 80020cc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020d0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020dc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	5c9b      	ldrb	r3, [r3, r2]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d00c      	beq.n	8002102 <make_move+0x142>
        remove_piece(state, move.to);
 80020e8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020ec:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80020f0:	785a      	ldrb	r2, [r3, #1]
 80020f2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80020f6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80020fa:	4611      	mov	r1, r2
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f7ff fd5c 	bl	8001bba <remove_piece>

    if(move.promotion != 0)
 8002102:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002106:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01f      	beq.n	8002150 <make_move+0x190>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 8002110:	f000 f857 	bl	80021c2 <check_promotion>
 8002114:	4603      	mov	r3, r0
 8002116:	461c      	mov	r4, r3
 8002118:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800211c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002128:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002134:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002138:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8002142:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8002146:	4621      	mov	r1, r4
 8002148:	6800      	ldr	r0, [r0, #0]
 800214a:	f7ff fd18 	bl	8001b7e <place_piece>
 800214e:	e025      	b.n	800219c <make_move+0x1dc>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8002150:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002154:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002160:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	5c99      	ldrb	r1, [r3, r2]
 8002168:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800216c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002178:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002184:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002188:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8002192:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8002196:	6800      	ldr	r0, [r0, #0]
 8002198:	f7ff fcf1 	bl	8001b7e <place_piece>
    }

    remove_piece(state, move.from);
 800219c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021a0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021aa:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80021ae:	4611      	mov	r1, r2
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	f7ff fd02 	bl	8001bba <remove_piece>
    return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}

080021c2 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
    return get_promotion();
 80021c6:	f7ff fb8d 	bl	80018e4 <get_promotion>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b2db      	uxtb	r3, r3
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e281      	b.n	80026ec <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 80021f2:	7b7b      	ldrb	r3, [r7, #13]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	f000 8273 	beq.w	80026e0 <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	3380      	adds	r3, #128	; 0x80
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800220a:	429a      	cmp	r2, r3
 800220c:	f040 826a 	bne.w	80026e4 <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	2b05      	cmp	r3, #5
 8002214:	f040 81e2 	bne.w	80025dc <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80ee 	bne.w	8002400 <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	3310      	adds	r3, #16
 8002228:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800222c:	2b00      	cmp	r3, #0
 800222e:	d162      	bne.n	80022f6 <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	3310      	adds	r3, #16
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d15c      	bne.n	80022f6 <generate_moves+0x122>
                        moves[n_moves].from = square;
 800223c:	8afa      	ldrh	r2, [r7, #22]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	8afa      	ldrh	r2, [r7, #22]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	f101 0210 	add.w	r2, r1, #16
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002266:	8afa      	ldrh	r2, [r7, #22]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	2200      	movs	r2, #0
 8002274:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8002276:	8afa      	ldrh	r2, [r7, #22]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b07      	cmp	r3, #7
 800228a:	d107      	bne.n	800229c <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 800228c:	8afa      	ldrh	r2, [r7, #22]
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	2201      	movs	r2, #1
 800229a:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	3301      	adds	r3, #1
 80022a0:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	111b      	asrs	r3, r3, #4
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d125      	bne.n	80022f6 <generate_moves+0x122>
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3320      	adds	r3, #32
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d11f      	bne.n	80022f6 <generate_moves+0x122>
                            moves[n_moves].from = square;
 80022b6:	8afa      	ldrh	r2, [r7, #22]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	b2d9      	uxtb	r1, r3
 80022cc:	8afa      	ldrh	r2, [r7, #22]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	f101 0220 	add.w	r2, r1, #32
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 80022e0:	8afa      	ldrh	r2, [r7, #22]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	2200      	movs	r2, #0
 80022ee:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 80022f0:	8afb      	ldrh	r3, [r7, #22]
 80022f2:	3301      	adds	r3, #1
 80022f4:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3311      	adds	r3, #17
 80022fa:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d13a      	bne.n	8002378 <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3311      	adds	r3, #17
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800230e:	2b01      	cmp	r3, #1
 8002310:	d132      	bne.n	8002378 <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 8002312:	8afa      	ldrh	r2, [r7, #22]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	b2d9      	uxtb	r1, r3
 8002328:	8afa      	ldrh	r2, [r7, #22]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f101 0211 	add.w	r2, r1, #17
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800233c:	8afa      	ldrh	r2, [r7, #22]
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	2200      	movs	r2, #0
 800234a:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 800234c:	8afa      	ldrh	r2, [r7, #22]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b07      	cmp	r3, #7
 8002360:	d107      	bne.n	8002372 <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 8002362:	8afa      	ldrh	r2, [r7, #22]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	2201      	movs	r2, #1
 8002370:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8002372:	8afb      	ldrh	r3, [r7, #22]
 8002374:	3301      	adds	r3, #1
 8002376:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	330f      	adds	r3, #15
 800237c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 81b0 	bne.w	80026e6 <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	330f      	adds	r3, #15
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002392:	2b01      	cmp	r3, #1
 8002394:	f040 81a7 	bne.w	80026e6 <generate_moves+0x512>
                        moves[n_moves].from = square;
 8002398:	8afa      	ldrh	r2, [r7, #22]
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	b2d9      	uxtb	r1, r3
 80023ae:	8afa      	ldrh	r2, [r7, #22]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	f101 020f 	add.w	r2, r1, #15
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80023c2:	8afa      	ldrh	r2, [r7, #22]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80023d2:	8afa      	ldrh	r2, [r7, #22]
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b07      	cmp	r3, #7
 80023e6:	d107      	bne.n	80023f8 <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 80023e8:	8afa      	ldrh	r2, [r7, #22]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	2201      	movs	r2, #1
 80023f6:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80023f8:	8afb      	ldrh	r3, [r7, #22]
 80023fa:	3301      	adds	r3, #1
 80023fc:	82fb      	strh	r3, [r7, #22]
 80023fe:	e172      	b.n	80026e6 <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3b10      	subs	r3, #16
 8002404:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002408:	2b00      	cmp	r3, #0
 800240a:	d162      	bne.n	80024d2 <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3b10      	subs	r3, #16
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d15c      	bne.n	80024d2 <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 8002418:	8afa      	ldrh	r2, [r7, #22]
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	8afa      	ldrh	r2, [r7, #22]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	f1a1 0210 	sub.w	r2, r1, #16
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002442:	8afa      	ldrh	r2, [r7, #22]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	2200      	movs	r2, #0
 8002450:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8002452:	8afa      	ldrh	r2, [r7, #22]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 8002468:	8afa      	ldrh	r2, [r7, #22]
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	2201      	movs	r2, #1
 8002476:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8002478:	8afb      	ldrh	r3, [r7, #22]
 800247a:	3301      	adds	r3, #1
 800247c:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	111b      	asrs	r3, r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d125      	bne.n	80024d2 <generate_moves+0x2fe>
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	3b20      	subs	r3, #32
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	2b06      	cmp	r3, #6
 8002490:	d11f      	bne.n	80024d2 <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 8002492:	8afa      	ldrh	r2, [r7, #22]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	8afa      	ldrh	r2, [r7, #22]
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f1a1 0220 	sub.w	r2, r1, #32
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 80024bc:	8afa      	ldrh	r2, [r7, #22]
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 80024cc:	8afb      	ldrh	r3, [r7, #22]
 80024ce:	3301      	adds	r3, #1
 80024d0:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3b0f      	subs	r3, #15
 80024d6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d13a      	bne.n	8002554 <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3b0f      	subs	r3, #15
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d132      	bne.n	8002554 <generate_moves+0x380>
                        moves[n_moves].from = square;
 80024ee:	8afa      	ldrh	r2, [r7, #22]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	b2d9      	uxtb	r1, r3
 8002504:	8afa      	ldrh	r2, [r7, #22]
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f1a1 020f 	sub.w	r2, r1, #15
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002518:	8afa      	ldrh	r2, [r7, #22]
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	4413      	add	r3, r2
 8002524:	2200      	movs	r2, #0
 8002526:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8002528:	8afa      	ldrh	r2, [r7, #22]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4413      	add	r3, r2
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 800253e:	8afa      	ldrh	r2, [r7, #22]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	2201      	movs	r2, #1
 800254c:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 800254e:	8afb      	ldrh	r3, [r7, #22]
 8002550:	3301      	adds	r3, #1
 8002552:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3b11      	subs	r3, #17
 8002558:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 80c2 	bne.w	80026e6 <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	3b11      	subs	r3, #17
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80b9 	bne.w	80026e6 <generate_moves+0x512>
                        moves[n_moves].from = square;
 8002574:	8afa      	ldrh	r2, [r7, #22]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	b2d9      	uxtb	r1, r3
 800258a:	8afa      	ldrh	r2, [r7, #22]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4413      	add	r3, r2
 8002596:	f1a1 0211 	sub.w	r2, r1, #17
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800259e:	8afa      	ldrh	r2, [r7, #22]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80025ae:	8afa      	ldrh	r2, [r7, #22]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 80025c4:	8afa      	ldrh	r2, [r7, #22]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	2201      	movs	r2, #1
 80025d2:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80025d4:	8afb      	ldrh	r3, [r7, #22]
 80025d6:	3301      	adds	r3, #1
 80025d8:	82fb      	strh	r3, [r7, #22]
 80025da:	e084      	b.n	80026e6 <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e076      	b.n	80026d0 <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 80025e2:	7b7a      	ldrb	r2, [r7, #13]
 80025e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e8:	4946      	ldr	r1, [pc, #280]	; (8002704 <generate_moves+0x530>)
 80025ea:	00d2      	lsls	r2, r2, #3
 80025ec:	440a      	add	r2, r1
 80025ee:	4413      	add	r3, r2
 80025f0:	f993 3000 	ldrsb.w	r3, [r3]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 80025fe:	e05a      	b.n	80026b6 <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 8002600:	7bbb      	ldrb	r3, [r7, #14]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d121      	bne.n	800264e <generate_moves+0x47a>
                        moves[n_moves].from = square;
 800260a:	8afa      	ldrh	r2, [r7, #22]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 800261c:	8afa      	ldrh	r2, [r7, #22]
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	7bba      	ldrb	r2, [r7, #14]
 800262a:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800262c:	8afa      	ldrh	r2, [r7, #22]
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	2200      	movs	r2, #0
 800263a:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	3301      	adds	r3, #1
 8002640:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 8002642:	7b7b      	ldrb	r3, [r7, #13]
 8002644:	4a30      	ldr	r2, [pc, #192]	; (8002708 <generate_moves+0x534>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d127      	bne.n	800269c <generate_moves+0x4c8>
                        break;
 800264c:	e03a      	b.n	80026c4 <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 800264e:	7bbb      	ldrb	r3, [r7, #14]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800265e:	429a      	cmp	r2, r3
 8002660:	d02f      	beq.n	80026c2 <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 8002662:	8afa      	ldrh	r2, [r7, #22]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 8002674:	8afa      	ldrh	r2, [r7, #22]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	4413      	add	r3, r2
 8002680:	7bba      	ldrb	r2, [r7, #14]
 8002682:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8002684:	8afa      	ldrh	r2, [r7, #22]
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	2200      	movs	r2, #0
 8002692:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 8002694:	8afb      	ldrh	r3, [r7, #22]
 8002696:	3301      	adds	r3, #1
 8002698:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 800269a:	e012      	b.n	80026c2 <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 800269c:	7b7a      	ldrb	r2, [r7, #13]
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4918      	ldr	r1, [pc, #96]	; (8002704 <generate_moves+0x530>)
 80026a4:	00d2      	lsls	r2, r2, #3
 80026a6:	440a      	add	r2, r1
 80026a8:	4413      	add	r3, r2
 80026aa:	f993 3000 	ldrsb.w	r3, [r3]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	4413      	add	r3, r2
 80026b4:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 80026b6:	7bbb      	ldrb	r3, [r7, #14]
 80026b8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d09f      	beq.n	8002600 <generate_moves+0x42c>
 80026c0:	e000      	b.n	80026c4 <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80026c2:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80026c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d4:	7b7a      	ldrb	r2, [r7, #13]
 80026d6:	490d      	ldr	r1, [pc, #52]	; (800270c <generate_moves+0x538>)
 80026d8:	5c8a      	ldrb	r2, [r1, r2]
 80026da:	4293      	cmp	r3, r2
 80026dc:	db81      	blt.n	80025e2 <generate_moves+0x40e>
 80026de:	e002      	b.n	80026e6 <generate_moves+0x512>
            continue;
 80026e0:	bf00      	nop
 80026e2:	e000      	b.n	80026e6 <generate_moves+0x512>
            continue;
 80026e4:	bf00      	nop
    for(int square = 0; square < 128; square++){
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	3301      	adds	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b7f      	cmp	r3, #127	; 0x7f
 80026f0:	f77f ad7a 	ble.w	80021e8 <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 80026f4:	8afb      	ldrh	r3, [r7, #22]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000004 	.word	0x20000004
 8002708:	20000034 	.word	0x20000034
 800270c:	2000002c 	.word	0x2000002c

08002710 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8002718:	210c      	movs	r1, #12
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f002 fdea 	bl	80052f4 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200016a0 	.word	0x200016a0

08002734 <ws2812_init>:

void ws2812_init(){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	e010      	b.n	8002762 <ws2812_init+0x2e>
		if(i < 60)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b3b      	cmp	r3, #59	; 0x3b
 8002744:	dc05      	bgt.n	8002752 <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 8002746:	4a0d      	ldr	r2, [pc, #52]	; (800277c <ws2812_init+0x48>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2100      	movs	r1, #0
 800274c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002750:	e004      	b.n	800275c <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <ws2812_init+0x48>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	211c      	movs	r1, #28
 8002758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f240 623b 	movw	r2, #1595	; 0x63b
 8002768:	4293      	cmp	r3, r2
 800276a:	dde9      	ble.n	8002740 <ws2812_init+0xc>
	}
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000928 	.word	0x20000928

08002780 <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e065      	b.n	8002858 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e05c      	b.n	800284c <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 800279c:	4933      	ldr	r1, [pc, #204]	; (800286c <ws2812_update_pwm_data+0xec>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	00da      	lsls	r2, r3, #3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 80027b0:	482e      	ldr	r0, [pc, #184]	; (800286c <ws2812_update_pwm_data+0xec>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	00d9      	lsls	r1, r3, #3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	440b      	add	r3, r1
 80027ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80027c4:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 80027c6:	4829      	ldr	r0, [pc, #164]	; (800286c <ws2812_update_pwm_data+0xec>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	00d9      	lsls	r1, r3, #3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	440b      	add	r3, r1
 80027d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027d4:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80027d6:	4313      	orrs	r3, r2
 80027d8:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e02f      	b.n	8002840 <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 80027e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	fa42 f303 	asr.w	r3, r2, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d011      	beq.n	8002818 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <ws2812_update_pwm_data+0xf0>)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4413      	add	r3, r2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <ws2812_update_pwm_data+0xf4>)
 8002810:	214c      	movs	r1, #76	; 0x4c
 8002812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002816:	e010      	b.n	800283a <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <ws2812_update_pwm_data+0xf0>)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <ws2812_update_pwm_data+0xf4>)
 8002834:	211c      	movs	r1, #28
 8002836:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3301      	adds	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b17      	cmp	r3, #23
 8002844:	ddcc      	ble.n	80027e0 <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	3301      	adds	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b07      	cmp	r3, #7
 8002850:	dd9f      	ble.n	8002792 <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b07      	cmp	r3, #7
 800285c:	dd96      	ble.n	800278c <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	200015a0 	.word	0x200015a0
 8002870:	2000003c 	.word	0x2000003c
 8002874:	20000928 	.word	0x20000928

08002878 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 8002880:	f7ff ff7e 	bl	8002780 <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <ws2812_update_leds_from_data+0x28>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 800288a:	f240 633c 	movw	r3, #1596	; 0x63c
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <ws2812_update_leds_from_data+0x2c>)
 8002890:	210c      	movs	r1, #12
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f002 fb7e 	bl	8004f94 <HAL_TIM_PWM_Start_DMA>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200016a0 	.word	0x200016a0
 80028a4:	20000928 	.word	0x20000928

080028a8 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <lighting_set_output+0x1c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200016a4 	.word	0x200016a4

080028c8 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <set_color+0x34>)
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	00d8      	lsls	r0, r3, #3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4403      	add	r3, r0
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	4905      	ldr	r1, [pc, #20]	; (8002900 <set_color+0x38>)
 80028ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	200016a4 	.word	0x200016a4
 8002900:	2000007c 	.word	0x2000007c

08002904 <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	e01a      	b.n	8002946 <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 8002910:	2300      	movs	r3, #0
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	e011      	b.n	800293a <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4053      	eors	r3, r2
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffca 	bl	80028c8 <set_color>
    for (int file = 0; file < 8; file++) {
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b07      	cmp	r3, #7
 800293e:	ddea      	ble.n	8002916 <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b07      	cmp	r3, #7
 800294a:	dde1      	ble.n	8002910 <paint_board+0xc>
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

    total_valid_moves = engine_list_moves(valid_moves);
 8002968:	68b8      	ldr	r0, [r7, #8]
 800296a:	f7ff f95b 	bl	8001c24 <engine_list_moves>
 800296e:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < total_valid_moves; i++){
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e026      	b.n	80029c4 <paint_valid_moves+0x6e>
        if(valid_moves[i].from == square_lifted){
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	429a      	cmp	r2, r3
 8002988:	d119      	bne.n	80029be <paint_valid_moves+0x68>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4413      	add	r3, r2
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	2202      	movs	r2, #2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff ff88 	bl	80028c8 <set_color>
            lifted_piece_valid_moves ++;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3301      	adds	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3301      	adds	r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbd4      	blt.n	8002976 <paint_valid_moves+0x20>
        }
    }
    return lifted_piece_valid_moves;
 80029cc:	697b      	ldr	r3, [r7, #20]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
    char sensor_state[8];
    get_sensors(sensor_state);
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <paint_differences+0xc8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1d3a      	adds	r2, r7, #4
 80029e4:	4610      	mov	r0, r2
 80029e6:	4798      	blx	r3
    char board_ok = 1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]

    for (int rank = 0; rank < 8; rank++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	e04e      	b.n	8002a90 <paint_differences+0xb8>
        for (int file = 0; file < 8; file++) {
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e045      	b.n	8002a84 <paint_differences+0xac>
            if((sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	fa42 f303 	asr.w	r3, r2, r3
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <paint_differences+0x64>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff f90f 	bl	8001c44 <engine_get_piece>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d107      	bne.n	8002a3c <paint_differences+0x64>
                set_color(rank, file, INVALID_ID);
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	6938      	ldr	r0, [r7, #16]
 8002a32:	f7ff ff49 	bl	80028c8 <set_color>
                board_ok = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
 8002a3a:	e020      	b.n	8002a7e <paint_differences+0xa6>
            }
            else if(!(sensor_state[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8002a3c:	1d3a      	adds	r2, r7, #4
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	fa42 f303 	asr.w	r3, r2, r3
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d114      	bne.n	8002a7e <paint_differences+0xa6>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f8ed 	bl	8001c44 <engine_get_piece>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d006      	beq.n	8002a7e <paint_differences+0xa6>
                set_color(rank, file, MISSING_ID);
 8002a70:	2204      	movs	r2, #4
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	6938      	ldr	r0, [r7, #16]
 8002a76:	f7ff ff27 	bl	80028c8 <set_color>
                board_ok = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
        for (int file = 0; file < 8; file++) {
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	ddb6      	ble.n	80029f8 <paint_differences+0x20>
    for (int rank = 0; rank < 8; rank++) {
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	ddad      	ble.n	80029f2 <paint_differences+0x1a>
            }
        }
    }
    return board_ok;
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200004cc 	.word	0x200004cc

08002aa4 <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 8002aae:	2202      	movs	r2, #2
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff08 	bl	80028c8 <set_color>
    return 1;
 8002ab8:	2301      	movs	r3, #1
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <lighting_set_state>:

uint8_t square_lifted_lighting;
move_t * valid_moves_lighting;
int total_valid_moves_lighting;

void lighting_set_state(char state){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <lighting_set_state+0x1c>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	7013      	strb	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	200016a1 	.word	0x200016a1

08002ae4 <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <lighting_piece_lifted_square+0x1c>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	7013      	strb	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	200016a8 	.word	0x200016a8

08002b04 <set_valid_moves>:

void set_valid_moves(move_t * moves, int total_valid_moves){
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 8002b0e:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <set_valid_moves+0x24>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <set_valid_moves+0x28>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	200016ac 	.word	0x200016ac
 8002b2c:	200016b0 	.word	0x200016b0

08002b30 <lighting_refresh>:

void lighting_refresh(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <lighting_refresh+0x8c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d83c      	bhi.n	8002bb6 <lighting_refresh+0x86>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <lighting_refresh+0x14>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b97 	.word	0x08002b97
        case LIGHTING_IDLE_STATE:
            paint_board();
 8002b54:	f7ff fed6 	bl	8002904 <paint_board>
        break;
 8002b58:	e02d      	b.n	8002bb6 <lighting_refresh+0x86>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 8002b5a:	f7ff fed3 	bl	8002904 <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <lighting_refresh+0x90>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <lighting_refresh+0x90>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	2203      	movs	r2, #3
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7ff fea8 	bl	80028c8 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <lighting_refresh+0x90>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <lighting_refresh+0x94>)
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <lighting_refresh+0x98>)
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fee6 	bl	8002956 <paint_valid_moves>
        break;
 8002b8a:	e014      	b.n	8002bb6 <lighting_refresh+0x86>

        case LIGHTING_ERROR_STATE:
            paint_board();
 8002b8c:	f7ff feba 	bl	8002904 <paint_board>
            paint_differences();
 8002b90:	f7ff ff22 	bl	80029d8 <paint_differences>
        break;
 8002b94:	e00f      	b.n	8002bb6 <lighting_refresh+0x86>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 8002b96:	f7ff feb5 	bl	8002904 <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <lighting_refresh+0x90>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <lighting_refresh+0x90>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7ff ff78 	bl	8002aa4 <paint_capture>
        break;
 8002bb4:	bf00      	nop
    }
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200016a1 	.word	0x200016a1
 8002bc0:	200016a8 	.word	0x200016a8
 8002bc4:	200016ac 	.word	0x200016ac
 8002bc8:	200016b0 	.word	0x200016b0

08002bcc <reed_scan_sensors>:

#include "main.h"
#include "util.h"


void reed_scan_sensors(uint8_t data[8]){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  for (int row = 0; row < 8; row++) {
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e128      	b.n	8002e2c <reed_scan_sensors+0x260>
	HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	2101      	movs	r1, #1
 8002bea:	4895      	ldr	r0, [pc, #596]	; (8002e40 <reed_scan_sensors+0x274>)
 8002bec:	f000 ffaa 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2102      	movs	r1, #2
 8002c00:	488f      	ldr	r0, [pc, #572]	; (8002e40 <reed_scan_sensors+0x274>)
 8002c02:	f000 ff9f 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	2101      	movs	r1, #1
 8002c16:	488b      	ldr	r0, [pc, #556]	; (8002e44 <reed_scan_sensors+0x278>)
 8002c18:	f000 ff94 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	4886      	ldr	r0, [pc, #536]	; (8002e48 <reed_scan_sensors+0x27c>)
 8002c2e:	f000 ff89 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	4881      	ldr	r0, [pc, #516]	; (8002e48 <reed_scan_sensors+0x27c>)
 8002c44:	f000 ff7e 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	487a      	ldr	r0, [pc, #488]	; (8002e44 <reed_scan_sensors+0x278>)
 8002c5a:	f000 ff73 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	4874      	ldr	r0, [pc, #464]	; (8002e40 <reed_scan_sensors+0x274>)
 8002c70:	f000 ff68 	bl	8003b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b07      	cmp	r3, #7
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c86:	4870      	ldr	r0, [pc, #448]	; (8002e48 <reed_scan_sensors+0x27c>)
 8002c88:	f000 ff5c 	bl	8003b44 <HAL_GPIO_WritePin>

	for(int i = 0; i < 10; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e003      	b.n	8002c9a <reed_scan_sensors+0xce>
 8002c92:	bf00      	nop
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	ddf8      	ble.n	8002c92 <reed_scan_sensors+0xc6>

    data[row] = 0;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8002caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cae:	4866      	ldr	r0, [pc, #408]	; (8002e48 <reed_scan_sensors+0x27c>)
 8002cb0:	f000 ff30 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	b24b      	sxtb	r3, r1
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b259      	sxtb	r1, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2ca      	uxtb	r2, r1
 8002cda:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8002cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ce0:	4858      	ldr	r0, [pc, #352]	; (8002e44 <reed_scan_sensors+0x278>)
 8002ce2:	f000 ff17 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <reed_scan_sensors+0x124>
 8002cec:	2102      	movs	r1, #2
 8002cee:	e000      	b.n	8002cf2 <reed_scan_sensors+0x126>
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25a      	sxtb	r2, r3
 8002cfc:	b24b      	sxtb	r3, r1
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	b259      	sxtb	r1, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	b2ca      	uxtb	r2, r1
 8002d0a:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	484d      	ldr	r0, [pc, #308]	; (8002e44 <reed_scan_sensors+0x278>)
 8002d10:	f000 ff00 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <reed_scan_sensors+0x152>
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	e000      	b.n	8002d20 <reed_scan_sensors+0x154>
 8002d1e:	2100      	movs	r1, #0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	b24b      	sxtb	r3, r1
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b259      	sxtb	r1, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	b2ca      	uxtb	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	4841      	ldr	r0, [pc, #260]	; (8002e44 <reed_scan_sensors+0x278>)
 8002d3e:	f000 fee9 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <reed_scan_sensors+0x180>
 8002d48:	2108      	movs	r1, #8
 8002d4a:	e000      	b.n	8002d4e <reed_scan_sensors+0x182>
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	b24b      	sxtb	r3, r1
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b259      	sxtb	r1, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	b2ca      	uxtb	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8002d68:	2120      	movs	r1, #32
 8002d6a:	4836      	ldr	r0, [pc, #216]	; (8002e44 <reed_scan_sensors+0x278>)
 8002d6c:	f000 fed2 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <reed_scan_sensors+0x1ae>
 8002d76:	2110      	movs	r1, #16
 8002d78:	e000      	b.n	8002d7c <reed_scan_sensors+0x1b0>
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b25a      	sxtb	r2, r3
 8002d86:	b24b      	sxtb	r3, r1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b259      	sxtb	r1, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	b2ca      	uxtb	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8002d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d9a:	482b      	ldr	r0, [pc, #172]	; (8002e48 <reed_scan_sensors+0x27c>)
 8002d9c:	f000 feba 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <reed_scan_sensors+0x1de>
 8002da6:	2120      	movs	r1, #32
 8002da8:	e000      	b.n	8002dac <reed_scan_sensors+0x1e0>
 8002daa:	2100      	movs	r1, #0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b25a      	sxtb	r2, r3
 8002db6:	b24b      	sxtb	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b259      	sxtb	r1, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b2ca      	uxtb	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8002dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dca:	481e      	ldr	r0, [pc, #120]	; (8002e44 <reed_scan_sensors+0x278>)
 8002dcc:	f000 fea2 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <reed_scan_sensors+0x20e>
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	e000      	b.n	8002ddc <reed_scan_sensors+0x210>
 8002dda:	2100      	movs	r1, #0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	b24b      	sxtb	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b259      	sxtb	r1, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	b2ca      	uxtb	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
	data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8002df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <reed_scan_sensors+0x278>)
 8002dfc:	f000 fe8a 	bl	8003b14 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <reed_scan_sensors+0x23e>
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	e000      	b.n	8002e0c <reed_scan_sensors+0x240>
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25a      	sxtb	r2, r3
 8002e16:	b24b      	sxtb	r3, r1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b259      	sxtb	r1, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
  for (int row = 0; row < 8; row++) {
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b07      	cmp	r3, #7
 8002e30:	f77f aed3 	ble.w	8002bda <reed_scan_sensors+0xe>

  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020000 	.word	0x40020000

08002e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e52:	490e      	ldr	r1, [pc, #56]	; (8002e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e58:	e002      	b.n	8002e60 <LoopCopyDataInit>

08002e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5e:	3304      	adds	r3, #4

08002e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e64:	d3f9      	bcc.n	8002e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e68:	4c0b      	ldr	r4, [pc, #44]	; (8002e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e6c:	e001      	b.n	8002e72 <LoopFillZerobss>

08002e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e70:	3204      	adds	r2, #4

08002e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e74:	d3fb      	bcc.n	8002e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e76:	f7fe fbd7 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e7a:	f005 fb65 	bl	8008548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7e:	f7fd fd87 	bl	8000990 <main>
  bx  lr    
 8002e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e8c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002e90:	08008780 	.word	0x08008780
  ldr r2, =_sbss
 8002e94:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002e98:	2000554c 	.word	0x2000554c

08002e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e9c:	e7fe      	b.n	8002e9c <ADC_IRQHandler>
	...

08002ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <HAL_Init+0x40>)
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_Init+0x40>)
 8002eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_Init+0x40>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f000 f8d8 	bl	800307e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f7fe fafa 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed4:	f7fe f9e2 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000098 	.word	0x20000098
 8002f08:	200016b4 	.word	0x200016b4

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	200016b4 	.word	0x200016b4

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff4c 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a6:	f7ff ff61 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	6978      	ldr	r0, [r7, #20]
 80030b2:	f7ff ffb1 	bl	8003018 <NVIC_EncodePriority>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff80 	bl	8002fc4 <__NVIC_SetPriority>
}
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff54 	bl	8002f88 <__NVIC_EnableIRQ>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff ff0a 	bl	8002f0c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e099      	b.n	8003238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003124:	e00f      	b.n	8003146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003126:	f7ff fef1 	bl	8002f0c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b05      	cmp	r3, #5
 8003132:	d908      	bls.n	8003146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e078      	b.n	8003238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e8      	bne.n	8003126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_DMA_Init+0x158>)
 8003160:	4013      	ands	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4313      	orrs	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d117      	bne.n	800320a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa91 	bl	8003714 <DMA_CheckFifoParam>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003206:	2301      	movs	r3, #1
 8003208:	e016      	b.n	8003238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa48 	bl	80036a8 <DMA_CalcBaseAndBitshift>
 8003218:	4603      	mov	r3, r0
 800321a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	223f      	movs	r2, #63	; 0x3f
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	f010803f 	.word	0xf010803f

08003244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_DMA_Start_IT+0x26>
 8003266:	2302      	movs	r3, #2
 8003268:	e040      	b.n	80032ec <HAL_DMA_Start_IT+0xa8>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d12f      	bne.n	80032de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f9da 	bl	800364c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	223f      	movs	r2, #63	; 0x3f
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0216 	orr.w	r2, r2, #22
 80032b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e005      	b.n	80032ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00c      	b.n	800332c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2205      	movs	r2, #5
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003344:	4b8e      	ldr	r3, [pc, #568]	; (8003580 <HAL_DMA_IRQHandler+0x248>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a8e      	ldr	r2, [pc, #568]	; (8003584 <HAL_DMA_IRQHandler+0x24c>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	2208      	movs	r2, #8
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2208      	movs	r2, #8
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2204      	movs	r2, #4
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2204      	movs	r2, #4
 80033fe:	409a      	lsls	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2210      	movs	r2, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d043      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2210      	movs	r2, #16
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d024      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e01f      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e016      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0208 	bic.w	r2, r2, #8
 8003496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	2220      	movs	r2, #32
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 808f 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8087 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	2220      	movs	r2, #32
 80034d0:	409a      	lsls	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d136      	bne.n	8003550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0216 	bic.w	r2, r2, #22
 80034f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_DMA_IRQHandler+0x1da>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0208 	bic.w	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	223f      	movs	r2, #63	; 0x3f
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	2b00      	cmp	r3, #0
 8003544:	d07e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
        }
        return;
 800354e:	e079      	b.n	8003644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e02c      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000
 8003584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e01e      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0210 	bic.w	r2, r2, #16
 80035b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d032      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2205      	movs	r2, #5
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d307      	bcc.n	8003620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f2      	bne.n	8003604 <HAL_DMA_IRQHandler+0x2cc>
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	e000      	b.n	8003646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003644:	bf00      	nop
    }
  }
}
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d108      	bne.n	800368c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800368a:	e007      	b.n	800369c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3b10      	subs	r3, #16
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <DMA_CalcBaseAndBitshift+0x64>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <DMA_CalcBaseAndBitshift+0x68>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d909      	bls.n	80036ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	659a      	str	r2, [r3, #88]	; 0x58
 80036e8:	e007      	b.n	80036fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	aaaaaaab 	.word	0xaaaaaaab
 8003710:	08008768 	.word	0x08008768

08003714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11f      	bne.n	800376e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d856      	bhi.n	80037e2 <DMA_CheckFifoParam+0xce>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <DMA_CheckFifoParam+0x28>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	0800374d 	.word	0x0800374d
 8003740:	0800375f 	.word	0x0800375f
 8003744:	0800374d 	.word	0x0800374d
 8003748:	080037e3 	.word	0x080037e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d046      	beq.n	80037e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e043      	b.n	80037e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003766:	d140      	bne.n	80037ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e03d      	b.n	80037ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d121      	bne.n	80037bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d837      	bhi.n	80037ee <DMA_CheckFifoParam+0xda>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <DMA_CheckFifoParam+0x70>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	08003795 	.word	0x08003795
 8003788:	0800379b 	.word	0x0800379b
 800378c:	08003795 	.word	0x08003795
 8003790:	080037ad 	.word	0x080037ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e030      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d025      	beq.n	80037f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037aa:	e022      	b.n	80037f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b4:	d11f      	bne.n	80037f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ba:	e01c      	b.n	80037f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d903      	bls.n	80037ca <DMA_CheckFifoParam+0xb6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d003      	beq.n	80037d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c8:	e018      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      break;
 80037ce:	e015      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e00b      	b.n	80037fa <DMA_CheckFifoParam+0xe6>
      break;
 80037e2:	bf00      	nop
 80037e4:	e00a      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e008      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e006      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;   
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
    }
  } 
  
  return status; 
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e159      	b.n	8003adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	f040 8148 	bne.w	8003ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	2b02      	cmp	r3, #2
 800385c:	d130      	bne.n	80038c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 0201 	and.w	r2, r3, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d017      	beq.n	80038fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d123      	bne.n	8003950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	220f      	movs	r2, #15
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	08da      	lsrs	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a2 	beq.w	8003ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <HAL_GPIO_Init+0x2e8>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a56      	ldr	r2, [pc, #344]	; (8003af4 <HAL_GPIO_Init+0x2e8>)
 800399c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b54      	ldr	r3, [pc, #336]	; (8003af4 <HAL_GPIO_Init+0x2e8>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_GPIO_Init+0x2ec>)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a49      	ldr	r2, [pc, #292]	; (8003afc <HAL_GPIO_Init+0x2f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d019      	beq.n	8003a0e <HAL_GPIO_Init+0x202>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a48      	ldr	r2, [pc, #288]	; (8003b00 <HAL_GPIO_Init+0x2f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0x1fe>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a47      	ldr	r2, [pc, #284]	; (8003b04 <HAL_GPIO_Init+0x2f8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00d      	beq.n	8003a06 <HAL_GPIO_Init+0x1fa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a46      	ldr	r2, [pc, #280]	; (8003b08 <HAL_GPIO_Init+0x2fc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <HAL_GPIO_Init+0x1f6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a45      	ldr	r2, [pc, #276]	; (8003b0c <HAL_GPIO_Init+0x300>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_GPIO_Init+0x1f2>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 80039fe:	2307      	movs	r3, #7
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x204>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	; (8003af8 <HAL_GPIO_Init+0x2ec>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a52:	4a2f      	ldr	r2, [pc, #188]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa6:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <HAL_GPIO_Init+0x304>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f aea2 	bls.w	8003828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40013c00 	.word	0x40013c00

08003b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e001      	b.n	8003b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
 8003b50:	4613      	mov	r3, r2
 8003b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b54:	787b      	ldrb	r3, [r7, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b60:	e003      	b.n	8003b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	041a      	lsls	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	619a      	str	r2, [r3, #24]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e12b      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fba8 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bdc:	f001 f888 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8003be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a81      	ldr	r2, [pc, #516]	; (8003dec <HAL_I2C_Init+0x274>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d807      	bhi.n	8003bfc <HAL_I2C_Init+0x84>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a80      	ldr	r2, [pc, #512]	; (8003df0 <HAL_I2C_Init+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf94      	ite	ls
 8003bf4:	2301      	movls	r3, #1
 8003bf6:	2300      	movhi	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e006      	b.n	8003c0a <HAL_I2C_Init+0x92>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	; (8003df4 <HAL_I2C_Init+0x27c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e7      	b.n	8003de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a78      	ldr	r2, [pc, #480]	; (8003df8 <HAL_I2C_Init+0x280>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0c9b      	lsrs	r3, r3, #18
 8003c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a6a      	ldr	r2, [pc, #424]	; (8003dec <HAL_I2C_Init+0x274>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d802      	bhi.n	8003c4c <HAL_I2C_Init+0xd4>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	e009      	b.n	8003c60 <HAL_I2C_Init+0xe8>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	4a69      	ldr	r2, [pc, #420]	; (8003dfc <HAL_I2C_Init+0x284>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	3301      	adds	r3, #1
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	495c      	ldr	r1, [pc, #368]	; (8003dec <HAL_I2C_Init+0x274>)
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	d819      	bhi.n	8003cb4 <HAL_I2C_Init+0x13c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e59      	subs	r1, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c8e:	1c59      	adds	r1, r3, #1
 8003c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c94:	400b      	ands	r3, r1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_I2C_Init+0x138>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e59      	subs	r1, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cae:	e051      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e04f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d111      	bne.n	8003ce0 <HAL_I2C_Init+0x168>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e012      	b.n	8003d06 <HAL_I2C_Init+0x18e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Init+0x196>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10e      	bne.n	8003d34 <HAL_I2C_Init+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e58      	subs	r0, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	440b      	add	r3, r1
 8003d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Init+0x1dc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6911      	ldr	r1, [r2, #16]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	000186a0 	.word	0x000186a0
 8003df0:	001e847f 	.word	0x001e847f
 8003df4:	003d08ff 	.word	0x003d08ff
 8003df8:	431bde83 	.word	0x431bde83
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	4613      	mov	r3, r2
 8003e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e14:	f7ff f87a 	bl	8002f0c <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	f040 80e0 	bne.w	8003fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4970      	ldr	r1, [pc, #448]	; (8003ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f964 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0d3      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2C_Master_Transmit+0x50>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0cc      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d007      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2221      	movs	r2, #33	; 0x21
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2210      	movs	r2, #16
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	893a      	ldrh	r2, [r7, #8]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a50      	ldr	r2, [pc, #320]	; (8003ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eb8:	8979      	ldrh	r1, [r7, #10]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6a3a      	ldr	r2, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f89c 	bl	8003ffc <I2C_MasterRequestWrite>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e08d      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ee4:	e066      	b.n	8003fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	6a39      	ldr	r1, [r7, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f9de 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d107      	bne.n	8003f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06b      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d11b      	bne.n	8003f88 <HAL_I2C_Master_Transmit+0x188>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d017      	beq.n	8003f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f9ce 	bl	800432e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e01a      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d194      	bne.n	8003ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	00100002 	.word	0x00100002
 8003ff8:	ffff0000 	.word	0xffff0000

08003ffc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	460b      	mov	r3, r1
 800400a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d006      	beq.n	8004026 <I2C_MasterRequestWrite+0x2a>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d003      	beq.n	8004026 <I2C_MasterRequestWrite+0x2a>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004024:	d108      	bne.n	8004038 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e00b      	b.n	8004050 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	2b12      	cmp	r3, #18
 800403e:	d107      	bne.n	8004050 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f84f 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d103      	bne.n	8004080 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e035      	b.n	80040f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d108      	bne.n	80040a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e01b      	b.n	80040d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	11db      	asrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f063 030f 	orn	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <I2C_MasterRequestWrite+0xfc>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f875 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e010      	b.n	80040f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <I2C_MasterRequestWrite+0x100>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f865 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	00010008 	.word	0x00010008
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	e025      	b.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fef7 	bl	8002f0c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10d      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	e00c      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0b6      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041bc:	e051      	b.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d123      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e046      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d021      	beq.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fe75 	bl	8002f0c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d116      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e020      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10c      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e00b      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d18d      	bne.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b8:	e02d      	b.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f878 	bl	80043b0 <I2C_IsAcknowledgeFailed>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d021      	beq.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe fe1b 	bl	8002f0c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e007      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d1ca      	bne.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800433a:	e02d      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f837 	bl	80043b0 <I2C_IsAcknowledgeFailed>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e02d      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d021      	beq.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fe fdda 	bl	8002f0c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d1ca      	bne.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d11b      	bne.n	8004400 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f043 0204 	orr.w	r2, r3, #4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e267      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d075      	beq.n	800451a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d00c      	beq.n	8004454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b85      	ldr	r3, [pc, #532]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004452:	d10b      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	4b7e      	ldr	r3, [pc, #504]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d05b      	beq.n	8004518 <HAL_RCC_OscConfig+0x108>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d157      	bne.n	8004518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e242      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d106      	bne.n	8004484 <HAL_RCC_OscConfig+0x74>
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e01d      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b70      	ldr	r3, [pc, #448]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a6f      	ldr	r2, [pc, #444]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b6d      	ldr	r3, [pc, #436]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6c      	ldr	r2, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 80044a8:	4b69      	ldr	r3, [pc, #420]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a68      	ldr	r2, [pc, #416]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a65      	ldr	r2, [pc, #404]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fd20 	bl	8002f0c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe fd1c 	bl	8002f0c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e207      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b5b      	ldr	r3, [pc, #364]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xc0>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe fd0c 	bl	8002f0c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe fd08 	bl	8002f0c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1f3      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b51      	ldr	r3, [pc, #324]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0xe8>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d063      	beq.n	80045ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b44      	ldr	r3, [pc, #272]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1c7      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4937      	ldr	r1, [pc, #220]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e03a      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_RCC_OscConfig+0x244>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fe fcc1 	bl	8002f0c <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe fcbd 	bl	8002f0c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e1a8      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4925      	ldr	r1, [pc, #148]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x244>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fca0 	bl	8002f0c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fc9c 	bl	8002f0c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e187      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x248>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe fc80 	bl	8002f0c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe fc7c 	bl	8002f0c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e167      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_OscConfig+0x240>)
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x200>
 800462e:	e01b      	b.n	8004668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x248>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe fc69 	bl	8002f0c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	e00e      	b.n	800465c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463e:	f7fe fc65 	bl	8002f0c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d907      	bls.n	800465c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e150      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	42470000 	.word	0x42470000
 8004658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ea      	bne.n	800463e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8097 	beq.w	80047a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b81      	ldr	r3, [pc, #516]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b7d      	ldr	r3, [pc, #500]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a7c      	ldr	r2, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b7a      	ldr	r3, [pc, #488]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b77      	ldr	r3, [pc, #476]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d118      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	4b74      	ldr	r3, [pc, #464]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046be:	f7fe fc25 	bl	8002f0c <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7fe fc21 	bl	8002f0c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e10c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x474>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x2ea>
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a63      	ldr	r2, [pc, #396]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x30c>
 8004702:	4b5f      	ldr	r3, [pc, #380]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a5e      	ldr	r2, [pc, #376]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b5c      	ldr	r3, [pc, #368]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a5b      	ldr	r2, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 800471c:	4b58      	ldr	r3, [pc, #352]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a57      	ldr	r2, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b55      	ldr	r3, [pc, #340]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a54      	ldr	r2, [pc, #336]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe fbe6 	bl	8002f0c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe fbe2 	bl	8002f0c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0cb      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475a:	4b49      	ldr	r3, [pc, #292]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ee      	beq.n	8004744 <HAL_RCC_OscConfig+0x334>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004768:	f7fe fbd0 	bl	8002f0c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fe fbcc 	bl	8002f0c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0b5      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ee      	bne.n	8004770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a1 	beq.w	80048f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ae:	4b34      	ldr	r3, [pc, #208]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d05c      	beq.n	8004874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d141      	bne.n	8004846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe fba0 	bl	8002f0c <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fe fb9c 	bl	8002f0c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e087      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fe fb75 	bl	8002f0c <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004826:	f7fe fb71 	bl	8002f0c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e05c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x416>
 8004844:	e054      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_OscConfig+0x478>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe fb5e 	bl	8002f0c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fe fb5a 	bl	8002f0c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e045      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_OscConfig+0x470>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
 8004872:	e03d      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e038      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x4ec>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d028      	beq.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d121      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11a      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0cc      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90c      	bls.n	800493c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b8      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004954:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a58      	ldr	r2, [pc, #352]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800495e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004978:	4b50      	ldr	r3, [pc, #320]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	494d      	ldr	r1, [pc, #308]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d044      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e067      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4934      	ldr	r1, [pc, #208]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fa8c 	bl	8002f0c <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fe fa88 	bl	8002f0c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e04f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d20c      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e032      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4916      	ldr	r1, [pc, #88]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	490e      	ldr	r1, [pc, #56]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a86:	f000 f821 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	490a      	ldr	r1, [pc, #40]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc fd0e 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023c00 	.word	0x40023c00
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08008750 	.word	0x08008750
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	20000094 	.word	0x20000094

08004acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b094      	sub	sp, #80	; 0x50
 8004ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad8:	2300      	movs	r3, #0
 8004ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae4:	4b79      	ldr	r3, [pc, #484]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d00d      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x40>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	f200 80e1 	bhi.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x34>
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afe:	e0db      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b73      	ldr	r3, [pc, #460]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b04:	e0db      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b06:	4b73      	ldr	r3, [pc, #460]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0a:	e0d8      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b16:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d063      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	2200      	movs	r2, #0
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	0159      	lsls	r1, r3, #5
 8004b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b50:	0150      	lsls	r0, r2, #5
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4621      	mov	r1, r4
 8004b58:	1a51      	subs	r1, r2, r1
 8004b5a:	6139      	str	r1, [r7, #16]
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b70:	4659      	mov	r1, fp
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	018a      	lsls	r2, r1, #6
 8004b7e:	4651      	mov	r1, sl
 8004b80:	ebb2 0801 	subs.w	r8, r2, r1
 8004b84:	4659      	mov	r1, fp
 8004b86:	eb63 0901 	sbc.w	r9, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	eb18 0303 	adds.w	r3, r8, r3
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	462b      	mov	r3, r5
 8004bac:	eb49 0303 	adc.w	r3, r9, r3
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	024b      	lsls	r3, r1, #9
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc8:	4621      	mov	r1, r4
 8004bca:	024a      	lsls	r2, r1, #9
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bdc:	f7fb fb00 	bl	80001e0 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	e058      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	f04f 0000 	mov.w	r0, #0
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c16:	0150      	lsls	r0, r2, #5
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c40:	eb63 050b 	sbc.w	r5, r3, fp
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	00eb      	lsls	r3, r5, #3
 8004c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c52:	00e2      	lsls	r2, r4, #3
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	18e3      	adds	r3, r4, r3
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	464b      	mov	r3, r9
 8004c60:	eb45 0303 	adc.w	r3, r5, r3
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c72:	4629      	mov	r1, r5
 8004c74:	028b      	lsls	r3, r1, #10
 8004c76:	4621      	mov	r1, r4
 8004c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	028a      	lsls	r2, r1, #10
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c86:	2200      	movs	r2, #0
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	61fa      	str	r2, [r7, #28]
 8004c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c90:	f7fb faa6 	bl	80001e0 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cb6:	e002      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3750      	adds	r7, #80	; 0x50
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08008760 	.word	0x08008760

08004d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	220f      	movs	r2, #15
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_RCC_GetClockConfig+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0207 	and.w	r2, r3, #7
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40023c00 	.word	0x40023c00

08004d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e041      	b.n	8004e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f839 	bl	8004e1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fe2e 	bl	8005a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d001      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e044      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d018      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x6c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d013      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x6c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00e      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a19      	ldr	r2, [pc, #100]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x6c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_TIM_Base_Start_IT+0xbc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x6c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d010      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e007      	b.n	8004ed0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40014000 	.word	0x40014000

08004ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e041      	b.n	8004f8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fa32 	bl	8001384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fd72 	bl	8005a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e022      	b.n	8005006 <HAL_TIM_PWM_Start_DMA+0x72>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d109      	bne.n	8004fda <HAL_TIM_PWM_Start_DMA+0x46>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e015      	b.n	8005006 <HAL_TIM_PWM_Start_DMA+0x72>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start_DMA+0x60>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e008      	b.n	8005006 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
 800500c:	e15d      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start_DMA+0x94>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e022      	b.n	800506e <HAL_TIM_PWM_Start_DMA+0xda>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d109      	bne.n	8005042 <HAL_TIM_PWM_Start_DMA+0xae>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	e015      	b.n	800506e <HAL_TIM_PWM_Start_DMA+0xda>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d109      	bne.n	800505c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e008      	b.n	800506e <HAL_TIM_PWM_Start_DMA+0xda>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d024      	beq.n	80050bc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start_DMA+0xee>
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e123      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	e016      	b.n	80050c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	e00e      	b.n	80050c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	e006      	b.n	80050c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ba:	e001      	b.n	80050c0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e104      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	f200 80ae 	bhi.w	8005224 <HAL_TIM_PWM_Start_DMA+0x290>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005105 	.word	0x08005105
 80050d4:	08005225 	.word	0x08005225
 80050d8:	08005225 	.word	0x08005225
 80050dc:	08005225 	.word	0x08005225
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	08005225 	.word	0x08005225
 80050e8:	08005225 	.word	0x08005225
 80050ec:	08005225 	.word	0x08005225
 80050f0:	08005195 	.word	0x08005195
 80050f4:	08005225 	.word	0x08005225
 80050f8:	08005225 	.word	0x08005225
 80050fc:	08005225 	.word	0x08005225
 8005100:	080051dd 	.word	0x080051dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4a72      	ldr	r2, [pc, #456]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	4a71      	ldr	r2, [pc, #452]	; (80052d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	4a70      	ldr	r2, [pc, #448]	; (80052dc <HAL_TIM_PWM_Start_DMA+0x348>)
 800511a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3334      	adds	r3, #52	; 0x34
 8005128:	461a      	mov	r2, r3
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	f7fe f88a 	bl	8003244 <HAL_DMA_Start_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0c7      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	60da      	str	r2, [r3, #12]
      break;
 800514a:	e06e      	b.n	800522a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	4a60      	ldr	r2, [pc, #384]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	4a5f      	ldr	r2, [pc, #380]	; (80052d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800515a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	4a5e      	ldr	r2, [pc, #376]	; (80052dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8005162:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3338      	adds	r3, #56	; 0x38
 8005170:	461a      	mov	r2, r3
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	f7fe f866 	bl	8003244 <HAL_DMA_Start_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0a3      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005190:	60da      	str	r2, [r3, #12]
      break;
 8005192:	e04a      	b.n	800522a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4a4e      	ldr	r2, [pc, #312]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	4a4d      	ldr	r2, [pc, #308]	; (80052d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a4c      	ldr	r2, [pc, #304]	; (80052dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	333c      	adds	r3, #60	; 0x3c
 80051b8:	461a      	mov	r2, r3
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	f7fe f842 	bl	8003244 <HAL_DMA_Start_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07f      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d8:	60da      	str	r2, [r3, #12]
      break;
 80051da:	e026      	b.n	800522a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80051e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3340      	adds	r3, #64	; 0x40
 8005200:	461a      	mov	r2, r3
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	f7fe f81e 	bl	8003244 <HAL_DMA_Start_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e05b      	b.n	80052ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005220:	60da      	str	r2, [r3, #12]
      break;
 8005222:	e002      	b.n	800522a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	bf00      	nop
  }

  if (status == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d14b      	bne.n	80052c8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fdfb 	bl	8005e34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d107      	bne.n	8005258 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <HAL_TIM_PWM_Start_DMA+0x300>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d013      	beq.n	8005294 <HAL_TIM_PWM_Start_DMA+0x300>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_TIM_PWM_Start_DMA+0x300>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_TIM_PWM_Start_DMA+0x300>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <HAL_TIM_PWM_Start_DMA+0x358>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIM_PWM_Start_DMA+0x300>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d111      	bne.n	80052b8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d010      	beq.n	80052c8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	e007      	b.n	80052c8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	0800590b 	.word	0x0800590b
 80052d8:	080059b3 	.word	0x080059b3
 80052dc:	08005879 	.word	0x08005879
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d855      	bhi.n	80053b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	080053b5 	.word	0x080053b5
 8005318:	080053b5 	.word	0x080053b5
 800531c:	080053b5 	.word	0x080053b5
 8005320:	08005361 	.word	0x08005361
 8005324:	080053b5 	.word	0x080053b5
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053b5 	.word	0x080053b5
 8005330:	0800537d 	.word	0x0800537d
 8005334:	080053b5 	.word	0x080053b5
 8005338:	080053b5 	.word	0x080053b5
 800533c:	080053b5 	.word	0x080053b5
 8005340:	08005399 	.word	0x08005399
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005352:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	4618      	mov	r0, r3
 800535a:	f7fd ffcb 	bl	80032f4 <HAL_DMA_Abort_IT>
      break;
 800535e:	e02c      	b.n	80053ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd ffbd 	bl	80032f4 <HAL_DMA_Abort_IT>
      break;
 800537a:	e01e      	b.n	80053ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4618      	mov	r0, r3
 8005392:	f7fd ffaf 	bl	80032f4 <HAL_DMA_Abort_IT>
      break;
 8005396:	e010      	b.n	80053ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd ffa1 	bl	80032f4 <HAL_DMA_Abort_IT>
      break;
 80053b2:	e002      	b.n	80053ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d157      	bne.n	8005470 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fd33 	bl	8005e34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2a      	ldr	r2, [pc, #168]	; (800547c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d117      	bne.n	8005408 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f241 1311 	movw	r3, #4369	; 0x1111
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10f      	bne.n	8005408 <HAL_TIM_PWM_Stop_DMA+0x114>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	f240 4344 	movw	r3, #1092	; 0x444
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_PWM_Stop_DMA+0x114>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	f240 4344 	movw	r3, #1092	; 0x444
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d107      	bne.n	8005438 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_TIM_PWM_Stop_DMA+0x154>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005446:	e013      	b.n	8005470 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d104      	bne.n	8005458 <HAL_TIM_PWM_Stop_DMA+0x164>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005456:	e00b      	b.n	8005470 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d104      	bne.n	8005468 <HAL_TIM_PWM_Stop_DMA+0x174>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005466:	e003      	b.n	8005470 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000

08005480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0202 	mvn.w	r2, #2
 80054ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9b0 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9a2 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fd f91d 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0204 	mvn.w	r2, #4
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f986 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f978 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7fd f8f3 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b08      	cmp	r3, #8
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b08      	cmp	r3, #8
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0208 	mvn.w	r2, #8
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2204      	movs	r2, #4
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f95c 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f94e 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fd f8c9 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b10      	cmp	r3, #16
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0210 	mvn.w	r2, #16
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2208      	movs	r2, #8
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f932 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f924 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fd f89f 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10e      	bne.n	8005604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d107      	bne.n	8005604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0201 	mvn.w	r2, #1
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fc54 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d10e      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b80      	cmp	r3, #128	; 0x80
 800561e:	d107      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fcf2 	bl	8006014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d10e      	bne.n	800565c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d107      	bne.n	800565c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8fa 	bl	8005850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d10e      	bne.n	8005688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b20      	cmp	r3, #32
 8005676:	d107      	bne.n	8005688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0220 	mvn.w	r2, #32
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fcbc 	bl	8006000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0ae      	b.n	800580c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	f200 809f 	bhi.w	80057fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	080057fd 	.word	0x080057fd
 80056cc:	080057fd 	.word	0x080057fd
 80056d0:	080057fd 	.word	0x080057fd
 80056d4:	08005739 	.word	0x08005739
 80056d8:	080057fd 	.word	0x080057fd
 80056dc:	080057fd 	.word	0x080057fd
 80056e0:	080057fd 	.word	0x080057fd
 80056e4:	0800577b 	.word	0x0800577b
 80056e8:	080057fd 	.word	0x080057fd
 80056ec:	080057fd 	.word	0x080057fd
 80056f0:	080057fd 	.word	0x080057fd
 80056f4:	080057bb 	.word	0x080057bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fa0c 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      break;
 8005736:	e064      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fa52 	bl	8005be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      break;
 8005778:	e043      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa9d 	bl	8005cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0204 	bic.w	r2, r2, #4
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	e023      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fae7 	bl	8005d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
      break;
 80057fa:	e002      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d107      	bne.n	80058a0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800589e:	e02a      	b.n	80058f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d107      	bne.n	80058ba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2202      	movs	r2, #2
 80058ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	e01d      	b.n	80058f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d107      	bne.n	80058d4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2204      	movs	r2, #4
 80058c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d2:	e010      	b.n	80058f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d107      	bne.n	80058ee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2208      	movs	r2, #8
 80058e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058ec:	e003      	b.n	80058f6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ffb4 	bl	8005864 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	771a      	strb	r2, [r3, #28]
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	d10b      	bne.n	800593a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d136      	bne.n	800599e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	e031      	b.n	800599e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d10b      	bne.n	800595c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2202      	movs	r2, #2
 8005948:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d125      	bne.n	800599e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595a:	e020      	b.n	800599e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d10b      	bne.n	800597e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2204      	movs	r2, #4
 800596a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d114      	bne.n	800599e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597c:	e00f      	b.n	800599e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d10a      	bne.n	800599e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2208      	movs	r2, #8
 800598c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7fc feb6 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d103      	bne.n	80059d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	771a      	strb	r2, [r3, #28]
 80059d0:	e019      	b.n	8005a06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d103      	bne.n	80059e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2202      	movs	r2, #2
 80059e0:	771a      	strb	r2, [r3, #28]
 80059e2:	e010      	b.n	8005a06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d103      	bne.n	80059f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2204      	movs	r2, #4
 80059f2:	771a      	strb	r2, [r3, #28]
 80059f4:	e007      	b.n	8005a06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d102      	bne.n	8005a06 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2208      	movs	r2, #8
 8005a04:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ff18 	bl	800583c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	771a      	strb	r2, [r3, #28]
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a34      	ldr	r2, [pc, #208]	; (8005b00 <TIM_Base_SetConfig+0xe4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00f      	beq.n	8005a54 <TIM_Base_SetConfig+0x38>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3a:	d00b      	beq.n	8005a54 <TIM_Base_SetConfig+0x38>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a31      	ldr	r2, [pc, #196]	; (8005b04 <TIM_Base_SetConfig+0xe8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d007      	beq.n	8005a54 <TIM_Base_SetConfig+0x38>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <TIM_Base_SetConfig+0xec>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0x38>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <TIM_Base_SetConfig+0xf0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d108      	bne.n	8005a66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <TIM_Base_SetConfig+0xe4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d017      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <TIM_Base_SetConfig+0xe8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <TIM_Base_SetConfig+0xec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <TIM_Base_SetConfig+0xf0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <TIM_Base_SetConfig+0xf4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <TIM_Base_SetConfig+0xf8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <TIM_Base_SetConfig+0xfc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <TIM_Base_SetConfig+0xe4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0302 	bic.w	r3, r3, #2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40010000 	.word	0x40010000

08005be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <TIM_OC2_SetConfig+0xd4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <TIM_OC2_SetConfig+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d113      	bne.n	8005c94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000

08005cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <TIM_OC3_SetConfig+0xd0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <TIM_OC3_SetConfig+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40010000 	.word	0x40010000

08005d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <TIM_OC4_SetConfig+0x9c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d109      	bne.n	8005e08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000

08005e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2201      	movs	r2, #1
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	401a      	ands	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e050      	b.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d013      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d10c      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40014000 	.word	0x40014000

08005f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e03d      	b.n	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603a:	2b84      	cmp	r3, #132	; 0x84
 800603c:	d005      	beq.n	800604a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800603e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	3303      	adds	r3, #3
 8006048:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800605c:	f000 ffe8 	bl	8007030 <vTaskStartScheduler>
  
  return osOK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	bd80      	pop	{r7, pc}

08006066 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006068:	b089      	sub	sp, #36	; 0x24
 800606a:	af04      	add	r7, sp, #16
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <osThreadCreate+0x54>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01c      	beq.n	80060ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685c      	ldr	r4, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691e      	ldr	r6, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff ffc8 	bl	8006028 <makeFreeRtosPriority>
 8006098:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a2:	9202      	str	r2, [sp, #8]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	9100      	str	r1, [sp, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	4632      	mov	r2, r6
 80060ac:	4629      	mov	r1, r5
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 fde0 	bl	8006c74 <xTaskCreateStatic>
 80060b4:	4603      	mov	r3, r0
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e01c      	b.n	80060f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685c      	ldr	r4, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff ffaa 	bl	8006028 <makeFreeRtosPriority>
 80060d4:	4602      	mov	r2, r0
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	9200      	str	r2, [sp, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	4632      	mov	r2, r6
 80060e2:	4629      	mov	r1, r5
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fe22 	bl	8006d2e <xTaskCreate>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d001      	beq.n	80060f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e000      	b.n	80060f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <osDelay+0x16>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	e000      	b.n	8006116 <osDelay+0x18>
 8006114:	2301      	movs	r3, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f000 ff56 	bl	8006fc8 <vTaskDelay>
  
  return osOK;
 800611c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f103 0208 	add.w	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f103 0208 	add.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f103 0208 	add.w	r2, r3, #8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d103      	bne.n	80061e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e00c      	b.n	8006202 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3308      	adds	r3, #8
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e002      	b.n	80061f6 <vListInsert+0x2e>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d2f6      	bcs.n	80061f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6892      	ldr	r2, [r2, #8]
 8006250:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6852      	ldr	r2, [r2, #4]
 800625a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d103      	bne.n	800626e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	1e5a      	subs	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062ba:	f001 fe1b 	bl	8007ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	3b01      	subs	r3, #1
 80062ec:	68f9      	ldr	r1, [r7, #12]
 80062ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	441a      	add	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d114      	bne.n	800633a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3310      	adds	r3, #16
 800631c:	4618      	mov	r0, r3
 800631e:	f001 f8d9 	bl	80074d4 <xTaskRemoveFromEventList>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d012      	beq.n	800634e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <xQueueGenericReset+0xcc>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	e009      	b.n	800634e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3310      	adds	r3, #16
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fef1 	bl	8006126 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff feec 	bl	8006126 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800634e:	f001 fe01 	bl	8007f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006352:	2301      	movs	r3, #1
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	613b      	str	r3, [r7, #16]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	3348      	adds	r3, #72	; 0x48
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fe8d 	bl	80080b8 <pvPortMalloc>
 800639e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d011      	beq.n	80063ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	3348      	adds	r3, #72	; 0x48
 80063ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063b8:	79fa      	ldrb	r2, [r7, #7]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f805 	bl	80063d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ca:	69bb      	ldr	r3, [r7, #24]
	}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006402:	2101      	movs	r1, #1
 8006404:	69b8      	ldr	r0, [r7, #24]
 8006406:	f7ff ff43 	bl	8006290 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08e      	sub	sp, #56	; 0x38
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <xQueueGenericSend+0x32>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <xQueueGenericSend+0x40>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <xQueueGenericSend+0x44>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <xQueueGenericSend+0x46>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <xQueueGenericSend+0x60>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d103      	bne.n	8006482 <xQueueGenericSend+0x6e>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <xQueueGenericSend+0x72>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <xQueueGenericSend+0x74>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a2:	f001 f9d7 	bl	8007854 <xTaskGetSchedulerState>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <xQueueGenericSend+0x9e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0xa2>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0xa4>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61fb      	str	r3, [r7, #28]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d2:	f001 fd0f 	bl	8007ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <xQueueGenericSend+0xd4>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d129      	bne.n	800653c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ee:	f000 fab1 	bl	8006a54 <prvCopyDataToQueue>
 80064f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	3324      	adds	r3, #36	; 0x24
 8006500:	4618      	mov	r0, r3
 8006502:	f000 ffe7 	bl	80074d4 <xTaskRemoveFromEventList>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800650c:	4b3f      	ldr	r3, [pc, #252]	; (800660c <xQueueGenericSend+0x1f8>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	e00a      	b.n	8006534 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006524:	4b39      	ldr	r3, [pc, #228]	; (800660c <xQueueGenericSend+0x1f8>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006534:	f001 fd0e 	bl	8007f54 <vPortExitCritical>
				return pdPASS;
 8006538:	2301      	movs	r3, #1
 800653a:	e063      	b.n	8006604 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006542:	f001 fd07 	bl	8007f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006546:	2300      	movs	r3, #0
 8006548:	e05c      	b.n	8006604 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4618      	mov	r0, r3
 8006556:	f001 f81f 	bl	8007598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800655e:	f001 fcf9 	bl	8007f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006562:	f000 fdcf 	bl	8007104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006566:	f001 fcc5 	bl	8007ef4 <vPortEnterCritical>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006570:	b25b      	sxtb	r3, r3
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d103      	bne.n	8006580 <xQueueGenericSend+0x16c>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006586:	b25b      	sxtb	r3, r3
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d103      	bne.n	8006596 <xQueueGenericSend+0x182>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006596:	f001 fcdd 	bl	8007f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800659a:	1d3a      	adds	r2, r7, #4
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 f80e 	bl	80075c4 <xTaskCheckForTimeOut>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d124      	bne.n	80065f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b0:	f000 fb48 	bl	8006c44 <prvIsQueueFull>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	3310      	adds	r3, #16
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff62 	bl	800748c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ca:	f000 fad3 	bl	8006b74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065ce:	f000 fda7 	bl	8007120 <xTaskResumeAll>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f af7c 	bne.w	80064d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <xQueueGenericSend+0x1f8>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	e772      	b.n	80064d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ee:	f000 fac1 	bl	8006b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f2:	f000 fd95 	bl	8007120 <xTaskResumeAll>
 80065f6:	e76c      	b.n	80064d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065fa:	f000 fabb 	bl	8006b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065fe:	f000 fd8f 	bl	8007120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006604:	4618      	mov	r0, r3
 8006606:	3738      	adds	r7, #56	; 0x38
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	e000ed04 	.word	0xe000ed04

08006610 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08c      	sub	sp, #48	; 0x30
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800661c:	2300      	movs	r3, #0
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xQueueReceive+0x30>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	623b      	str	r3, [r7, #32]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <xQueueReceive+0x3e>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <xQueueReceive+0x42>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <xQueueReceive+0x44>
 8006652:	2300      	movs	r3, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xQueueReceive+0x5e>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61fb      	str	r3, [r7, #28]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800666e:	f001 f8f1 	bl	8007854 <xTaskGetSchedulerState>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <xQueueReceive+0x6e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueReceive+0x72>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueReceive+0x74>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueReceive+0x8e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61bb      	str	r3, [r7, #24]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800669e:	f001 fc29 	bl	8007ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01f      	beq.n	80066ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f000 fa39 	bl	8006b28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	1e5a      	subs	r2, r3, #1
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00f      	beq.n	80066e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	3310      	adds	r3, #16
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 ff02 	bl	80074d4 <xTaskRemoveFromEventList>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066d6:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <xQueueReceive+0x1bc>)
 80066d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066e6:	f001 fc35 	bl	8007f54 <vPortExitCritical>
				return pdPASS;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e069      	b.n	80067c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066f4:	f001 fc2e 	bl	8007f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e062      	b.n	80067c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006702:	f107 0310 	add.w	r3, r7, #16
 8006706:	4618      	mov	r0, r3
 8006708:	f000 ff46 	bl	8007598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006710:	f001 fc20 	bl	8007f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006714:	f000 fcf6 	bl	8007104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006718:	f001 fbec 	bl	8007ef4 <vPortEnterCritical>
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006722:	b25b      	sxtb	r3, r3
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d103      	bne.n	8006732 <xQueueReceive+0x122>
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006738:	b25b      	sxtb	r3, r3
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d103      	bne.n	8006748 <xQueueReceive+0x138>
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006748:	f001 fc04 	bl	8007f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800674c:	1d3a      	adds	r2, r7, #4
 800674e:	f107 0310 	add.w	r3, r7, #16
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff35 	bl	80075c4 <xTaskCheckForTimeOut>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d123      	bne.n	80067a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006762:	f000 fa59 	bl	8006c18 <prvIsQueueEmpty>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d017      	beq.n	800679c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fe89 	bl	800748c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800677a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800677c:	f000 f9fa 	bl	8006b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006780:	f000 fcce 	bl	8007120 <xTaskResumeAll>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d189      	bne.n	800669e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <xQueueReceive+0x1bc>)
 800678c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	e780      	b.n	800669e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f000 f9e9 	bl	8006b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a2:	f000 fcbd 	bl	8007120 <xTaskResumeAll>
 80067a6:	e77a      	b.n	800669e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067aa:	f000 f9e3 	bl	8006b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ae:	f000 fcb7 	bl	8007120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b4:	f000 fa30 	bl	8006c18 <prvIsQueueEmpty>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f43f af6f 	beq.w	800669e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3730      	adds	r7, #48	; 0x30
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	623b      	str	r3, [r7, #32]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	61fb      	str	r3, [r7, #28]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006820:	f001 f818 	bl	8007854 <xTaskGetSchedulerState>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <xQueueSemaphoreTake+0x60>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <xQueueSemaphoreTake+0x64>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <xQueueSemaphoreTake+0x66>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	61bb      	str	r3, [r7, #24]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006850:	f001 fb50 	bl	8007ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d024      	beq.n	80068aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	1e5a      	subs	r2, r3, #1
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006870:	f001 f998 	bl	8007ba4 <pvTaskIncrementMutexHeldCount>
 8006874:	4602      	mov	r2, r0
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00f      	beq.n	80068a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	3310      	adds	r3, #16
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fe24 	bl	80074d4 <xTaskRemoveFromEventList>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006892:	4b54      	ldr	r3, [pc, #336]	; (80069e4 <xQueueSemaphoreTake+0x214>)
 8006894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068a2:	f001 fb57 	bl	8007f54 <vPortExitCritical>
				return pdPASS;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e097      	b.n	80069da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d111      	bne.n	80068d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	617b      	str	r3, [r7, #20]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068cc:	f001 fb42 	bl	8007f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e082      	b.n	80069da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068da:	f107 030c 	add.w	r3, r7, #12
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fe5a 	bl	8007598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e8:	f001 fb34 	bl	8007f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ec:	f000 fc0a 	bl	8007104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068f0:	f001 fb00 	bl	8007ef4 <vPortEnterCritical>
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d103      	bne.n	800690a <xQueueSemaphoreTake+0x13a>
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006910:	b25b      	sxtb	r3, r3
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d103      	bne.n	8006920 <xQueueSemaphoreTake+0x150>
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006920:	f001 fb18 	bl	8007f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006924:	463a      	mov	r2, r7
 8006926:	f107 030c 	add.w	r3, r7, #12
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fe49 	bl	80075c4 <xTaskCheckForTimeOut>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d132      	bne.n	800699e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800693a:	f000 f96d 	bl	8006c18 <prvIsQueueEmpty>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d026      	beq.n	8006992 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d109      	bne.n	8006960 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800694c:	f001 fad2 	bl	8007ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 ff9b 	bl	8007890 <xTaskPriorityInherit>
 800695a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800695c:	f001 fafa 	bl	8007f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fd8f 	bl	800748c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800696e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006970:	f000 f900 	bl	8006b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006974:	f000 fbd4 	bl	8007120 <xTaskResumeAll>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f47f af68 	bne.w	8006850 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006980:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <xQueueSemaphoreTake+0x214>)
 8006982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	e75e      	b.n	8006850 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006994:	f000 f8ee 	bl	8006b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006998:	f000 fbc2 	bl	8007120 <xTaskResumeAll>
 800699c:	e758      	b.n	8006850 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800699e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a0:	f000 f8e8 	bl	8006b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069a4:	f000 fbbc 	bl	8007120 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069aa:	f000 f935 	bl	8006c18 <prvIsQueueEmpty>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f43f af4d 	beq.w	8006850 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00d      	beq.n	80069d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80069bc:	f001 fa9a 	bl	8007ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c2:	f000 f82f 	bl	8006a24 <prvGetDisinheritPriorityAfterTimeout>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 f85a 	bl	8007a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069d4:	f001 fabe 	bl	8007f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3738      	adds	r7, #56	; 0x38
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006a0c:	f001 fa72 	bl	8007ef4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006a16:	f001 fa9d 	bl	8007f54 <vPortExitCritical>

	return uxReturn;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1c3 0307 	rsb	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e001      	b.n	8006a46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a46:	68fb      	ldr	r3, [r7, #12]
	}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10d      	bne.n	8006a8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d14d      	bne.n	8006b16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 ff7c 	bl	800797c <xTaskPriorityDisinherit>
 8006a84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	e043      	b.n	8006b16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d119      	bne.n	8006ac8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6858      	ldr	r0, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	f001 fd78 	bl	8008594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	441a      	add	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d32b      	bcc.n	8006b16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	e026      	b.n	8006b16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68d8      	ldr	r0, [r3, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	f001 fd5e 	bl	8008594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	425b      	negs	r3, r3
 8006ae2:	441a      	add	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d207      	bcs.n	8006b04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	425b      	negs	r3, r3
 8006afe:	441a      	add	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d105      	bne.n	8006b16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b1e:	697b      	ldr	r3, [r7, #20]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d018      	beq.n	8006b6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	441a      	add	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d303      	bcc.n	8006b5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68d9      	ldr	r1, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	461a      	mov	r2, r3
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	f001 fd14 	bl	8008594 <memcpy>
	}
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b7c:	f001 f9ba 	bl	8007ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b88:	e011      	b.n	8006bae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d012      	beq.n	8006bb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3324      	adds	r3, #36	; 0x24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fc9c 	bl	80074d4 <xTaskRemoveFromEventList>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ba2:	f000 fd71 	bl	8007688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dce9      	bgt.n	8006b8a <prvUnlockQueue+0x16>
 8006bb6:	e000      	b.n	8006bba <prvUnlockQueue+0x46>
					break;
 8006bb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	22ff      	movs	r2, #255	; 0xff
 8006bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006bc2:	f001 f9c7 	bl	8007f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bc6:	f001 f995 	bl	8007ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bd2:	e011      	b.n	8006bf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d012      	beq.n	8006c02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3310      	adds	r3, #16
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fc77 	bl	80074d4 <xTaskRemoveFromEventList>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bec:	f000 fd4c 	bl	8007688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dce9      	bgt.n	8006bd4 <prvUnlockQueue+0x60>
 8006c00:	e000      	b.n	8006c04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	22ff      	movs	r2, #255	; 0xff
 8006c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c0c:	f001 f9a2 	bl	8007f54 <vPortExitCritical>
}
 8006c10:	bf00      	nop
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c20:	f001 f968 	bl	8007ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	e001      	b.n	8006c36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f001 f98d 	bl	8007f54 <vPortExitCritical>

	return xReturn;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c4c:	f001 f952 	bl	8007ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d102      	bne.n	8006c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e001      	b.n	8006c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c66:	f001 f975 	bl	8007f54 <vPortExitCritical>

	return xReturn;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08e      	sub	sp, #56	; 0x38
 8006c78:	af04      	add	r7, sp, #16
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	623b      	str	r3, [r7, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xTaskCreateStatic+0x46>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	61fb      	str	r3, [r7, #28]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cba:	23a0      	movs	r3, #160	; 0xa0
 8006cbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2ba0      	cmp	r3, #160	; 0xa0
 8006cc2:	d00a      	beq.n	8006cda <xTaskCreateStatic+0x66>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	61bb      	str	r3, [r7, #24]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01e      	beq.n	8006d20 <xTaskCreateStatic+0xac>
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9303      	str	r3, [sp, #12]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f850 	bl	8006db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d1a:	f000 f8eb 	bl	8006ef4 <prvAddNewTaskToReadyList>
 8006d1e:	e001      	b.n	8006d24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d24:	697b      	ldr	r3, [r7, #20]
	}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3728      	adds	r7, #40	; 0x28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08c      	sub	sp, #48	; 0x30
 8006d32:	af04      	add	r7, sp, #16
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 f9b8 	bl	80080b8 <pvPortMalloc>
 8006d48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d50:	20a0      	movs	r0, #160	; 0xa0
 8006d52:	f001 f9b1 	bl	80080b8 <pvPortMalloc>
 8006d56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
 8006d64:	e005      	b.n	8006d72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d66:	6978      	ldr	r0, [r7, #20]
 8006d68:	f001 fa72 	bl	8008250 <vPortFree>
 8006d6c:	e001      	b.n	8006d72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	2300      	movs	r3, #0
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f80e 	bl	8006db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d9c:	69f8      	ldr	r0, [r7, #28]
 8006d9e:	f000 f8a9 	bl	8006ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e002      	b.n	8006dae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dae:	69bb      	ldr	r3, [r7, #24]
	}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f023 0307 	bic.w	r3, r3, #7
 8006dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	617b      	str	r3, [r7, #20]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01f      	beq.n	8006e46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e012      	b.n	8006e32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	7819      	ldrb	r1, [r3, #0]
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	3334      	adds	r3, #52	; 0x34
 8006e1c:	460a      	mov	r2, r1
 8006e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d9e9      	bls.n	8006e0c <prvInitialiseNewTask+0x54>
 8006e38:	e000      	b.n	8006e3c <prvInitialiseNewTask+0x84>
			{
				break;
 8006e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e44:	e003      	b.n	8006e4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	2b06      	cmp	r3, #6
 8006e52:	d901      	bls.n	8006e58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e54:	2306      	movs	r3, #6
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2200      	movs	r2, #0
 8006e68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff f979 	bl	8006166 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	3318      	adds	r3, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff f974 	bl	8006166 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	f1c3 0207 	rsb	r2, r3, #7
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	334c      	adds	r3, #76	; 0x4c
 8006ea8:	224c      	movs	r2, #76	; 0x4c
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 faed 	bl	800848c <memset>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <prvInitialiseNewTask+0x130>)
 8006eb6:	651a      	str	r2, [r3, #80]	; 0x50
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <prvInitialiseNewTask+0x134>)
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	4a0b      	ldr	r2, [pc, #44]	; (8006ef0 <prvInitialiseNewTask+0x138>)
 8006ec2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	68f9      	ldr	r1, [r7, #12]
 8006ec8:	69b8      	ldr	r0, [r7, #24]
 8006eca:	f000 fee5 	bl	8007c98 <pxPortInitialiseStack>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	2000540c 	.word	0x2000540c
 8006eec:	20005474 	.word	0x20005474
 8006ef0:	200054dc 	.word	0x200054dc

08006ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006efc:	f000 fffa 	bl	8007ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f00:	4b2a      	ldr	r3, [pc, #168]	; (8006fac <prvAddNewTaskToReadyList+0xb8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a29      	ldr	r2, [pc, #164]	; (8006fac <prvAddNewTaskToReadyList+0xb8>)
 8006f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <prvAddNewTaskToReadyList+0xbc>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f12:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <prvAddNewTaskToReadyList+0xbc>)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f18:	4b24      	ldr	r3, [pc, #144]	; (8006fac <prvAddNewTaskToReadyList+0xb8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d110      	bne.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f20:	f000 fbd6 	bl	80076d0 <prvInitialiseTaskLists>
 8006f24:	e00d      	b.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f26:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <prvAddNewTaskToReadyList+0xc0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f2e:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <prvAddNewTaskToReadyList+0xbc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d802      	bhi.n	8006f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f3c:	4a1c      	ldr	r2, [pc, #112]	; (8006fb0 <prvAddNewTaskToReadyList+0xbc>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <prvAddNewTaskToReadyList+0xc4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a1b      	ldr	r2, [pc, #108]	; (8006fb8 <prvAddNewTaskToReadyList+0xc4>)
 8006f4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <prvAddNewTaskToReadyList+0xc8>)
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4a15      	ldr	r2, [pc, #84]	; (8006fc0 <prvAddNewTaskToReadyList+0xcc>)
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7ff f903 	bl	8006180 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f7a:	f000 ffeb 	bl	8007f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <prvAddNewTaskToReadyList+0xc0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <prvAddNewTaskToReadyList+0xbc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d207      	bcs.n	8006fa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <prvAddNewTaskToReadyList+0xd0>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200017b8 	.word	0x200017b8
 8006fb0:	200016b8 	.word	0x200016b8
 8006fb4:	200017c4 	.word	0x200017c4
 8006fb8:	200017d4 	.word	0x200017d4
 8006fbc:	200017c0 	.word	0x200017c0
 8006fc0:	200016bc 	.word	0x200016bc
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d017      	beq.n	800700a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <vTaskDelay+0x60>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <vTaskDelay+0x30>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ff8:	f000 f884 	bl	8007104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fde4 	bl	8007bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007004:	f000 f88c 	bl	8007120 <xTaskResumeAll>
 8007008:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <vTaskDelay+0x64>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200017e0 	.word	0x200017e0
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	; 0x28
 8007034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800703e:	463a      	mov	r2, r7
 8007040:	1d39      	adds	r1, r7, #4
 8007042:	f107 0308 	add.w	r3, r7, #8
 8007046:	4618      	mov	r0, r3
 8007048:	f7f9 fc5a 	bl	8000900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	9202      	str	r2, [sp, #8]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	2300      	movs	r3, #0
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2300      	movs	r3, #0
 800705c:	460a      	mov	r2, r1
 800705e:	4921      	ldr	r1, [pc, #132]	; (80070e4 <vTaskStartScheduler+0xb4>)
 8007060:	4821      	ldr	r0, [pc, #132]	; (80070e8 <vTaskStartScheduler+0xb8>)
 8007062:	f7ff fe07 	bl	8006c74 <xTaskCreateStatic>
 8007066:	4603      	mov	r3, r0
 8007068:	4a20      	ldr	r2, [pc, #128]	; (80070ec <vTaskStartScheduler+0xbc>)
 800706a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800706c:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <vTaskStartScheduler+0xbc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e001      	b.n	800707e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d11b      	bne.n	80070bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	613b      	str	r3, [r7, #16]
}
 8007096:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <vTaskStartScheduler+0xc0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	334c      	adds	r3, #76	; 0x4c
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <vTaskStartScheduler+0xc4>)
 80070a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <vTaskStartScheduler+0xc8>)
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070aa:	4b14      	ldr	r3, [pc, #80]	; (80070fc <vTaskStartScheduler+0xcc>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070b0:	4b13      	ldr	r3, [pc, #76]	; (8007100 <vTaskStartScheduler+0xd0>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070b6:	f000 fe7b 	bl	8007db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070ba:	e00e      	b.n	80070da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d10a      	bne.n	80070da <vTaskStartScheduler+0xaa>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	60fb      	str	r3, [r7, #12]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <vTaskStartScheduler+0xa8>
}
 80070da:	bf00      	nop
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08008748 	.word	0x08008748
 80070e8:	080076a1 	.word	0x080076a1
 80070ec:	200017dc 	.word	0x200017dc
 80070f0:	200016b8 	.word	0x200016b8
 80070f4:	200000ec 	.word	0x200000ec
 80070f8:	200017d8 	.word	0x200017d8
 80070fc:	200017c4 	.word	0x200017c4
 8007100:	200017bc 	.word	0x200017bc

08007104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <vTaskSuspendAll+0x18>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	4a03      	ldr	r2, [pc, #12]	; (800711c <vTaskSuspendAll+0x18>)
 8007110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007112:	bf00      	nop
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	200017e0 	.word	0x200017e0

08007120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800712e:	4b41      	ldr	r3, [pc, #260]	; (8007234 <xTaskResumeAll+0x114>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <xTaskResumeAll+0x2c>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800714c:	f000 fed2 	bl	8007ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007150:	4b38      	ldr	r3, [pc, #224]	; (8007234 <xTaskResumeAll+0x114>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	4a37      	ldr	r2, [pc, #220]	; (8007234 <xTaskResumeAll+0x114>)
 8007158:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715a:	4b36      	ldr	r3, [pc, #216]	; (8007234 <xTaskResumeAll+0x114>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d161      	bne.n	8007226 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007162:	4b35      	ldr	r3, [pc, #212]	; (8007238 <xTaskResumeAll+0x118>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d05d      	beq.n	8007226 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716a:	e02e      	b.n	80071ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716c:	4b33      	ldr	r3, [pc, #204]	; (800723c <xTaskResumeAll+0x11c>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3318      	adds	r3, #24
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff f85e 	bl	800623a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3304      	adds	r3, #4
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff f859 	bl	800623a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	2201      	movs	r2, #1
 800718e:	409a      	lsls	r2, r3
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <xTaskResumeAll+0x120>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4313      	orrs	r3, r2
 8007196:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <xTaskResumeAll+0x120>)
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <xTaskResumeAll+0x124>)
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f7fe ffe5 	bl	8006180 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <xTaskResumeAll+0x128>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <xTaskResumeAll+0x12c>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <xTaskResumeAll+0x11c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1cc      	bne.n	800716c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071d8:	f000 fb1c 	bl	8007814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071dc:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <xTaskResumeAll+0x130>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071e8:	f000 f836 	bl	8007258 <xTaskIncrementTick>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80071f2:	4b16      	ldr	r3, [pc, #88]	; (800724c <xTaskResumeAll+0x12c>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f1      	bne.n	80071e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007204:	4b12      	ldr	r3, [pc, #72]	; (8007250 <xTaskResumeAll+0x130>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800720a:	4b10      	ldr	r3, [pc, #64]	; (800724c <xTaskResumeAll+0x12c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <xTaskResumeAll+0x134>)
 8007218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 fe95 	bl	8007f54 <vPortExitCritical>

	return xAlreadyYielded;
 800722a:	68bb      	ldr	r3, [r7, #8]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	200017e0 	.word	0x200017e0
 8007238:	200017b8 	.word	0x200017b8
 800723c:	20001778 	.word	0x20001778
 8007240:	200017c0 	.word	0x200017c0
 8007244:	200016bc 	.word	0x200016bc
 8007248:	200016b8 	.word	0x200016b8
 800724c:	200017cc 	.word	0x200017cc
 8007250:	200017c8 	.word	0x200017c8
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007262:	4b4e      	ldr	r3, [pc, #312]	; (800739c <xTaskIncrementTick+0x144>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f040 808e 	bne.w	8007388 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800726c:	4b4c      	ldr	r3, [pc, #304]	; (80073a0 <xTaskIncrementTick+0x148>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007274:	4a4a      	ldr	r2, [pc, #296]	; (80073a0 <xTaskIncrementTick+0x148>)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d120      	bne.n	80072c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007280:	4b48      	ldr	r3, [pc, #288]	; (80073a4 <xTaskIncrementTick+0x14c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	603b      	str	r3, [r7, #0]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskIncrementTick+0x46>
 80072a0:	4b40      	ldr	r3, [pc, #256]	; (80073a4 <xTaskIncrementTick+0x14c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <xTaskIncrementTick+0x150>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a3e      	ldr	r2, [pc, #248]	; (80073a4 <xTaskIncrementTick+0x14c>)
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	4a3e      	ldr	r2, [pc, #248]	; (80073a8 <xTaskIncrementTick+0x150>)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	4b3d      	ldr	r3, [pc, #244]	; (80073ac <xTaskIncrementTick+0x154>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3301      	adds	r3, #1
 80072ba:	4a3c      	ldr	r2, [pc, #240]	; (80073ac <xTaskIncrementTick+0x154>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	f000 faa9 	bl	8007814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072c2:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <xTaskIncrementTick+0x158>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d348      	bcc.n	800735e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072cc:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <xTaskIncrementTick+0x14c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <xTaskIncrementTick+0x158>)
 80072d8:	f04f 32ff 	mov.w	r2, #4294967295
 80072dc:	601a      	str	r2, [r3, #0]
					break;
 80072de:	e03e      	b.n	800735e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <xTaskIncrementTick+0x14c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d203      	bcs.n	8007300 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072f8:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <xTaskIncrementTick+0x158>)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072fe:	e02e      	b.n	800735e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	3304      	adds	r3, #4
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe ff98 	bl	800623a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3318      	adds	r3, #24
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe ff8f 	bl	800623a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	2201      	movs	r2, #1
 8007322:	409a      	lsls	r2, r3
 8007324:	4b23      	ldr	r3, [pc, #140]	; (80073b4 <xTaskIncrementTick+0x15c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4313      	orrs	r3, r2
 800732a:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <xTaskIncrementTick+0x15c>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a1f      	ldr	r2, [pc, #124]	; (80073b8 <xTaskIncrementTick+0x160>)
 800733c:	441a      	add	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe ff1b 	bl	8006180 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4b1b      	ldr	r3, [pc, #108]	; (80073bc <xTaskIncrementTick+0x164>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d3b9      	bcc.n	80072cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800735c:	e7b6      	b.n	80072cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800735e:	4b17      	ldr	r3, [pc, #92]	; (80073bc <xTaskIncrementTick+0x164>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	4914      	ldr	r1, [pc, #80]	; (80073b8 <xTaskIncrementTick+0x160>)
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d901      	bls.n	800737a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007376:	2301      	movs	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800737a:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <xTaskIncrementTick+0x168>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007382:	2301      	movs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e004      	b.n	8007392 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <xTaskIncrementTick+0x16c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	4a0d      	ldr	r2, [pc, #52]	; (80073c4 <xTaskIncrementTick+0x16c>)
 8007390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007392:	697b      	ldr	r3, [r7, #20]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200017e0 	.word	0x200017e0
 80073a0:	200017bc 	.word	0x200017bc
 80073a4:	20001770 	.word	0x20001770
 80073a8:	20001774 	.word	0x20001774
 80073ac:	200017d0 	.word	0x200017d0
 80073b0:	200017d8 	.word	0x200017d8
 80073b4:	200017c0 	.word	0x200017c0
 80073b8:	200016bc 	.word	0x200016bc
 80073bc:	200016b8 	.word	0x200016b8
 80073c0:	200017cc 	.word	0x200017cc
 80073c4:	200017c8 	.word	0x200017c8

080073c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ce:	4b29      	ldr	r3, [pc, #164]	; (8007474 <vTaskSwitchContext+0xac>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073d6:	4b28      	ldr	r3, [pc, #160]	; (8007478 <vTaskSwitchContext+0xb0>)
 80073d8:	2201      	movs	r2, #1
 80073da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073dc:	e044      	b.n	8007468 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80073de:	4b26      	ldr	r3, [pc, #152]	; (8007478 <vTaskSwitchContext+0xb0>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	4b25      	ldr	r3, [pc, #148]	; (800747c <vTaskSwitchContext+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	fab3 f383 	clz	r3, r3
 80073f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	f1c3 031f 	rsb	r3, r3, #31
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	4921      	ldr	r1, [pc, #132]	; (8007480 <vTaskSwitchContext+0xb8>)
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <vTaskSwitchContext+0x5c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <vTaskSwitchContext+0x5a>
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a14      	ldr	r2, [pc, #80]	; (8007480 <vTaskSwitchContext+0xb8>)
 8007430:	4413      	add	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3308      	adds	r3, #8
 8007446:	429a      	cmp	r2, r3
 8007448:	d104      	bne.n	8007454 <vTaskSwitchContext+0x8c>
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	605a      	str	r2, [r3, #4]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <vTaskSwitchContext+0xbc>)
 800745c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <vTaskSwitchContext+0xbc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	334c      	adds	r3, #76	; 0x4c
 8007464:	4a08      	ldr	r2, [pc, #32]	; (8007488 <vTaskSwitchContext+0xc0>)
 8007466:	6013      	str	r3, [r2, #0]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	200017e0 	.word	0x200017e0
 8007478:	200017cc 	.word	0x200017cc
 800747c:	200017c0 	.word	0x200017c0
 8007480:	200016bc 	.word	0x200016bc
 8007484:	200016b8 	.word	0x200016b8
 8007488:	200000ec 	.word	0x200000ec

0800748c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <vTaskPlaceOnEventList+0x44>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3318      	adds	r3, #24
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fe fe84 	bl	80061c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074c0:	2101      	movs	r1, #1
 80074c2:	6838      	ldr	r0, [r7, #0]
 80074c4:	f000 fb82 	bl	8007bcc <prvAddCurrentTaskToDelayedList>
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200016b8 	.word	0x200016b8

080074d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	60fb      	str	r3, [r7, #12]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3318      	adds	r3, #24
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fe98 	bl	800623a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <xTaskRemoveFromEventList+0xac>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11c      	bne.n	800754c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fe8f 	bl	800623a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2201      	movs	r2, #1
 8007522:	409a      	lsls	r2, r3
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <xTaskRemoveFromEventList+0xb0>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4313      	orrs	r3, r2
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <xTaskRemoveFromEventList+0xb0>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4a13      	ldr	r2, [pc, #76]	; (8007588 <xTaskRemoveFromEventList+0xb4>)
 800753c:	441a      	add	r2, r3
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f7fe fe1b 	bl	8006180 <vListInsertEnd>
 800754a:	e005      	b.n	8007558 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	3318      	adds	r3, #24
 8007550:	4619      	mov	r1, r3
 8007552:	480e      	ldr	r0, [pc, #56]	; (800758c <xTaskRemoveFromEventList+0xb8>)
 8007554:	f7fe fe14 	bl	8006180 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <xTaskRemoveFromEventList+0xbc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	429a      	cmp	r2, r3
 8007564:	d905      	bls.n	8007572 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007566:	2301      	movs	r3, #1
 8007568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <xTaskRemoveFromEventList+0xc0>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e001      	b.n	8007576 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007576:	697b      	ldr	r3, [r7, #20]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200017e0 	.word	0x200017e0
 8007584:	200017c0 	.word	0x200017c0
 8007588:	200016bc 	.word	0x200016bc
 800758c:	20001778 	.word	0x20001778
 8007590:	200016b8 	.word	0x200016b8
 8007594:	200017cc 	.word	0x200017cc

08007598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075a0:	4b06      	ldr	r3, [pc, #24]	; (80075bc <vTaskInternalSetTimeOutState+0x24>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <vTaskInternalSetTimeOutState+0x28>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	200017d0 	.word	0x200017d0
 80075c0:	200017bc 	.word	0x200017bc

080075c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	613b      	str	r3, [r7, #16]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007606:	f000 fc75 	bl	8007ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800760a:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <xTaskCheckForTimeOut+0xbc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d102      	bne.n	800762a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e023      	b.n	8007672 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b15      	ldr	r3, [pc, #84]	; (8007684 <xTaskCheckForTimeOut+0xc0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d007      	beq.n	8007646 <xTaskCheckForTimeOut+0x82>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	429a      	cmp	r2, r3
 800763e:	d302      	bcc.n	8007646 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007640:	2301      	movs	r3, #1
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	e015      	b.n	8007672 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	429a      	cmp	r2, r3
 800764e:	d20b      	bcs.n	8007668 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff ff9b 	bl	8007598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e004      	b.n	8007672 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007672:	f000 fc6f 	bl	8007f54 <vPortExitCritical>

	return xReturn;
 8007676:	69fb      	ldr	r3, [r7, #28]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200017bc 	.word	0x200017bc
 8007684:	200017d0 	.word	0x200017d0

08007688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <vTaskMissedYield+0x14>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	200017cc 	.word	0x200017cc

080076a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076a8:	f000 f852 	bl	8007750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <prvIdleTask+0x28>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d9f9      	bls.n	80076a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <prvIdleTask+0x2c>)
 80076b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076c4:	e7f0      	b.n	80076a8 <prvIdleTask+0x8>
 80076c6:	bf00      	nop
 80076c8:	200016bc 	.word	0x200016bc
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
 80076da:	e00c      	b.n	80076f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4a12      	ldr	r2, [pc, #72]	; (8007730 <prvInitialiseTaskLists+0x60>)
 80076e8:	4413      	add	r3, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fd1b 	bl	8006126 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3301      	adds	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d9ef      	bls.n	80076dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076fc:	480d      	ldr	r0, [pc, #52]	; (8007734 <prvInitialiseTaskLists+0x64>)
 80076fe:	f7fe fd12 	bl	8006126 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007702:	480d      	ldr	r0, [pc, #52]	; (8007738 <prvInitialiseTaskLists+0x68>)
 8007704:	f7fe fd0f 	bl	8006126 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007708:	480c      	ldr	r0, [pc, #48]	; (800773c <prvInitialiseTaskLists+0x6c>)
 800770a:	f7fe fd0c 	bl	8006126 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800770e:	480c      	ldr	r0, [pc, #48]	; (8007740 <prvInitialiseTaskLists+0x70>)
 8007710:	f7fe fd09 	bl	8006126 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007714:	480b      	ldr	r0, [pc, #44]	; (8007744 <prvInitialiseTaskLists+0x74>)
 8007716:	f7fe fd06 	bl	8006126 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <prvInitialiseTaskLists+0x78>)
 800771c:	4a05      	ldr	r2, [pc, #20]	; (8007734 <prvInitialiseTaskLists+0x64>)
 800771e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <prvInitialiseTaskLists+0x7c>)
 8007722:	4a05      	ldr	r2, [pc, #20]	; (8007738 <prvInitialiseTaskLists+0x68>)
 8007724:	601a      	str	r2, [r3, #0]
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200016bc 	.word	0x200016bc
 8007734:	20001748 	.word	0x20001748
 8007738:	2000175c 	.word	0x2000175c
 800773c:	20001778 	.word	0x20001778
 8007740:	2000178c 	.word	0x2000178c
 8007744:	200017a4 	.word	0x200017a4
 8007748:	20001770 	.word	0x20001770
 800774c:	20001774 	.word	0x20001774

08007750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007756:	e019      	b.n	800778c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007758:	f000 fbcc 	bl	8007ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <prvCheckTasksWaitingTermination+0x50>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fd66 	bl	800623a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800776e:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <prvCheckTasksWaitingTermination+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3b01      	subs	r3, #1
 8007774:	4a0b      	ldr	r2, [pc, #44]	; (80077a4 <prvCheckTasksWaitingTermination+0x54>)
 8007776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007778:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3b01      	subs	r3, #1
 800777e:	4a0a      	ldr	r2, [pc, #40]	; (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 8007780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007782:	f000 fbe7 	bl	8007f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f810 	bl	80077ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <prvCheckTasksWaitingTermination+0x58>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e1      	bne.n	8007758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	2000178c 	.word	0x2000178c
 80077a4:	200017b8 	.word	0x200017b8
 80077a8:	200017a0 	.word	0x200017a0

080077ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	334c      	adds	r3, #76	; 0x4c
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fe6f 	bl	800849c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fd3f 	bl	8008250 <vPortFree>
				vPortFree( pxTCB );
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fd3c 	bl	8008250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077d8:	e018      	b.n	800780c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d103      	bne.n	80077ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fd33 	bl	8008250 <vPortFree>
	}
 80077ea:	e00f      	b.n	800780c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d00a      	beq.n	800780c <prvDeleteTCB+0x60>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <prvDeleteTCB+0x5e>
	}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <prvResetNextTaskUnblockTime+0x38>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <prvResetNextTaskUnblockTime+0x3c>)
 8007826:	f04f 32ff 	mov.w	r2, #4294967295
 800782a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800782c:	e008      	b.n	8007840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782e:	4b07      	ldr	r3, [pc, #28]	; (800784c <prvResetNextTaskUnblockTime+0x38>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a04      	ldr	r2, [pc, #16]	; (8007850 <prvResetNextTaskUnblockTime+0x3c>)
 800783e:	6013      	str	r3, [r2, #0]
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20001770 	.word	0x20001770
 8007850:	200017d8 	.word	0x200017d8

08007854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <xTaskGetSchedulerState+0x34>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007862:	2301      	movs	r3, #1
 8007864:	607b      	str	r3, [r7, #4]
 8007866:	e008      	b.n	800787a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007868:	4b08      	ldr	r3, [pc, #32]	; (800788c <xTaskGetSchedulerState+0x38>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007870:	2302      	movs	r3, #2
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	e001      	b.n	800787a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800787a:	687b      	ldr	r3, [r7, #4]
	}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	200017c4 	.word	0x200017c4
 800788c:	200017e0 	.word	0x200017e0

08007890 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d05e      	beq.n	8007964 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <xTaskPriorityInherit+0xe0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d24e      	bcs.n	8007952 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db06      	blt.n	80078ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <xTaskPriorityInherit+0xe0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	f1c3 0207 	rsb	r2, r3, #7
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6959      	ldr	r1, [r3, #20]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4a26      	ldr	r2, [pc, #152]	; (8007974 <xTaskPriorityInherit+0xe4>)
 80078dc:	4413      	add	r3, r2
 80078de:	4299      	cmp	r1, r3
 80078e0:	d12f      	bne.n	8007942 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fca7 	bl	800623a <uxListRemove>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	2201      	movs	r2, #1
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43da      	mvns	r2, r3
 80078fe:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <xTaskPriorityInherit+0xe8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4013      	ands	r3, r2
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <xTaskPriorityInherit+0xe8>)
 8007906:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <xTaskPriorityInherit+0xe0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	2201      	movs	r2, #1
 8007918:	409a      	lsls	r2, r3
 800791a:	4b17      	ldr	r3, [pc, #92]	; (8007978 <xTaskPriorityInherit+0xe8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4313      	orrs	r3, r2
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <xTaskPriorityInherit+0xe8>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4a10      	ldr	r2, [pc, #64]	; (8007974 <xTaskPriorityInherit+0xe4>)
 8007932:	441a      	add	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7fe fc20 	bl	8006180 <vListInsertEnd>
 8007940:	e004      	b.n	800794c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <xTaskPriorityInherit+0xe0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e008      	b.n	8007964 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <xTaskPriorityInherit+0xe0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	429a      	cmp	r2, r3
 800795e:	d201      	bcs.n	8007964 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007960:	2301      	movs	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007964:	68fb      	ldr	r3, [r7, #12]
	}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200016b8 	.word	0x200016b8
 8007974:	200016bc 	.word	0x200016bc
 8007978:	200017c0 	.word	0x200017c0

0800797c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d06e      	beq.n	8007a70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <xTaskPriorityDisinherit+0x100>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	429a      	cmp	r2, r3
 800799a:	d00a      	beq.n	80079b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d4:	1e5a      	subs	r2, r3, #1
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d044      	beq.n	8007a70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d140      	bne.n	8007a70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fc21 	bl	800623a <uxListRemove>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d115      	bne.n	8007a2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	491f      	ldr	r1, [pc, #124]	; (8007a80 <xTaskPriorityDisinherit+0x104>)
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <xTaskPriorityDisinherit+0xae>
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <xTaskPriorityDisinherit+0x108>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4013      	ands	r3, r2
 8007a26:	4a17      	ldr	r2, [pc, #92]	; (8007a84 <xTaskPriorityDisinherit+0x108>)
 8007a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a36:	f1c3 0207 	rsb	r2, r3, #7
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	2201      	movs	r2, #1
 8007a44:	409a      	lsls	r2, r3
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <xTaskPriorityDisinherit+0x108>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	4a0d      	ldr	r2, [pc, #52]	; (8007a84 <xTaskPriorityDisinherit+0x108>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <xTaskPriorityDisinherit+0x104>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7fe fb8a 	bl	8006180 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a70:	697b      	ldr	r3, [r7, #20]
	}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200016b8 	.word	0x200016b8
 8007a80:	200016bc 	.word	0x200016bc
 8007a84:	200017c0 	.word	0x200017c0

08007a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d077      	beq.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d902      	bls.n	8007ace <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e002      	b.n	8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d058      	beq.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d153      	bne.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d10a      	bne.n	8007b08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60bb      	str	r3, [r7, #8]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	db04      	blt.n	8007b26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f1c3 0207 	rsb	r2, r3, #7
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	6959      	ldr	r1, [r3, #20]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b36:	4413      	add	r3, r2
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d129      	bne.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fb7a 	bl	800623a <uxListRemove>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	2201      	movs	r2, #1
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43da      	mvns	r2, r3
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	4a10      	ldr	r2, [pc, #64]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	2201      	movs	r2, #1
 8007b68:	409a      	lsls	r2, r3
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4a0b      	ldr	r2, [pc, #44]	; (8007ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b82:	441a      	add	r2, r3
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7fe faf8 	bl	8006180 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b90:	bf00      	nop
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200016b8 	.word	0x200016b8
 8007b9c:	200016bc 	.word	0x200016bc
 8007ba0:	200017c0 	.word	0x200017c0

08007ba4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ba8:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb6:	3201      	adds	r2, #1
 8007bb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
	}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	200016b8 	.word	0x200016b8

08007bcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bdc:	4b28      	ldr	r3, [pc, #160]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fb29 	bl	800623a <uxListRemove>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007bee:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4013      	ands	r3, r2
 8007c02:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d10a      	bne.n	8007c24 <prvAddCurrentTaskToDelayedList+0x58>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c14:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	481a      	ldr	r0, [pc, #104]	; (8007c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c1e:	f7fe faaf 	bl	8006180 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c22:	e026      	b.n	8007c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4413      	add	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c2c:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d209      	bcs.n	8007c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c3c:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f7fe fabd 	bl	80061c8 <vListInsert>
}
 8007c4e:	e010      	b.n	8007c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f7fe fab3 	bl	80061c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d202      	bcs.n	8007c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c6c:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6013      	str	r3, [r2, #0]
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200017bc 	.word	0x200017bc
 8007c80:	200016b8 	.word	0x200016b8
 8007c84:	200017c0 	.word	0x200017c0
 8007c88:	200017a4 	.word	0x200017a4
 8007c8c:	20001774 	.word	0x20001774
 8007c90:	20001770 	.word	0x20001770
 8007c94:	200017d8 	.word	0x200017d8

08007c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3b04      	subs	r3, #4
 8007cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cc8:	4a0c      	ldr	r2, [pc, #48]	; (8007cfc <pxPortInitialiseStack+0x64>)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3b14      	subs	r3, #20
 8007cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3b04      	subs	r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f06f 0202 	mvn.w	r2, #2
 8007ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3b20      	subs	r3, #32
 8007cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cee:	68fb      	ldr	r3, [r7, #12]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	08007d01 	.word	0x08007d01

08007d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <prvTaskExitError+0x54>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d00a      	beq.n	8007d2a <prvTaskExitError+0x2a>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	60fb      	str	r3, [r7, #12]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <prvTaskExitError+0x28>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60bb      	str	r3, [r7, #8]
}
 8007d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d3e:	bf00      	nop
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0fc      	beq.n	8007d40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	2000009c 	.word	0x2000009c
	...

08007d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <pxCurrentTCBConst2>)
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	6808      	ldr	r0, [r1, #0]
 8007d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	f380 8809 	msr	PSP, r0
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f04f 0000 	mov.w	r0, #0
 8007d76:	f380 8811 	msr	BASEPRI, r0
 8007d7a:	4770      	bx	lr
 8007d7c:	f3af 8000 	nop.w

08007d80 <pxCurrentTCBConst2>:
 8007d80:	200016b8 	.word	0x200016b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d88:	4808      	ldr	r0, [pc, #32]	; (8007dac <prvPortStartFirstTask+0x24>)
 8007d8a:	6800      	ldr	r0, [r0, #0]
 8007d8c:	6800      	ldr	r0, [r0, #0]
 8007d8e:	f380 8808 	msr	MSP, r0
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f380 8814 	msr	CONTROL, r0
 8007d9a:	b662      	cpsie	i
 8007d9c:	b661      	cpsie	f
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	df00      	svc	0
 8007da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007daa:	bf00      	nop
 8007dac:	e000ed08 	.word	0xe000ed08

08007db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007db6:	4b46      	ldr	r3, [pc, #280]	; (8007ed0 <xPortStartScheduler+0x120>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a46      	ldr	r2, [pc, #280]	; (8007ed4 <xPortStartScheduler+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d10a      	bne.n	8007dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007dd6:	4b3e      	ldr	r3, [pc, #248]	; (8007ed0 <xPortStartScheduler+0x120>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a3f      	ldr	r2, [pc, #252]	; (8007ed8 <xPortStartScheduler+0x128>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10a      	bne.n	8007df6 <xPortStartScheduler+0x46>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60fb      	str	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007df6:	4b39      	ldr	r3, [pc, #228]	; (8007edc <xPortStartScheduler+0x12c>)
 8007df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b31      	ldr	r3, [pc, #196]	; (8007ee0 <xPortStartScheduler+0x130>)
 8007e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e1e:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e24:	e009      	b.n	8007e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e26:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	d0ef      	beq.n	8007e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e46:	4b27      	ldr	r3, [pc, #156]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1c3 0307 	rsb	r3, r3, #7
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d00a      	beq.n	8007e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e72:	4b1c      	ldr	r3, [pc, #112]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <xPortStartScheduler+0x134>)
 8007e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e86:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <xPortStartScheduler+0x138>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <xPortStartScheduler+0x138>)
 8007e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <xPortStartScheduler+0x138>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a14      	ldr	r2, [pc, #80]	; (8007ee8 <xPortStartScheduler+0x138>)
 8007e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e9e:	f000 f8dd 	bl	800805c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <xPortStartScheduler+0x13c>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ea8:	f000 f8fc 	bl	80080a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xPortStartScheduler+0x140>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0f      	ldr	r2, [pc, #60]	; (8007ef0 <xPortStartScheduler+0x140>)
 8007eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eb8:	f7ff ff66 	bl	8007d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ebc:	f7ff fa84 	bl	80073c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007ec0:	f7ff ff1e 	bl	8007d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	e000ed00 	.word	0xe000ed00
 8007ed4:	410fc271 	.word	0x410fc271
 8007ed8:	410fc270 	.word	0x410fc270
 8007edc:	e000e400 	.word	0xe000e400
 8007ee0:	200017e4 	.word	0x200017e4
 8007ee4:	200017e8 	.word	0x200017e8
 8007ee8:	e000ed20 	.word	0xe000ed20
 8007eec:	2000009c 	.word	0x2000009c
 8007ef0:	e000ef34 	.word	0xe000ef34

08007ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	607b      	str	r3, [r7, #4]
}
 8007f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <vPortEnterCritical+0x58>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <vPortEnterCritical+0x58>)
 8007f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <vPortEnterCritical+0x58>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d10f      	bne.n	8007f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <vPortEnterCritical+0x5c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	603b      	str	r3, [r7, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <vPortEnterCritical+0x4a>
	}
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	2000009c 	.word	0x2000009c
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <vPortExitCritical+0x50>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <vPortExitCritical+0x24>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	607b      	str	r3, [r7, #4]
}
 8007f74:	bf00      	nop
 8007f76:	e7fe      	b.n	8007f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <vPortExitCritical+0x50>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	4a09      	ldr	r2, [pc, #36]	; (8007fa4 <vPortExitCritical+0x50>)
 8007f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <vPortExitCritical+0x50>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d105      	bne.n	8007f96 <vPortExitCritical+0x42>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	2000009c 	.word	0x2000009c
	...

08007fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fb0:	f3ef 8009 	mrs	r0, PSP
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	4b15      	ldr	r3, [pc, #84]	; (8008010 <pxCurrentTCBConst>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	f01e 0f10 	tst.w	lr, #16
 8007fc0:	bf08      	it	eq
 8007fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	6010      	str	r0, [r2, #0]
 8007fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fd4:	f380 8811 	msr	BASEPRI, r0
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f7ff f9f2 	bl	80073c8 <vTaskSwitchContext>
 8007fe4:	f04f 0000 	mov.w	r0, #0
 8007fe8:	f380 8811 	msr	BASEPRI, r0
 8007fec:	bc09      	pop	{r0, r3}
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	6808      	ldr	r0, [r1, #0]
 8007ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff6:	f01e 0f10 	tst.w	lr, #16
 8007ffa:	bf08      	it	eq
 8007ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008000:	f380 8809 	msr	PSP, r0
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w

08008010 <pxCurrentTCBConst>:
 8008010:	200016b8 	.word	0x200016b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop

08008018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008032:	f7ff f911 	bl	8007258 <xTaskIncrementTick>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800803c:	4b06      	ldr	r3, [pc, #24]	; (8008058 <SysTick_Handler+0x40>)
 800803e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f383 8811 	msr	BASEPRI, r3
}
 800804e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <vPortSetupTimerInterrupt+0x34>)
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <vPortSetupTimerInterrupt+0x38>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800806c:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <vPortSetupTimerInterrupt+0x3c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <vPortSetupTimerInterrupt+0x40>)
 8008072:	fba2 2303 	umull	r2, r3, r2, r3
 8008076:	099b      	lsrs	r3, r3, #6
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <vPortSetupTimerInterrupt+0x44>)
 800807a:	3b01      	subs	r3, #1
 800807c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800807e:	4b04      	ldr	r3, [pc, #16]	; (8008090 <vPortSetupTimerInterrupt+0x34>)
 8008080:	2207      	movs	r2, #7
 8008082:	601a      	str	r2, [r3, #0]
}
 8008084:	bf00      	nop
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	e000e010 	.word	0xe000e010
 8008094:	e000e018 	.word	0xe000e018
 8008098:	20000000 	.word	0x20000000
 800809c:	10624dd3 	.word	0x10624dd3
 80080a0:	e000e014 	.word	0xe000e014

080080a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080b4 <vPortEnableVFP+0x10>
 80080a8:	6801      	ldr	r1, [r0, #0]
 80080aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080ae:	6001      	str	r1, [r0, #0]
 80080b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080b2:	bf00      	nop
 80080b4:	e000ed88 	.word	0xe000ed88

080080b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080c4:	f7ff f81e 	bl	8007104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080c8:	4b5b      	ldr	r3, [pc, #364]	; (8008238 <pvPortMalloc+0x180>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080d0:	f000 f920 	bl	8008314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080d4:	4b59      	ldr	r3, [pc, #356]	; (800823c <pvPortMalloc+0x184>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 8093 	bne.w	8008208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01d      	beq.n	8008124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080e8:	2208      	movs	r2, #8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d014      	beq.n	8008124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f023 0307 	bic.w	r3, r3, #7
 8008100:	3308      	adds	r3, #8
 8008102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <pvPortMalloc+0x6c>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	617b      	str	r3, [r7, #20]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d06e      	beq.n	8008208 <pvPortMalloc+0x150>
 800812a:	4b45      	ldr	r3, [pc, #276]	; (8008240 <pvPortMalloc+0x188>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d869      	bhi.n	8008208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008134:	4b43      	ldr	r3, [pc, #268]	; (8008244 <pvPortMalloc+0x18c>)
 8008136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008138:	4b42      	ldr	r3, [pc, #264]	; (8008244 <pvPortMalloc+0x18c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800813e:	e004      	b.n	800814a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d903      	bls.n	800815c <pvPortMalloc+0xa4>
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800815c:	4b36      	ldr	r3, [pc, #216]	; (8008238 <pvPortMalloc+0x180>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	429a      	cmp	r2, r3
 8008164:	d050      	beq.n	8008208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2208      	movs	r2, #8
 800816c:	4413      	add	r3, r2
 800816e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	2308      	movs	r3, #8
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	429a      	cmp	r2, r3
 8008186:	d91f      	bls.n	80081c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <pvPortMalloc+0xf8>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	613b      	str	r3, [r7, #16]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	1ad2      	subs	r2, r2, r3
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081c2:	69b8      	ldr	r0, [r7, #24]
 80081c4:	f000 f908 	bl	80083d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081c8:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <pvPortMalloc+0x188>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	4a1b      	ldr	r2, [pc, #108]	; (8008240 <pvPortMalloc+0x188>)
 80081d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081d6:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <pvPortMalloc+0x188>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <pvPortMalloc+0x190>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d203      	bcs.n	80081ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <pvPortMalloc+0x188>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <pvPortMalloc+0x190>)
 80081e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <pvPortMalloc+0x184>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <pvPortMalloc+0x194>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3301      	adds	r3, #1
 8008204:	4a11      	ldr	r2, [pc, #68]	; (800824c <pvPortMalloc+0x194>)
 8008206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008208:	f7fe ff8a 	bl	8007120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <pvPortMalloc+0x174>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60fb      	str	r3, [r7, #12]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <pvPortMalloc+0x172>
	return pvReturn;
 800822c:	69fb      	ldr	r3, [r7, #28]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3728      	adds	r7, #40	; 0x28
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200053f4 	.word	0x200053f4
 800823c:	20005408 	.word	0x20005408
 8008240:	200053f8 	.word	0x200053f8
 8008244:	200053ec 	.word	0x200053ec
 8008248:	200053fc 	.word	0x200053fc
 800824c:	20005400 	.word	0x20005400

08008250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d04d      	beq.n	80082fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008262:	2308      	movs	r3, #8
 8008264:	425b      	negs	r3, r3
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	4b24      	ldr	r3, [pc, #144]	; (8008308 <vPortFree+0xb8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <vPortFree+0x44>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60fb      	str	r3, [r7, #12]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <vPortFree+0x62>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	60bb      	str	r3, [r7, #8]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <vPortFree+0xb8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01e      	beq.n	80082fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11a      	bne.n	80082fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <vPortFree+0xb8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d8:	f7fe ff14 	bl	8007104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <vPortFree+0xbc>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	4a09      	ldr	r2, [pc, #36]	; (800830c <vPortFree+0xbc>)
 80082e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f000 f874 	bl	80083d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <vPortFree+0xc0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	4a06      	ldr	r2, [pc, #24]	; (8008310 <vPortFree+0xc0>)
 80082f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082fa:	f7fe ff11 	bl	8007120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082fe:	bf00      	nop
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20005408 	.word	0x20005408
 800830c:	200053f8 	.word	0x200053f8
 8008310:	20005404 	.word	0x20005404

08008314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800831a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800831e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008320:	4b27      	ldr	r3, [pc, #156]	; (80083c0 <prvHeapInit+0xac>)
 8008322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3307      	adds	r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <prvHeapInit+0xac>)
 8008344:	4413      	add	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800834c:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <prvHeapInit+0xb0>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008352:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <prvHeapInit+0xb0>)
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4413      	add	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008360:	2208      	movs	r2, #8
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1a9b      	subs	r3, r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <prvHeapInit+0xb4>)
 8008374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <prvHeapInit+0xb4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <prvHeapInit+0xb4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <prvHeapInit+0xb4>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <prvHeapInit+0xb8>)
 80083a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <prvHeapInit+0xbc>)
 80083aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <prvHeapInit+0xc0>)
 80083ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	200017ec 	.word	0x200017ec
 80083c4:	200053ec 	.word	0x200053ec
 80083c8:	200053f4 	.word	0x200053f4
 80083cc:	200053fc 	.word	0x200053fc
 80083d0:	200053f8 	.word	0x200053f8
 80083d4:	20005408 	.word	0x20005408

080083d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e0:	4b28      	ldr	r3, [pc, #160]	; (8008484 <prvInsertBlockIntoFreeList+0xac>)
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e002      	b.n	80083ec <prvInsertBlockIntoFreeList+0x14>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d8f7      	bhi.n	80083e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	429a      	cmp	r2, r3
 8008406:	d108      	bne.n	800841a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d118      	bne.n	8008460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <prvInsertBlockIntoFreeList+0xb0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d00d      	beq.n	8008456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e008      	b.n	8008468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008456:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvInsertBlockIntoFreeList+0xb0>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e003      	b.n	8008468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d002      	beq.n	8008476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200053ec 	.word	0x200053ec
 8008488:	200053f4 	.word	0x200053f4

0800848c <memset>:
 800848c:	4402      	add	r2, r0
 800848e:	4603      	mov	r3, r0
 8008490:	4293      	cmp	r3, r2
 8008492:	d100      	bne.n	8008496 <memset+0xa>
 8008494:	4770      	bx	lr
 8008496:	f803 1b01 	strb.w	r1, [r3], #1
 800849a:	e7f9      	b.n	8008490 <memset+0x4>

0800849c <_reclaim_reent>:
 800849c:	4b29      	ldr	r3, [pc, #164]	; (8008544 <_reclaim_reent+0xa8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4283      	cmp	r3, r0
 80084a2:	b570      	push	{r4, r5, r6, lr}
 80084a4:	4604      	mov	r4, r0
 80084a6:	d04b      	beq.n	8008540 <_reclaim_reent+0xa4>
 80084a8:	69c3      	ldr	r3, [r0, #28]
 80084aa:	b143      	cbz	r3, 80084be <_reclaim_reent+0x22>
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d144      	bne.n	800853c <_reclaim_reent+0xa0>
 80084b2:	69e3      	ldr	r3, [r4, #28]
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	b111      	cbz	r1, 80084be <_reclaim_reent+0x22>
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 f879 	bl	80085b0 <_free_r>
 80084be:	6961      	ldr	r1, [r4, #20]
 80084c0:	b111      	cbz	r1, 80084c8 <_reclaim_reent+0x2c>
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f874 	bl	80085b0 <_free_r>
 80084c8:	69e1      	ldr	r1, [r4, #28]
 80084ca:	b111      	cbz	r1, 80084d2 <_reclaim_reent+0x36>
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 f86f 	bl	80085b0 <_free_r>
 80084d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084d4:	b111      	cbz	r1, 80084dc <_reclaim_reent+0x40>
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 f86a 	bl	80085b0 <_free_r>
 80084dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084de:	b111      	cbz	r1, 80084e6 <_reclaim_reent+0x4a>
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f865 	bl	80085b0 <_free_r>
 80084e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084e8:	b111      	cbz	r1, 80084f0 <_reclaim_reent+0x54>
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f860 	bl	80085b0 <_free_r>
 80084f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084f2:	b111      	cbz	r1, 80084fa <_reclaim_reent+0x5e>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 f85b 	bl	80085b0 <_free_r>
 80084fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80084fc:	b111      	cbz	r1, 8008504 <_reclaim_reent+0x68>
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f856 	bl	80085b0 <_free_r>
 8008504:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008506:	b111      	cbz	r1, 800850e <_reclaim_reent+0x72>
 8008508:	4620      	mov	r0, r4
 800850a:	f000 f851 	bl	80085b0 <_free_r>
 800850e:	6a23      	ldr	r3, [r4, #32]
 8008510:	b1b3      	cbz	r3, 8008540 <_reclaim_reent+0xa4>
 8008512:	4620      	mov	r0, r4
 8008514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008518:	4718      	bx	r3
 800851a:	5949      	ldr	r1, [r1, r5]
 800851c:	b941      	cbnz	r1, 8008530 <_reclaim_reent+0x94>
 800851e:	3504      	adds	r5, #4
 8008520:	69e3      	ldr	r3, [r4, #28]
 8008522:	2d80      	cmp	r5, #128	; 0x80
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	d1f8      	bne.n	800851a <_reclaim_reent+0x7e>
 8008528:	4620      	mov	r0, r4
 800852a:	f000 f841 	bl	80085b0 <_free_r>
 800852e:	e7c0      	b.n	80084b2 <_reclaim_reent+0x16>
 8008530:	680e      	ldr	r6, [r1, #0]
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f83c 	bl	80085b0 <_free_r>
 8008538:	4631      	mov	r1, r6
 800853a:	e7ef      	b.n	800851c <_reclaim_reent+0x80>
 800853c:	2500      	movs	r5, #0
 800853e:	e7ef      	b.n	8008520 <_reclaim_reent+0x84>
 8008540:	bd70      	pop	{r4, r5, r6, pc}
 8008542:	bf00      	nop
 8008544:	200000ec 	.word	0x200000ec

08008548 <__libc_init_array>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4d0d      	ldr	r5, [pc, #52]	; (8008580 <__libc_init_array+0x38>)
 800854c:	4c0d      	ldr	r4, [pc, #52]	; (8008584 <__libc_init_array+0x3c>)
 800854e:	1b64      	subs	r4, r4, r5
 8008550:	10a4      	asrs	r4, r4, #2
 8008552:	2600      	movs	r6, #0
 8008554:	42a6      	cmp	r6, r4
 8008556:	d109      	bne.n	800856c <__libc_init_array+0x24>
 8008558:	4d0b      	ldr	r5, [pc, #44]	; (8008588 <__libc_init_array+0x40>)
 800855a:	4c0c      	ldr	r4, [pc, #48]	; (800858c <__libc_init_array+0x44>)
 800855c:	f000 f880 	bl	8008660 <_init>
 8008560:	1b64      	subs	r4, r4, r5
 8008562:	10a4      	asrs	r4, r4, #2
 8008564:	2600      	movs	r6, #0
 8008566:	42a6      	cmp	r6, r4
 8008568:	d105      	bne.n	8008576 <__libc_init_array+0x2e>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008570:	4798      	blx	r3
 8008572:	3601      	adds	r6, #1
 8008574:	e7ee      	b.n	8008554 <__libc_init_array+0xc>
 8008576:	f855 3b04 	ldr.w	r3, [r5], #4
 800857a:	4798      	blx	r3
 800857c:	3601      	adds	r6, #1
 800857e:	e7f2      	b.n	8008566 <__libc_init_array+0x1e>
 8008580:	08008778 	.word	0x08008778
 8008584:	08008778 	.word	0x08008778
 8008588:	08008778 	.word	0x08008778
 800858c:	0800877c 	.word	0x0800877c

08008590 <__retarget_lock_acquire_recursive>:
 8008590:	4770      	bx	lr

08008592 <__retarget_lock_release_recursive>:
 8008592:	4770      	bx	lr

08008594 <memcpy>:
 8008594:	440a      	add	r2, r1
 8008596:	4291      	cmp	r1, r2
 8008598:	f100 33ff 	add.w	r3, r0, #4294967295
 800859c:	d100      	bne.n	80085a0 <memcpy+0xc>
 800859e:	4770      	bx	lr
 80085a0:	b510      	push	{r4, lr}
 80085a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085aa:	4291      	cmp	r1, r2
 80085ac:	d1f9      	bne.n	80085a2 <memcpy+0xe>
 80085ae:	bd10      	pop	{r4, pc}

080085b0 <_free_r>:
 80085b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085b2:	2900      	cmp	r1, #0
 80085b4:	d044      	beq.n	8008640 <_free_r+0x90>
 80085b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ba:	9001      	str	r0, [sp, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f1a1 0404 	sub.w	r4, r1, #4
 80085c2:	bfb8      	it	lt
 80085c4:	18e4      	addlt	r4, r4, r3
 80085c6:	f000 f83f 	bl	8008648 <__malloc_lock>
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <_free_r+0x94>)
 80085cc:	9801      	ldr	r0, [sp, #4]
 80085ce:	6813      	ldr	r3, [r2, #0]
 80085d0:	b933      	cbnz	r3, 80085e0 <_free_r+0x30>
 80085d2:	6063      	str	r3, [r4, #4]
 80085d4:	6014      	str	r4, [r2, #0]
 80085d6:	b003      	add	sp, #12
 80085d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085dc:	f000 b83a 	b.w	8008654 <__malloc_unlock>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d908      	bls.n	80085f6 <_free_r+0x46>
 80085e4:	6825      	ldr	r5, [r4, #0]
 80085e6:	1961      	adds	r1, r4, r5
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf01      	itttt	eq
 80085ec:	6819      	ldreq	r1, [r3, #0]
 80085ee:	685b      	ldreq	r3, [r3, #4]
 80085f0:	1949      	addeq	r1, r1, r5
 80085f2:	6021      	streq	r1, [r4, #0]
 80085f4:	e7ed      	b.n	80085d2 <_free_r+0x22>
 80085f6:	461a      	mov	r2, r3
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	b10b      	cbz	r3, 8008600 <_free_r+0x50>
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d9fa      	bls.n	80085f6 <_free_r+0x46>
 8008600:	6811      	ldr	r1, [r2, #0]
 8008602:	1855      	adds	r5, r2, r1
 8008604:	42a5      	cmp	r5, r4
 8008606:	d10b      	bne.n	8008620 <_free_r+0x70>
 8008608:	6824      	ldr	r4, [r4, #0]
 800860a:	4421      	add	r1, r4
 800860c:	1854      	adds	r4, r2, r1
 800860e:	42a3      	cmp	r3, r4
 8008610:	6011      	str	r1, [r2, #0]
 8008612:	d1e0      	bne.n	80085d6 <_free_r+0x26>
 8008614:	681c      	ldr	r4, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	6053      	str	r3, [r2, #4]
 800861a:	440c      	add	r4, r1
 800861c:	6014      	str	r4, [r2, #0]
 800861e:	e7da      	b.n	80085d6 <_free_r+0x26>
 8008620:	d902      	bls.n	8008628 <_free_r+0x78>
 8008622:	230c      	movs	r3, #12
 8008624:	6003      	str	r3, [r0, #0]
 8008626:	e7d6      	b.n	80085d6 <_free_r+0x26>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1961      	adds	r1, r4, r5
 800862c:	428b      	cmp	r3, r1
 800862e:	bf04      	itt	eq
 8008630:	6819      	ldreq	r1, [r3, #0]
 8008632:	685b      	ldreq	r3, [r3, #4]
 8008634:	6063      	str	r3, [r4, #4]
 8008636:	bf04      	itt	eq
 8008638:	1949      	addeq	r1, r1, r5
 800863a:	6021      	streq	r1, [r4, #0]
 800863c:	6054      	str	r4, [r2, #4]
 800863e:	e7ca      	b.n	80085d6 <_free_r+0x26>
 8008640:	b003      	add	sp, #12
 8008642:	bd30      	pop	{r4, r5, pc}
 8008644:	20005548 	.word	0x20005548

08008648 <__malloc_lock>:
 8008648:	4801      	ldr	r0, [pc, #4]	; (8008650 <__malloc_lock+0x8>)
 800864a:	f7ff bfa1 	b.w	8008590 <__retarget_lock_acquire_recursive>
 800864e:	bf00      	nop
 8008650:	20005544 	.word	0x20005544

08008654 <__malloc_unlock>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__malloc_unlock+0x8>)
 8008656:	f7ff bf9c 	b.w	8008592 <__retarget_lock_release_recursive>
 800865a:	bf00      	nop
 800865c:	20005544 	.word	0x20005544

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
