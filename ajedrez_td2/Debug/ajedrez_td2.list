
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008658  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080087f8  080087f8  000187f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008918  08008918  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008920  08008920  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08008928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005454  200000f0  08008a18  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20005544  08008a18  00025544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b77  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046bb  00000000  00000000  00038cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b1  00000000  00000000  0003e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d23  00000000  00000000  0003fa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c88e  00000000  00000000  00059724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097e4b  00000000  00000000  00075fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005abc  00000000  00000000  0010de00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001138bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087e0 	.word	0x080087e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	080087e0 	.word	0x080087e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f006 fe31 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f006 fe2b 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f006 fe25 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f006 fe1f 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f006 fe19 	bl	8007148 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f006 fe13 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f006 fe0d 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f006 fe07 	bl	8007148 <vTaskDelay>
	vTaskDelay(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f006 fe04 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000540:	2006      	movs	r0, #6
 8000542:	f000 f809 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f006 fdfe 	bl	8007148 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f803 	bl	8000558 <lcd_send_cmd>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f003 fceb 	bl	8003f80 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003ac 	.word	0x200003ac

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f003 fcbb 	bl	8003f80 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003ac 	.word	0x200003ac

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
#include "debounce.h"

void debounce_init(Debounce_t *s, uint8_t activo_en_cero, uint16_t debounce) {
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero) ? 1 : 0;
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t) BTN_LIBRE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t) BTN_PRESIONADO;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:

void debounce_run(Debounce_t *s, uint32_t estado) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

	switch (s->estado) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
	case 0:
		if (boton) {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
			s->debounce_ticks = s->debounce;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
		break;
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
	case 1:
		if (!(--(s->debounce_ticks))) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
			if (boton) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
				s->estado_pin = BTN_PRESIONADO;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 0;
			}
		}
		break;
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
				s->estado = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
		break;
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
	case 2:
		if (!boton) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
			s->debounce_ticks = s->debounce;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
		break;
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
	case 3:
		if (!(--(s->debounce_ticks))) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
			if (!boton) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
				s->estado_pin = BTN_LIBRE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 2;
			}
		}
		break;
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
				s->estado = 2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
		break;
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:

int debounce_flank(Debounce_t *s) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
			&& (s->estado_anterior_pin == BTN_LIBRE);
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <vApplicationGetIdleTaskMemory+0x2c>)
 8000910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <vApplicationGetIdleTaskMemory+0x30>)
 8000916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200001ac 	.word	0x200001ac

08000934 <game_set_led_output_array>:
void game_set_sensor_reader(sensor_reader_t reader){
    sensor_reader = reader;
    get_sensors = reader;
}

void game_set_led_output_array(led_color output_array[8][8]){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f002 f871 	bl	8002a24 <lighting_set_output>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <game_fsm>:


void game_fsm(){
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0

    movement_fsm();
 800094e:	f000 fbbd 	bl	80010cc <movement_fsm>

    lighting_refresh();
 8000952:	f002 f9a7 	bl	8002ca4 <lighting_refresh>

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <game_reset>:

void game_reset(){
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0

    engine_reset();
 800095e:	f001 f9f1 	bl	8001d44 <engine_reset>

 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f002 fb57 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f885 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f000 f9bd 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 800097a:	f000 f99b 	bl	8000cb4 <MX_DMA_Init>
  MX_TIM1_Init();
 800097e:	f000 f919 	bl	8000bb4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000982:	f000 f8e9 	bl	8000b58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 8000986:	2200      	movs	r2, #0
 8000988:	2118      	movs	r1, #24
 800098a:	2014      	movs	r0, #20
 800098c:	f005 fda8 	bl	80064e0 <xQueueGenericCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <main+0xdc>)
 8000994:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	2014      	movs	r0, #20
 800099c:	f005 fda0 	bl	80064e0 <xQueueGenericCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <main+0xe0>)
 80009a4:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009a6:	2203      	movs	r2, #3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f005 fd98 	bl	80064e0 <xQueueGenericCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <main+0xe4>)
 80009b4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <main+0xe8>)
 80009b8:	1d3c      	adds	r4, r7, #4
 80009ba:	461d      	mov	r5, r3
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 fc0a 	bl	80061e6 <osThreadCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <main+0xec>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(t_LCD, "t_LCD",
 80009d8:	2300      	movs	r3, #0
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	2304      	movs	r3, #4
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	491c      	ldr	r1, [pc, #112]	; (8000a58 <main+0xf0>)
 80009e6:	481d      	ldr	r0, [pc, #116]	; (8000a5c <main+0xf4>)
 80009e8:	f006 fa61 	bl	8006eae <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 4,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2302      	movs	r3, #2
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	4919      	ldr	r1, [pc, #100]	; (8000a60 <main+0xf8>)
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <main+0xfc>)
 80009fc:	f006 fa57 	bl	8006eae <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2305      	movs	r3, #5
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	4916      	ldr	r1, [pc, #88]	; (8000a68 <main+0x100>)
 8000a0e:	4817      	ldr	r0, [pc, #92]	; (8000a6c <main+0x104>)
 8000a10:	f006 fa4d 	bl	8006eae <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_reed_scan_sensors, "t_reed_scan_sensors",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2305      	movs	r3, #5
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4913      	ldr	r1, [pc, #76]	; (8000a70 <main+0x108>)
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0x10c>)
 8000a24:	f006 fa43 	bl	8006eae <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4910      	ldr	r1, [pc, #64]	; (8000a78 <main+0x110>)
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <main+0x114>)
 8000a38:	f006 fa39 	bl	8006eae <xTaskCreate>

	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a3c:	f005 fbcc 	bl	80061d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000a40:	e7fe      	b.n	8000a40 <main+0xd8>
 8000a42:	bf00      	nop
 8000a44:	200004ac 	.word	0x200004ac
 8000a48:	200004b0 	.word	0x200004b0
 8000a4c:	200004b4 	.word	0x200004b4
 8000a50:	08008844 	.word	0x08008844
 8000a54:	200004a8 	.word	0x200004a8
 8000a58:	080087f8 	.word	0x080087f8
 8000a5c:	08001649 	.word	0x08001649
 8000a60:	08008800 	.word	0x08008800
 8000a64:	080016b9 	.word	0x080016b9
 8000a68:	0800880c 	.word	0x0800880c
 8000a6c:	080019d1 	.word	0x080019d1
 8000a70:	08008818 	.word	0x08008818
 8000a74:	08002d41 	.word	0x08002d41
 8000a78:	0800882c 	.word	0x0800882c
 8000a7c:	080017fd 	.word	0x080017fd

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 fdbc 	bl	800860c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <SystemClock_Config+0xd0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a28      	ldr	r2, [pc, #160]	; (8000b50 <SystemClock_Config+0xd0>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af4:	2310      	movs	r3, #16
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fd40 	bl	8004590 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b16:	f000 f9de 	bl	8000ed6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 ffa2 	bl	8004a80 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b42:	f000 f9c8 	bl	8000ed6 <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3750      	adds	r7, #80	; 0x50
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b96:	f003 f8af 	bl	8003cf8 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 f999 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200003ac 	.word	0x200003ac
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	000186a0 	.word	0x000186a0

08000bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b092      	sub	sp, #72	; 0x48
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f007 fd14 	bl	800860c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000be6:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <MX_TIM1_Init+0xfc>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000bf8:	2268      	movs	r2, #104	; 0x68
 8000bfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c10:	f004 fa30 	bl	8005074 <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 f95c 	bl	8000ed6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c2e:	f005 f9e7 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c38:	f000 f94d 	bl	8000ed6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	220c      	movs	r2, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c5e:	f004 fdd7 	bl	8005810 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000c68:	f000 f935 	bl	8000ed6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000c90:	f005 fa24 	bl	80060dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000c9a:	f000 f91c 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM1_Init+0xf8>)
 8000ca0:	f000 fbd6 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000ca4:	bf00      	nop
 8000ca6:	3748      	adds	r7, #72	; 0x48
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000400 	.word	0x20000400
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	203c      	movs	r0, #60	; 0x3c
 8000cdc:	f002 fa9a 	bl	8003214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ce0:	203c      	movs	r0, #60	; 0x3c
 8000ce2:	f002 fab3 	bl	800324c <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a61      	ldr	r2, [pc, #388]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b5f      	ldr	r3, [pc, #380]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a5a      	ldr	r2, [pc, #360]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a53      	ldr	r2, [pc, #332]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REED_1_Pin|REED_2_Pin|REED_7_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2183      	movs	r1, #131	; 0x83
 8000d7e:	4847      	ldr	r0, [pc, #284]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000d80:	f002 ffa0 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|REED_4_Pin|REED_5_Pin|REED_8_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000d8a:	4845      	ldr	r0, [pc, #276]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000d8c:	f002 ff9a 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REED_3_Pin|REED_6_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2141      	movs	r1, #65	; 0x41
 8000d94:	4843      	ldr	r0, [pc, #268]	; (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000d96:	f002 ff95 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	483a      	ldr	r0, [pc, #232]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000db2:	f002 fdeb 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
  GPIO_InitStruct.Pin = REED_1_Pin|REED_2_Pin|REED_7_Pin;
 8000db6:	2383      	movs	r3, #131	; 0x83
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4833      	ldr	r0, [pc, #204]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000dce:	f002 fddd 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000dea:	f002 fdcf 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
  GPIO_InitStruct.Pin = REED_4_Pin|REED_5_Pin|REED_8_Pin;
 8000dee:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e08:	f002 fdc0 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : REED_D_Pin */
  GPIO_InitStruct.Pin = REED_D_Pin;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REED_D_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481f      	ldr	r0, [pc, #124]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000e20:	f002 fdb4 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_3_Pin REED_6_Pin */
  GPIO_InitStruct.Pin = REED_3_Pin|REED_6_Pin;
 8000e24:	2341      	movs	r3, #65	; 0x41
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000e3c:	f002 fda6 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_C_Pin
                           REED_E_Pin */
  GPIO_InitStruct.Pin = REED_B_Pin|REED_H_Pin|REED_G_Pin|REED_C_Pin
 8000e40:	f246 4330 	movw	r3, #25648	; 0x6430
 8000e44:	617b      	str	r3, [r7, #20]
                          |REED_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000e56:	f002 fd99 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
  GPIO_InitStruct.Pin = BOTON_1_Pin|BOTON_2_Pin|BOTON_3_Pin;
 8000e5a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000e70:	f002 fd8c 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : REED_A_Pin REED_F_Pin */
  GPIO_InitStruct.Pin = REED_A_Pin|REED_F_Pin;
 8000e74:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e8a:	f002 fd7f 	bl	800398c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f005 f9e4 	bl	800627e <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <StartDefaultTask+0x8>

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f002 f8cb 	bl	8003064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eda:	b672      	cpsid	i
}
 8000edc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ede:	e7fe      	b.n	8000ede <Error_Handler+0x8>

08000ee0 <get_last_sensor_change>:

void (*get_sensors)(char[8]);

extern uint8_t reed_data[8];

piece_change_t get_last_sensor_change(){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0

    //get_sensors(new_sensor_state);


    piece_change_t ret = {0, NONE};
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	713b      	strb	r3, [r7, #4]
 8000eea:	2300      	movs	r3, #0
 8000eec:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e054      	b.n	8000f9e <get_last_sensor_change+0xbe>
        for (int file = 0; file < 8; file++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e04b      	b.n	8000f92 <get_last_sensor_change+0xb2>
            char new_state = (reed_data[rank]&(1<<file)) != 0;
 8000efa:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <get_last_sensor_change+0xe4>)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	fa42 f303 	asr.w	r3, r2, r3
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f1a:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <get_last_sensor_change+0xe8>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	fa42 f303 	asr.w	r3, r2, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f3a:	7afa      	ldrb	r2, [r7, #11]
 8000f3c:	7abb      	ldrb	r3, [r7, #10]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d024      	beq.n	8000f8c <get_last_sensor_change+0xac>
                ret.square_affected = COORD2SQ(rank, file);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <get_last_sensor_change+0x7e>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e000      	b.n	8000f60 <get_last_sensor_change+0x80>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e00b      	b.n	8000f80 <get_last_sensor_change+0xa0>
                    previous_sensor_state[i] = reed_data[i];
 8000f68:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <get_last_sensor_change+0xe4>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	7819      	ldrb	r1, [r3, #0]
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <get_last_sensor_change+0xe8>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	460a      	mov	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	ddf0      	ble.n	8000f68 <get_last_sensor_change+0x88>
                }
                return ret;
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	813b      	strh	r3, [r7, #8]
 8000f8a:	e00d      	b.n	8000fa8 <get_last_sensor_change+0xc8>
        for (int file = 0; file < 8; file++) {
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	ddb0      	ble.n	8000efa <get_last_sensor_change+0x1a>
    for (int rank = 0; rank < 8; rank++) {
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	dda7      	ble.n	8000ef4 <get_last_sensor_change+0x14>
            }
        }
    }
    return ret;
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	813b      	strh	r3, [r7, #8]
}
 8000fa8:	2300      	movs	r3, #0
 8000faa:	7a3a      	ldrb	r2, [r7, #8]
 8000fac:	f362 0307 	bfi	r3, r2, #0, #8
 8000fb0:	7a7a      	ldrb	r2, [r7, #9]
 8000fb2:	f362 230f 	bfi	r3, r2, #8, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200016a4 	.word	0x200016a4
 8000fc8:	200004b8 	.word	0x200004b8

08000fcc <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	e044      	b.n	8001066 <is_board_ok+0x9a>
        for (int file = 0; file < 8; file++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e03b      	b.n	800105a <is_board_ok+0x8e>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <is_board_ok+0xac>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	fa42 f303 	asr.w	r3, r2, r3
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d010      	beq.n	800101c <is_board_ok+0x50>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4413      	add	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fec8 	bl	8001da0 <engine_get_piece>
 8001010:	4603      	mov	r3, r0
 8001012:	2b06      	cmp	r3, #6
 8001014:	d102      	bne.n	800101c <is_board_ok+0x50>
                board_ok = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e01b      	b.n	8001054 <is_board_ok+0x88>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <is_board_ok+0xac>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	fa42 f303 	asr.w	r3, r2, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10f      	bne.n	8001054 <is_board_ok+0x88>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f000 feab 	bl	8001da0 <engine_get_piece>
 800104a:	4603      	mov	r3, r0
 800104c:	2b06      	cmp	r3, #6
 800104e:	d001      	beq.n	8001054 <is_board_ok+0x88>
                board_ok = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b07      	cmp	r3, #7
 800105e:	ddc0      	ble.n	8000fe2 <is_board_ok+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3301      	adds	r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b07      	cmp	r3, #7
 800106a:	ddb7      	ble.n	8000fdc <is_board_ok+0x10>
            }
        }
    }
    return board_ok;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200016a4 	.word	0x200016a4

0800107c <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e00f      	b.n	80010b4 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d102      	bne.n	80010ae <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbeb      	blt.n	8001094 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010bc:	697b      	ldr	r3, [r7, #20]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <movement_fsm>:

int total_valid_moves;
move_t valid_moves[255];

void movement_fsm(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 80010d2:	f7ff ff05 	bl	8000ee0 <get_last_sensor_change>
 80010d6:	4603      	mov	r3, r0
 80010d8:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 80010da:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <movement_fsm+0x1bc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	f000 80b8 	beq.w	8001254 <movement_fsm+0x188>
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	f300 80c3 	bgt.w	8001270 <movement_fsm+0x1a4>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <movement_fsm+0x28>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d03f      	beq.n	8001172 <movement_fsm+0xa6>
        break;



    default:
        break;
 80010f2:	e0bd      	b.n	8001270 <movement_fsm+0x1a4>
        if(piece_change.piece_action == REMOVED){
 80010f4:	797b      	ldrb	r3, [r7, #5]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d130      	bne.n	800115c <movement_fsm+0x90>
            movement_state = PIECE_LIFTED_STATE;
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <movement_fsm+0x1bc>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 8001100:	793a      	ldrb	r2, [r7, #4]
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <movement_fsm+0x1c0>)
 8001104:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves);
 8001106:	4862      	ldr	r0, [pc, #392]	; (8001290 <movement_fsm+0x1c4>)
 8001108:	f000 fe3a 	bl	8001d80 <engine_list_moves>
 800110c:	4603      	mov	r3, r0
 800110e:	4a61      	ldr	r2, [pc, #388]	; (8001294 <movement_fsm+0x1c8>)
 8001110:	6013      	str	r3, [r2, #0]
            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 8001112:	4b5e      	ldr	r3, [pc, #376]	; (800128c <movement_fsm+0x1c0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4a5f      	ldr	r2, [pc, #380]	; (8001294 <movement_fsm+0x1c8>)
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	495d      	ldr	r1, [pc, #372]	; (8001290 <movement_fsm+0x1c4>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffad 	bl	800107c <get_lifted_moves>
 8001122:	60b8      	str	r0, [r7, #8]
            if(lifted_piece_valid_moves == 0){
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <movement_fsm+0x6c>
                movement_state = ERROR_STATE;
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <movement_fsm+0x1bc>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001130:	2002      	movs	r0, #2
 8001132:	f001 fd81 	bl	8002c38 <lighting_set_state>
        break;
 8001136:	e09d      	b.n	8001274 <movement_fsm+0x1a8>
                movement_state = PIECE_LIFTED_STATE;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <movement_fsm+0x1bc>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <movement_fsm+0x1c0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fd88 	bl	8002c58 <lighting_piece_lifted_square>
                set_valid_moves(valid_moves, total_valid_moves);
 8001148:	4b52      	ldr	r3, [pc, #328]	; (8001294 <movement_fsm+0x1c8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4850      	ldr	r0, [pc, #320]	; (8001290 <movement_fsm+0x1c4>)
 8001150:	f001 fd92 	bl	8002c78 <set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 8001154:	2001      	movs	r0, #1
 8001156:	f001 fd6f 	bl	8002c38 <lighting_set_state>
        break;
 800115a:	e08b      	b.n	8001274 <movement_fsm+0x1a8>
        else if(piece_change.piece_action == PLACED){
 800115c:	797b      	ldrb	r3, [r7, #5]
 800115e:	2b02      	cmp	r3, #2
 8001160:	f040 8088 	bne.w	8001274 <movement_fsm+0x1a8>
            movement_state = ERROR_STATE;
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <movement_fsm+0x1bc>)
 8001166:	2203      	movs	r2, #3
 8001168:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 800116a:	2002      	movs	r0, #2
 800116c:	f001 fd64 	bl	8002c38 <lighting_set_state>
        break;
 8001170:	e080      	b.n	8001274 <movement_fsm+0x1a8>
        if(piece_change.piece_action == PLACED){
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d11a      	bne.n	80011ae <movement_fsm+0xe2>
            move_played.from = square_lifted;
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <movement_fsm+0x1c0>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f000 fdea 	bl	8001d5c <engine_move_piece>
 8001188:	4603      	mov	r3, r0
 800118a:	73bb      	strb	r3, [r7, #14]
            if(move_ok){
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <movement_fsm+0xd4>
                movement_state = WAIT_STATE;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <movement_fsm+0x1bc>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_IDLE_STATE);
 8001198:	2000      	movs	r0, #0
 800119a:	f001 fd4d 	bl	8002c38 <lighting_set_state>
        break;
 800119e:	e06b      	b.n	8001278 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <movement_fsm+0x1bc>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f001 fd46 	bl	8002c38 <lighting_set_state>
        break;
 80011ac:	e064      	b.n	8001278 <movement_fsm+0x1ac>
        else if(piece_change.piece_action == REMOVED){
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d161      	bne.n	8001278 <movement_fsm+0x1ac>
            total_valid_moves = engine_list_moves(valid_moves);
 80011b4:	4836      	ldr	r0, [pc, #216]	; (8001290 <movement_fsm+0x1c4>)
 80011b6:	f000 fde3 	bl	8001d80 <engine_list_moves>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a35      	ldr	r2, [pc, #212]	; (8001294 <movement_fsm+0x1c8>)
 80011be:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	e035      	b.n	8001236 <movement_fsm+0x16a>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 80011ca:	4931      	ldr	r1, [pc, #196]	; (8001290 <movement_fsm+0x1c4>)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <movement_fsm+0x1c0>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d127      	bne.n	8001230 <movement_fsm+0x164>
 80011e0:	492b      	ldr	r1, [pc, #172]	; (8001290 <movement_fsm+0x1c4>)
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	3301      	adds	r3, #1
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	793b      	ldrb	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d11c      	bne.n	8001230 <movement_fsm+0x164>
                    captured_piece_is_valid = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 80011fa:	793b      	ldrb	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fd2b 	bl	8002c58 <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 8001202:	2003      	movs	r0, #3
 8001204:	f001 fd18 	bl	8002c38 <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 8001208:	4921      	ldr	r1, [pc, #132]	; (8001290 <movement_fsm+0x1c4>)
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	440b      	add	r3, r1
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	7859      	ldrb	r1, [r3, #1]
 8001218:	0209      	lsls	r1, r1, #8
 800121a:	430a      	orrs	r2, r1
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	431a      	orrs	r2, r3
 8001222:	2300      	movs	r3, #0
 8001224:	f362 0317 	bfi	r3, r2, #0, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fd97 	bl	8001d5c <engine_move_piece>
                    break;
 800122e:	e007      	b.n	8001240 <movement_fsm+0x174>
            for(int i = 0; i < total_valid_moves; i++){
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	3301      	adds	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <movement_fsm+0x1c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbc4      	blt.n	80011ca <movement_fsm+0xfe>
            if(!captured_piece_is_valid){
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <movement_fsm+0x1bc>)
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 800124c:	2002      	movs	r0, #2
 800124e:	f001 fcf3 	bl	8002c38 <lighting_set_state>
        break;
 8001252:	e011      	b.n	8001278 <movement_fsm+0x1ac>
        board_ok = is_board_ok();
 8001254:	f7ff feba 	bl	8000fcc <is_board_ok>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
        if(board_ok){
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00c      	beq.n	800127c <movement_fsm+0x1b0>
            movement_state = WAIT_STATE;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <movement_fsm+0x1bc>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 8001268:	2000      	movs	r0, #0
 800126a:	f001 fce5 	bl	8002c38 <lighting_set_state>
        break;
 800126e:	e005      	b.n	800127c <movement_fsm+0x1b0>
        break;
 8001270:	bf00      	nop
 8001272:	e004      	b.n	800127e <movement_fsm+0x1b2>
        break;
 8001274:	bf00      	nop
 8001276:	e002      	b.n	800127e <movement_fsm+0x1b2>
        break;
 8001278:	bf00      	nop
 800127a:	e000      	b.n	800127e <movement_fsm+0x1b2>
        break;
 800127c:	bf00      	nop
    }
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004c0 	.word	0x200004c0
 800128c:	200004c1 	.word	0x200004c1
 8001290:	200004c8 	.word	0x200004c8
 8001294:	200004c4 	.word	0x200004c4

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_MspInit+0x54>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_MspInit+0x54>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x54>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_MspInit+0x54>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_MspInit+0x54>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_MspInit+0x54>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	210f      	movs	r1, #15
 80012da:	f06f 0001 	mvn.w	r0, #1
 80012de:	f001 ff99 	bl	8003214 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_I2C_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_I2C_MspInit+0x88>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001334:	2312      	movs	r3, #18
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_I2C_MspInit+0x8c>)
 800134c:	f002 fb1e 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_I2C_MspInit+0x88>)
 800135a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_I2C_MspInit+0x88>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40005400 	.word	0x40005400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <HAL_TIM_PWM_MspInit+0xc0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d151      	bne.n	8001436 <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_TIM_PWM_MspInit+0xc4>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a2a      	ldr	r2, [pc, #168]	; (8001444 <HAL_TIM_PWM_MspInit+0xc4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_TIM_PWM_MspInit+0xc4>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013b0:	4a26      	ldr	r2, [pc, #152]	; (800144c <HAL_TIM_PWM_MspInit+0xcc>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013b6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 80013f4:	f001 ff38 	bl	8003268 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80013fe:	f7ff fd6a 	bl	8000ed6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_TIM_PWM_MspInit+0xc8>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2105      	movs	r1, #5
 800142a:	201a      	movs	r0, #26
 800142c:	f001 fef2 	bl	8003214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001430:	201a      	movs	r0, #26
 8001432:	f001 ff0b 	bl	800324c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	40023800 	.word	0x40023800
 8001448:	20000448 	.word	0x20000448
 800144c:	40026470 	.word	0x40026470

08001450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_TIM_MspPostInit+0x68>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11e      	bne.n	80014b0 <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_TIM_MspPostInit+0x6c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_MspPostInit+0x6c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0x6c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 800148e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001492:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_TIM_MspPostInit+0x70>)
 80014ac:	f002 fa6e 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_InitTick+0xe8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_InitTick+0xe8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_InitTick+0xe8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f0:	f107 0210 	add.w	r2, r7, #16
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fccc 	bl	8004e98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800150a:	f003 fcb1 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 800150e:	6378      	str	r0, [r7, #52]	; 0x34
 8001510:	e004      	b.n	800151c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001512:	f003 fcad 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8001516:	4603      	mov	r3, r0
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_InitTick+0xec>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	3b01      	subs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_InitTick+0xf0>)
 800152c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001530:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_InitTick+0xf0>)
 8001534:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001538:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_InitTick+0xf0>)
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_InitTick+0xf0>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_InitTick+0xf0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_InitTick+0xf0>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <HAL_InitTick+0xf0>)
 8001554:	f003 fcd2 	bl	8004efc <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800155e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11b      	bne.n	800159e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001566:	4813      	ldr	r0, [pc, #76]	; (80015b4 <HAL_InitTick+0xf0>)
 8001568:	f003 fd22 	bl	8004fb0 <HAL_TIM_Base_Start_IT>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001576:	2b00      	cmp	r3, #0
 8001578:	d111      	bne.n	800159e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800157a:	201c      	movs	r0, #28
 800157c:	f001 fe66 	bl	800324c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d808      	bhi.n	8001598 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001586:	2200      	movs	r2, #0
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	201c      	movs	r0, #28
 800158c:	f001 fe42 	bl	8003214 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001590:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_InitTick+0xf4>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e002      	b.n	800159e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800159e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	200007c8 	.word	0x200007c8
 80015b8:	20000094 	.word	0x20000094

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80015ee:	f004 f807 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000400 	.word	0x20000400

080015fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM2_IRQHandler+0x10>)
 8001602:	f003 fffd 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200007c8 	.word	0x200007c8

08001610 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA2_Stream4_IRQHandler+0x10>)
 8001616:	f001 ff4f 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000448 	.word	0x20000448

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <t_LCD>:

extern TIM_HandleTypeDef htim1;

void tareas_error_handler(uint8_t);

void t_LCD(void*) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <t_LCD+0x6c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <t_LCD+0x16>
		tareas_error_handler(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f000 f9e1 	bl	8001a20 <tareas_error_handler>
	}

	lcd_init();
 800165e:	f7fe ff3d 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <t_LCD+0x6c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f107 0108 	add.w	r1, r7, #8
 800166a:	f04f 32ff 	mov.w	r2, #4294967295
 800166e:	4618      	mov	r0, r3
 8001670:	f005 f88e 	bl	8006790 <xQueueReceive>
		switch (msg.type) {
 8001674:	7a3b      	ldrb	r3, [r7, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d014      	beq.n	80016a4 <t_LCD+0x5c>
 800167a:	2b02      	cmp	r3, #2
 800167c:	dcf1      	bgt.n	8001662 <t_LCD+0x1a>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <t_LCD+0x40>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d009      	beq.n	800169a <t_LCD+0x52>
 8001686:	e014      	b.n	80016b2 <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 8001688:	7a7b      	ldrb	r3, [r7, #9]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff64 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fd58 	bl	8007148 <vTaskDelay>
			break;
 8001698:	e00b      	b.n	80016b2 <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff8b 	bl	80005b8 <lcd_send_data>
			break;
 80016a2:	e006      	b.n	80016b2 <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	3301      	adds	r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ffb4 	bl	8000618 <lcd_send_string>
			break;
 80016b0:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80016b2:	e7d6      	b.n	8001662 <t_LCD+0x1a>
 80016b4:	200004ac 	.word	0x200004ac

080016b8 <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2202      	movs	r2, #2
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f858 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2202      	movs	r2, #2
 80016d4:	2101      	movs	r1, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f851 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2202      	movs	r2, #2
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f84a 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <t_Botones+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <t_Botones+0x40>
		tareas_error_handler(4);
 80016f2:	2004      	movs	r0, #4
 80016f4:	f000 f994 	bl	8001a20 <tareas_error_handler>
	}

	uint8_t msg = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	483e      	ldr	r0, [pc, #248]	; (80017f8 <t_Botones+0x140>)
 8001700:	f002 fac8 	bl	8003c94 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f85c 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4837      	ldr	r0, [pc, #220]	; (80017f8 <t_Botones+0x140>)
 800171a:	f002 fabb 	bl	8003c94 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f84f 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 800172e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001732:	4831      	ldr	r0, [pc, #196]	; (80017f8 <t_Botones+0x140>)
 8001734:	f002 faae 	bl	8003c94 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f842 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) {
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f8c1 	bl	80008d4 <debounce_flank>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d012      	beq.n	800177e <t_Botones+0xc6>
			msg = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <t_Botones+0x13c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fa01 	bl	8006b68 <uxQueueMessagesWaiting>
 8001766:	4603      	mov	r3, r0
 8001768:	2b13      	cmp	r3, #19
 800176a:	d808      	bhi.n	800177e <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <t_Botones+0x13c>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	f107 010f 	add.w	r1, r7, #15
 8001774:	2300      	movs	r3, #0
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	f004 ff0b 	bl	8006594 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) {
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f8a6 	bl	80008d4 <debounce_flank>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d012      	beq.n	80017b4 <t_Botones+0xfc>
			msg = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <t_Botones+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f9e6 	bl	8006b68 <uxQueueMessagesWaiting>
 800179c:	4603      	mov	r3, r0
 800179e:	2b13      	cmp	r3, #19
 80017a0:	d808      	bhi.n	80017b4 <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <t_Botones+0x13c>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f107 010f 	add.w	r1, r7, #15
 80017aa:	2300      	movs	r3, #0
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	f004 fef0 	bl	8006594 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) {
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f88b 	bl	80008d4 <debounce_flank>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <t_Botones+0x132>
			msg = 3;
 80017c4:	2303      	movs	r3, #3
 80017c6:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <t_Botones+0x13c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 f9cb 	bl	8006b68 <uxQueueMessagesWaiting>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b13      	cmp	r3, #19
 80017d6:	d808      	bhi.n	80017ea <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <t_Botones+0x13c>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 010f 	add.w	r1, r7, #15
 80017e0:	2300      	movs	r3, #0
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	f004 fed5 	bl	8006594 <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 80017ea:	200a      	movs	r0, #10
 80017ec:	f005 fcac 	bl	8007148 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 80017f0:	e784      	b.n	80016fc <t_Botones+0x44>
 80017f2:	bf00      	nop
 80017f4:	200004b0 	.word	0x200004b0
 80017f8:	40020800 	.word	0x40020800

080017fc <t_userLoop>:
	}
}

void t_userLoop(void*) {
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
 8001802:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001804:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <t_userLoop+0x1bc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <t_userLoop+0x16>
		tareas_error_handler(2);
 800180c:	2002      	movs	r0, #2
 800180e:	f000 f907 	bl	8001a20 <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 8001812:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <t_userLoop+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <t_userLoop+0x24>
		tareas_error_handler(4);
 800181a:	2004      	movs	r0, #4
 800181c:	f000 f900 	bl	8001a20 <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 8001820:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <t_userLoop+0x1c4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <t_userLoop+0x32>
		tareas_error_handler(1);
 8001828:	2001      	movs	r0, #1
 800182a:	f000 f8f9 	bl	8001a20 <tareas_error_handler>
	}

	user_htim1 = &htim1;
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <t_userLoop+0x1c8>)
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <t_userLoop+0x1cc>)
 8001832:	601a      	str	r2, [r3, #0]
	user_init();
 8001834:	f000 f8fc 	bl	8001a30 <user_init>

	LCDQueueItem_t msg = { 0 };
 8001838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]

	ws2812_init();
 800184a:	f001 f831 	bl	80028b0 <ws2812_init>

	msg = lcd_msg_clear();
 800184e:	463b      	mov	r3, r7
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe ff2e 	bl	80006b2 <lcd_msg_clear>
 8001856:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800185a:	463d      	mov	r5, r7
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001864:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001868:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <t_userLoop+0x1c4>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001870:	2300      	movs	r3, #0
 8001872:	f04f 32ff 	mov.w	r2, #4294967295
 8001876:	f004 fe8d 	bl	8006594 <xQueueGenericSend>
	msg = lcd_msg_first_line();
 800187a:	463b      	mov	r3, r7
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe ff3a 	bl	80006f6 <lcd_msg_first_line>
 8001882:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001886:	463d      	mov	r5, r7
 8001888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001890:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <t_userLoop+0x1c4>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800189c:	2300      	movs	r3, #0
 800189e:	f04f 32ff 	mov.w	r2, #4294967295
 80018a2:	f004 fe77 	bl	8006594 <xQueueGenericSend>
	msg = lcd_msg_from_string("Ajedrez Inteligente");
 80018a6:	463b      	mov	r3, r7
 80018a8:	4948      	ldr	r1, [pc, #288]	; (80019cc <t_userLoop+0x1d0>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fec9 	bl	8000642 <lcd_msg_from_string>
 80018b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80018b4:	463d      	mov	r5, r7
 80018b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018be:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <t_userLoop+0x1c4>)
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018ca:	2300      	movs	r3, #0
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	f004 fe60 	bl	8006594 <xQueueGenericSend>

	uint8_t button;

	while (1) {
		if (uxQueueMessagesWaiting(buttons_queue) > 0) {
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <t_userLoop+0x1c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f945 	bl	8006b68 <uxQueueMessagesWaiting>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05c      	beq.n	800199e <t_userLoop+0x1a2>
			if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <t_userLoop+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80018ec:	2200      	movs	r2, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 ff4e 	bl	8006790 <xQueueReceive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d151      	bne.n	800199e <t_userLoop+0x1a2>
				switch (button) {
 80018fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d049      	beq.n	8001996 <t_userLoop+0x19a>
 8001902:	2b03      	cmp	r3, #3
 8001904:	dc4b      	bgt.n	800199e <t_userLoop+0x1a2>
 8001906:	2b01      	cmp	r3, #1
 8001908:	d048      	beq.n	800199c <t_userLoop+0x1a0>
 800190a:	2b02      	cmp	r3, #2
 800190c:	d147      	bne.n	800199e <t_userLoop+0x1a2>
				case 1:
					break;
				case 2: // Boton abajo (contra el tablero)
					msg = lcd_msg_clear();
 800190e:	463b      	mov	r3, r7
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fece 	bl	80006b2 <lcd_msg_clear>
 8001916:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800191a:	463d      	mov	r5, r7
 800191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001920:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001924:	e884 0003 	stmia.w	r4, {r0, r1}
					xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <t_userLoop+0x1c4>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001930:	2300      	movs	r3, #0
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	f004 fe2d 	bl	8006594 <xQueueGenericSend>
					msg = lcd_msg_first_line();
 800193a:	463b      	mov	r3, r7
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe feda 	bl	80006f6 <lcd_msg_first_line>
 8001942:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001946:	463d      	mov	r5, r7
 8001948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001950:	e884 0003 	stmia.w	r4, {r0, r1}
					xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <t_userLoop+0x1c4>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800195c:	2300      	movs	r3, #0
 800195e:	f04f 32ff 	mov.w	r2, #4294967295
 8001962:	f004 fe17 	bl	8006594 <xQueueGenericSend>
					msg = lcd_msg_from_string("Ajedrez Inteligente");
 8001966:	463b      	mov	r3, r7
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <t_userLoop+0x1d0>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe69 	bl	8000642 <lcd_msg_from_string>
 8001970:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001974:	463d      	mov	r5, r7
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800197e:	e884 0003 	stmia.w	r4, {r0, r1}
					xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <t_userLoop+0x1c4>)
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800198a:	2300      	movs	r3, #0
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	f004 fe00 	bl	8006594 <xQueueGenericSend>
					break;
 8001994:	e003      	b.n	800199e <t_userLoop+0x1a2>
				case 3: // Boton verde
					user_init();
 8001996:	f000 f84b 	bl	8001a30 <user_init>
 800199a:	e000      	b.n	800199e <t_userLoop+0x1a2>
					break;
 800199c:	bf00      	nop
				}
			}
		}

		user_loop();
 800199e:	f000 f977 	bl	8001c90 <user_loop>
		xSemaphoreGive(ws2812_sem);
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <t_userLoop+0x1bc>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	f004 fdf2 	bl	8006594 <xQueueGenericSend>
		//ws2812_update_leds_from_data(user_htim1);
		vTaskDelay(33); //30 fps aprox
 80019b0:	2021      	movs	r0, #33	; 0x21
 80019b2:	f005 fbc9 	bl	8007148 <vTaskDelay>
		if (uxQueueMessagesWaiting(buttons_queue) > 0) {
 80019b6:	e78d      	b.n	80018d4 <t_userLoop+0xd8>
 80019b8:	200004b4 	.word	0x200004b4
 80019bc:	200004b0 	.word	0x200004b0
 80019c0:	200004ac 	.word	0x200004ac
 80019c4:	20000810 	.word	0x20000810
 80019c8:	20000400 	.word	0x20000400
 80019cc:	08008860 	.word	0x08008860

080019d0 <t_WS2812>:
	}
}

void t_WS2812(void*) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <t_WS2812+0x44>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <t_WS2812+0x16>
		tareas_error_handler(2);
 80019e0:	2002      	movs	r0, #2
 80019e2:	f000 f81d 	bl	8001a20 <tareas_error_handler>
	}

	ws2812_init();
 80019e6:	f000 ff63 	bl	80028b0 <ws2812_init>

	while (1) {
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <t_WS2812+0x44>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 31ff 	mov.w	r1, #4294967295
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 ffac 	bl	8006950 <xQueueSemaphoreTake>
		ws2812_update_leds_from_data(user_htim1);
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <t_WS2812+0x48>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fff9 	bl	80029f4 <ws2812_update_leds_from_data>
		while (!ws2812_finished_dma) {
 8001a02:	e002      	b.n	8001a0a <t_WS2812+0x3a>
			vTaskDelay(5);
 8001a04:	2005      	movs	r0, #5
 8001a06:	f005 fb9f 	bl	8007148 <vTaskDelay>
		while (!ws2812_finished_dma) {
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <t_WS2812+0x4c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f8      	beq.n	8001a04 <t_WS2812+0x34>
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 8001a12:	e7ea      	b.n	80019ea <t_WS2812+0x1a>
 8001a14:	200004b4 	.word	0x200004b4
 8001a18:	20000810 	.word	0x20000810
 8001a1c:	20001690 	.word	0x20001690

08001a20 <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(uint8_t error) {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2a:	b672      	cpsid	i
}
 8001a2c:	bf00      	nop
	__disable_irq();
	while (1) {
		UNUSED(error);
 8001a2e:	e7fe      	b.n	8001a2e <tareas_error_handler+0xe>

08001a30 <user_init>:

TIM_HandleTypeDef *user_htim1;
extern xQueueHandle buttons_queue;
extern xQueueHandle lcd_queue;

void user_init() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	//game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);

	game_set_led_output_array(ws2812_color_data);
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <user_init+0x14>)
 8001a36:	f7fe ff7d 	bl	8000934 <game_set_led_output_array>

	game_reset();
 8001a3a:	f7fe ff8e 	bl	800095a <game_reset>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001590 	.word	0x20001590

08001a48 <get_promotion>:

piece_t get_promotion() {
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
 8001a5e:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fe20 	bl	80006b2 <lcd_msg_clear>
 8001a72:	f107 041c 	add.w	r4, r7, #28
 8001a76:	463d      	mov	r5, r7
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a80:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <get_promotion+0x22c>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f107 011c 	add.w	r1, r7, #28
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a92:	f004 fd7f 	bl	8006594 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001a96:	463b      	mov	r3, r7
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fe2c 	bl	80006f6 <lcd_msg_first_line>
 8001a9e:	f107 041c 	add.w	r4, r7, #28
 8001aa2:	463d      	mov	r5, r7
 8001aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aac:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ab0:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <get_promotion+0x22c>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f107 011c 	add.w	r1, r7, #28
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	f004 fd69 	bl	8006594 <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	496c      	ldr	r1, [pc, #432]	; (8001c78 <get_promotion+0x230>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fdbb 	bl	8000642 <lcd_msg_from_string>
 8001acc:	f107 041c 	add.w	r4, r7, #28
 8001ad0:	463d      	mov	r5, r7
 8001ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ada:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <get_promotion+0x22c>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	f107 011c 	add.w	r1, r7, #28
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	f004 fd52 	bl	8006594 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001af0:	463b      	mov	r3, r7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fe21 	bl	800073a <lcd_msg_second_line>
 8001af8:	f107 041c 	add.w	r4, r7, #28
 8001afc:	463d      	mov	r5, r7
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b06:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <get_promotion+0x22c>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	f107 011c 	add.w	r1, r7, #28
 8001b12:	2300      	movs	r3, #0
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	f004 fd3c 	bl	8006594 <xQueueGenericSend>
		switch (piece) {
 8001b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b20:	3b01      	subs	r3, #1
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d86a      	bhi.n	8001bfc <get_promotion+0x1b4>
 8001b26:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <get_promotion+0xe4>)
 8001b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b6d 	.word	0x08001b6d
 8001b34:	08001bcd 	.word	0x08001bcd
 8001b38:	08001b9d 	.word	0x08001b9d
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	494f      	ldr	r1, [pc, #316]	; (8001c7c <get_promotion+0x234>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fd7e 	bl	8000642 <lcd_msg_from_string>
 8001b46:	f107 041c 	add.w	r4, r7, #28
 8001b4a:	463d      	mov	r5, r7
 8001b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b54:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <get_promotion+0x22c>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 011c 	add.w	r1, r7, #28
 8001b60:	2300      	movs	r3, #0
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	f004 fd15 	bl	8006594 <xQueueGenericSend>
			break;
 8001b6a:	e047      	b.n	8001bfc <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4944      	ldr	r1, [pc, #272]	; (8001c80 <get_promotion+0x238>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd66 	bl	8000642 <lcd_msg_from_string>
 8001b76:	f107 041c 	add.w	r4, r7, #28
 8001b7a:	463d      	mov	r5, r7
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b84:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <get_promotion+0x22c>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	f107 011c 	add.w	r1, r7, #28
 8001b90:	2300      	movs	r3, #0
 8001b92:	f04f 32ff 	mov.w	r2, #4294967295
 8001b96:	f004 fcfd 	bl	8006594 <xQueueGenericSend>
			break;
 8001b9a:	e02f      	b.n	8001bfc <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4939      	ldr	r1, [pc, #228]	; (8001c84 <get_promotion+0x23c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fd4e 	bl	8000642 <lcd_msg_from_string>
 8001ba6:	f107 041c 	add.w	r4, r7, #28
 8001baa:	463d      	mov	r5, r7
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bb4:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <get_promotion+0x22c>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f107 011c 	add.w	r1, r7, #28
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc6:	f004 fce5 	bl	8006594 <xQueueGenericSend>
			break;
 8001bca:	e017      	b.n	8001bfc <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 8001bcc:	463b      	mov	r3, r7
 8001bce:	492e      	ldr	r1, [pc, #184]	; (8001c88 <get_promotion+0x240>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fd36 	bl	8000642 <lcd_msg_from_string>
 8001bd6:	f107 041c 	add.w	r4, r7, #28
 8001bda:	463d      	mov	r5, r7
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be4:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <get_promotion+0x22c>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f107 011c 	add.w	r1, r7, #28
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf6:	f004 fccd 	bl	8006594 <xQueueGenericSend>
			break;
 8001bfa:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <get_promotion+0x244>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f107 011b 	add.w	r1, r7, #27
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 fdc1 	bl	8006790 <xQueueReceive>

		switch (button) {
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d023      	beq.n	8001c5c <get_promotion+0x214>
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	dc22      	bgt.n	8001c5e <get_promotion+0x216>
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d010      	beq.n	8001c3e <get_promotion+0x1f6>
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d11e      	bne.n	8001c5e <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 8001c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c24:	3301      	adds	r3, #1
 8001c26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 8001c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d902      	bls.n	8001c38 <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	76fb      	strb	r3, [r7, #27]
			break;
 8001c3c:	e00f      	b.n	8001c5e <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 8001c3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 8001c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 8001c50:	2304      	movs	r3, #4
 8001c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	76fb      	strb	r3, [r7, #27]
			break;
 8001c5a:	e000      	b.n	8001c5e <get_promotion+0x216>
			break;
 8001c5c:	bf00      	nop
		}

		if (button)
 8001c5e:	7efb      	ldrb	r3, [r7, #27]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d100      	bne.n	8001c66 <get_promotion+0x21e>
		msg = lcd_msg_clear();
 8001c64:	e701      	b.n	8001a6a <get_promotion+0x22>
			break;
 8001c66:	bf00      	nop
	}

	return piece;
 8001c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3738      	adds	r7, #56	; 0x38
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bdb0      	pop	{r4, r5, r7, pc}
 8001c74:	200004ac 	.word	0x200004ac
 8001c78:	08008874 	.word	0x08008874
 8001c7c:	08008884 	.word	0x08008884
 8001c80:	08008890 	.word	0x08008890
 8001c84:	0800889c 	.word	0x0800889c
 8001c88:	080088a8 	.word	0x080088a8
 8001c8c:	200004b0 	.word	0x200004b0

08001c90 <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	game_fsm();
 8001c94:	f7fe fe59 	bl	800094a <game_fsm>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e00d      	b.n	8001cc6 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3380      	adds	r3, #128	; 0x80
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cca:	ddee      	ble.n	8001caa <clear_game_state+0xe>
    }
    return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70bb      	strb	r3, [r7, #2]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	78f9      	ldrb	r1, [r7, #3]
 8001cfa:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	78ba      	ldrb	r2, [r7, #2]
 8001d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	2106      	movs	r1, #6
 8001d28:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 8001d48:	4902      	ldr	r1, [pc, #8]	; (8001d54 <engine_reset+0x10>)
 8001d4a:	4803      	ldr	r0, [pc, #12]	; (8001d58 <engine_reset+0x14>)
 8001d4c:	f000 f838 	bl	8001dc0 <load_fen>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	080088b4 	.word	0x080088b4
 8001d58:	20000814 	.word	0x20000814

08001d5c <engine_move_piece>:

char engine_move_piece(move_t move){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    return make_move(&game_state, move, 1);
 8001d64:	2201      	movs	r2, #1
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <engine_move_piece+0x20>)
 8001d6a:	f000 f9d7 	bl	800211c <make_move>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	b2db      	uxtb	r3, r3
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000814 	.word	0x20000814

08001d80 <engine_list_moves>:

int engine_list_moves(move_t * moves){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    return generate_moves(&game_state, moves);
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4804      	ldr	r0, [pc, #16]	; (8001d9c <engine_list_moves+0x1c>)
 8001d8c:	f000 fae0 	bl	8002350 <generate_moves>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000814 	.word	0x20000814

08001da0 <engine_get_piece>:

char engine_get_piece(uint8_t square){
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
    return game_state.pieces[square];
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <engine_get_piece+0x1c>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20000814 	.word	0x20000814

08001dc0 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff66 	bl	8001c9c <clear_game_state>

    char * f = (char *)fen;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b2f      	subs	r3, #47	; 0x2f
 8001de2:	2b43      	cmp	r3, #67	; 0x43
 8001de4:	f200 8166 	bhi.w	80020b4 <load_fen+0x2f4>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <load_fen+0x30>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08002069 	.word	0x08002069
 8001df4:	080020b5 	.word	0x080020b5
 8001df8:	08002075 	.word	0x08002075
 8001dfc:	0800207d 	.word	0x0800207d
 8001e00:	08002085 	.word	0x08002085
 8001e04:	0800208d 	.word	0x0800208d
 8001e08:	08002095 	.word	0x08002095
 8001e0c:	0800209d 	.word	0x0800209d
 8001e10:	080020a5 	.word	0x080020a5
 8001e14:	080020ad 	.word	0x080020ad
 8001e18:	080020b5 	.word	0x080020b5
 8001e1c:	080020b5 	.word	0x080020b5
 8001e20:	080020b5 	.word	0x080020b5
 8001e24:	080020b5 	.word	0x080020b5
 8001e28:	080020b5 	.word	0x080020b5
 8001e2c:	080020b5 	.word	0x080020b5
 8001e30:	080020b5 	.word	0x080020b5
 8001e34:	080020b5 	.word	0x080020b5
 8001e38:	080020b5 	.word	0x080020b5
 8001e3c:	08001f5b 	.word	0x08001f5b
 8001e40:	080020b5 	.word	0x080020b5
 8001e44:	080020b5 	.word	0x080020b5
 8001e48:	080020b5 	.word	0x080020b5
 8001e4c:	080020b5 	.word	0x080020b5
 8001e50:	080020b5 	.word	0x080020b5
 8001e54:	080020b5 	.word	0x080020b5
 8001e58:	080020b5 	.word	0x080020b5
 8001e5c:	080020b5 	.word	0x080020b5
 8001e60:	08001f01 	.word	0x08001f01
 8001e64:	080020b5 	.word	0x080020b5
 8001e68:	080020b5 	.word	0x080020b5
 8001e6c:	08001f79 	.word	0x08001f79
 8001e70:	080020b5 	.word	0x080020b5
 8001e74:	08001f97 	.word	0x08001f97
 8001e78:	08001f1f 	.word	0x08001f1f
 8001e7c:	08001f3d 	.word	0x08001f3d
 8001e80:	080020b5 	.word	0x080020b5
 8001e84:	080020b5 	.word	0x080020b5
 8001e88:	080020b5 	.word	0x080020b5
 8001e8c:	080020b5 	.word	0x080020b5
 8001e90:	080020b5 	.word	0x080020b5
 8001e94:	080020b5 	.word	0x080020b5
 8001e98:	080020b5 	.word	0x080020b5
 8001e9c:	080020b5 	.word	0x080020b5
 8001ea0:	080020b5 	.word	0x080020b5
 8001ea4:	080020b5 	.word	0x080020b5
 8001ea8:	080020b5 	.word	0x080020b5
 8001eac:	080020b5 	.word	0x080020b5
 8001eb0:	080020b5 	.word	0x080020b5
 8001eb4:	080020b5 	.word	0x080020b5
 8001eb8:	080020b5 	.word	0x080020b5
 8001ebc:	0800200f 	.word	0x0800200f
 8001ec0:	080020b5 	.word	0x080020b5
 8001ec4:	080020b5 	.word	0x080020b5
 8001ec8:	080020b5 	.word	0x080020b5
 8001ecc:	080020b5 	.word	0x080020b5
 8001ed0:	080020b5 	.word	0x080020b5
 8001ed4:	080020b5 	.word	0x080020b5
 8001ed8:	080020b5 	.word	0x080020b5
 8001edc:	080020b5 	.word	0x080020b5
 8001ee0:	08001fb5 	.word	0x08001fb5
 8001ee4:	080020b5 	.word	0x080020b5
 8001ee8:	080020b5 	.word	0x080020b5
 8001eec:	0800202d 	.word	0x0800202d
 8001ef0:	080020b5 	.word	0x080020b5
 8001ef4:	0800204b 	.word	0x0800204b
 8001ef8:	08001fd3 	.word	0x08001fd3
 8001efc:	08001ff1 	.word	0x08001ff1
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8001f00:	7abb      	ldrb	r3, [r7, #10]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fee2 	bl	8001cda <place_piece>
            col++;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	72fb      	strb	r3, [r7, #11]
            break;
 8001f1c:	e0ca      	b.n	80020b4 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8001f1e:	7abb      	ldrb	r3, [r7, #10]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fed3 	bl	8001cda <place_piece>
            col++;
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	3301      	adds	r3, #1
 8001f38:	72fb      	strb	r3, [r7, #11]
            break;
 8001f3a:	e0bb      	b.n	80020b4 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8001f3c:	7abb      	ldrb	r3, [r7, #10]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	4413      	add	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fec4 	bl	8001cda <place_piece>
            col++;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	3301      	adds	r3, #1
 8001f56:	72fb      	strb	r3, [r7, #11]
            break;
 8001f58:	e0ac      	b.n	80020b4 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 8001f5a:	7abb      	ldrb	r3, [r7, #10]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	2103      	movs	r1, #3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff feb5 	bl	8001cda <place_piece>
            col++;
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	3301      	adds	r3, #1
 8001f74:	72fb      	strb	r3, [r7, #11]
            break;
 8001f76:	e09d      	b.n	80020b4 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8001f78:	7abb      	ldrb	r3, [r7, #10]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	4413      	add	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	2104      	movs	r1, #4
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fea6 	bl	8001cda <place_piece>
            col++;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	3301      	adds	r3, #1
 8001f92:	72fb      	strb	r3, [r7, #11]
            break;
 8001f94:	e08e      	b.n	80020b4 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 8001f96:	7abb      	ldrb	r3, [r7, #10]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2105      	movs	r1, #5
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe97 	bl	8001cda <place_piece>
            col++;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	72fb      	strb	r3, [r7, #11]
            break;
 8001fb2:	e07f      	b.n	80020b4 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8001fb4:	7abb      	ldrb	r3, [r7, #10]
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe88 	bl	8001cda <place_piece>
            col++;
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	72fb      	strb	r3, [r7, #11]
            break;
 8001fd0:	e070      	b.n	80020b4 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 8001fd2:	7abb      	ldrb	r3, [r7, #10]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fe79 	bl	8001cda <place_piece>
            col++;
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	3301      	adds	r3, #1
 8001fec:	72fb      	strb	r3, [r7, #11]
            break;
 8001fee:	e061      	b.n	80020b4 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8001ff0:	7abb      	ldrb	r3, [r7, #10]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2102      	movs	r1, #2
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fe6a 	bl	8001cda <place_piece>
            col++;
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	3301      	adds	r3, #1
 800200a:	72fb      	strb	r3, [r7, #11]
            break;
 800200c:	e052      	b.n	80020b4 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 800200e:	7abb      	ldrb	r3, [r7, #10]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	b2da      	uxtb	r2, r3
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	4413      	add	r3, r2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2201      	movs	r2, #1
 800201c:	2103      	movs	r1, #3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fe5b 	bl	8001cda <place_piece>
            col++;
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	72fb      	strb	r3, [r7, #11]
            break;
 800202a:	e043      	b.n	80020b4 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 800202c:	7abb      	ldrb	r3, [r7, #10]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	b2da      	uxtb	r2, r3
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	4413      	add	r3, r2
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2201      	movs	r2, #1
 800203a:	2104      	movs	r1, #4
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe4c 	bl	8001cda <place_piece>
            col++;
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	3301      	adds	r3, #1
 8002046:	72fb      	strb	r3, [r7, #11]
            break;
 8002048:	e034      	b.n	80020b4 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 800204a:	7abb      	ldrb	r3, [r7, #10]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	b2da      	uxtb	r2, r3
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	4413      	add	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2201      	movs	r2, #1
 8002058:	2105      	movs	r1, #5
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fe3d 	bl	8001cda <place_piece>
            col++;
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	3301      	adds	r3, #1
 8002064:	72fb      	strb	r3, [r7, #11]
            break;
 8002066:	e025      	b.n	80020b4 <load_fen+0x2f4>
        case '/':
            row--;
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	3b01      	subs	r3, #1
 800206c:	72bb      	strb	r3, [r7, #10]
            col=0;
 800206e:	2300      	movs	r3, #0
 8002070:	72fb      	strb	r3, [r7, #11]
            break;
 8002072:	e01f      	b.n	80020b4 <load_fen+0x2f4>
        case '1':
            col+=1;
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	3301      	adds	r3, #1
 8002078:	72fb      	strb	r3, [r7, #11]
            break;
 800207a:	e01b      	b.n	80020b4 <load_fen+0x2f4>
        case '2':
            col+=2;
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	3302      	adds	r3, #2
 8002080:	72fb      	strb	r3, [r7, #11]
            break;
 8002082:	e017      	b.n	80020b4 <load_fen+0x2f4>
        case '3':
            col+=3;
 8002084:	7afb      	ldrb	r3, [r7, #11]
 8002086:	3303      	adds	r3, #3
 8002088:	72fb      	strb	r3, [r7, #11]
            break;
 800208a:	e013      	b.n	80020b4 <load_fen+0x2f4>
        case '4':
            col+=4;
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	3304      	adds	r3, #4
 8002090:	72fb      	strb	r3, [r7, #11]
            break;
 8002092:	e00f      	b.n	80020b4 <load_fen+0x2f4>
        case '5':
            col+=5;
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	3305      	adds	r3, #5
 8002098:	72fb      	strb	r3, [r7, #11]
            break;
 800209a:	e00b      	b.n	80020b4 <load_fen+0x2f4>
        case '6':
            col+=6;
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	3306      	adds	r3, #6
 80020a0:	72fb      	strb	r3, [r7, #11]
            break;
 80020a2:	e007      	b.n	80020b4 <load_fen+0x2f4>
        case '7':
            col+=7;
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	3307      	adds	r3, #7
 80020a8:	72fb      	strb	r3, [r7, #11]
            break;
 80020aa:	e003      	b.n	80020b4 <load_fen+0x2f4>
        case '8':
            col+=8;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	3308      	adds	r3, #8
 80020b0:	72fb      	strb	r3, [r7, #11]
            break;
 80020b2:	bf00      	nop
        };

        f++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f47f ae8c 	bne.w	8001ddc <load_fen+0x1c>

    f++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b77      	cmp	r3, #119	; 0x77
 80020d0:	d104      	bne.n	80020dc <load_fen+0x31c>
        state->side_to_move = WHITE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80020da:	e003      	b.n	80020e4 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3302      	adds	r3, #2
 80020e8:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d1f8      	bne.n	80020ea <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3301      	adds	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b20      	cmp	r3, #32
 800210a:	d1f8      	bne.n	80020fe <load_fen+0x33e>
    f++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8002122:	af00      	add	r7, sp, #0
 8002124:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002128:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800212c:	6018      	str	r0, [r3, #0]
 800212e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002132:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002136:	6019      	str	r1, [r3, #0]
 8002138:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800213c:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002140:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8002142:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002146:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002150:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	429a      	cmp	r2, r3
 8002158:	d101      	bne.n	800215e <make_move+0x42>
        return 0;
 800215a:	2300      	movs	r3, #0
 800215c:	e0eb      	b.n	8002336 <make_move+0x21a>

    if(safe){
 800215e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002162:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05d      	beq.n	8002228 <make_move+0x10c>
        uint8_t move_ok = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8002172:	f107 0214 	add.w	r2, r7, #20
 8002176:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800217a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800217e:	4611      	mov	r1, r2
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	f000 f8e5 	bl	8002350 <generate_moves>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002192:	e03d      	b.n	8002210 <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8002194:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002198:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800219c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021ae:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d126      	bne.n	8002206 <make_move+0xea>
 80021b8:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 80021bc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021c0:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	3301      	adds	r3, #1
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021d4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d113      	bne.n	8002206 <make_move+0xea>
                move_ok = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 80021e4:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 80021e8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80021ec:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	3302      	adds	r3, #2
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002200:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002204:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 8002206:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 800220a:	3301      	adds	r3, #1
 800220c:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002210:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002214:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8002218:	429a      	cmp	r2, r3
 800221a:	d3bb      	bcc.n	8002194 <make_move+0x78>
            }
        }
        if(!move_ok){
 800221c:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <make_move+0x10c>
            return 0;
 8002224:	2300      	movs	r3, #0
 8002226:	e086      	b.n	8002336 <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8002228:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800222c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002236:	f1c3 0301 	rsb	r3, r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002240:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 800224a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800224e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	461a      	mov	r2, r3
 8002256:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800225a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	5c9b      	ldrb	r3, [r3, r2]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d00c      	beq.n	8002280 <make_move+0x164>
        remove_piece(state, move.to);
 8002266:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800226a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800226e:	785a      	ldrb	r2, [r3, #1]
 8002270:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002274:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002278:	4611      	mov	r1, r2
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	f7ff fd4b 	bl	8001d16 <remove_piece>

    if(move.promotion != 0)
 8002280:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002284:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002288:	789b      	ldrb	r3, [r3, #2]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01f      	beq.n	80022ce <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 800228e:	f000 f857 	bl	8002340 <check_promotion>
 8002292:	4603      	mov	r3, r0
 8002294:	461c      	mov	r4, r3
 8002296:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800229a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022a6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80022b2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022b6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	f507 7146 	add.w	r1, r7, #792	; 0x318
 80022c0:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 80022c4:	4621      	mov	r1, r4
 80022c6:	6800      	ldr	r0, [r0, #0]
 80022c8:	f7ff fd07 	bl	8001cda <place_piece>
 80022cc:	e025      	b.n	800231a <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 80022ce:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022d2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022de:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	5c99      	ldrb	r1, [r3, r2]
 80022e6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022ea:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80022f6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002302:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002306:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8002310:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8002314:	6800      	ldr	r0, [r0, #0]
 8002316:	f7ff fce0 	bl	8001cda <place_piece>
    }

    remove_piece(state, move.from);
 800231a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800231e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002328:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800232c:	4611      	mov	r1, r2
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	f7ff fcf1 	bl	8001d16 <remove_piece>
    return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}

08002340 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
    return get_promotion();
 8002344:	f7ff fb80 	bl	8001a48 <get_promotion>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e281      	b.n	8002868 <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 800236e:	7b7b      	ldrb	r3, [r7, #13]
 8002370:	2b06      	cmp	r3, #6
 8002372:	f000 8273 	beq.w	800285c <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	3380      	adds	r3, #128	; 0x80
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002386:	429a      	cmp	r2, r3
 8002388:	f040 826a 	bne.w	8002860 <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 800238c:	7b7b      	ldrb	r3, [r7, #13]
 800238e:	2b05      	cmp	r3, #5
 8002390:	f040 81e2 	bne.w	8002758 <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 80ee 	bne.w	800257c <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3310      	adds	r3, #16
 80023a4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d162      	bne.n	8002472 <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	3310      	adds	r3, #16
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d15c      	bne.n	8002472 <generate_moves+0x122>
                        moves[n_moves].from = square;
 80023b8:	8afa      	ldrh	r2, [r7, #22]
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	8afa      	ldrh	r2, [r7, #22]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f101 0210 	add.w	r2, r1, #16
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80023e2:	8afa      	ldrh	r2, [r7, #22]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	2200      	movs	r2, #0
 80023f0:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80023f2:	8afa      	ldrh	r2, [r7, #22]
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b07      	cmp	r3, #7
 8002406:	d107      	bne.n	8002418 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 8002408:	8afa      	ldrh	r2, [r7, #22]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	2201      	movs	r2, #1
 8002416:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	3301      	adds	r3, #1
 800241c:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	111b      	asrs	r3, r3, #4
 8002422:	2b01      	cmp	r3, #1
 8002424:	d125      	bne.n	8002472 <generate_moves+0x122>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	3320      	adds	r3, #32
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d11f      	bne.n	8002472 <generate_moves+0x122>
                            moves[n_moves].from = square;
 8002432:	8afa      	ldrh	r2, [r7, #22]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	b2d9      	uxtb	r1, r3
 8002448:	8afa      	ldrh	r2, [r7, #22]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	f101 0220 	add.w	r2, r1, #32
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 800245c:	8afa      	ldrh	r2, [r7, #22]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 800246c:	8afb      	ldrh	r3, [r7, #22]
 800246e:	3301      	adds	r3, #1
 8002470:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	3311      	adds	r3, #17
 8002476:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13a      	bne.n	80024f4 <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3311      	adds	r3, #17
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800248a:	2b01      	cmp	r3, #1
 800248c:	d132      	bne.n	80024f4 <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 800248e:	8afa      	ldrh	r2, [r7, #22]
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	b2d9      	uxtb	r1, r3
 80024a4:	8afa      	ldrh	r2, [r7, #22]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f101 0211 	add.w	r2, r1, #17
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80024b8:	8afa      	ldrh	r2, [r7, #22]
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	2200      	movs	r2, #0
 80024c6:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80024c8:	8afa      	ldrh	r2, [r7, #22]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d107      	bne.n	80024ee <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 80024de:	8afa      	ldrh	r2, [r7, #22]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80024ee:	8afb      	ldrh	r3, [r7, #22]
 80024f0:	3301      	adds	r3, #1
 80024f2:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	330f      	adds	r3, #15
 80024f8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 81b0 	bne.w	8002862 <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	330f      	adds	r3, #15
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 81a7 	bne.w	8002862 <generate_moves+0x512>
                        moves[n_moves].from = square;
 8002514:	8afa      	ldrh	r2, [r7, #22]
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	b2d9      	uxtb	r1, r3
 800252a:	8afa      	ldrh	r2, [r7, #22]
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	f101 020f 	add.w	r2, r1, #15
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800253e:	8afa      	ldrh	r2, [r7, #22]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	2200      	movs	r2, #0
 800254c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 800254e:	8afa      	ldrh	r2, [r7, #22]
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4413      	add	r3, r2
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b07      	cmp	r3, #7
 8002562:	d107      	bne.n	8002574 <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 8002564:	8afa      	ldrh	r2, [r7, #22]
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	2201      	movs	r2, #1
 8002572:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	3301      	adds	r3, #1
 8002578:	82fb      	strh	r3, [r7, #22]
 800257a:	e172      	b.n	8002862 <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	3b10      	subs	r3, #16
 8002580:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002584:	2b00      	cmp	r3, #0
 8002586:	d162      	bne.n	800264e <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3b10      	subs	r3, #16
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d15c      	bne.n	800264e <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 8002594:	8afa      	ldrh	r2, [r7, #22]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	b2d9      	uxtb	r1, r3
 80025aa:	8afa      	ldrh	r2, [r7, #22]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f1a1 0210 	sub.w	r2, r1, #16
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80025be:	8afa      	ldrh	r2, [r7, #22]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	2200      	movs	r2, #0
 80025cc:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80025ce:	8afa      	ldrh	r2, [r7, #22]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 80025e4:	8afa      	ldrh	r2, [r7, #22]
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	2201      	movs	r2, #1
 80025f2:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 80025f4:	8afb      	ldrh	r3, [r7, #22]
 80025f6:	3301      	adds	r3, #1
 80025f8:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	111b      	asrs	r3, r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d125      	bne.n	800264e <generate_moves+0x2fe>
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	3b20      	subs	r3, #32
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d11f      	bne.n	800264e <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 800260e:	8afa      	ldrh	r2, [r7, #22]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	b2d9      	uxtb	r1, r3
 8002624:	8afa      	ldrh	r2, [r7, #22]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f1a1 0220 	sub.w	r2, r1, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8002638:	8afa      	ldrh	r2, [r7, #22]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	2200      	movs	r2, #0
 8002646:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	3301      	adds	r3, #1
 800264c:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3b0f      	subs	r3, #15
 8002652:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13a      	bne.n	80026d0 <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	3b0f      	subs	r3, #15
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d132      	bne.n	80026d0 <generate_moves+0x380>
                        moves[n_moves].from = square;
 800266a:	8afa      	ldrh	r2, [r7, #22]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	b2d9      	uxtb	r1, r3
 8002680:	8afa      	ldrh	r2, [r7, #22]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	f1a1 020f 	sub.w	r2, r1, #15
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8002694:	8afa      	ldrh	r2, [r7, #22]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	2200      	movs	r2, #0
 80026a2:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80026a4:	8afa      	ldrh	r2, [r7, #22]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 80026ba:	8afa      	ldrh	r2, [r7, #22]
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	2201      	movs	r2, #1
 80026c8:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	3301      	adds	r3, #1
 80026ce:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	3b11      	subs	r3, #17
 80026d4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 80c2 	bne.w	8002862 <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	3b11      	subs	r3, #17
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 80b9 	bne.w	8002862 <generate_moves+0x512>
                        moves[n_moves].from = square;
 80026f0:	8afa      	ldrh	r2, [r7, #22]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	b2d9      	uxtb	r1, r3
 8002706:	8afa      	ldrh	r2, [r7, #22]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f1a1 0211 	sub.w	r2, r1, #17
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800271a:	8afa      	ldrh	r2, [r7, #22]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	2200      	movs	r2, #0
 8002728:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 800272a:	8afa      	ldrh	r2, [r7, #22]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 8002740:	8afa      	ldrh	r2, [r7, #22]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4413      	add	r3, r2
 800274c:	2201      	movs	r2, #1
 800274e:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	3301      	adds	r3, #1
 8002754:	82fb      	strh	r3, [r7, #22]
 8002756:	e084      	b.n	8002862 <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e076      	b.n	800284c <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 800275e:	7b7a      	ldrb	r2, [r7, #13]
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	4946      	ldr	r1, [pc, #280]	; (8002880 <generate_moves+0x530>)
 8002766:	00d2      	lsls	r2, r2, #3
 8002768:	440a      	add	r2, r1
 800276a:	4413      	add	r3, r2
 800276c:	f993 3000 	ldrsb.w	r3, [r3]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4413      	add	r3, r2
 8002778:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 800277a:	e05a      	b.n	8002832 <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d121      	bne.n	80027ca <generate_moves+0x47a>
                        moves[n_moves].from = square;
 8002786:	8afa      	ldrh	r2, [r7, #22]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 8002798:	8afa      	ldrh	r2, [r7, #22]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	7bba      	ldrb	r2, [r7, #14]
 80027a6:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80027a8:	8afa      	ldrh	r2, [r7, #22]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	2200      	movs	r2, #0
 80027b6:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	3301      	adds	r3, #1
 80027bc:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	4a30      	ldr	r2, [pc, #192]	; (8002884 <generate_moves+0x534>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d127      	bne.n	8002818 <generate_moves+0x4c8>
                        break;
 80027c8:	e03a      	b.n	8002840 <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80027da:	429a      	cmp	r2, r3
 80027dc:	d02f      	beq.n	800283e <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 80027de:	8afa      	ldrh	r2, [r7, #22]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 80027f0:	8afa      	ldrh	r2, [r7, #22]
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	7bba      	ldrb	r2, [r7, #14]
 80027fe:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 8002800:	8afa      	ldrh	r2, [r7, #22]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	2200      	movs	r2, #0
 800280e:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 8002810:	8afb      	ldrh	r3, [r7, #22]
 8002812:	3301      	adds	r3, #1
 8002814:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 8002816:	e012      	b.n	800283e <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 8002818:	7b7a      	ldrb	r2, [r7, #13]
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4918      	ldr	r1, [pc, #96]	; (8002880 <generate_moves+0x530>)
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	440a      	add	r2, r1
 8002824:	4413      	add	r3, r2
 8002826:	f993 3000 	ldrsb.w	r3, [r3]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	4413      	add	r3, r2
 8002830:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8002838:	2b00      	cmp	r3, #0
 800283a:	d09f      	beq.n	800277c <generate_moves+0x42c>
 800283c:	e000      	b.n	8002840 <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 800283e:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8002840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	7b7a      	ldrb	r2, [r7, #13]
 8002852:	490d      	ldr	r1, [pc, #52]	; (8002888 <generate_moves+0x538>)
 8002854:	5c8a      	ldrb	r2, [r1, r2]
 8002856:	4293      	cmp	r3, r2
 8002858:	db81      	blt.n	800275e <generate_moves+0x40e>
 800285a:	e002      	b.n	8002862 <generate_moves+0x512>
            continue;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <generate_moves+0x512>
            continue;
 8002860:	bf00      	nop
    for(int square = 0; square < 128; square++){
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3301      	adds	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b7f      	cmp	r3, #127	; 0x7f
 800286c:	f77f ad7a 	ble.w	8002364 <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 8002870:	8afb      	ldrh	r3, [r7, #22]
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000004 	.word	0x20000004
 8002884:	20000034 	.word	0x20000034
 8002888:	2000002c 	.word	0x2000002c

0800288c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8002894:	210c      	movs	r1, #12
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f002 fdec 	bl	8005474 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20001690 	.word	0x20001690

080028b0 <ws2812_init>:

void ws2812_init(){
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	e010      	b.n	80028de <ws2812_init+0x2e>
		if(i < 60)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b3b      	cmp	r3, #59	; 0x3b
 80028c0:	dc05      	bgt.n	80028ce <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 80028c2:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <ws2812_init+0x48>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2100      	movs	r1, #0
 80028c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80028cc:	e004      	b.n	80028d8 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <ws2812_init+0x48>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	211c      	movs	r1, #28
 80028d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3301      	adds	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f240 623b 	movw	r2, #1595	; 0x63b
 80028e4:	4293      	cmp	r3, r2
 80028e6:	dde9      	ble.n	80028bc <ws2812_init+0xc>
	}
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000918 	.word	0x20000918

080028fc <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e065      	b.n	80029d4 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e05c      	b.n	80029c8 <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8002918:	4933      	ldr	r1, [pc, #204]	; (80029e8 <ws2812_update_pwm_data+0xec>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	00da      	lsls	r2, r3, #3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 800292c:	482e      	ldr	r0, [pc, #184]	; (80029e8 <ws2812_update_pwm_data+0xec>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	00d9      	lsls	r1, r3, #3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	440b      	add	r3, r1
 8002936:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8002940:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 8002942:	4829      	ldr	r0, [pc, #164]	; (80029e8 <ws2812_update_pwm_data+0xec>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	00d9      	lsls	r1, r3, #3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	440b      	add	r3, r1
 800294c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002950:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8002952:	4313      	orrs	r3, r2
 8002954:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e02f      	b.n	80029bc <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 800295c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	fa42 f303 	asr.w	r3, r2, r3
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 8002970:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <ws2812_update_pwm_data+0xf0>)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4413      	add	r3, r2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <ws2812_update_pwm_data+0xf4>)
 800298c:	214c      	movs	r1, #76	; 0x4c
 800298e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002992:	e010      	b.n	80029b6 <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8002994:	4a15      	ldr	r2, [pc, #84]	; (80029ec <ws2812_update_pwm_data+0xf0>)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <ws2812_update_pwm_data+0xf4>)
 80029b0:	211c      	movs	r1, #28
 80029b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b17      	cmp	r3, #23
 80029c0:	ddcc      	ble.n	800295c <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b07      	cmp	r3, #7
 80029cc:	dd9f      	ble.n	800290e <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	dd96      	ble.n	8002908 <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20001590 	.word	0x20001590
 80029ec:	2000003c 	.word	0x2000003c
 80029f0:	20000918 	.word	0x20000918

080029f4 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 80029fc:	f7ff ff7e 	bl	80028fc <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <ws2812_update_leds_from_data+0x28>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 8002a06:	f240 633c 	movw	r3, #1596	; 0x63c
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <ws2812_update_leds_from_data+0x2c>)
 8002a0c:	210c      	movs	r1, #12
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f002 fb80 	bl	8005114 <HAL_TIM_PWM_Start_DMA>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20001690 	.word	0x20001690
 8002a20:	20000918 	.word	0x20000918

08002a24 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <lighting_set_output+0x1c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20001694 	.word	0x20001694

08002a44 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <set_color+0x34>)
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	00d8      	lsls	r0, r3, #3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4403      	add	r3, r0
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	4905      	ldr	r1, [pc, #20]	; (8002a7c <set_color+0x38>)
 8002a66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	20001694 	.word	0x20001694
 8002a7c:	2000007c 	.word	0x2000007c

08002a80 <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	e01a      	b.n	8002ac2 <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	e011      	b.n	8002ab6 <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4053      	eors	r3, r2
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffca 	bl	8002a44 <set_color>
    for (int file = 0; file < 8; file++) {
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	ddea      	ble.n	8002a92 <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	dde1      	ble.n	8002a8c <paint_board+0xc>
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

    total_valid_moves = engine_list_moves(valid_moves);
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f7ff f94b 	bl	8001d80 <engine_list_moves>
 8002aea:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < total_valid_moves; i++){
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e026      	b.n	8002b40 <paint_valid_moves+0x6e>
        if(valid_moves[i].from == square_lifted){
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d119      	bne.n	8002b3a <paint_valid_moves+0x68>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4413      	add	r3, r2
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7ff ff88 	bl	8002a44 <set_color>
            lifted_piece_valid_moves ++;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbd4      	blt.n	8002af2 <paint_valid_moves+0x20>
        }
    }
    return lifted_piece_valid_moves;
 8002b48:	697b      	ldr	r3, [r7, #20]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	e04e      	b.n	8002c02 <paint_differences+0xae>
        for (int file = 0; file < 8; file++) {
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	e045      	b.n	8002bf6 <paint_differences+0xa2>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <paint_differences+0xc0>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	fa42 f303 	asr.w	r3, r2, r3
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <paint_differences+0x5a>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f904 	bl	8001da0 <engine_get_piece>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d107      	bne.n	8002bae <paint_differences+0x5a>
                set_color(rank, file, INVALID_ID);
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68b8      	ldr	r0, [r7, #8]
 8002ba4:	f7ff ff4e 	bl	8002a44 <set_color>
                board_ok = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e020      	b.n	8002bf0 <paint_differences+0x9c>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8002bae:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <paint_differences+0xc0>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	fa42 f303 	asr.w	r3, r2, r3
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d114      	bne.n	8002bf0 <paint_differences+0x9c>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f8e2 	bl	8001da0 <engine_get_piece>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d006      	beq.n	8002bf0 <paint_differences+0x9c>
                set_color(rank, file, MISSING_ID);
 8002be2:	2204      	movs	r2, #4
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68b8      	ldr	r0, [r7, #8]
 8002be8:	f7ff ff2c 	bl	8002a44 <set_color>
                board_ok = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	ddb6      	ble.n	8002b6a <paint_differences+0x16>
    for (int rank = 0; rank < 8; rank++) {
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	ddad      	ble.n	8002b64 <paint_differences+0x10>
            }
        }
    }
    return board_ok;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200016a4 	.word	0x200016a4

08002c18 <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 8002c22:	2202      	movs	r2, #2
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff0c 	bl	8002a44 <set_color>
    return 1;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <lighting_set_state>:

uint8_t square_lifted_lighting;
move_t * valid_moves_lighting;
int total_valid_moves_lighting;

void lighting_set_state(char state){
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <lighting_set_state+0x1c>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	7013      	strb	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	20001691 	.word	0x20001691

08002c58 <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <lighting_piece_lifted_square+0x1c>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	7013      	strb	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	20001698 	.word	0x20001698

08002c78 <set_valid_moves>:

void set_valid_moves(move_t * moves, int total_valid_moves){
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <set_valid_moves+0x24>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <set_valid_moves+0x28>)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6013      	str	r3, [r2, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000169c 	.word	0x2000169c
 8002ca0:	200016a0 	.word	0x200016a0

08002ca4 <lighting_refresh>:

void lighting_refresh(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <lighting_refresh+0x8c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d83c      	bhi.n	8002d2a <lighting_refresh+0x86>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <lighting_refresh+0x14>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002ccf 	.word	0x08002ccf
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002d0b 	.word	0x08002d0b
        case LIGHTING_IDLE_STATE:
            paint_board();
 8002cc8:	f7ff feda 	bl	8002a80 <paint_board>
        break;
 8002ccc:	e02d      	b.n	8002d2a <lighting_refresh+0x86>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 8002cce:	f7ff fed7 	bl	8002a80 <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <lighting_refresh+0x90>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <lighting_refresh+0x90>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7ff feac 	bl	8002a44 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <lighting_refresh+0x90>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <lighting_refresh+0x94>)
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <lighting_refresh+0x98>)
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff feea 	bl	8002ad2 <paint_valid_moves>
        break;
 8002cfe:	e014      	b.n	8002d2a <lighting_refresh+0x86>

        case LIGHTING_ERROR_STATE:
            paint_board();
 8002d00:	f7ff febe 	bl	8002a80 <paint_board>
            paint_differences();
 8002d04:	f7ff ff26 	bl	8002b54 <paint_differences>
        break;
 8002d08:	e00f      	b.n	8002d2a <lighting_refresh+0x86>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 8002d0a:	f7ff feb9 	bl	8002a80 <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <lighting_refresh+0x90>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <lighting_refresh+0x90>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7ff ff78 	bl	8002c18 <paint_capture>
        break;
 8002d28:	bf00      	nop
    }
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20001691 	.word	0x20001691
 8002d34:	20001698 	.word	0x20001698
 8002d38:	2000169c 	.word	0x2000169c
 8002d3c:	200016a0 	.word	0x200016a0

08002d40 <t_reed_scan_sensors>:

volatile uint8_t reed_data[8] = { 0 };



void t_reed_scan_sensors() {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0

	while (1) {
		for (int row = 0; row < 8; row++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	e131      	b.n	8002fb0 <t_reed_scan_sensors+0x270>
			HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4897      	ldr	r0, [pc, #604]	; (8002fbc <t_reed_scan_sensors+0x27c>)
 8002d5e:	f000 ffb1 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2102      	movs	r1, #2
 8002d72:	4892      	ldr	r0, [pc, #584]	; (8002fbc <t_reed_scan_sensors+0x27c>)
 8002d74:	f000 ffa6 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	2101      	movs	r1, #1
 8002d88:	488d      	ldr	r0, [pc, #564]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002d8a:	f000 ff9b 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	4889      	ldr	r0, [pc, #548]	; (8002fc4 <t_reed_scan_sensors+0x284>)
 8002da0:	f000 ff90 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	4883      	ldr	r0, [pc, #524]	; (8002fc4 <t_reed_scan_sensors+0x284>)
 8002db6:	f000 ff85 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2140      	movs	r1, #64	; 0x40
 8002dca:	487d      	ldr	r0, [pc, #500]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002dcc:	f000 ff7a 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	4876      	ldr	r0, [pc, #472]	; (8002fbc <t_reed_scan_sensors+0x27c>)
 8002de2:	f000 ff6f 	bl	8003cc4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df8:	4872      	ldr	r0, [pc, #456]	; (8002fc4 <t_reed_scan_sensors+0x284>)
 8002dfa:	f000 ff63 	bl	8003cc4 <HAL_GPIO_WritePin>

			//for(int i = 0; i < 100; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
			vTaskDelay(50); // Lo uso para hacer más lenta toda la lectura
 8002dfe:	2032      	movs	r0, #50	; 0x32
 8002e00:	f004 f9a2 	bl	8007148 <vTaskDelay>

			reed_data[row] = 0;
 8002e04:	4a70      	ldr	r2, [pc, #448]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8002e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e12:	486c      	ldr	r0, [pc, #432]	; (8002fc4 <t_reed_scan_sensors+0x284>)
 8002e14:	f000 ff3e 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	b25a      	sxtb	r2, r3
 8002e32:	b24b      	sxtb	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	b2d9      	uxtb	r1, r3
 8002e3a:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	460a      	mov	r2, r1
 8002e42:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8002e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e48:	485d      	ldr	r0, [pc, #372]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002e4a:	f000 ff23 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <t_reed_scan_sensors+0x118>
 8002e54:	2102      	movs	r1, #2
 8002e56:	e000      	b.n	8002e5a <t_reed_scan_sensors+0x11a>
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	b25a      	sxtb	r2, r3
 8002e66:	b24b      	sxtb	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	b2d9      	uxtb	r1, r3
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	460a      	mov	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8002e78:	2110      	movs	r1, #16
 8002e7a:	4851      	ldr	r0, [pc, #324]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002e7c:	f000 ff0a 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <t_reed_scan_sensors+0x14a>
 8002e86:	2104      	movs	r1, #4
 8002e88:	e000      	b.n	8002e8c <t_reed_scan_sensors+0x14c>
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	b25a      	sxtb	r2, r3
 8002e98:	b24b      	sxtb	r3, r1
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8002eaa:	2110      	movs	r1, #16
 8002eac:	4843      	ldr	r0, [pc, #268]	; (8002fbc <t_reed_scan_sensors+0x27c>)
 8002eae:	f000 fef1 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <t_reed_scan_sensors+0x17c>
 8002eb8:	2108      	movs	r1, #8
 8002eba:	e000      	b.n	8002ebe <t_reed_scan_sensors+0x17e>
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	b24b      	sxtb	r3, r1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b25b      	sxtb	r3, r3
 8002ed0:	b2d9      	uxtb	r1, r3
 8002ed2:	4a3d      	ldr	r2, [pc, #244]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	460a      	mov	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8002edc:	2120      	movs	r1, #32
 8002ede:	4838      	ldr	r0, [pc, #224]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002ee0:	f000 fed8 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <t_reed_scan_sensors+0x1ae>
 8002eea:	2110      	movs	r1, #16
 8002eec:	e000      	b.n	8002ef0 <t_reed_scan_sensors+0x1b0>
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	b24b      	sxtb	r3, r1
 8002efe:	4313      	orrs	r3, r2
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	b2d9      	uxtb	r1, r3
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8002f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f12:	482c      	ldr	r0, [pc, #176]	; (8002fc4 <t_reed_scan_sensors+0x284>)
 8002f14:	f000 febe 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <t_reed_scan_sensors+0x1e2>
 8002f1e:	2120      	movs	r1, #32
 8002f20:	e000      	b.n	8002f24 <t_reed_scan_sensors+0x1e4>
 8002f22:	2100      	movs	r1, #0
 8002f24:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	b25a      	sxtb	r2, r3
 8002f30:	b24b      	sxtb	r3, r1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	b2d9      	uxtb	r1, r3
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	460a      	mov	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8002f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f46:	481e      	ldr	r0, [pc, #120]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002f48:	f000 fea4 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <t_reed_scan_sensors+0x216>
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	e000      	b.n	8002f58 <t_reed_scan_sensors+0x218>
 8002f56:	2100      	movs	r1, #0
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	b24b      	sxtb	r3, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	460a      	mov	r2, r1
 8002f74:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8002f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f7a:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <t_reed_scan_sensors+0x280>)
 8002f7c:	f000 fe8a 	bl	8003c94 <HAL_GPIO_ReadPin>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <t_reed_scan_sensors+0x24a>
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	e000      	b.n	8002f8c <t_reed_scan_sensors+0x24c>
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	b25a      	sxtb	r2, r3
 8002f98:	b24b      	sxtb	r3, r1
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <t_reed_scan_sensors+0x288>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < 8; row++) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3301      	adds	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b07      	cmp	r3, #7
 8002fb4:	f77f aeca 	ble.w	8002d4c <t_reed_scan_sensors+0xc>
 8002fb8:	e6c5      	b.n	8002d46 <t_reed_scan_sensors+0x6>
 8002fba:	bf00      	nop
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	200016a4 	.word	0x200016a4

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fd2:	490e      	ldr	r1, [pc, #56]	; (800300c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe8:	4c0b      	ldr	r4, [pc, #44]	; (8003018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ff6:	f7fe fb15 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f005 fb65 	bl	80086c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fd fcb3 	bl	8000968 <main>
  bx  lr    
 8003002:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003004:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003010:	08008928 	.word	0x08008928
  ldr r2, =_sbss
 8003014:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003018:	20005544 	.word	0x20005544

0800301c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC_IRQHandler>
	...

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_Init+0x40>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_Init+0x40>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_Init+0x40>)
 8003036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_Init+0x40>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 f8d8 	bl	80031fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304e:	200f      	movs	r0, #15
 8003050:	f7fe fa38 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003054:	f7fe f920 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000098 	.word	0x20000098
 8003088:	200016ac 	.word	0x200016ac

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	200016ac 	.word	0x200016ac

080030a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0b      	blt.n	8003132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <__NVIC_EnableIRQ+0x38>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2001      	movs	r0, #1
 800312a:	fa00 f202 	lsl.w	r2, r0, r2
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	; (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff4c 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003226:	f7ff ff61 	bl	80030ec <__NVIC_GetPriorityGrouping>
 800322a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7ff ffb1 	bl	8003198 <NVIC_EncodePriority>
 8003236:	4602      	mov	r2, r0
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff80 	bl	8003144 <__NVIC_SetPriority>
}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff54 	bl	8003108 <__NVIC_EnableIRQ>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff ff0a 	bl	800308c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e099      	b.n	80033b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a4:	e00f      	b.n	80032c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a6:	f7ff fef1 	bl	800308c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d908      	bls.n	80032c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2203      	movs	r2, #3
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e078      	b.n	80033b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e8      	bne.n	80032a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_DMA_Init+0x158>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4313      	orrs	r3, r2
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b04      	cmp	r3, #4
 8003358:	d117      	bne.n	800338a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa91 	bl	8003894 <DMA_CheckFifoParam>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2240      	movs	r2, #64	; 0x40
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003386:	2301      	movs	r3, #1
 8003388:	e016      	b.n	80033b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa48 	bl	8003828 <DMA_CalcBaseAndBitshift>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	f010803f 	.word	0xf010803f

080033c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Start_IT+0x26>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e040      	b.n	800346c <HAL_DMA_Start_IT+0xa8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d12f      	bne.n	800345e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9da 	bl	80037cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0216 	orr.w	r2, r2, #22
 8003432:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0208 	orr.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e005      	b.n	800346a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e00c      	b.n	80034ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2205      	movs	r2, #5
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c4:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <HAL_DMA_IRQHandler+0x248>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8e      	ldr	r2, [pc, #568]	; (8003704 <HAL_DMA_IRQHandler+0x24c>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	2208      	movs	r2, #8
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01a      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2208      	movs	r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2201      	movs	r2, #1
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2204      	movs	r2, #4
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2204      	movs	r2, #4
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2210      	movs	r2, #16
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d043      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03c      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2210      	movs	r2, #16
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d024      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e01f      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e016      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0208 	bic.w	r2, r2, #8
 8003616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2220      	movs	r2, #32
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 808f 	beq.w	8003758 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8087 	beq.w	8003758 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2220      	movs	r2, #32
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b05      	cmp	r3, #5
 8003660:	d136      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0216 	bic.w	r2, r2, #22
 8003670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_DMA_IRQHandler+0x1da>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0208 	bic.w	r2, r2, #8
 80036a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	223f      	movs	r2, #63	; 0x3f
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d07e      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
        }
        return;
 80036ce:	e079      	b.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01d      	beq.n	800371a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e02c      	b.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000
 8003704:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e01e      	b.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0210 	bic.w	r2, r2, #16
 8003736:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	2b00      	cmp	r3, #0
 800375e:	d032      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d022      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2205      	movs	r2, #5
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3301      	adds	r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	d307      	bcc.n	80037a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f2      	bne.n	8003784 <HAL_DMA_IRQHandler+0x2cc>
 800379e:	e000      	b.n	80037a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	e000      	b.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c4:	bf00      	nop
    }
  }
}
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d108      	bne.n	800380c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800380a:	e007      	b.n	800381c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	3b10      	subs	r3, #16
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <DMA_CalcBaseAndBitshift+0x64>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <DMA_CalcBaseAndBitshift+0x68>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d909      	bls.n	800386a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	1d1a      	adds	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58
 8003868:	e007      	b.n	800387a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	aaaaaaab 	.word	0xaaaaaaab
 8003890:	08008910 	.word	0x08008910

08003894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d856      	bhi.n	8003962 <DMA_CheckFifoParam+0xce>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <DMA_CheckFifoParam+0x28>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038df 	.word	0x080038df
 80038c4:	080038cd 	.word	0x080038cd
 80038c8:	08003963 	.word	0x08003963
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d046      	beq.n	8003966 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e043      	b.n	8003966 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e6:	d140      	bne.n	800396a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ec:	e03d      	b.n	800396a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f6:	d121      	bne.n	800393c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d837      	bhi.n	800396e <DMA_CheckFifoParam+0xda>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <DMA_CheckFifoParam+0x70>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003915 	.word	0x08003915
 8003908:	0800391b 	.word	0x0800391b
 800390c:	08003915 	.word	0x08003915
 8003910:	0800392d 	.word	0x0800392d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      break;
 8003918:	e030      	b.n	800397c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d025      	beq.n	8003972 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392a:	e022      	b.n	8003972 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003934:	d11f      	bne.n	8003976 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800393a:	e01c      	b.n	8003976 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d903      	bls.n	800394a <DMA_CheckFifoParam+0xb6>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d003      	beq.n	8003950 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003948:	e018      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
      break;
 800394e:	e015      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00e      	beq.n	800397a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e00b      	b.n	800397a <DMA_CheckFifoParam+0xe6>
      break;
 8003962:	bf00      	nop
 8003964:	e00a      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
 8003968:	e008      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
 800396c:	e006      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;
 800396e:	bf00      	nop
 8003970:	e004      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;   
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <DMA_CheckFifoParam+0xe8>
      break;
 800397a:	bf00      	nop
    }
  } 
  
  return status; 
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e159      	b.n	8003c5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f040 8148 	bne.w	8003c56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d005      	beq.n	80039de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d130      	bne.n	8003a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0201 	and.w	r2, r3, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d017      	beq.n	8003a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d123      	bne.n	8003ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a2 	beq.w	8003c56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2e:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_GPIO_Init+0x2ec>)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	220f      	movs	r2, #15
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a49      	ldr	r2, [pc, #292]	; (8003c7c <HAL_GPIO_Init+0x2f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d019      	beq.n	8003b8e <HAL_GPIO_Init+0x202>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a48      	ldr	r2, [pc, #288]	; (8003c80 <HAL_GPIO_Init+0x2f4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_Init+0x1fe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a47      	ldr	r2, [pc, #284]	; (8003c84 <HAL_GPIO_Init+0x2f8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a46      	ldr	r2, [pc, #280]	; (8003c88 <HAL_GPIO_Init+0x2fc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_Init+0x1f6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_GPIO_Init+0x300>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_GPIO_Init+0x1f2>
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	e008      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b7e:	2307      	movs	r3, #7
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f002 0203 	and.w	r2, r2, #3
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x2ec>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	f67f aea2 	bls.w	80039a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40013c00 	.word	0x40013c00

08003c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e001      	b.n	8003cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce0:	e003      	b.n	8003cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	619a      	str	r2, [r3, #24]
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e12b      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fae6 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f001 f888 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a81      	ldr	r2, [pc, #516]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d807      	bhi.n	8003d7c <HAL_I2C_Init+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <HAL_I2C_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x92>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_I2C_Init+0x27c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0e7      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a78      	ldr	r2, [pc, #480]	; (8003f78 <HAL_I2C_Init+0x280>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <HAL_I2C_Init+0xd4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_I2C_Init+0xe8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_I2C_Init+0x284>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	495c      	ldr	r1, [pc, #368]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d819      	bhi.n	8003e34 <HAL_I2C_Init+0x13c>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e59      	subs	r1, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e14:	400b      	ands	r3, r1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_I2C_Init+0x138>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1e59      	subs	r1, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2e:	e051      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e04f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <HAL_I2C_Init+0x168>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e58      	subs	r0, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	440b      	add	r3, r1
 8003e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e012      	b.n	8003e86 <HAL_I2C_Init+0x18e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	0099      	lsls	r1, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x196>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <HAL_I2C_Init+0x1bc>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1e58      	subs	r0, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	440b      	add	r3, r1
 8003ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e58      	subs	r0, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	0099      	lsls	r1, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	6809      	ldr	r1, [r1, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6911      	ldr	r1, [r2, #16]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	000186a0 	.word	0x000186a0
 8003f70:	001e847f 	.word	0x001e847f
 8003f74:	003d08ff 	.word	0x003d08ff
 8003f78:	431bde83 	.word	0x431bde83
 8003f7c:	10624dd3 	.word	0x10624dd3

08003f80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
 8003f90:	4613      	mov	r3, r2
 8003f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff f87a 	bl	800308c <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	f040 80e0 	bne.w	8004168 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4970      	ldr	r1, [pc, #448]	; (8004174 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f964 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0d3      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_Master_Transmit+0x50>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0cc      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2210      	movs	r2, #16
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	893a      	ldrh	r2, [r7, #8]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_I2C_Master_Transmit+0x1f8>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f89c 	bl	800417c <I2C_MasterRequestWrite>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08d      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004064:	e066      	b.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f9de 	bl	800442c <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_I2C_Master_Transmit+0x188>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	6a39      	ldr	r1, [r7, #32]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f9ce 	bl	80044ae <I2C_WaitOnBTFFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b04      	cmp	r3, #4
 800411e:	d107      	bne.n	8004130 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e01a      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d194      	bne.n	8004066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000

0800417c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	460b      	mov	r3, r1
 800418a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d006      	beq.n	80041a6 <I2C_MasterRequestWrite+0x2a>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d003      	beq.n	80041a6 <I2C_MasterRequestWrite+0x2a>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a4:	d108      	bne.n	80041b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e00b      	b.n	80041d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	2b12      	cmp	r3, #18
 80041be:	d107      	bne.n	80041d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f84f 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d103      	bne.n	8004200 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e035      	b.n	8004270 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d108      	bne.n	8004220 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	e01b      	b.n	8004258 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	11db      	asrs	r3, r3, #7
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 0306 	and.w	r3, r3, #6
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f063 030f 	orn	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	490e      	ldr	r1, [pc, #56]	; (8004278 <I2C_MasterRequestWrite+0xfc>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f875 	bl	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e010      	b.n	8004270 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <I2C_MasterRequestWrite+0x100>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f865 	bl	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00010008 	.word	0x00010008
 800427c:	00010002 	.word	0x00010002

08004280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004290:	e025      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d021      	beq.n	80042de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fef7 	bl	800308c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e023      	b.n	8004326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10d      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	e00c      	b.n	800431e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	429a      	cmp	r2, r3
 8004322:	d0b6      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800433c:	e051      	b.n	80043e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d123      	bne.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0204 	orr.w	r2, r3, #4
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e046      	b.n	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d021      	beq.n	80043e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe fe75 	bl	800308c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e020      	b.n	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10c      	bne.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e00b      	b.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d18d      	bne.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004438:	e02d      	b.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f878 	bl	8004530 <I2C_IsAcknowledgeFailed>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e02d      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d021      	beq.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004452:	f7fe fe1b 	bl	800308c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e007      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d1ca      	bne.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ba:	e02d      	b.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f837 	bl	8004530 <I2C_IsAcknowledgeFailed>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e02d      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d021      	beq.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d4:	f7fe fdda 	bl	800308c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b04      	cmp	r3, #4
 8004524:	d1ca      	bne.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004546:	d11b      	bne.n	8004580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e267      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d075      	beq.n	800469a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d112      	bne.n	80045ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c6:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d2:	d10b      	bne.n	80045ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	4b7e      	ldr	r3, [pc, #504]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05b      	beq.n	8004698 <HAL_RCC_OscConfig+0x108>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d157      	bne.n	8004698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e242      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x74>
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a75      	ldr	r2, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e01d      	b.n	8004640 <HAL_RCC_OscConfig+0xb0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x98>
 800460e:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6f      	ldr	r2, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6c      	ldr	r2, [pc, #432]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0xb0>
 8004628:	4b69      	ldr	r3, [pc, #420]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a68      	ldr	r2, [pc, #416]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b66      	ldr	r3, [pc, #408]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800463a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe fd20 	bl	800308c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004650:	f7fe fd1c 	bl	800308c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	; 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e207      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0xc0>
 800466e:	e014      	b.n	800469a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fe fd0c 	bl	800308c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004678:	f7fe fd08 	bl	800308c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1f3      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	4b51      	ldr	r3, [pc, #324]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0xe8>
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d063      	beq.n	800476e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046a6:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d11c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046be:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCC_OscConfig+0x152>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e1c7      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4937      	ldr	r1, [pc, #220]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f6:	e03a      	b.n	800476e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004700:	4b34      	ldr	r3, [pc, #208]	; (80047d4 <HAL_RCC_OscConfig+0x244>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fe fcc1 	bl	800308c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470e:	f7fe fcbd 	bl	800308c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1a8      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4925      	ldr	r1, [pc, #148]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]
 8004740:	e015      	b.n	800476e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_RCC_OscConfig+0x244>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe fca0 	bl	800308c <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004750:	f7fe fc9c 	bl	800308c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e187      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d036      	beq.n	80047e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_RCC_OscConfig+0x248>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fe fc80 	bl	800308c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004790:	f7fe fc7c 	bl	800308c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e167      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_OscConfig+0x240>)
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x200>
 80047ae:	e01b      	b.n	80047e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_OscConfig+0x248>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7fe fc69 	bl	800308c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	e00e      	b.n	80047dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047be:	f7fe fc65 	bl	800308c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d907      	bls.n	80047dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e150      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	42470000 	.word	0x42470000
 80047d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	4b88      	ldr	r3, [pc, #544]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ea      	bne.n	80047be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8097 	beq.w	8004924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fa:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	4b7d      	ldr	r3, [pc, #500]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	4a7c      	ldr	r2, [pc, #496]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	; 0x40
 8004816:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b77      	ldr	r3, [pc, #476]	; (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d118      	bne.n	8004864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004832:	4b74      	ldr	r3, [pc, #464]	; (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	; (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483e:	f7fe fc25 	bl	800308c <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004846:	f7fe fc21 	bl	800308c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e10c      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_RCC_OscConfig+0x474>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x2ea>
 800486c:	4b64      	ldr	r3, [pc, #400]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a63      	ldr	r2, [pc, #396]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	e01c      	b.n	80048b4 <HAL_RCC_OscConfig+0x324>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b05      	cmp	r3, #5
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x30c>
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a5e      	ldr	r2, [pc, #376]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004888:	f043 0304 	orr.w	r3, r3, #4
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
 800488e:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0x324>
 800489c:	4b58      	ldr	r3, [pc, #352]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a57      	ldr	r2, [pc, #348]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	4b55      	ldr	r3, [pc, #340]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a54      	ldr	r2, [pc, #336]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048ae:	f023 0304 	bic.w	r3, r3, #4
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fe fbe6 	bl	800308c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fe fbe2 	bl	800308c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0cb      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048da:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ee      	beq.n	80048c4 <HAL_RCC_OscConfig+0x334>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e8:	f7fe fbd0 	bl	800308c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f0:	f7fe fbcc 	bl	800308c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0b5      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ee      	bne.n	80048f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d105      	bne.n	8004924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004918:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a1 	beq.w	8004a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800492e:	4b34      	ldr	r3, [pc, #208]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d05c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d141      	bne.n	80049c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCC_OscConfig+0x478>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fe fba0 	bl	800308c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004950:	f7fe fb9c 	bl	800308c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e087      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	019b      	lsls	r3, r3, #6
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	3b01      	subs	r3, #1
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	491b      	ldr	r1, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCC_OscConfig+0x478>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fe fb75 	bl	800308c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fe fb71 	bl	800308c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e05c      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x416>
 80049c4:	e054      	b.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_RCC_OscConfig+0x478>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fe fb5e 	bl	800308c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fe fb5a 	bl	800308c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e045      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCC_OscConfig+0x470>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x444>
 80049f2:	e03d      	b.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e038      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000
 8004a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x4ec>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d028      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d121      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d11a      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d111      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0cc      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90c      	bls.n	8004abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d044      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d119      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b3f      	ldr	r3, [pc, #252]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e067      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4934      	ldr	r1, [pc, #208]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b70:	f7fe fa8c 	bl	800308c <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fe fa88 	bl	800308c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e04f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 020c 	and.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1eb      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d20c      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	490a      	ldr	r1, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fc4c 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	080088f8 	.word	0x080088f8
 8004c44:	20000000 	.word	0x20000000
 8004c48:	20000094 	.word	0x20000094

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b094      	sub	sp, #80	; 0x50
 8004c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
 8004c58:	2300      	movs	r3, #0
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c64:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d00d      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x40>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	f200 80e1 	bhi.w	8004e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c7e:	e0db      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c80:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c84:	e0db      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8a:	e0d8      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8c:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c96:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	1a51      	subs	r1, r2, r1
 8004cda:	6139      	str	r1, [r7, #16]
 8004cdc:	4629      	mov	r1, r5
 8004cde:	eb63 0301 	sbc.w	r3, r3, r1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	018b      	lsls	r3, r1, #6
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	018a      	lsls	r2, r1, #6
 8004cfe:	4651      	mov	r1, sl
 8004d00:	ebb2 0801 	subs.w	r8, r2, r1
 8004d04:	4659      	mov	r1, fp
 8004d06:	eb63 0901 	sbc.w	r9, r3, r1
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d1e:	4690      	mov	r8, r2
 8004d20:	4699      	mov	r9, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	eb18 0303 	adds.w	r3, r8, r3
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	eb49 0303 	adc.w	r3, r9, r3
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	024b      	lsls	r3, r1, #9
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d48:	4621      	mov	r1, r4
 8004d4a:	024a      	lsls	r2, r1, #9
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	2200      	movs	r2, #0
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5c:	f7fb fa40 	bl	80001e0 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4613      	mov	r3, r2
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	e058      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	2200      	movs	r2, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	4611      	mov	r1, r2
 8004d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	f04f 0000 	mov.w	r0, #0
 8004d8c:	f04f 0100 	mov.w	r1, #0
 8004d90:	0159      	lsls	r1, r3, #5
 8004d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d96:	0150      	lsls	r0, r2, #5
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004da2:	4649      	mov	r1, r9
 8004da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	18e3      	adds	r3, r4, r3
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	464b      	mov	r3, r9
 8004de0:	eb45 0303 	adc.w	r3, r5, r3
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df2:	4629      	mov	r1, r5
 8004df4:	028b      	lsls	r3, r1, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	028a      	lsls	r2, r1, #10
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	2200      	movs	r2, #0
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	61fa      	str	r2, [r7, #28]
 8004e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e10:	f7fb f9e6 	bl	80001e0 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3750      	adds	r7, #80	; 0x50
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a9b      	lsrs	r3, r3, #10
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08008908 	.word	0x08008908

08004e98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	220f      	movs	r2, #15
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ea8:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0203 	and.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	08db      	lsrs	r3, r3, #3
 8004ed2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <HAL_RCC_GetClockConfig+0x60>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0207 	and.w	r2, r3, #7
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40023c00 	.word	0x40023c00

08004efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e041      	b.n	8004f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f839 	bl	8004f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fe2e 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e044      	b.n	8005052 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x6c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d013      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x6c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x6c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a19      	ldr	r2, [pc, #100]	; (8005068 <HAL_TIM_Base_Start_IT+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x6c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_TIM_Base_Start_IT+0xbc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x6c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_TIM_Base_Start_IT+0xc0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d111      	bne.n	8005040 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b06      	cmp	r3, #6
 800502c:	d010      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503e:	e007      	b.n	8005050 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40014000 	.word	0x40014000

08005074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc f970 	bl	8001380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 fd72 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start_DMA+0x2c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e022      	b.n	8005186 <HAL_TIM_PWM_Start_DMA+0x72>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d109      	bne.n	800515a <HAL_TIM_PWM_Start_DMA+0x46>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e015      	b.n	8005186 <HAL_TIM_PWM_Start_DMA+0x72>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start_DMA+0x60>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_TIM_PWM_Start_DMA+0x72>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	e15d      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e022      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0xda>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d109      	bne.n	80051c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e015      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0xda>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d109      	bne.n	80051dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e008      	b.n	80051ee <HAL_TIM_PWM_Start_DMA+0xda>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d024      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start_DMA+0xee>
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e123      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005210:	e016      	b.n	8005240 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	e00e      	b.n	8005240 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005230:	e006      	b.n	8005240 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523a:	e001      	b.n	8005240 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e104      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	f200 80ae 	bhi.w	80053a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005285 	.word	0x08005285
 8005254:	080053a5 	.word	0x080053a5
 8005258:	080053a5 	.word	0x080053a5
 800525c:	080053a5 	.word	0x080053a5
 8005260:	080052cd 	.word	0x080052cd
 8005264:	080053a5 	.word	0x080053a5
 8005268:	080053a5 	.word	0x080053a5
 800526c:	080053a5 	.word	0x080053a5
 8005270:	08005315 	.word	0x08005315
 8005274:	080053a5 	.word	0x080053a5
 8005278:	080053a5 	.word	0x080053a5
 800527c:	080053a5 	.word	0x080053a5
 8005280:	0800535d 	.word	0x0800535d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	4a72      	ldr	r2, [pc, #456]	; (8005454 <HAL_TIM_PWM_Start_DMA+0x340>)
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	4a71      	ldr	r2, [pc, #452]	; (8005458 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	4a70      	ldr	r2, [pc, #448]	; (800545c <HAL_TIM_PWM_Start_DMA+0x348>)
 800529a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3334      	adds	r3, #52	; 0x34
 80052a8:	461a      	mov	r2, r3
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	f7fe f88a 	bl	80033c4 <HAL_DMA_Start_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e0c7      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	60da      	str	r2, [r3, #12]
      break;
 80052ca:	e06e      	b.n	80053aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	4a60      	ldr	r2, [pc, #384]	; (8005454 <HAL_TIM_PWM_Start_DMA+0x340>)
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	4a5f      	ldr	r2, [pc, #380]	; (8005458 <HAL_TIM_PWM_Start_DMA+0x344>)
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	4a5e      	ldr	r2, [pc, #376]	; (800545c <HAL_TIM_PWM_Start_DMA+0x348>)
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3338      	adds	r3, #56	; 0x38
 80052f0:	461a      	mov	r2, r3
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	f7fe f866 	bl	80033c4 <HAL_DMA_Start_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0a3      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005310:	60da      	str	r2, [r3, #12]
      break;
 8005312:	e04a      	b.n	80053aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4a4e      	ldr	r2, [pc, #312]	; (8005454 <HAL_TIM_PWM_Start_DMA+0x340>)
 800531a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a4c      	ldr	r2, [pc, #304]	; (800545c <HAL_TIM_PWM_Start_DMA+0x348>)
 800532a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	333c      	adds	r3, #60	; 0x3c
 8005338:	461a      	mov	r2, r3
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	f7fe f842 	bl	80033c4 <HAL_DMA_Start_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07f      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005358:	60da      	str	r2, [r3, #12]
      break;
 800535a:	e026      	b.n	80053aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <HAL_TIM_PWM_Start_DMA+0x344>)
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	4a3a      	ldr	r2, [pc, #232]	; (800545c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005372:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3340      	adds	r3, #64	; 0x40
 8005380:	461a      	mov	r2, r3
 8005382:	887b      	ldrh	r3, [r7, #2]
 8005384:	f7fe f81e 	bl	80033c4 <HAL_DMA_Start_IT>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e05b      	b.n	800544a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053a0:	60da      	str	r2, [r3, #12]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
      break;
 80053a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d14b      	bne.n	8005448 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fdfb 	bl	8005fb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a27      	ldr	r2, [pc, #156]	; (8005460 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a20      	ldr	r2, [pc, #128]	; (8005460 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x300>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d013      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x300>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <HAL_TIM_PWM_Start_DMA+0x350>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x300>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <HAL_TIM_PWM_Start_DMA+0x354>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x300>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <HAL_TIM_PWM_Start_DMA+0x358>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x300>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d111      	bne.n	8005438 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b06      	cmp	r3, #6
 8005424:	d010      	beq.n	8005448 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	e007      	b.n	8005448 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	08005a8b 	.word	0x08005a8b
 8005458:	08005b33 	.word	0x08005b33
 800545c:	080059f9 	.word	0x080059f9
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40014000 	.word	0x40014000

08005474 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d855      	bhi.n	8005534 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054c5 	.word	0x080054c5
 8005494:	08005535 	.word	0x08005535
 8005498:	08005535 	.word	0x08005535
 800549c:	08005535 	.word	0x08005535
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	08005535 	.word	0x08005535
 80054a8:	08005535 	.word	0x08005535
 80054ac:	08005535 	.word	0x08005535
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	08005535 	.word	0x08005535
 80054b8:	08005535 	.word	0x08005535
 80054bc:	08005535 	.word	0x08005535
 80054c0:	08005519 	.word	0x08005519
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd ffcb 	bl	8003474 <HAL_DMA_Abort_IT>
      break;
 80054de:	e02c      	b.n	800553a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fd ffbd 	bl	8003474 <HAL_DMA_Abort_IT>
      break;
 80054fa:	e01e      	b.n	800553a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd ffaf 	bl	8003474 <HAL_DMA_Abort_IT>
      break;
 8005516:	e010      	b.n	800553a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005526:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd ffa1 	bl	8003474 <HAL_DMA_Abort_IT>
      break;
 8005532:	e002      	b.n	800553a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	bf00      	nop
  }

  if (status == HAL_OK)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d157      	bne.n	80055f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fd33 	bl	8005fb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d117      	bne.n	8005588 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10f      	bne.n	8005588 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	f240 4344 	movw	r3, #1092	; 0x444
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10f      	bne.n	80055b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1a      	ldr	r2, [r3, #32]
 800559e:	f240 4344 	movw	r3, #1092	; 0x444
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c6:	e013      	b.n	80055f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d104      	bne.n	80055d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d6:	e00b      	b.n	80055f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d104      	bne.n	80055e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e6:	e003      	b.n	80055f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000

08005600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b02      	cmp	r3, #2
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0202 	mvn.w	r2, #2
 800562c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9b0 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9a2 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fd f91b 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b04      	cmp	r3, #4
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0204 	mvn.w	r2, #4
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f986 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f978 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fd f8f1 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0208 	mvn.w	r2, #8
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2204      	movs	r2, #4
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f95c 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f94e 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fd f8c7 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b10      	cmp	r3, #16
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0210 	mvn.w	r2, #16
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2208      	movs	r2, #8
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f932 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f924 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fd f89d 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0201 	mvn.w	r2, #1
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fb fb9a 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fcf2 	bl	8006194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8fa 	bl	80059d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0220 	mvn.w	r2, #32
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fcbc 	bl	8006180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800582a:	2302      	movs	r3, #2
 800582c:	e0ae      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b0c      	cmp	r3, #12
 800583a:	f200 809f 	bhi.w	800597c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005879 	.word	0x08005879
 8005848:	0800597d 	.word	0x0800597d
 800584c:	0800597d 	.word	0x0800597d
 8005850:	0800597d 	.word	0x0800597d
 8005854:	080058b9 	.word	0x080058b9
 8005858:	0800597d 	.word	0x0800597d
 800585c:	0800597d 	.word	0x0800597d
 8005860:	0800597d 	.word	0x0800597d
 8005864:	080058fb 	.word	0x080058fb
 8005868:	0800597d 	.word	0x0800597d
 800586c:	0800597d 	.word	0x0800597d
 8005870:	0800597d 	.word	0x0800597d
 8005874:	0800593b 	.word	0x0800593b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fa0c 	bl	8005c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6999      	ldr	r1, [r3, #24]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	619a      	str	r2, [r3, #24]
      break;
 80058b6:	e064      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa52 	bl	8005d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6999      	ldr	r1, [r3, #24]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	619a      	str	r2, [r3, #24]
      break;
 80058f8:	e043      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa9d 	bl	8005e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0208 	orr.w	r2, r2, #8
 8005914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0204 	bic.w	r2, r2, #4
 8005924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69d9      	ldr	r1, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	61da      	str	r2, [r3, #28]
      break;
 8005938:	e023      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fae7 	bl	8005f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	021a      	lsls	r2, r3, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	61da      	str	r2, [r3, #28]
      break;
 800597a:	e002      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d107      	bne.n	8005a20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a1e:	e02a      	b.n	8005a76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d107      	bne.n	8005a3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a38:	e01d      	b.n	8005a76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d107      	bne.n	8005a54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2204      	movs	r2, #4
 8005a48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a52:	e010      	b.n	8005a76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d107      	bne.n	8005a6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2208      	movs	r2, #8
 8005a62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6c:	e003      	b.n	8005a76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff ffb4 	bl	80059e4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d10b      	bne.n	8005aba <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d136      	bne.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab8:	e031      	b.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d10b      	bne.n	8005adc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d125      	bne.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ada:	e020      	b.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10b      	bne.n	8005afe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d114      	bne.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afc:	e00f      	b.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d10a      	bne.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7fc feb4 	bl	800288c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d103      	bne.n	8005b52 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	771a      	strb	r2, [r3, #28]
 8005b50:	e019      	b.n	8005b86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d103      	bne.n	8005b64 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	771a      	strb	r2, [r3, #28]
 8005b62:	e010      	b.n	8005b86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d103      	bne.n	8005b76 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2204      	movs	r2, #4
 8005b72:	771a      	strb	r2, [r3, #28]
 8005b74:	e007      	b.n	8005b86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d102      	bne.n	8005b86 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2208      	movs	r2, #8
 8005b84:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff18 	bl	80059bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	771a      	strb	r2, [r3, #28]
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a34      	ldr	r2, [pc, #208]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a31      	ldr	r2, [pc, #196]	; (8005c84 <TIM_Base_SetConfig+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <TIM_Base_SetConfig+0xec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x38>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <TIM_Base_SetConfig+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <TIM_Base_SetConfig+0xe8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <TIM_Base_SetConfig+0xec>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_Base_SetConfig+0xf0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <TIM_Base_SetConfig+0xf4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <TIM_Base_SetConfig+0xf8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x8a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <TIM_Base_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <TIM_Base_SetConfig+0xe4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0302 	bic.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1c      	ldr	r2, [pc, #112]	; (8005d64 <TIM_OC1_SetConfig+0xc8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10c      	bne.n	8005d12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0308 	bic.w	r3, r3, #8
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <TIM_OC1_SetConfig+0xc8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d111      	bne.n	8005d3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000

08005d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <TIM_OC2_SetConfig+0xd4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10d      	bne.n	8005de4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC2_SetConfig+0xd4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000

08005e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <TIM_OC3_SetConfig+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10d      	bne.n	8005eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <TIM_OC3_SetConfig+0xd0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d113      	bne.n	8005eea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40010000 	.word	0x40010000

08005f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <TIM_OC4_SetConfig+0x9c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d109      	bne.n	8005f88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000

08005fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fec:	431a      	orrs	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e050      	b.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d018      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d013      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00e      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d004      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d10c      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4313      	orrs	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40014000 	.word	0x40014000

080060dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e03d      	b.n	8006174 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ba:	2b84      	cmp	r3, #132	; 0x84
 80061bc:	d005      	beq.n	80061ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	3303      	adds	r3, #3
 80061c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061dc:	f000 ffe8 	bl	80071b0 <vTaskStartScheduler>
  
  return osOK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80061e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e8:	b089      	sub	sp, #36	; 0x24
 80061ea:	af04      	add	r7, sp, #16
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <osThreadCreate+0x54>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01c      	beq.n	800623a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685c      	ldr	r4, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691e      	ldr	r6, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ffc8 	bl	80061a8 <makeFreeRtosPriority>
 8006218:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006222:	9202      	str	r2, [sp, #8]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	9100      	str	r1, [sp, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4632      	mov	r2, r6
 800622c:	4629      	mov	r1, r5
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fde0 	bl	8006df4 <xTaskCreateStatic>
 8006234:	4603      	mov	r3, r0
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e01c      	b.n	8006274 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685c      	ldr	r4, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006246:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff ffaa 	bl	80061a8 <makeFreeRtosPriority>
 8006254:	4602      	mov	r2, r0
 8006256:	f107 030c 	add.w	r3, r7, #12
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9200      	str	r2, [sp, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	4632      	mov	r2, r6
 8006262:	4629      	mov	r1, r5
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fe22 	bl	8006eae <xTaskCreate>
 800626a:	4603      	mov	r3, r0
 800626c:	2b01      	cmp	r3, #1
 800626e:	d001      	beq.n	8006274 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006274:	68fb      	ldr	r3, [r7, #12]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800627e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <osDelay+0x16>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	e000      	b.n	8006296 <osDelay+0x18>
 8006294:	2301      	movs	r3, #1
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ff56 	bl	8007148 <vTaskDelay>
  
  return osOK;
 800629c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295
 80062be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f103 0208 	add.w	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f103 0208 	add.w	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d103      	bne.n	8006368 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e00c      	b.n	8006382 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3308      	adds	r3, #8
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e002      	b.n	8006376 <vListInsert+0x2e>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d2f6      	bcs.n	8006370 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6892      	ldr	r2, [r2, #8]
 80063d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6852      	ldr	r2, [r2, #4]
 80063da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d103      	bne.n	80063ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	1e5a      	subs	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800643a:	f001 fe1b 	bl	8008074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	441a      	add	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	3b01      	subs	r3, #1
 800646c:	68f9      	ldr	r1, [r7, #12]
 800646e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	441a      	add	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d114      	bne.n	80064ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3310      	adds	r3, #16
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f8d9 	bl	8007654 <xTaskRemoveFromEventList>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d012      	beq.n	80064ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <xQueueGenericReset+0xcc>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	e009      	b.n	80064ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3310      	adds	r3, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fef1 	bl	80062a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff feec 	bl	80062a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064ce:	f001 fe01 	bl	80080d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064d2:	2301      	movs	r3, #1
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericCreate+0x2a>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	613b      	str	r3, [r7, #16]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fe8d 	bl	8008238 <pvPortMalloc>
 800651e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d011      	beq.n	800654a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	3348      	adds	r3, #72	; 0x48
 800652e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006538:	79fa      	ldrb	r2, [r7, #7]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f805 	bl	8006554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800654a:	69bb      	ldr	r3, [r7, #24]
	}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e002      	b.n	8006576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006582:	2101      	movs	r1, #1
 8006584:	69b8      	ldr	r0, [r7, #24]
 8006586:	f7ff ff43 	bl	8006410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065a2:	2300      	movs	r3, #0
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueGenericSend+0x32>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <xQueueGenericSend+0x40>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <xQueueGenericSend+0x44>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <xQueueGenericSend+0x46>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <xQueueGenericSend+0x60>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d103      	bne.n	8006602 <xQueueGenericSend+0x6e>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <xQueueGenericSend+0x72>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <xQueueGenericSend+0x74>
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <xQueueGenericSend+0x8e>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	623b      	str	r3, [r7, #32]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006622:	f001 f9d7 	bl	80079d4 <xTaskGetSchedulerState>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <xQueueGenericSend+0x9e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <xQueueGenericSend+0xa2>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <xQueueGenericSend+0xa4>
 8006636:	2300      	movs	r3, #0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xQueueGenericSend+0xbe>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	61fb      	str	r3, [r7, #28]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006652:	f001 fd0f 	bl	8008074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <xQueueGenericSend+0xd4>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d129      	bne.n	80066bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666e:	f000 fab1 	bl	8006bd4 <prvCopyDataToQueue>
 8006672:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	3324      	adds	r3, #36	; 0x24
 8006680:	4618      	mov	r0, r3
 8006682:	f000 ffe7 	bl	8007654 <xTaskRemoveFromEventList>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d013      	beq.n	80066b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800668c:	4b3f      	ldr	r3, [pc, #252]	; (800678c <xQueueGenericSend+0x1f8>)
 800668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	e00a      	b.n	80066b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066a4:	4b39      	ldr	r3, [pc, #228]	; (800678c <xQueueGenericSend+0x1f8>)
 80066a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066b4:	f001 fd0e 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e063      	b.n	8006784 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066c2:	f001 fd07 	bl	80080d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e05c      	b.n	8006784 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066d0:	f107 0314 	add.w	r3, r7, #20
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f81f 	bl	8007718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066de:	f001 fcf9 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066e2:	f000 fdcf 	bl	8007284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066e6:	f001 fcc5 	bl	8008074 <vPortEnterCritical>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d103      	bne.n	8006700 <xQueueGenericSend+0x16c>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006706:	b25b      	sxtb	r3, r3
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d103      	bne.n	8006716 <xQueueGenericSend+0x182>
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006716:	f001 fcdd 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800671a:	1d3a      	adds	r2, r7, #4
 800671c:	f107 0314 	add.w	r3, r7, #20
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f80e 	bl	8007744 <xTaskCheckForTimeOut>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d124      	bne.n	8006778 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800672e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006730:	f000 fb48 	bl	8006dc4 <prvIsQueueFull>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	3310      	adds	r3, #16
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ff62 	bl	800760c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800674a:	f000 fad3 	bl	8006cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800674e:	f000 fda7 	bl	80072a0 <xTaskResumeAll>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	f47f af7c 	bne.w	8006652 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <xQueueGenericSend+0x1f8>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	e772      	b.n	8006652 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800676c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800676e:	f000 fac1 	bl	8006cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006772:	f000 fd95 	bl	80072a0 <xTaskResumeAll>
 8006776:	e76c      	b.n	8006652 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677a:	f000 fabb 	bl	8006cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800677e:	f000 fd8f 	bl	80072a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006782:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006784:	4618      	mov	r0, r3
 8006786:	3738      	adds	r7, #56	; 0x38
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	; 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <xQueueReceive+0x30>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	623b      	str	r3, [r7, #32]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <xQueueReceive+0x3e>
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <xQueueReceive+0x42>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <xQueueReceive+0x44>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xQueueReceive+0x5e>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ee:	f001 f8f1 	bl	80079d4 <xTaskGetSchedulerState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <xQueueReceive+0x6e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <xQueueReceive+0x72>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <xQueueReceive+0x74>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueReceive+0x8e>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	61bb      	str	r3, [r7, #24]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800681e:	f001 fc29 	bl	8008074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01f      	beq.n	800686e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006832:	f000 fa39 	bl	8006ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00f      	beq.n	8006866 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	3310      	adds	r3, #16
 800684a:	4618      	mov	r0, r3
 800684c:	f000 ff02 	bl	8007654 <xTaskRemoveFromEventList>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006856:	4b3d      	ldr	r3, [pc, #244]	; (800694c <xQueueReceive+0x1bc>)
 8006858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006866:	f001 fc35 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 800686a:	2301      	movs	r3, #1
 800686c:	e069      	b.n	8006942 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006874:	f001 fc2e 	bl	80080d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006878:	2300      	movs	r3, #0
 800687a:	e062      	b.n	8006942 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006882:	f107 0310 	add.w	r3, r7, #16
 8006886:	4618      	mov	r0, r3
 8006888:	f000 ff46 	bl	8007718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006890:	f001 fc20 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006894:	f000 fcf6 	bl	8007284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006898:	f001 fbec 	bl	8008074 <vPortEnterCritical>
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d103      	bne.n	80068b2 <xQueueReceive+0x122>
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b8:	b25b      	sxtb	r3, r3
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d103      	bne.n	80068c8 <xQueueReceive+0x138>
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c8:	f001 fc04 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068cc:	1d3a      	adds	r2, r7, #4
 80068ce:	f107 0310 	add.w	r3, r7, #16
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 ff35 	bl	8007744 <xTaskCheckForTimeOut>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d123      	bne.n	8006928 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e2:	f000 fa59 	bl	8006d98 <prvIsQueueEmpty>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	3324      	adds	r3, #36	; 0x24
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fe89 	bl	800760c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fc:	f000 f9fa 	bl	8006cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006900:	f000 fcce 	bl	80072a0 <xTaskResumeAll>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d189      	bne.n	800681e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800690a:	4b10      	ldr	r3, [pc, #64]	; (800694c <xQueueReceive+0x1bc>)
 800690c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	e780      	b.n	800681e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800691c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691e:	f000 f9e9 	bl	8006cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006922:	f000 fcbd 	bl	80072a0 <xTaskResumeAll>
 8006926:	e77a      	b.n	800681e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692a:	f000 f9e3 	bl	8006cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800692e:	f000 fcb7 	bl	80072a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006934:	f000 fa30 	bl	8006d98 <prvIsQueueEmpty>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	f43f af6f 	beq.w	800681e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006942:	4618      	mov	r0, r3
 8006944:	3730      	adds	r7, #48	; 0x30
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	623b      	str	r3, [r7, #32]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	61fb      	str	r3, [r7, #28]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a0:	f001 f818 	bl	80079d4 <xTaskGetSchedulerState>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <xQueueSemaphoreTake+0x60>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <xQueueSemaphoreTake+0x64>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <xQueueSemaphoreTake+0x66>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	61bb      	str	r3, [r7, #24]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069d0:	f001 fb50 	bl	8008074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d024      	beq.n	8006a2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	1e5a      	subs	r2, r3, #1
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d104      	bne.n	80069fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069f0:	f001 f998 	bl	8007d24 <pvTaskIncrementMutexHeldCount>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00f      	beq.n	8006a22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	3310      	adds	r3, #16
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fe24 	bl	8007654 <xTaskRemoveFromEventList>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a12:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <xQueueSemaphoreTake+0x214>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a22:	f001 fb57 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e097      	b.n	8006b5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d111      	bne.n	8006a54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	617b      	str	r3, [r7, #20]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a4c:	f001 fb42 	bl	80080d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e082      	b.n	8006b5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fe5a 	bl	8007718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a68:	f001 fb34 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a6c:	f000 fc0a 	bl	8007284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a70:	f001 fb00 	bl	8008074 <vPortEnterCritical>
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d103      	bne.n	8006a8a <xQueueSemaphoreTake+0x13a>
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d103      	bne.n	8006aa0 <xQueueSemaphoreTake+0x150>
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa0:	f001 fb18 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aa4:	463a      	mov	r2, r7
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fe49 	bl	8007744 <xTaskCheckForTimeOut>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d132      	bne.n	8006b1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aba:	f000 f96d 	bl	8006d98 <prvIsQueueEmpty>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d026      	beq.n	8006b12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006acc:	f001 fad2 	bl	8008074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 ff9b 	bl	8007a10 <xTaskPriorityInherit>
 8006ada:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006adc:	f001 fafa 	bl	80080d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	3324      	adds	r3, #36	; 0x24
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fd8f 	bl	800760c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af0:	f000 f900 	bl	8006cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af4:	f000 fbd4 	bl	80072a0 <xTaskResumeAll>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f47f af68 	bne.w	80069d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <xQueueSemaphoreTake+0x214>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	e75e      	b.n	80069d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b14:	f000 f8ee 	bl	8006cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b18:	f000 fbc2 	bl	80072a0 <xTaskResumeAll>
 8006b1c:	e758      	b.n	80069d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b20:	f000 f8e8 	bl	8006cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b24:	f000 fbbc 	bl	80072a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b2a:	f000 f935 	bl	8006d98 <prvIsQueueEmpty>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f43f af4d 	beq.w	80069d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b3c:	f001 fa9a 	bl	8008074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b42:	f000 f82f 	bl	8006ba4 <prvGetDisinheritPriorityAfterTimeout>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 f85a 	bl	8007c08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b54:	f001 fabe 	bl	80080d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3738      	adds	r7, #56	; 0x38
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006b8c:	f001 fa72 	bl	8008074 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006b96:	f001 fa9d 	bl	80080d4 <vPortExitCritical>

	return uxReturn;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d006      	beq.n	8006bc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1c3 0307 	rsb	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e001      	b.n	8006bc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d14d      	bne.n	8006c96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 ff7c 	bl	8007afc <xTaskPriorityDisinherit>
 8006c04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	e043      	b.n	8006c96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d119      	bne.n	8006c48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6858      	ldr	r0, [r3, #4]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	f001 fd78 	bl	8008714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	441a      	add	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d32b      	bcc.n	8006c96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	e026      	b.n	8006c96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68d8      	ldr	r0, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	461a      	mov	r2, r3
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	f001 fd5e 	bl	8008714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	425b      	negs	r3, r3
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d207      	bcs.n	8006c84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	441a      	add	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d105      	bne.n	8006c96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c9e:	697b      	ldr	r3, [r7, #20]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	441a      	add	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d303      	bcc.n	8006cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68d9      	ldr	r1, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6838      	ldr	r0, [r7, #0]
 8006ce8:	f001 fd14 	bl	8008714 <memcpy>
	}
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cfc:	f001 f9ba 	bl	8008074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d08:	e011      	b.n	8006d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d012      	beq.n	8006d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fc9c 	bl	8007654 <xTaskRemoveFromEventList>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d22:	f000 fd71 	bl	8007808 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dce9      	bgt.n	8006d0a <prvUnlockQueue+0x16>
 8006d36:	e000      	b.n	8006d3a <prvUnlockQueue+0x46>
					break;
 8006d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	22ff      	movs	r2, #255	; 0xff
 8006d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d42:	f001 f9c7 	bl	80080d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d46:	f001 f995 	bl	8008074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d52:	e011      	b.n	8006d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3310      	adds	r3, #16
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc77 	bl	8007654 <xTaskRemoveFromEventList>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d6c:	f000 fd4c 	bl	8007808 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dce9      	bgt.n	8006d54 <prvUnlockQueue+0x60>
 8006d80:	e000      	b.n	8006d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d8c:	f001 f9a2 	bl	80080d4 <vPortExitCritical>
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da0:	f001 f968 	bl	8008074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	e001      	b.n	8006db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006db6:	f001 f98d 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 8006dba:	68fb      	ldr	r3, [r7, #12]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dcc:	f001 f952 	bl	8008074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d102      	bne.n	8006de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e001      	b.n	8006de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006de6:	f001 f975 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 8006dea:	68fb      	ldr	r3, [r7, #12]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08e      	sub	sp, #56	; 0x38
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	623b      	str	r3, [r7, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61fb      	str	r3, [r7, #28]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e3a:	23a0      	movs	r3, #160	; 0xa0
 8006e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2ba0      	cmp	r3, #160	; 0xa0
 8006e42:	d00a      	beq.n	8006e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	61bb      	str	r3, [r7, #24]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01e      	beq.n	8006ea0 <xTaskCreateStatic+0xac>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01b      	beq.n	8006ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9303      	str	r3, [sp, #12]
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	9302      	str	r3, [sp, #8]
 8006e82:	f107 0314 	add.w	r3, r7, #20
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f850 	bl	8006f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e9a:	f000 f8eb 	bl	8007074 <prvAddNewTaskToReadyList>
 8006e9e:	e001      	b.n	8006ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ea4:	697b      	ldr	r3, [r7, #20]
	}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b08c      	sub	sp, #48	; 0x30
 8006eb2:	af04      	add	r7, sp, #16
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f9b8 	bl	8008238 <pvPortMalloc>
 8006ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ed0:	20a0      	movs	r0, #160	; 0xa0
 8006ed2:	f001 f9b1 	bl	8008238 <pvPortMalloc>
 8006ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ee4:	e005      	b.n	8006ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ee6:	6978      	ldr	r0, [r7, #20]
 8006ee8:	f001 fa72 	bl	80083d0 <vPortFree>
 8006eec:	e001      	b.n	8006ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	2300      	movs	r3, #0
 8006f04:	9303      	str	r3, [sp, #12]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f80e 	bl	8006f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f1c:	69f8      	ldr	r0, [r7, #28]
 8006f1e:	f000 f8a9 	bl	8007074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e002      	b.n	8006f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f50:	3b01      	subs	r3, #1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	617b      	str	r3, [r7, #20]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01f      	beq.n	8006fc6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	e012      	b.n	8006fb2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	7819      	ldrb	r1, [r3, #0]
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	3334      	adds	r3, #52	; 0x34
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d9e9      	bls.n	8006f8c <prvInitialiseNewTask+0x54>
 8006fb8:	e000      	b.n	8006fbc <prvInitialiseNewTask+0x84>
			{
				break;
 8006fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc4:	e003      	b.n	8006fce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	2b06      	cmp	r3, #6
 8006fd2:	d901      	bls.n	8006fd8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fd4:	2306      	movs	r3, #6
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff f979 	bl	80062e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	3318      	adds	r3, #24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff f974 	bl	80062e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	f1c3 0207 	rsb	r2, r3, #7
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2200      	movs	r2, #0
 8007020:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	334c      	adds	r3, #76	; 0x4c
 8007028:	224c      	movs	r2, #76	; 0x4c
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f001 faed 	bl	800860c <memset>
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	4a0c      	ldr	r2, [pc, #48]	; (8007068 <prvInitialiseNewTask+0x130>)
 8007036:	651a      	str	r2, [r3, #80]	; 0x50
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	4a0c      	ldr	r2, [pc, #48]	; (800706c <prvInitialiseNewTask+0x134>)
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	4a0b      	ldr	r2, [pc, #44]	; (8007070 <prvInitialiseNewTask+0x138>)
 8007042:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	69b8      	ldr	r0, [r7, #24]
 800704a:	f000 fee5 	bl	8007e18 <pxPortInitialiseStack>
 800704e:	4602      	mov	r2, r0
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007060:	bf00      	nop
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20005404 	.word	0x20005404
 800706c:	2000546c 	.word	0x2000546c
 8007070:	200054d4 	.word	0x200054d4

08007074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800707c:	f000 fffa 	bl	8008074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007080:	4b2a      	ldr	r3, [pc, #168]	; (800712c <prvAddNewTaskToReadyList+0xb8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	4a29      	ldr	r2, [pc, #164]	; (800712c <prvAddNewTaskToReadyList+0xb8>)
 8007088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800708a:	4b29      	ldr	r3, [pc, #164]	; (8007130 <prvAddNewTaskToReadyList+0xbc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007092:	4a27      	ldr	r2, [pc, #156]	; (8007130 <prvAddNewTaskToReadyList+0xbc>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007098:	4b24      	ldr	r3, [pc, #144]	; (800712c <prvAddNewTaskToReadyList+0xb8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d110      	bne.n	80070c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070a0:	f000 fbd6 	bl	8007850 <prvInitialiseTaskLists>
 80070a4:	e00d      	b.n	80070c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070a6:	4b23      	ldr	r3, [pc, #140]	; (8007134 <prvAddNewTaskToReadyList+0xc0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070ae:	4b20      	ldr	r3, [pc, #128]	; (8007130 <prvAddNewTaskToReadyList+0xbc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d802      	bhi.n	80070c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070bc:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <prvAddNewTaskToReadyList+0xbc>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070c2:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <prvAddNewTaskToReadyList+0xc4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a1b      	ldr	r2, [pc, #108]	; (8007138 <prvAddNewTaskToReadyList+0xc4>)
 80070ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	2201      	movs	r2, #1
 80070d2:	409a      	lsls	r2, r3
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <prvAddNewTaskToReadyList+0xc8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4313      	orrs	r3, r2
 80070da:	4a18      	ldr	r2, [pc, #96]	; (800713c <prvAddNewTaskToReadyList+0xc8>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a15      	ldr	r2, [pc, #84]	; (8007140 <prvAddNewTaskToReadyList+0xcc>)
 80070ec:	441a      	add	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7ff f903 	bl	8006300 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070fa:	f000 ffeb 	bl	80080d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <prvAddNewTaskToReadyList+0xc0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <prvAddNewTaskToReadyList+0xbc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	429a      	cmp	r2, r3
 8007112:	d207      	bcs.n	8007124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <prvAddNewTaskToReadyList+0xd0>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	200017b0 	.word	0x200017b0
 8007130:	200016b0 	.word	0x200016b0
 8007134:	200017bc 	.word	0x200017bc
 8007138:	200017cc 	.word	0x200017cc
 800713c:	200017b8 	.word	0x200017b8
 8007140:	200016b4 	.word	0x200016b4
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d017      	beq.n	800718a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800715a:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <vTaskDelay+0x60>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <vTaskDelay+0x30>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60bb      	str	r3, [r7, #8]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007178:	f000 f884 	bl	8007284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800717c:	2100      	movs	r1, #0
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fde4 	bl	8007d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007184:	f000 f88c 	bl	80072a0 <xTaskResumeAll>
 8007188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d107      	bne.n	80071a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <vTaskDelay+0x64>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	200017d8 	.word	0x200017d8
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071be:	463a      	mov	r2, r7
 80071c0:	1d39      	adds	r1, r7, #4
 80071c2:	f107 0308 	add.w	r3, r7, #8
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7f9 fb9a 	bl	8000900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	9202      	str	r2, [sp, #8]
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	2300      	movs	r3, #0
 80071dc:	460a      	mov	r2, r1
 80071de:	4921      	ldr	r1, [pc, #132]	; (8007264 <vTaskStartScheduler+0xb4>)
 80071e0:	4821      	ldr	r0, [pc, #132]	; (8007268 <vTaskStartScheduler+0xb8>)
 80071e2:	f7ff fe07 	bl	8006df4 <xTaskCreateStatic>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4a20      	ldr	r2, [pc, #128]	; (800726c <vTaskStartScheduler+0xbc>)
 80071ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071ec:	4b1f      	ldr	r3, [pc, #124]	; (800726c <vTaskStartScheduler+0xbc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071f4:	2301      	movs	r3, #1
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e001      	b.n	80071fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d11b      	bne.n	800723c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	613b      	str	r3, [r7, #16]
}
 8007216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <vTaskStartScheduler+0xc0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	334c      	adds	r3, #76	; 0x4c
 800721e:	4a15      	ldr	r2, [pc, #84]	; (8007274 <vTaskStartScheduler+0xc4>)
 8007220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <vTaskStartScheduler+0xc8>)
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <vTaskStartScheduler+0xcc>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007230:	4b13      	ldr	r3, [pc, #76]	; (8007280 <vTaskStartScheduler+0xd0>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007236:	f000 fe7b 	bl	8007f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800723a:	e00e      	b.n	800725a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d10a      	bne.n	800725a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <vTaskStartScheduler+0xa8>
}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	080088f0 	.word	0x080088f0
 8007268:	08007821 	.word	0x08007821
 800726c:	200017d4 	.word	0x200017d4
 8007270:	200016b0 	.word	0x200016b0
 8007274:	200000ec 	.word	0x200000ec
 8007278:	200017d0 	.word	0x200017d0
 800727c:	200017bc 	.word	0x200017bc
 8007280:	200017b4 	.word	0x200017b4

08007284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <vTaskSuspendAll+0x18>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a03      	ldr	r2, [pc, #12]	; (800729c <vTaskSuspendAll+0x18>)
 8007290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007292:	bf00      	nop
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	200017d8 	.word	0x200017d8

080072a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072ae:	4b41      	ldr	r3, [pc, #260]	; (80073b4 <xTaskResumeAll+0x114>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <xTaskResumeAll+0x2c>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	603b      	str	r3, [r7, #0]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072cc:	f000 fed2 	bl	8008074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072d0:	4b38      	ldr	r3, [pc, #224]	; (80073b4 <xTaskResumeAll+0x114>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4a37      	ldr	r2, [pc, #220]	; (80073b4 <xTaskResumeAll+0x114>)
 80072d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072da:	4b36      	ldr	r3, [pc, #216]	; (80073b4 <xTaskResumeAll+0x114>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d161      	bne.n	80073a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072e2:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <xTaskResumeAll+0x118>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d05d      	beq.n	80073a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ea:	e02e      	b.n	800734a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ec:	4b33      	ldr	r3, [pc, #204]	; (80073bc <xTaskResumeAll+0x11c>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3318      	adds	r3, #24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff f85e 	bl	80063ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff f859 	bl	80063ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	2201      	movs	r2, #1
 800730e:	409a      	lsls	r2, r3
 8007310:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <xTaskResumeAll+0x120>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4313      	orrs	r3, r2
 8007316:	4a2a      	ldr	r2, [pc, #168]	; (80073c0 <xTaskResumeAll+0x120>)
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <xTaskResumeAll+0x124>)
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3304      	adds	r3, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7fe ffe5 	bl	8006300 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	4b23      	ldr	r3, [pc, #140]	; (80073c8 <xTaskResumeAll+0x128>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	429a      	cmp	r2, r3
 8007342:	d302      	bcc.n	800734a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007344:	4b21      	ldr	r3, [pc, #132]	; (80073cc <xTaskResumeAll+0x12c>)
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800734a:	4b1c      	ldr	r3, [pc, #112]	; (80073bc <xTaskResumeAll+0x11c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1cc      	bne.n	80072ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007358:	f000 fb1c 	bl	8007994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <xTaskResumeAll+0x130>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007368:	f000 f836 	bl	80073d8 <xTaskIncrementTick>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007372:	4b16      	ldr	r3, [pc, #88]	; (80073cc <xTaskResumeAll+0x12c>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3b01      	subs	r3, #1
 800737c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f1      	bne.n	8007368 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007384:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <xTaskResumeAll+0x130>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <xTaskResumeAll+0x12c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007392:	2301      	movs	r3, #1
 8007394:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007396:	4b0f      	ldr	r3, [pc, #60]	; (80073d4 <xTaskResumeAll+0x134>)
 8007398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a6:	f000 fe95 	bl	80080d4 <vPortExitCritical>

	return xAlreadyYielded;
 80073aa:	68bb      	ldr	r3, [r7, #8]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	200017d8 	.word	0x200017d8
 80073b8:	200017b0 	.word	0x200017b0
 80073bc:	20001770 	.word	0x20001770
 80073c0:	200017b8 	.word	0x200017b8
 80073c4:	200016b4 	.word	0x200016b4
 80073c8:	200016b0 	.word	0x200016b0
 80073cc:	200017c4 	.word	0x200017c4
 80073d0:	200017c0 	.word	0x200017c0
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073e2:	4b4e      	ldr	r3, [pc, #312]	; (800751c <xTaskIncrementTick+0x144>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 808e 	bne.w	8007508 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073ec:	4b4c      	ldr	r3, [pc, #304]	; (8007520 <xTaskIncrementTick+0x148>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073f4:	4a4a      	ldr	r2, [pc, #296]	; (8007520 <xTaskIncrementTick+0x148>)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d120      	bne.n	8007442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007400:	4b48      	ldr	r3, [pc, #288]	; (8007524 <xTaskIncrementTick+0x14c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <xTaskIncrementTick+0x48>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	603b      	str	r3, [r7, #0]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xTaskIncrementTick+0x46>
 8007420:	4b40      	ldr	r3, [pc, #256]	; (8007524 <xTaskIncrementTick+0x14c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	4b40      	ldr	r3, [pc, #256]	; (8007528 <xTaskIncrementTick+0x150>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3e      	ldr	r2, [pc, #248]	; (8007524 <xTaskIncrementTick+0x14c>)
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	4a3e      	ldr	r2, [pc, #248]	; (8007528 <xTaskIncrementTick+0x150>)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4b3d      	ldr	r3, [pc, #244]	; (800752c <xTaskIncrementTick+0x154>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	4a3c      	ldr	r2, [pc, #240]	; (800752c <xTaskIncrementTick+0x154>)
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	f000 faa9 	bl	8007994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007442:	4b3b      	ldr	r3, [pc, #236]	; (8007530 <xTaskIncrementTick+0x158>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d348      	bcc.n	80074de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800744c:	4b35      	ldr	r3, [pc, #212]	; (8007524 <xTaskIncrementTick+0x14c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <xTaskIncrementTick+0x158>)
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	601a      	str	r2, [r3, #0]
					break;
 800745e:	e03e      	b.n	80074de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007460:	4b30      	ldr	r3, [pc, #192]	; (8007524 <xTaskIncrementTick+0x14c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d203      	bcs.n	8007480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007478:	4a2d      	ldr	r2, [pc, #180]	; (8007530 <xTaskIncrementTick+0x158>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800747e:	e02e      	b.n	80074de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe ff98 	bl	80063ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3318      	adds	r3, #24
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe ff8f 	bl	80063ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	2201      	movs	r2, #1
 80074a2:	409a      	lsls	r2, r3
 80074a4:	4b23      	ldr	r3, [pc, #140]	; (8007534 <xTaskIncrementTick+0x15c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	4a22      	ldr	r2, [pc, #136]	; (8007534 <xTaskIncrementTick+0x15c>)
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <xTaskIncrementTick+0x160>)
 80074bc:	441a      	add	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fe ff1b 	bl	8006300 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	4b1b      	ldr	r3, [pc, #108]	; (800753c <xTaskIncrementTick+0x164>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3b9      	bcc.n	800744c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074dc:	e7b6      	b.n	800744c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074de:	4b17      	ldr	r3, [pc, #92]	; (800753c <xTaskIncrementTick+0x164>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	4914      	ldr	r1, [pc, #80]	; (8007538 <xTaskIncrementTick+0x160>)
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d901      	bls.n	80074fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <xTaskIncrementTick+0x168>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e004      	b.n	8007512 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <xTaskIncrementTick+0x16c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a0d      	ldr	r2, [pc, #52]	; (8007544 <xTaskIncrementTick+0x16c>)
 8007510:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007512:	697b      	ldr	r3, [r7, #20]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	200017d8 	.word	0x200017d8
 8007520:	200017b4 	.word	0x200017b4
 8007524:	20001768 	.word	0x20001768
 8007528:	2000176c 	.word	0x2000176c
 800752c:	200017c8 	.word	0x200017c8
 8007530:	200017d0 	.word	0x200017d0
 8007534:	200017b8 	.word	0x200017b8
 8007538:	200016b4 	.word	0x200016b4
 800753c:	200016b0 	.word	0x200016b0
 8007540:	200017c4 	.word	0x200017c4
 8007544:	200017c0 	.word	0x200017c0

08007548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800754e:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <vTaskSwitchContext+0xac>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007556:	4b28      	ldr	r3, [pc, #160]	; (80075f8 <vTaskSwitchContext+0xb0>)
 8007558:	2201      	movs	r2, #1
 800755a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800755c:	e044      	b.n	80075e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800755e:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <vTaskSwitchContext+0xb0>)
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	4b25      	ldr	r3, [pc, #148]	; (80075fc <vTaskSwitchContext+0xb4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	fab3 f383 	clz	r3, r3
 8007570:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f1c3 031f 	rsb	r3, r3, #31
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	4921      	ldr	r1, [pc, #132]	; (8007600 <vTaskSwitchContext+0xb8>)
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vTaskSwitchContext+0x5a>
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a14      	ldr	r2, [pc, #80]	; (8007600 <vTaskSwitchContext+0xb8>)
 80075b0:	4413      	add	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	605a      	str	r2, [r3, #4]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3308      	adds	r3, #8
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d104      	bne.n	80075d4 <vTaskSwitchContext+0x8c>
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <vTaskSwitchContext+0xbc>)
 80075dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <vTaskSwitchContext+0xbc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	334c      	adds	r3, #76	; 0x4c
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <vTaskSwitchContext+0xc0>)
 80075e6:	6013      	str	r3, [r2, #0]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	200017d8 	.word	0x200017d8
 80075f8:	200017c4 	.word	0x200017c4
 80075fc:	200017b8 	.word	0x200017b8
 8007600:	200016b4 	.word	0x200016b4
 8007604:	200016b0 	.word	0x200016b0
 8007608:	200000ec 	.word	0x200000ec

0800760c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <vTaskPlaceOnEventList+0x44>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3318      	adds	r3, #24
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fe fe84 	bl	8006348 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007640:	2101      	movs	r1, #1
 8007642:	6838      	ldr	r0, [r7, #0]
 8007644:	f000 fb82 	bl	8007d4c <prvAddCurrentTaskToDelayedList>
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200016b0 	.word	0x200016b0

08007654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	60fb      	str	r3, [r7, #12]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3318      	adds	r3, #24
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fe98 	bl	80063ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768a:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <xTaskRemoveFromEventList+0xac>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11c      	bne.n	80076cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fe8f 	bl	80063ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2201      	movs	r2, #1
 80076a2:	409a      	lsls	r2, r3
 80076a4:	4b17      	ldr	r3, [pc, #92]	; (8007704 <xTaskRemoveFromEventList+0xb0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <xTaskRemoveFromEventList+0xb0>)
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4a13      	ldr	r2, [pc, #76]	; (8007708 <xTaskRemoveFromEventList+0xb4>)
 80076bc:	441a      	add	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fe fe1b 	bl	8006300 <vListInsertEnd>
 80076ca:	e005      	b.n	80076d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	3318      	adds	r3, #24
 80076d0:	4619      	mov	r1, r3
 80076d2:	480e      	ldr	r0, [pc, #56]	; (800770c <xTaskRemoveFromEventList+0xb8>)
 80076d4:	f7fe fe14 	bl	8006300 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <xTaskRemoveFromEventList+0xbc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d905      	bls.n	80076f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <xTaskRemoveFromEventList+0xc0>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e001      	b.n	80076f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076f6:	697b      	ldr	r3, [r7, #20]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200017d8 	.word	0x200017d8
 8007704:	200017b8 	.word	0x200017b8
 8007708:	200016b4 	.word	0x200016b4
 800770c:	20001770 	.word	0x20001770
 8007710:	200016b0 	.word	0x200016b0
 8007714:	200017c4 	.word	0x200017c4

08007718 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <vTaskInternalSetTimeOutState+0x24>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <vTaskInternalSetTimeOutState+0x28>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	200017c8 	.word	0x200017c8
 8007740:	200017b4 	.word	0x200017b4

08007744 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	613b      	str	r3, [r7, #16]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007786:	f000 fc75 	bl	8008074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800778a:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <xTaskCheckForTimeOut+0xbc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a2:	d102      	bne.n	80077aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	e023      	b.n	80077f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b15      	ldr	r3, [pc, #84]	; (8007804 <xTaskCheckForTimeOut+0xc0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d007      	beq.n	80077c6 <xTaskCheckForTimeOut+0x82>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d302      	bcc.n	80077c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e015      	b.n	80077f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d20b      	bcs.n	80077e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff9b 	bl	8007718 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e004      	b.n	80077f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077f2:	f000 fc6f 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 80077f6:	69fb      	ldr	r3, [r7, #28]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	200017b4 	.word	0x200017b4
 8007804:	200017c8 	.word	0x200017c8

08007808 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800780c:	4b03      	ldr	r3, [pc, #12]	; (800781c <vTaskMissedYield+0x14>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	200017c4 	.word	0x200017c4

08007820 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007828:	f000 f852 	bl	80078d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <prvIdleTask+0x28>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d9f9      	bls.n	8007828 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <prvIdleTask+0x2c>)
 8007836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007844:	e7f0      	b.n	8007828 <prvIdleTask+0x8>
 8007846:	bf00      	nop
 8007848:	200016b4 	.word	0x200016b4
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	e00c      	b.n	8007876 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4a12      	ldr	r2, [pc, #72]	; (80078b0 <prvInitialiseTaskLists+0x60>)
 8007868:	4413      	add	r3, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fd1b 	bl	80062a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3301      	adds	r3, #1
 8007874:	607b      	str	r3, [r7, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b06      	cmp	r3, #6
 800787a:	d9ef      	bls.n	800785c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800787c:	480d      	ldr	r0, [pc, #52]	; (80078b4 <prvInitialiseTaskLists+0x64>)
 800787e:	f7fe fd12 	bl	80062a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007882:	480d      	ldr	r0, [pc, #52]	; (80078b8 <prvInitialiseTaskLists+0x68>)
 8007884:	f7fe fd0f 	bl	80062a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007888:	480c      	ldr	r0, [pc, #48]	; (80078bc <prvInitialiseTaskLists+0x6c>)
 800788a:	f7fe fd0c 	bl	80062a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800788e:	480c      	ldr	r0, [pc, #48]	; (80078c0 <prvInitialiseTaskLists+0x70>)
 8007890:	f7fe fd09 	bl	80062a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007894:	480b      	ldr	r0, [pc, #44]	; (80078c4 <prvInitialiseTaskLists+0x74>)
 8007896:	f7fe fd06 	bl	80062a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <prvInitialiseTaskLists+0x78>)
 800789c:	4a05      	ldr	r2, [pc, #20]	; (80078b4 <prvInitialiseTaskLists+0x64>)
 800789e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <prvInitialiseTaskLists+0x7c>)
 80078a2:	4a05      	ldr	r2, [pc, #20]	; (80078b8 <prvInitialiseTaskLists+0x68>)
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200016b4 	.word	0x200016b4
 80078b4:	20001740 	.word	0x20001740
 80078b8:	20001754 	.word	0x20001754
 80078bc:	20001770 	.word	0x20001770
 80078c0:	20001784 	.word	0x20001784
 80078c4:	2000179c 	.word	0x2000179c
 80078c8:	20001768 	.word	0x20001768
 80078cc:	2000176c 	.word	0x2000176c

080078d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078d6:	e019      	b.n	800790c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078d8:	f000 fbcc 	bl	8008074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078dc:	4b10      	ldr	r3, [pc, #64]	; (8007920 <prvCheckTasksWaitingTermination+0x50>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fd66 	bl	80063ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078ee:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <prvCheckTasksWaitingTermination+0x54>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	4a0b      	ldr	r2, [pc, #44]	; (8007924 <prvCheckTasksWaitingTermination+0x54>)
 80078f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078f8:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <prvCheckTasksWaitingTermination+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4a0a      	ldr	r2, [pc, #40]	; (8007928 <prvCheckTasksWaitingTermination+0x58>)
 8007900:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007902:	f000 fbe7 	bl	80080d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f810 	bl	800792c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <prvCheckTasksWaitingTermination+0x58>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e1      	bne.n	80078d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20001784 	.word	0x20001784
 8007924:	200017b0 	.word	0x200017b0
 8007928:	20001798 	.word	0x20001798

0800792c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	334c      	adds	r3, #76	; 0x4c
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fe6f 	bl	800861c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007944:	2b00      	cmp	r3, #0
 8007946:	d108      	bne.n	800795a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fd3f 	bl	80083d0 <vPortFree>
				vPortFree( pxTCB );
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fd3c 	bl	80083d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007958:	e018      	b.n	800798c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007960:	2b01      	cmp	r3, #1
 8007962:	d103      	bne.n	800796c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fd33 	bl	80083d0 <vPortFree>
	}
 800796a:	e00f      	b.n	800798c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007972:	2b02      	cmp	r3, #2
 8007974:	d00a      	beq.n	800798c <prvDeleteTCB+0x60>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60fb      	str	r3, [r7, #12]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <prvDeleteTCB+0x5e>
	}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <prvResetNextTaskUnblockTime+0x38>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <prvResetNextTaskUnblockTime+0x3c>)
 80079a6:	f04f 32ff 	mov.w	r2, #4294967295
 80079aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079ac:	e008      	b.n	80079c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <prvResetNextTaskUnblockTime+0x38>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <prvResetNextTaskUnblockTime+0x3c>)
 80079be:	6013      	str	r3, [r2, #0]
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20001768 	.word	0x20001768
 80079d0:	200017d0 	.word	0x200017d0

080079d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <xTaskGetSchedulerState+0x34>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079e2:	2301      	movs	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	e008      	b.n	80079fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e8:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <xTaskGetSchedulerState+0x38>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079f0:	2302      	movs	r3, #2
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e001      	b.n	80079fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079fa:	687b      	ldr	r3, [r7, #4]
	}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	200017bc 	.word	0x200017bc
 8007a0c:	200017d8 	.word	0x200017d8

08007a10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d05e      	beq.n	8007ae4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <xTaskPriorityInherit+0xe0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d24e      	bcs.n	8007ad2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	db06      	blt.n	8007a4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3c:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <xTaskPriorityInherit+0xe0>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f1c3 0207 	rsb	r2, r3, #7
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6959      	ldr	r1, [r3, #20]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <xTaskPriorityInherit+0xe4>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d12f      	bne.n	8007ac2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fca7 	bl	80063ba <uxListRemove>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	2201      	movs	r2, #1
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	43da      	mvns	r2, r3
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	; (8007af8 <xTaskPriorityInherit+0xe8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4013      	ands	r3, r2
 8007a84:	4a1c      	ldr	r2, [pc, #112]	; (8007af8 <xTaskPriorityInherit+0xe8>)
 8007a86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a88:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <xTaskPriorityInherit+0xe0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	2201      	movs	r2, #1
 8007a98:	409a      	lsls	r2, r3
 8007a9a:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <xTaskPriorityInherit+0xe8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <xTaskPriorityInherit+0xe8>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4a10      	ldr	r2, [pc, #64]	; (8007af4 <xTaskPriorityInherit+0xe4>)
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f7fe fc20 	bl	8006300 <vListInsertEnd>
 8007ac0:	e004      	b.n	8007acc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <xTaskPriorityInherit+0xe0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	e008      	b.n	8007ae4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <xTaskPriorityInherit+0xe0>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d201      	bcs.n	8007ae4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
	}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200016b0 	.word	0x200016b0
 8007af4:	200016b4 	.word	0x200016b4
 8007af8:	200017b8 	.word	0x200017b8

08007afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d06e      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b12:	4b3a      	ldr	r3, [pc, #232]	; (8007bfc <xTaskPriorityDisinherit+0x100>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d00a      	beq.n	8007b32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60bb      	str	r3, [r7, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d044      	beq.n	8007bf0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d140      	bne.n	8007bf0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fc21 	bl	80063ba <uxListRemove>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d115      	bne.n	8007baa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	491f      	ldr	r1, [pc, #124]	; (8007c00 <xTaskPriorityDisinherit+0x104>)
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskPriorityDisinherit+0xae>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	2201      	movs	r2, #1
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <xTaskPriorityDisinherit+0x108>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <xTaskPriorityDisinherit+0x108>)
 8007ba8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	f1c3 0207 	rsb	r2, r3, #7
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <xTaskPriorityDisinherit+0x108>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <xTaskPriorityDisinherit+0x108>)
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <xTaskPriorityDisinherit+0x104>)
 8007bde:	441a      	add	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fe fb8a 	bl	8006300 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bf0:	697b      	ldr	r3, [r7, #20]
	}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200016b0 	.word	0x200016b0
 8007c00:	200016b4 	.word	0x200016b4
 8007c04:	200017b8 	.word	0x200017b8

08007c08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d077      	beq.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d902      	bls.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e002      	b.n	8007c54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d058      	beq.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d153      	bne.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d10a      	bne.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	69fa      	ldr	r2, [r7, #28]
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db04      	blt.n	8007ca6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f1c3 0207 	rsb	r2, r3, #7
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	6959      	ldr	r1, [r3, #20]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4a19      	ldr	r2, [pc, #100]	; (8007d1c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d129      	bne.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fb7a 	bl	80063ba <uxListRemove>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	43da      	mvns	r2, r3
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ce0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	409a      	lsls	r2, r3
 8007cea:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a06      	ldr	r2, [pc, #24]	; (8007d1c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d02:	441a      	add	r2, r3
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7fe faf8 	bl	8006300 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d10:	bf00      	nop
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	200016b0 	.word	0x200016b0
 8007d1c:	200016b4 	.word	0x200016b4
 8007d20:	200017b8 	.word	0x200017b8

08007d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d36:	3201      	adds	r2, #1
 8007d38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
	}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	200016b0 	.word	0x200016b0

08007d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d56:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d5c:	4b28      	ldr	r3, [pc, #160]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fb29 	bl	80063ba <uxListRemove>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10b      	bne.n	8007d86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d6e:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	2201      	movs	r2, #1
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43da      	mvns	r2, r3
 8007d7c:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4013      	ands	r3, r2
 8007d82:	4a20      	ldr	r2, [pc, #128]	; (8007e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d10a      	bne.n	8007da4 <prvAddCurrentTaskToDelayedList+0x58>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	481a      	ldr	r0, [pc, #104]	; (8007e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d9e:	f7fe faaf 	bl	8006300 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da2:	e026      	b.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dac:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d209      	bcs.n	8007dd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fe fabd 	bl	8006348 <vListInsert>
}
 8007dce:	e010      	b.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe fab3 	bl	8006348 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d202      	bcs.n	8007df2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007dec:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6013      	str	r3, [r2, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200017b4 	.word	0x200017b4
 8007e00:	200016b0 	.word	0x200016b0
 8007e04:	200017b8 	.word	0x200017b8
 8007e08:	2000179c 	.word	0x2000179c
 8007e0c:	2000176c 	.word	0x2000176c
 8007e10:	20001768 	.word	0x20001768
 8007e14:	200017d0 	.word	0x200017d0

08007e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3b04      	subs	r3, #4
 8007e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b04      	subs	r3, #4
 8007e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f023 0201 	bic.w	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3b04      	subs	r3, #4
 8007e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e48:	4a0c      	ldr	r2, [pc, #48]	; (8007e7c <pxPortInitialiseStack+0x64>)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3b14      	subs	r3, #20
 8007e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f06f 0202 	mvn.w	r2, #2
 8007e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3b20      	subs	r3, #32
 8007e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	08007e81 	.word	0x08007e81

08007e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <prvTaskExitError+0x54>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d00a      	beq.n	8007eaa <prvTaskExitError+0x2a>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <prvTaskExitError+0x28>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	60bb      	str	r3, [r7, #8]
}
 8007ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ebe:	bf00      	nop
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0fc      	beq.n	8007ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	2000009c 	.word	0x2000009c
	...

08007ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <pxCurrentTCBConst2>)
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	6808      	ldr	r0, [r1, #0]
 8007ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f380 8809 	msr	PSP, r0
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8811 	msr	BASEPRI, r0
 8007efa:	4770      	bx	lr
 8007efc:	f3af 8000 	nop.w

08007f00 <pxCurrentTCBConst2>:
 8007f00:	200016b0 	.word	0x200016b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f08:	4808      	ldr	r0, [pc, #32]	; (8007f2c <prvPortStartFirstTask+0x24>)
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	6800      	ldr	r0, [r0, #0]
 8007f0e:	f380 8808 	msr	MSP, r0
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8814 	msr	CONTROL, r0
 8007f1a:	b662      	cpsie	i
 8007f1c:	b661      	cpsie	f
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	df00      	svc	0
 8007f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f2a:	bf00      	nop
 8007f2c:	e000ed08 	.word	0xe000ed08

08007f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f36:	4b46      	ldr	r3, [pc, #280]	; (8008050 <xPortStartScheduler+0x120>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a46      	ldr	r2, [pc, #280]	; (8008054 <xPortStartScheduler+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10a      	bne.n	8007f56 <xPortStartScheduler+0x26>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f56:	4b3e      	ldr	r3, [pc, #248]	; (8008050 <xPortStartScheduler+0x120>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a3f      	ldr	r2, [pc, #252]	; (8008058 <xPortStartScheduler+0x128>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10a      	bne.n	8007f76 <xPortStartScheduler+0x46>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <xPortStartScheduler+0x12c>)
 8007f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	22ff      	movs	r2, #255	; 0xff
 8007f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	4b31      	ldr	r3, [pc, #196]	; (8008060 <xPortStartScheduler+0x130>)
 8007f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f9e:	4b31      	ldr	r3, [pc, #196]	; (8008064 <xPortStartScheduler+0x134>)
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fa4:	e009      	b.n	8007fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fa6:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <xPortStartScheduler+0x134>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	4a2d      	ldr	r2, [pc, #180]	; (8008064 <xPortStartScheduler+0x134>)
 8007fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b80      	cmp	r3, #128	; 0x80
 8007fc4:	d0ef      	beq.n	8007fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fc6:	4b27      	ldr	r3, [pc, #156]	; (8008064 <xPortStartScheduler+0x134>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1c3 0307 	rsb	r3, r3, #7
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d00a      	beq.n	8007fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <xPortStartScheduler+0x134>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <xPortStartScheduler+0x134>)
 8007ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <xPortStartScheduler+0x134>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <xPortStartScheduler+0x134>)
 8007ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	b2da      	uxtb	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008006:	4b18      	ldr	r3, [pc, #96]	; (8008068 <xPortStartScheduler+0x138>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a17      	ldr	r2, [pc, #92]	; (8008068 <xPortStartScheduler+0x138>)
 800800c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <xPortStartScheduler+0x138>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a14      	ldr	r2, [pc, #80]	; (8008068 <xPortStartScheduler+0x138>)
 8008018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800801c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800801e:	f000 f8dd 	bl	80081dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <xPortStartScheduler+0x13c>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008028:	f000 f8fc 	bl	8008224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800802c:	4b10      	ldr	r3, [pc, #64]	; (8008070 <xPortStartScheduler+0x140>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <xPortStartScheduler+0x140>)
 8008032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008038:	f7ff ff66 	bl	8007f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800803c:	f7ff fa84 	bl	8007548 <vTaskSwitchContext>
	prvTaskExitError();
 8008040:	f7ff ff1e 	bl	8007e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	e000ed00 	.word	0xe000ed00
 8008054:	410fc271 	.word	0x410fc271
 8008058:	410fc270 	.word	0x410fc270
 800805c:	e000e400 	.word	0xe000e400
 8008060:	200017dc 	.word	0x200017dc
 8008064:	200017e0 	.word	0x200017e0
 8008068:	e000ed20 	.word	0xe000ed20
 800806c:	2000009c 	.word	0x2000009c
 8008070:	e000ef34 	.word	0xe000ef34

08008074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
}
 800808c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <vPortEnterCritical+0x58>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <vPortEnterCritical+0x58>)
 8008096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <vPortEnterCritical+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10f      	bne.n	80080c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <vPortEnterCritical+0x5c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	603b      	str	r3, [r7, #0]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <vPortEnterCritical+0x4a>
	}
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	2000009c 	.word	0x2000009c
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <vPortExitCritical+0x50>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <vPortExitCritical+0x24>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	607b      	str	r3, [r7, #4]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <vPortExitCritical+0x50>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4a09      	ldr	r2, [pc, #36]	; (8008124 <vPortExitCritical+0x50>)
 8008100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <vPortExitCritical+0x50>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <vPortExitCritical+0x42>
 800810a:	2300      	movs	r3, #0
 800810c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	2000009c 	.word	0x2000009c
	...

08008130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008130:	f3ef 8009 	mrs	r0, PSP
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4b15      	ldr	r3, [pc, #84]	; (8008190 <pxCurrentTCBConst>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	f01e 0f10 	tst.w	lr, #16
 8008140:	bf08      	it	eq
 8008142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	6010      	str	r0, [r2, #0]
 800814c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008154:	f380 8811 	msr	BASEPRI, r0
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f7ff f9f2 	bl	8007548 <vTaskSwitchContext>
 8008164:	f04f 0000 	mov.w	r0, #0
 8008168:	f380 8811 	msr	BASEPRI, r0
 800816c:	bc09      	pop	{r0, r3}
 800816e:	6819      	ldr	r1, [r3, #0]
 8008170:	6808      	ldr	r0, [r1, #0]
 8008172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008176:	f01e 0f10 	tst.w	lr, #16
 800817a:	bf08      	it	eq
 800817c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008180:	f380 8809 	msr	PSP, r0
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst>:
 8008190:	200016b0 	.word	0x200016b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	607b      	str	r3, [r7, #4]
}
 80081b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081b2:	f7ff f911 	bl	80073d8 <xTaskIncrementTick>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <SysTick_Handler+0x40>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	2300      	movs	r3, #0
 80081c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f383 8811 	msr	BASEPRI, r3
}
 80081ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <vPortSetupTimerInterrupt+0x34>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081e6:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <vPortSetupTimerInterrupt+0x38>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <vPortSetupTimerInterrupt+0x3c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0a      	ldr	r2, [pc, #40]	; (800821c <vPortSetupTimerInterrupt+0x40>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	099b      	lsrs	r3, r3, #6
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <vPortSetupTimerInterrupt+0x44>)
 80081fa:	3b01      	subs	r3, #1
 80081fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081fe:	4b04      	ldr	r3, [pc, #16]	; (8008210 <vPortSetupTimerInterrupt+0x34>)
 8008200:	2207      	movs	r2, #7
 8008202:	601a      	str	r2, [r3, #0]
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	e000e010 	.word	0xe000e010
 8008214:	e000e018 	.word	0xe000e018
 8008218:	20000000 	.word	0x20000000
 800821c:	10624dd3 	.word	0x10624dd3
 8008220:	e000e014 	.word	0xe000e014

08008224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008234 <vPortEnableVFP+0x10>
 8008228:	6801      	ldr	r1, [r0, #0]
 800822a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800822e:	6001      	str	r1, [r0, #0]
 8008230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008232:	bf00      	nop
 8008234:	e000ed88 	.word	0xe000ed88

08008238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	; 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008244:	f7ff f81e 	bl	8007284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008248:	4b5b      	ldr	r3, [pc, #364]	; (80083b8 <pvPortMalloc+0x180>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008250:	f000 f920 	bl	8008494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008254:	4b59      	ldr	r3, [pc, #356]	; (80083bc <pvPortMalloc+0x184>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8093 	bne.w	8008388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01d      	beq.n	80082a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008268:	2208      	movs	r2, #8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	2b00      	cmp	r3, #0
 8008278:	d014      	beq.n	80082a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <pvPortMalloc+0x6c>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	617b      	str	r3, [r7, #20]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d06e      	beq.n	8008388 <pvPortMalloc+0x150>
 80082aa:	4b45      	ldr	r3, [pc, #276]	; (80083c0 <pvPortMalloc+0x188>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d869      	bhi.n	8008388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082b4:	4b43      	ldr	r3, [pc, #268]	; (80083c4 <pvPortMalloc+0x18c>)
 80082b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082b8:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <pvPortMalloc+0x18c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082be:	e004      	b.n	80082ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d903      	bls.n	80082dc <pvPortMalloc+0xa4>
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f1      	bne.n	80082c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <pvPortMalloc+0x180>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d050      	beq.n	8008388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2208      	movs	r2, #8
 80082ec:	4413      	add	r3, r2
 80082ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	1ad2      	subs	r2, r2, r3
 8008300:	2308      	movs	r3, #8
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	429a      	cmp	r2, r3
 8008306:	d91f      	bls.n	8008348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <pvPortMalloc+0xf8>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	613b      	str	r3, [r7, #16]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008342:	69b8      	ldr	r0, [r7, #24]
 8008344:	f000 f908 	bl	8008558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008348:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <pvPortMalloc+0x188>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <pvPortMalloc+0x188>)
 8008354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <pvPortMalloc+0x188>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <pvPortMalloc+0x190>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d203      	bcs.n	800836a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <pvPortMalloc+0x188>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <pvPortMalloc+0x190>)
 8008368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <pvPortMalloc+0x184>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	431a      	orrs	r2, r3
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <pvPortMalloc+0x194>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	4a11      	ldr	r2, [pc, #68]	; (80083cc <pvPortMalloc+0x194>)
 8008386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008388:	f7fe ff8a 	bl	80072a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <pvPortMalloc+0x174>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60fb      	str	r3, [r7, #12]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <pvPortMalloc+0x172>
	return pvReturn;
 80083ac:	69fb      	ldr	r3, [r7, #28]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3728      	adds	r7, #40	; 0x28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200053ec 	.word	0x200053ec
 80083bc:	20005400 	.word	0x20005400
 80083c0:	200053f0 	.word	0x200053f0
 80083c4:	200053e4 	.word	0x200053e4
 80083c8:	200053f4 	.word	0x200053f4
 80083cc:	200053f8 	.word	0x200053f8

080083d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d04d      	beq.n	800847e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083e2:	2308      	movs	r3, #8
 80083e4:	425b      	negs	r3, r3
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	4b24      	ldr	r3, [pc, #144]	; (8008488 <vPortFree+0xb8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <vPortFree+0x44>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60fb      	str	r3, [r7, #12]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <vPortFree+0x62>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	60bb      	str	r3, [r7, #8]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <vPortFree+0xb8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01e      	beq.n	800847e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d11a      	bne.n	800847e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <vPortFree+0xb8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	43db      	mvns	r3, r3
 8008452:	401a      	ands	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008458:	f7fe ff14 	bl	8007284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <vPortFree+0xbc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4413      	add	r3, r2
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <vPortFree+0xbc>)
 8008468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800846a:	6938      	ldr	r0, [r7, #16]
 800846c:	f000 f874 	bl	8008558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <vPortFree+0xc0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	4a06      	ldr	r2, [pc, #24]	; (8008490 <vPortFree+0xc0>)
 8008478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800847a:	f7fe ff11 	bl	80072a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800847e:	bf00      	nop
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20005400 	.word	0x20005400
 800848c:	200053f0 	.word	0x200053f0
 8008490:	200053fc 	.word	0x200053fc

08008494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800849a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800849e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084a0:	4b27      	ldr	r3, [pc, #156]	; (8008540 <prvHeapInit+0xac>)
 80084a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00c      	beq.n	80084c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3307      	adds	r3, #7
 80084b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <prvHeapInit+0xac>)
 80084c4:	4413      	add	r3, r2
 80084c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084cc:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <prvHeapInit+0xb0>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <prvHeapInit+0xb0>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	4413      	add	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084e0:	2208      	movs	r2, #8
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a15      	ldr	r2, [pc, #84]	; (8008548 <prvHeapInit+0xb4>)
 80084f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <prvHeapInit+0xb4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084fe:	4b12      	ldr	r3, [pc, #72]	; (8008548 <prvHeapInit+0xb4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <prvHeapInit+0xb4>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4a0a      	ldr	r2, [pc, #40]	; (800854c <prvHeapInit+0xb8>)
 8008522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <prvHeapInit+0xbc>)
 800852a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <prvHeapInit+0xc0>)
 800852e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008532:	601a      	str	r2, [r3, #0]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	200017e4 	.word	0x200017e4
 8008544:	200053e4 	.word	0x200053e4
 8008548:	200053ec 	.word	0x200053ec
 800854c:	200053f4 	.word	0x200053f4
 8008550:	200053f0 	.word	0x200053f0
 8008554:	20005400 	.word	0x20005400

08008558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008560:	4b28      	ldr	r3, [pc, #160]	; (8008604 <prvInsertBlockIntoFreeList+0xac>)
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e002      	b.n	800856c <prvInsertBlockIntoFreeList+0x14>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d8f7      	bhi.n	8008566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	4413      	add	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d108      	bne.n	800859a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	441a      	add	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d118      	bne.n	80085e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <prvInsertBlockIntoFreeList+0xb0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d00d      	beq.n	80085d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	441a      	add	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e008      	b.n	80085e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvInsertBlockIntoFreeList+0xb0>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e003      	b.n	80085e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d002      	beq.n	80085f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	200053e4 	.word	0x200053e4
 8008608:	200053ec 	.word	0x200053ec

0800860c <memset>:
 800860c:	4402      	add	r2, r0
 800860e:	4603      	mov	r3, r0
 8008610:	4293      	cmp	r3, r2
 8008612:	d100      	bne.n	8008616 <memset+0xa>
 8008614:	4770      	bx	lr
 8008616:	f803 1b01 	strb.w	r1, [r3], #1
 800861a:	e7f9      	b.n	8008610 <memset+0x4>

0800861c <_reclaim_reent>:
 800861c:	4b29      	ldr	r3, [pc, #164]	; (80086c4 <_reclaim_reent+0xa8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4283      	cmp	r3, r0
 8008622:	b570      	push	{r4, r5, r6, lr}
 8008624:	4604      	mov	r4, r0
 8008626:	d04b      	beq.n	80086c0 <_reclaim_reent+0xa4>
 8008628:	69c3      	ldr	r3, [r0, #28]
 800862a:	b143      	cbz	r3, 800863e <_reclaim_reent+0x22>
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d144      	bne.n	80086bc <_reclaim_reent+0xa0>
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	6819      	ldr	r1, [r3, #0]
 8008636:	b111      	cbz	r1, 800863e <_reclaim_reent+0x22>
 8008638:	4620      	mov	r0, r4
 800863a:	f000 f879 	bl	8008730 <_free_r>
 800863e:	6961      	ldr	r1, [r4, #20]
 8008640:	b111      	cbz	r1, 8008648 <_reclaim_reent+0x2c>
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f874 	bl	8008730 <_free_r>
 8008648:	69e1      	ldr	r1, [r4, #28]
 800864a:	b111      	cbz	r1, 8008652 <_reclaim_reent+0x36>
 800864c:	4620      	mov	r0, r4
 800864e:	f000 f86f 	bl	8008730 <_free_r>
 8008652:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008654:	b111      	cbz	r1, 800865c <_reclaim_reent+0x40>
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f86a 	bl	8008730 <_free_r>
 800865c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800865e:	b111      	cbz	r1, 8008666 <_reclaim_reent+0x4a>
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f865 	bl	8008730 <_free_r>
 8008666:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008668:	b111      	cbz	r1, 8008670 <_reclaim_reent+0x54>
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f860 	bl	8008730 <_free_r>
 8008670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008672:	b111      	cbz	r1, 800867a <_reclaim_reent+0x5e>
 8008674:	4620      	mov	r0, r4
 8008676:	f000 f85b 	bl	8008730 <_free_r>
 800867a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800867c:	b111      	cbz	r1, 8008684 <_reclaim_reent+0x68>
 800867e:	4620      	mov	r0, r4
 8008680:	f000 f856 	bl	8008730 <_free_r>
 8008684:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008686:	b111      	cbz	r1, 800868e <_reclaim_reent+0x72>
 8008688:	4620      	mov	r0, r4
 800868a:	f000 f851 	bl	8008730 <_free_r>
 800868e:	6a23      	ldr	r3, [r4, #32]
 8008690:	b1b3      	cbz	r3, 80086c0 <_reclaim_reent+0xa4>
 8008692:	4620      	mov	r0, r4
 8008694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008698:	4718      	bx	r3
 800869a:	5949      	ldr	r1, [r1, r5]
 800869c:	b941      	cbnz	r1, 80086b0 <_reclaim_reent+0x94>
 800869e:	3504      	adds	r5, #4
 80086a0:	69e3      	ldr	r3, [r4, #28]
 80086a2:	2d80      	cmp	r5, #128	; 0x80
 80086a4:	68d9      	ldr	r1, [r3, #12]
 80086a6:	d1f8      	bne.n	800869a <_reclaim_reent+0x7e>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 f841 	bl	8008730 <_free_r>
 80086ae:	e7c0      	b.n	8008632 <_reclaim_reent+0x16>
 80086b0:	680e      	ldr	r6, [r1, #0]
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 f83c 	bl	8008730 <_free_r>
 80086b8:	4631      	mov	r1, r6
 80086ba:	e7ef      	b.n	800869c <_reclaim_reent+0x80>
 80086bc:	2500      	movs	r5, #0
 80086be:	e7ef      	b.n	80086a0 <_reclaim_reent+0x84>
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	bf00      	nop
 80086c4:	200000ec 	.word	0x200000ec

080086c8 <__libc_init_array>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	4d0d      	ldr	r5, [pc, #52]	; (8008700 <__libc_init_array+0x38>)
 80086cc:	4c0d      	ldr	r4, [pc, #52]	; (8008704 <__libc_init_array+0x3c>)
 80086ce:	1b64      	subs	r4, r4, r5
 80086d0:	10a4      	asrs	r4, r4, #2
 80086d2:	2600      	movs	r6, #0
 80086d4:	42a6      	cmp	r6, r4
 80086d6:	d109      	bne.n	80086ec <__libc_init_array+0x24>
 80086d8:	4d0b      	ldr	r5, [pc, #44]	; (8008708 <__libc_init_array+0x40>)
 80086da:	4c0c      	ldr	r4, [pc, #48]	; (800870c <__libc_init_array+0x44>)
 80086dc:	f000 f880 	bl	80087e0 <_init>
 80086e0:	1b64      	subs	r4, r4, r5
 80086e2:	10a4      	asrs	r4, r4, #2
 80086e4:	2600      	movs	r6, #0
 80086e6:	42a6      	cmp	r6, r4
 80086e8:	d105      	bne.n	80086f6 <__libc_init_array+0x2e>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f0:	4798      	blx	r3
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7ee      	b.n	80086d4 <__libc_init_array+0xc>
 80086f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fa:	4798      	blx	r3
 80086fc:	3601      	adds	r6, #1
 80086fe:	e7f2      	b.n	80086e6 <__libc_init_array+0x1e>
 8008700:	08008920 	.word	0x08008920
 8008704:	08008920 	.word	0x08008920
 8008708:	08008920 	.word	0x08008920
 800870c:	08008924 	.word	0x08008924

08008710 <__retarget_lock_acquire_recursive>:
 8008710:	4770      	bx	lr

08008712 <__retarget_lock_release_recursive>:
 8008712:	4770      	bx	lr

08008714 <memcpy>:
 8008714:	440a      	add	r2, r1
 8008716:	4291      	cmp	r1, r2
 8008718:	f100 33ff 	add.w	r3, r0, #4294967295
 800871c:	d100      	bne.n	8008720 <memcpy+0xc>
 800871e:	4770      	bx	lr
 8008720:	b510      	push	{r4, lr}
 8008722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800872a:	4291      	cmp	r1, r2
 800872c:	d1f9      	bne.n	8008722 <memcpy+0xe>
 800872e:	bd10      	pop	{r4, pc}

08008730 <_free_r>:
 8008730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008732:	2900      	cmp	r1, #0
 8008734:	d044      	beq.n	80087c0 <_free_r+0x90>
 8008736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873a:	9001      	str	r0, [sp, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	f1a1 0404 	sub.w	r4, r1, #4
 8008742:	bfb8      	it	lt
 8008744:	18e4      	addlt	r4, r4, r3
 8008746:	f000 f83f 	bl	80087c8 <__malloc_lock>
 800874a:	4a1e      	ldr	r2, [pc, #120]	; (80087c4 <_free_r+0x94>)
 800874c:	9801      	ldr	r0, [sp, #4]
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	b933      	cbnz	r3, 8008760 <_free_r+0x30>
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	6014      	str	r4, [r2, #0]
 8008756:	b003      	add	sp, #12
 8008758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800875c:	f000 b83a 	b.w	80087d4 <__malloc_unlock>
 8008760:	42a3      	cmp	r3, r4
 8008762:	d908      	bls.n	8008776 <_free_r+0x46>
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	1961      	adds	r1, r4, r5
 8008768:	428b      	cmp	r3, r1
 800876a:	bf01      	itttt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	1949      	addeq	r1, r1, r5
 8008772:	6021      	streq	r1, [r4, #0]
 8008774:	e7ed      	b.n	8008752 <_free_r+0x22>
 8008776:	461a      	mov	r2, r3
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b10b      	cbz	r3, 8008780 <_free_r+0x50>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d9fa      	bls.n	8008776 <_free_r+0x46>
 8008780:	6811      	ldr	r1, [r2, #0]
 8008782:	1855      	adds	r5, r2, r1
 8008784:	42a5      	cmp	r5, r4
 8008786:	d10b      	bne.n	80087a0 <_free_r+0x70>
 8008788:	6824      	ldr	r4, [r4, #0]
 800878a:	4421      	add	r1, r4
 800878c:	1854      	adds	r4, r2, r1
 800878e:	42a3      	cmp	r3, r4
 8008790:	6011      	str	r1, [r2, #0]
 8008792:	d1e0      	bne.n	8008756 <_free_r+0x26>
 8008794:	681c      	ldr	r4, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	440c      	add	r4, r1
 800879c:	6014      	str	r4, [r2, #0]
 800879e:	e7da      	b.n	8008756 <_free_r+0x26>
 80087a0:	d902      	bls.n	80087a8 <_free_r+0x78>
 80087a2:	230c      	movs	r3, #12
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	e7d6      	b.n	8008756 <_free_r+0x26>
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf04      	itt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	bf04      	itt	eq
 80087b8:	1949      	addeq	r1, r1, r5
 80087ba:	6021      	streq	r1, [r4, #0]
 80087bc:	6054      	str	r4, [r2, #4]
 80087be:	e7ca      	b.n	8008756 <_free_r+0x26>
 80087c0:	b003      	add	sp, #12
 80087c2:	bd30      	pop	{r4, r5, pc}
 80087c4:	20005540 	.word	0x20005540

080087c8 <__malloc_lock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__malloc_lock+0x8>)
 80087ca:	f7ff bfa1 	b.w	8008710 <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	2000553c 	.word	0x2000553c

080087d4 <__malloc_unlock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__malloc_unlock+0x8>)
 80087d6:	f7ff bf9c 	b.w	8008712 <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	2000553c 	.word	0x2000553c

080087e0 <_init>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	bf00      	nop
 80087e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e6:	bc08      	pop	{r3}
 80087e8:	469e      	mov	lr, r3
 80087ea:	4770      	bx	lr

080087ec <_fini>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr
