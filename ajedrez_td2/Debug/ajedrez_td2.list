
ajedrez_td2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a8  080097a8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080097a8  080097a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097b0  080097b0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080097b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005468  200000f0  080098a8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20005558  080098a8  00025558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f5d  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000479f  00000000  00000000  000390c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d1  00000000  00000000  0003ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d2c  00000000  00000000  0003ff11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cca1  00000000  00000000  00059c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097fce  00000000  00000000  000768de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b68  00000000  00000000  0010e8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00114414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009590 	.word	0x08009590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08009590 	.word	0x08009590

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
#include "cmsis_os.h"

extern I2C_HandleTypeDef hi2c1;

//Inicializa el display.
void lcd_init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// 4 bit initialization
	vTaskDelay(50);  // wait for >40ms
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f007 fd07 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f836 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(5);  // wait for >4.1ms
 80004ec:	2005      	movs	r0, #5
 80004ee:	f007 fd01 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f830 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);  // wait for >100us
 80004f8:	2001      	movs	r0, #1
 80004fa:	f007 fcfb 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f82a 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f007 fcf5 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x20);  // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f824 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f007 fcef 	bl	8007ef4 <vTaskDelay>

	// display initialization
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81e 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f007 fce9 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f818 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f007 fce3 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x01);  // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f812 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(10);
 8000534:	200a      	movs	r0, #10
 8000536:	f007 fcdd 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800053a:	2006      	movs	r0, #6
 800053c:	f000 f80c 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f007 fcd7 	bl	8007ef4 <vTaskDelay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000546:	200c      	movs	r0, #12
 8000548:	f000 f806 	bl	8000558 <lcd_send_cmd>
	vTaskDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f007 fcd1 	bl	8007ef4 <vTaskDelay>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f023 030f 	bic.w	r3, r3, #15
 8000568:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	214e      	movs	r1, #78	; 0x4e
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <lcd_send_cmd+0x5c>)
 80005a6:	f004 fb43 	bl	8004c30 <HAL_I2C_Master_Transmit>
			100);
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003ac 	.word	0x200003ac

080005b8 <lcd_send_data>:

void lcd_send_data(char data) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_data+0x5c>)
 8000606:	f004 fb13 	bl	8004c30 <HAL_I2C_Master_Transmit>
			100);
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200003ac 	.word	0x200003ac

08000618 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000620:	e006      	b.n	8000630 <lcd_send_string+0x18>
		lcd_send_data(*(str++));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffc4 	bl	80005b8 <lcd_send_data>
	while (*str)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <lcd_send_string+0xa>
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_msg_from_string>:

LCDQueueItem_t lcd_msg_from_string(char *str) {
 8000642:	b4b0      	push	{r4, r5, r7}
 8000644:	b08b      	sub	sp, #44	; 0x2c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	LCDQueueItem_t msg = { 0 };
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
	msg.type = STRING_TYPE;
 800065e:	2302      	movs	r3, #2
 8000660:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 16; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
 8000666:	e010      	b.n	800068a <lcd_msg_from_string+0x48>
		msg.data[i] = *str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	603a      	str	r2, [r7, #0]
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	f107 020d 	add.w	r2, r7, #13
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		if (!(*str))
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d006      	beq.n	8000692 <lcd_msg_from_string+0x50>
	for (int i = 0; i < 16; i++) {
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	2b0f      	cmp	r3, #15
 800068e:	ddeb      	ble.n	8000668 <lcd_msg_from_string+0x26>
 8000690:	e000      	b.n	8000694 <lcd_msg_from_string+0x52>
			break;
 8000692:	bf00      	nop
	}

	return msg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	461d      	mov	r5, r3
 8000698:	f107 040c 	add.w	r4, r7, #12
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	372c      	adds	r7, #44	; 0x2c
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bcb0      	pop	{r4, r5, r7}
 80006b0:	4770      	bx	lr

080006b2 <lcd_msg_clear>:

LCDQueueItem_t lcd_msg_clear(void) {
 80006b2:	b4b0      	push	{r4, r5, r7}
 80006b4:	b089      	sub	sp, #36	; 0x24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	723b      	strb	r3, [r7, #8]
	msg.data[0] = 0x01;
 80006d0:	2301      	movs	r3, #1
 80006d2:	727b      	strb	r3, [r7, #9]
	msg.delay = 10;
 80006d4:	230a      	movs	r3, #10
 80006d6:	61fb      	str	r3, [r7, #28]
	return msg;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	461d      	mov	r5, r3
 80006dc:	f107 0408 	add.w	r4, r7, #8
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	3724      	adds	r7, #36	; 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	4770      	bx	lr

080006f6 <lcd_msg_first_line>:
LCDQueueItem_t lcd_msg_first_line(void){
 80006f6:	b4b0      	push	{r4, r5, r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000710:	2300      	movs	r3, #0
 8000712:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_1;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
	return msg;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	461d      	mov	r5, r3
 8000720:	f107 0408 	add.w	r4, r7, #8
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr

0800073a <lcd_msg_second_line>:
LCDQueueItem_t lcd_msg_second_line(void){
 800073a:	b4b0      	push	{r4, r5, r7}
 800073c:	b089      	sub	sp, #36	; 0x24
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	LCDQueueItem_t msg = { 0 };
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
	msg.type = CMD_TYPE;
 8000754:	2300      	movs	r3, #0
 8000756:	723b      	strb	r3, [r7, #8]
	msg.data[0] = LCD_POSICION_RENGLON_2;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	727b      	strb	r3, [r7, #9]
	msg.delay = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
	return msg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	461d      	mov	r5, r3
 8000764:	f107 0408 	add.w	r4, r7, #8
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800076c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000770:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bcb0      	pop	{r4, r5, r7}
 800077c:	4770      	bx	lr

0800077e <debounce_init>:
#include "debounce.h"

void debounce_init(Debounce_t *s, uint8_t activo_en_cero, uint16_t debounce) {
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero) ? 1 : 0;
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t) BTN_LIBRE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t) BTN_PRESIONADO;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	719a      	strb	r2, [r3, #6]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <debounce_run>:

void debounce_run(Debounce_t *s, uint32_t estado) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4053      	eors	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

	switch (s->estado) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d866      	bhi.n	80008c6 <debounce_run+0xfa>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <debounce_run+0x34>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000833 	.word	0x08000833
 8000808:	08000869 	.word	0x08000869
 800080c:	0800088b 	.word	0x0800088b
	case 0:
		if (boton) {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <debounce_run+0x58>
			s->debounce_ticks = s->debounce;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	885a      	ldrh	r2, [r3, #2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	719a      	strb	r2, [r3, #6]
		break;
 8000830:	e049      	b.n	80008c6 <debounce_run+0xfa>
	case 1:
		if (!(--(s->debounce_ticks))) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d13c      	bne.n	80008c0 <debounce_run+0xf4>
			if (boton) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <debounce_run+0x94>
				s->estado_pin = BTN_PRESIONADO;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 0;
			}
		}
		break;
 800085e:	e02f      	b.n	80008c0 <debounce_run+0xf4>
				s->estado = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
		break;
 8000866:	e02b      	b.n	80008c0 <debounce_run+0xf4>
	case 2:
		if (!boton) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <debounce_run+0xb0>
			s->debounce_ticks = s->debounce;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	885a      	ldrh	r2, [r3, #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	719a      	strb	r2, [r3, #6]
		break;
 8000888:	e01d      	b.n	80008c6 <debounce_run+0xfa>
	case 3:
		if (!(--(s->debounce_ticks))) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <debounce_run+0xf8>
			if (!boton) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <debounce_run+0xec>
				s->estado_pin = BTN_LIBRE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	711a      	strb	r2, [r3, #4]
			} else {
				s->estado = 2;
			}
		}
		break;
 80008b6:	e005      	b.n	80008c4 <debounce_run+0xf8>
				s->estado = 2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	711a      	strb	r2, [r3, #4]
		break;
 80008be:	e001      	b.n	80008c4 <debounce_run+0xf8>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <debounce_run+0xfa>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <debounce_flank>:

int debounce_flank(Debounce_t *s) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
			&& (s->estado_anterior_pin == BTN_LIBRE);
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <debounce_flank+0x1c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <debounce_flank+0x1c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <debounce_flank+0x1e>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <vApplicationGetIdleTaskMemory+0x2c>)
 8000910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <vApplicationGetIdleTaskMemory+0x30>)
 8000916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200001ac 	.word	0x200001ac

08000934 <game_set_led_output_array>:
void game_set_sensor_reader(sensor_reader_t reader){
    sensor_reader = reader;
    get_sensors = reader;
}

void game_set_led_output_array(led_color output_array[8][8]){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    lighting_set_output(output_array);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f002 fec9 	bl	80036d4 <lighting_set_output>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <game_fsm>:


void game_fsm(){
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0

    movement_fsm();
 800094e:	f000 fbcb 	bl	80010e8 <movement_fsm>

    lighting_refresh();
 8000952:	f002 ffff 	bl	8003954 <lighting_refresh>

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <game_reset>:

void game_reset(){
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0

    engine_reset();
 800095e:	f002 f849 	bl	80029f4 <engine_reset>

 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800096e:	f003 f9af 	bl	8003cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000972:	f000 f893 	bl	8000a9c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000976:	f000 f9cb 	bl	8000d10 <MX_GPIO_Init>
	MX_DMA_Init();
 800097a:	f000 f9a9 	bl	8000cd0 <MX_DMA_Init>
	MX_TIM1_Init();
 800097e:	f000 f927 	bl	8000bd0 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000982:	f000 f8f7 	bl	8000b74 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	lcd_queue = xQueueCreate(20, sizeof(LCDQueueItem_t));
 8000986:	2200      	movs	r2, #0
 8000988:	2118      	movs	r1, #24
 800098a:	2014      	movs	r0, #20
 800098c:	f006 fc00 	bl	8007190 <xQueueGenericCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a31      	ldr	r2, [pc, #196]	; (8000a58 <main+0xf0>)
 8000994:	6013      	str	r3, [r2, #0]
	buttons_queue = xQueueCreate(20, sizeof(uint8_t));
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	2014      	movs	r0, #20
 800099c:	f006 fbf8 	bl	8007190 <xQueueGenericCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <main+0xf4>)
 80009a4:	6013      	str	r3, [r2, #0]
	ws2812_sem = xSemaphoreCreateBinary();
 80009a6:	2203      	movs	r2, #3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f006 fbf0 	bl	8007190 <xQueueGenericCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <main+0xf8>)
 80009b4:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <main+0xfc>)
 80009b8:	1d3c      	adds	r4, r7, #4
 80009ba:	461d      	mov	r5, r3
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 fa62 	bl	8006e96 <osThreadCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <main+0x100>)
 80009d6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(t_LCD, "t_LCD",
 80009d8:	2300      	movs	r3, #0
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	2303      	movs	r3, #3
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	4921      	ldr	r1, [pc, #132]	; (8000a6c <main+0x104>)
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <main+0x108>)
 80009e8:	f007 f8b9 	bl	8007b5e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 3,
	NULL);

	xTaskCreate(t_Timer, "t_Timer",
 80009ec:	2300      	movs	r3, #0
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	2304      	movs	r3, #4
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2300      	movs	r3, #0
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	491e      	ldr	r1, [pc, #120]	; (8000a74 <main+0x10c>)
 80009fa:	481f      	ldr	r0, [pc, #124]	; (8000a78 <main+0x110>)
 80009fc:	f007 f8af 	bl	8007b5e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 4,
	NULL);

	xTaskCreate(t_Botones, "t_Botones",
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2302      	movs	r3, #2
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	491b      	ldr	r1, [pc, #108]	; (8000a7c <main+0x114>)
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x118>)
 8000a10:	f007 f8a5 	bl	8007b5e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 2,
	NULL);

	xTaskCreate(t_WS2812, "t_WS2812",
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2305      	movs	r3, #5
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4918      	ldr	r1, [pc, #96]	; (8000a84 <main+0x11c>)
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <main+0x120>)
 8000a24:	f007 f89b 	bl	8007b5e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 5,
	NULL);

	xTaskCreate(t_reed_scan_sensors, "t_reed_scan_sensors",
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4915      	ldr	r1, [pc, #84]	; (8000a8c <main+0x124>)
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <main+0x128>)
 8000a38:	f007 f891 	bl	8007b5e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + 6,
	NULL);

	xTaskCreate(t_userLoop, "t_userLoop",
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4912      	ldr	r1, [pc, #72]	; (8000a94 <main+0x12c>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0x130>)
 8000a4c:	f007 f887 	bl	8007b5e <xTaskCreate>

	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000a50:	f006 fa1a 	bl	8006e88 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <main+0xec>
 8000a56:	bf00      	nop
 8000a58:	200004ac 	.word	0x200004ac
 8000a5c:	200004b0 	.word	0x200004b0
 8000a60:	200004b4 	.word	0x200004b4
 8000a64:	080095fc 	.word	0x080095fc
 8000a68:	200004a8 	.word	0x200004a8
 8000a6c:	080095a8 	.word	0x080095a8
 8000a70:	080016d5 	.word	0x080016d5
 8000a74:	080095b0 	.word	0x080095b0
 8000a78:	08001665 	.word	0x08001665
 8000a7c:	080095b8 	.word	0x080095b8
 8000a80:	08001745 	.word	0x08001745
 8000a84:	080095c4 	.word	0x080095c4
 8000a88:	0800263d 	.word	0x0800263d
 8000a8c:	080095d0 	.word	0x080095d0
 8000a90:	080039f1 	.word	0x080039f1
 8000a94:	080095e4 	.word	0x080095e4
 8000a98:	08001889 	.word	0x08001889

08000a9c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fc86 	bl	80093bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a28      	ldr	r2, [pc, #160]	; (8000b6c <SystemClock_Config+0xd0>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <SystemClock_Config+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <SystemClock_Config+0xd4>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <SystemClock_Config+0xd4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000b10:	2310      	movs	r3, #16
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 fb8a 	bl	8005240 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x9a>
		Error_Handler();
 8000b32:	f000 f9de 	bl	8000ef2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fdec 	bl	8005730 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xc6>
		Error_Handler();
 8000b5e:	f000 f9c8 	bl	8000ef2 <Error_Handler>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f003 fef9 	bl	80049a8 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000bbc:	f000 f999 	bl	8000ef2 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200003ac 	.word	0x200003ac
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b092      	sub	sp, #72	; 0x48
 8000bd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fbde 	bl	80093bc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000c00:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c02:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <MX_TIM1_Init+0xfc>)
 8000c04:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c14:	2268      	movs	r2, #104	; 0x68
 8000c16:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c2a:	4827      	ldr	r0, [pc, #156]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c2c:	f005 f87a 	bl	8005d24 <HAL_TIM_PWM_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM1_Init+0x6a>
		Error_Handler();
 8000c36:	f000 f95c 	bl	8000ef2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c46:	4619      	mov	r1, r3
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c4a:	f006 f831 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8000c54:	f000 f94d 	bl	8000ef2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c58:	2360      	movs	r3, #96	; 0x60
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	220c      	movs	r2, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000c7a:	f005 fc21 	bl	80064c0 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000c84:	f000 f935 	bl	8000ef2 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000cac:	f006 f86e 	bl	8006d8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0xea>
			!= HAL_OK) {
		Error_Handler();
 8000cb6:	f000 f91c 	bl	8000ef2 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM1_Init+0xf8>)
 8000cbc:	f000 fbd6 	bl	800146c <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3748      	adds	r7, #72	; 0x48
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000400 	.word	0x20000400
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_DMA_Init+0x3c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <MX_DMA_Init+0x3c>)
 8000ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_DMA_Init+0x3c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	203c      	movs	r0, #60	; 0x3c
 8000cf8:	f003 f8e4 	bl	8003ec4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000cfc:	203c      	movs	r0, #60	; 0x3c
 8000cfe:	f003 f8fd 	bl	8003efc <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a5a      	ldr	r2, [pc, #360]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a53      	ldr	r2, [pc, #332]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <MX_GPIO_Init+0x1a4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REED_1_Pin | REED_2_Pin | REED_7_Pin,
 8000d96:	2200      	movs	r2, #0
 8000d98:	2183      	movs	r1, #131	; 0x83
 8000d9a:	4847      	ldr	r0, [pc, #284]	; (8000eb8 <MX_GPIO_Init+0x1a8>)
 8000d9c:	f003 fdea 	bl	8004974 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | REED_4_Pin | REED_5_Pin | REED_8_Pin,
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000da6:	4845      	ldr	r0, [pc, #276]	; (8000ebc <MX_GPIO_Init+0x1ac>)
 8000da8:	f003 fde4 	bl	8004974 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, REED_3_Pin | REED_6_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2141      	movs	r1, #65	; 0x41
 8000db0:	4843      	ldr	r0, [pc, #268]	; (8000ec0 <MX_GPIO_Init+0x1b0>)
 8000db2:	f003 fddf 	bl	8004974 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dbc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <MX_GPIO_Init+0x1a8>)
 8000dce:	f003 fc35 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_1_Pin REED_2_Pin REED_7_Pin */
	GPIO_InitStruct.Pin = REED_1_Pin | REED_2_Pin | REED_7_Pin;
 8000dd2:	2383      	movs	r3, #131	; 0x83
 8000dd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4833      	ldr	r0, [pc, #204]	; (8000eb8 <MX_GPIO_Init+0x1a8>)
 8000dea:	f003 fc27 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000dee:	2320      	movs	r3, #32
 8000df0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	482d      	ldr	r0, [pc, #180]	; (8000ebc <MX_GPIO_Init+0x1ac>)
 8000e06:	f003 fc19 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_4_Pin REED_5_Pin REED_8_Pin */
	GPIO_InitStruct.Pin = REED_4_Pin | REED_5_Pin | REED_8_Pin;
 8000e0a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4826      	ldr	r0, [pc, #152]	; (8000ebc <MX_GPIO_Init+0x1ac>)
 8000e24:	f003 fc0a 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pin : REED_D_Pin */
	GPIO_InitStruct.Pin = REED_D_Pin;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(REED_D_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <MX_GPIO_Init+0x1a8>)
 8000e3c:	f003 fbfe 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_3_Pin REED_6_Pin */
	GPIO_InitStruct.Pin = REED_3_Pin | REED_6_Pin;
 8000e40:	2341      	movs	r3, #65	; 0x41
 8000e42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <MX_GPIO_Init+0x1b0>)
 8000e58:	f003 fbf0 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_B_Pin REED_H_Pin REED_G_Pin REED_C_Pin
	 REED_E_Pin */
	GPIO_InitStruct.Pin = REED_B_Pin | REED_H_Pin | REED_G_Pin | REED_C_Pin
 8000e5c:	f246 4330 	movw	r3, #25648	; 0x6430
 8000e60:	617b      	str	r3, [r7, #20]
			| REED_E_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_GPIO_Init+0x1b0>)
 8000e72:	f003 fbe3 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin BOTON_3_Pin */
	GPIO_InitStruct.Pin = BOTON_1_Pin | BOTON_2_Pin | BOTON_3_Pin;
 8000e76:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000e7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x1a8>)
 8000e8c:	f003 fbd6 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : REED_A_Pin REED_F_Pin */
	GPIO_InitStruct.Pin = REED_A_Pin | REED_F_Pin;
 8000e90:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0x1ac>)
 8000ea6:	f003 fbc9 	bl	800463c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f006 f82e 	bl	8006f2e <osDelay>
 8000ed2:	e7fb      	b.n	8000ecc <StartDefaultTask+0x8>

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ee6:	f002 ff15 	bl	8003d14 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef6:	b672      	cpsid	i
}
 8000ef8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000efa:	e7fe      	b.n	8000efa <Error_Handler+0x8>

08000efc <get_last_sensor_change>:

void (*get_sensors)(char[8]);

extern uint8_t reed_data[8];

piece_change_t get_last_sensor_change(){
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0

    //get_sensors(new_sensor_state);


    piece_change_t ret = {0, NONE};
 8000f02:	2300      	movs	r3, #0
 8000f04:	713b      	strb	r3, [r7, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	717b      	strb	r3, [r7, #5]

    for (int rank = 0; rank < 8; rank++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e054      	b.n	8000fba <get_last_sensor_change+0xbe>
        for (int file = 0; file < 8; file++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e04b      	b.n	8000fae <get_last_sensor_change+0xb2>
            char new_state = (reed_data[rank]&(1<<file)) != 0;
 8000f16:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <get_last_sensor_change+0xe4>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fa42 f303 	asr.w	r3, r2, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	72fb      	strb	r3, [r7, #11]
            char old_state = (previous_sensor_state[rank]&(1<<file)) != 0;
 8000f36:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <get_last_sensor_change+0xe8>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	fa42 f303 	asr.w	r3, r2, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	72bb      	strb	r3, [r7, #10]
            if(new_state != old_state){
 8000f56:	7afa      	ldrb	r2, [r7, #11]
 8000f58:	7abb      	ldrb	r3, [r7, #10]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d024      	beq.n	8000fa8 <get_last_sensor_change+0xac>
                ret.square_affected = COORD2SQ(rank, file);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	713b      	strb	r3, [r7, #4]
                ret.piece_action = new_state ? PLACED : REMOVED;
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <get_last_sensor_change+0x7e>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e000      	b.n	8000f7c <get_last_sensor_change+0x80>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	717b      	strb	r3, [r7, #5]
                for(int i = 0; i < 8; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e00b      	b.n	8000f9c <get_last_sensor_change+0xa0>
                    previous_sensor_state[i] = reed_data[i];
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <get_last_sensor_change+0xe4>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <get_last_sensor_change+0xe8>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 8; i++){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	ddf0      	ble.n	8000f84 <get_last_sensor_change+0x88>
                }
                return ret;
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	813b      	strh	r3, [r7, #8]
 8000fa6:	e00d      	b.n	8000fc4 <get_last_sensor_change+0xc8>
        for (int file = 0; file < 8; file++) {
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	3301      	adds	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	ddb0      	ble.n	8000f16 <get_last_sensor_change+0x1a>
    for (int rank = 0; rank < 8; rank++) {
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	dda7      	ble.n	8000f10 <get_last_sensor_change+0x14>
            }
        }
    }
    return ret;
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	813b      	strh	r3, [r7, #8]
}
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	7a3a      	ldrb	r2, [r7, #8]
 8000fc8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fcc:	7a7a      	ldrb	r2, [r7, #9]
 8000fce:	f362 230f 	bfi	r3, r2, #8, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	371c      	adds	r7, #28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200016b8 	.word	0x200016b8
 8000fe4:	200004b8 	.word	0x200004b8

08000fe8 <is_board_ok>:

char movement_state = WAIT_STATE;

uint8_t square_lifted;

char is_board_ok(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e044      	b.n	8001082 <is_board_ok+0x9a>
        for (int file = 0; file < 8; file++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	e03b      	b.n	8001076 <is_board_ok+0x8e>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <is_board_ok+0xac>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	fa42 f303 	asr.w	r3, r2, r3
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d010      	beq.n	8001038 <is_board_ok+0x50>
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fd12 	bl	8002a50 <engine_get_piece>
 800102c:	4603      	mov	r3, r0
 800102e:	2b06      	cmp	r3, #6
 8001030:	d102      	bne.n	8001038 <is_board_ok+0x50>
                board_ok = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e01b      	b.n	8001070 <is_board_ok+0x88>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <is_board_ok+0xac>)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	fa42 f303 	asr.w	r3, r2, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10f      	bne.n	8001070 <is_board_ok+0x88>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4413      	add	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fcf5 	bl	8002a50 <engine_get_piece>
 8001066:	4603      	mov	r3, r0
 8001068:	2b06      	cmp	r3, #6
 800106a:	d001      	beq.n	8001070 <is_board_ok+0x88>
                board_ok = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b07      	cmp	r3, #7
 800107a:	ddc0      	ble.n	8000ffe <is_board_ok+0x16>
    for (int rank = 0; rank < 8; rank++) {
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	3301      	adds	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b07      	cmp	r3, #7
 8001086:	ddb7      	ble.n	8000ff8 <is_board_ok+0x10>
            }
        }
    }
    return board_ok;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200016b8 	.word	0x200016b8

08001098 <get_lifted_moves>:

int get_lifted_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]

    for(int i = 0; i < total_valid_moves; i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e00f      	b.n	80010d0 <get_lifted_moves+0x38>
        if(valid_moves[i].from == square_lifted){
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d102      	bne.n	80010ca <get_lifted_moves+0x32>
            lifted_piece_valid_moves ++;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbeb      	blt.n	80010b0 <get_lifted_moves+0x18>
        }
    }
    return lifted_piece_valid_moves;
 80010d8:	697b      	ldr	r3, [r7, #20]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <movement_fsm>:

int total_valid_moves;
move_t valid_moves[255];

void movement_fsm(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0

    piece_change_t piece_change = get_last_sensor_change();
 80010ee:	f7ff ff05 	bl	8000efc <get_last_sensor_change>
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]


    int lifted_piece_valid_moves;
    char board_ok;

    switch (movement_state)
 80010f6:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <movement_fsm+0x1bc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	f000 80b8 	beq.w	8001270 <movement_fsm+0x188>
 8001100:	2b03      	cmp	r3, #3
 8001102:	f300 80c3 	bgt.w	800128c <movement_fsm+0x1a4>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <movement_fsm+0x28>
 800110a:	2b01      	cmp	r3, #1
 800110c:	d03f      	beq.n	800118e <movement_fsm+0xa6>
        break;



    default:
        break;
 800110e:	e0bd      	b.n	800128c <movement_fsm+0x1a4>
        if(piece_change.piece_action == REMOVED){
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d130      	bne.n	8001178 <movement_fsm+0x90>
            movement_state = PIECE_LIFTED_STATE;
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <movement_fsm+0x1bc>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
            square_lifted = piece_change.square_affected;
 800111c:	793a      	ldrb	r2, [r7, #4]
 800111e:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <movement_fsm+0x1c0>)
 8001120:	701a      	strb	r2, [r3, #0]
            total_valid_moves = engine_list_moves(valid_moves);
 8001122:	4862      	ldr	r0, [pc, #392]	; (80012ac <movement_fsm+0x1c4>)
 8001124:	f001 fc84 	bl	8002a30 <engine_list_moves>
 8001128:	4603      	mov	r3, r0
 800112a:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <movement_fsm+0x1c8>)
 800112c:	6013      	str	r3, [r2, #0]
            lifted_piece_valid_moves = get_lifted_moves(square_lifted, valid_moves, total_valid_moves);
 800112e:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <movement_fsm+0x1c0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a5f      	ldr	r2, [pc, #380]	; (80012b0 <movement_fsm+0x1c8>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	495d      	ldr	r1, [pc, #372]	; (80012ac <movement_fsm+0x1c4>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffad 	bl	8001098 <get_lifted_moves>
 800113e:	60b8      	str	r0, [r7, #8]
            if(lifted_piece_valid_moves == 0){
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <movement_fsm+0x6c>
                movement_state = ERROR_STATE;
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <movement_fsm+0x1bc>)
 8001148:	2203      	movs	r2, #3
 800114a:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 800114c:	2002      	movs	r0, #2
 800114e:	f002 fbcb 	bl	80038e8 <lighting_set_state>
        break;
 8001152:	e09d      	b.n	8001290 <movement_fsm+0x1a8>
                movement_state = PIECE_LIFTED_STATE;
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <movement_fsm+0x1bc>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
                lighting_piece_lifted_square(square_lifted);
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <movement_fsm+0x1c0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fbd2 	bl	8003908 <lighting_piece_lifted_square>
                set_valid_moves(valid_moves, total_valid_moves);
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <movement_fsm+0x1c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4850      	ldr	r0, [pc, #320]	; (80012ac <movement_fsm+0x1c4>)
 800116c:	f002 fbdc 	bl	8003928 <set_valid_moves>
                lighting_set_state(LIGHTING_LIFTED_STATE);                
 8001170:	2001      	movs	r0, #1
 8001172:	f002 fbb9 	bl	80038e8 <lighting_set_state>
        break;
 8001176:	e08b      	b.n	8001290 <movement_fsm+0x1a8>
        else if(piece_change.piece_action == PLACED){
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b02      	cmp	r3, #2
 800117c:	f040 8088 	bne.w	8001290 <movement_fsm+0x1a8>
            movement_state = ERROR_STATE;
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <movement_fsm+0x1bc>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_ERROR_STATE);
 8001186:	2002      	movs	r0, #2
 8001188:	f002 fbae 	bl	80038e8 <lighting_set_state>
        break;
 800118c:	e080      	b.n	8001290 <movement_fsm+0x1a8>
        if(piece_change.piece_action == PLACED){
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d11a      	bne.n	80011ca <movement_fsm+0xe2>
            move_played.from = square_lifted;
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <movement_fsm+0x1c0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	703b      	strb	r3, [r7, #0]
            move_played.to = piece_change.square_affected;
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	707b      	strb	r3, [r7, #1]
            char move_ok = engine_move_piece(move_played);
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f001 fc34 	bl	8002a0c <engine_move_piece>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73bb      	strb	r3, [r7, #14]
            if(move_ok){
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <movement_fsm+0xd4>
                movement_state = WAIT_STATE;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <movement_fsm+0x1bc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_IDLE_STATE);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f002 fb97 	bl	80038e8 <lighting_set_state>
        break;
 80011ba:	e06b      	b.n	8001294 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <movement_fsm+0x1bc>)
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f002 fb90 	bl	80038e8 <lighting_set_state>
        break;
 80011c8:	e064      	b.n	8001294 <movement_fsm+0x1ac>
        else if(piece_change.piece_action == REMOVED){
 80011ca:	797b      	ldrb	r3, [r7, #5]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d161      	bne.n	8001294 <movement_fsm+0x1ac>
            total_valid_moves = engine_list_moves(valid_moves);
 80011d0:	4836      	ldr	r0, [pc, #216]	; (80012ac <movement_fsm+0x1c4>)
 80011d2:	f001 fc2d 	bl	8002a30 <engine_list_moves>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <movement_fsm+0x1c8>)
 80011da:	6013      	str	r3, [r2, #0]
            char captured_piece_is_valid = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	75fb      	strb	r3, [r7, #23]
            for(int i = 0; i < total_valid_moves; i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	e035      	b.n	8001252 <movement_fsm+0x16a>
                if(valid_moves[i].from == square_lifted && valid_moves[i].to == piece_change.square_affected){
 80011e6:	4931      	ldr	r1, [pc, #196]	; (80012ac <movement_fsm+0x1c4>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <movement_fsm+0x1c0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d127      	bne.n	800124c <movement_fsm+0x164>
 80011fc:	492b      	ldr	r1, [pc, #172]	; (80012ac <movement_fsm+0x1c4>)
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	440b      	add	r3, r1
 8001208:	3301      	adds	r3, #1
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	793b      	ldrb	r3, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d11c      	bne.n	800124c <movement_fsm+0x164>
                    captured_piece_is_valid = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
                    lighting_piece_lifted_square(piece_change.square_affected);
 8001216:	793b      	ldrb	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fb75 	bl	8003908 <lighting_piece_lifted_square>
                    lighting_set_state(LIGHTING_CAPTURE_STATE); 
 800121e:	2003      	movs	r0, #3
 8001220:	f002 fb62 	bl	80038e8 <lighting_set_state>
                    engine_move_piece(valid_moves[i]);
 8001224:	4921      	ldr	r1, [pc, #132]	; (80012ac <movement_fsm+0x1c4>)
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	440b      	add	r3, r1
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	7859      	ldrb	r1, [r3, #1]
 8001234:	0209      	lsls	r1, r1, #8
 8001236:	430a      	orrs	r2, r1
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	431a      	orrs	r2, r3
 800123e:	2300      	movs	r3, #0
 8001240:	f362 0317 	bfi	r3, r2, #0, #24
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fbe1 	bl	8002a0c <engine_move_piece>
                    break;
 800124a:	e007      	b.n	800125c <movement_fsm+0x174>
            for(int i = 0; i < total_valid_moves; i++){
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	3301      	adds	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <movement_fsm+0x1c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbc4      	blt.n	80011e6 <movement_fsm+0xfe>
            if(!captured_piece_is_valid){
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <movement_fsm+0x1ac>
                movement_state = ERROR_STATE;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <movement_fsm+0x1bc>)
 8001264:	2203      	movs	r2, #3
 8001266:	701a      	strb	r2, [r3, #0]
                lighting_set_state(LIGHTING_ERROR_STATE);
 8001268:	2002      	movs	r0, #2
 800126a:	f002 fb3d 	bl	80038e8 <lighting_set_state>
        break;
 800126e:	e011      	b.n	8001294 <movement_fsm+0x1ac>
        board_ok = is_board_ok();
 8001270:	f7ff feba 	bl	8000fe8 <is_board_ok>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
        if(board_ok){
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <movement_fsm+0x1b0>
            movement_state = WAIT_STATE;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <movement_fsm+0x1bc>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
            lighting_set_state(LIGHTING_IDLE_STATE);
 8001284:	2000      	movs	r0, #0
 8001286:	f002 fb2f 	bl	80038e8 <lighting_set_state>
        break;
 800128a:	e005      	b.n	8001298 <movement_fsm+0x1b0>
        break;
 800128c:	bf00      	nop
 800128e:	e004      	b.n	800129a <movement_fsm+0x1b2>
        break;
 8001290:	bf00      	nop
 8001292:	e002      	b.n	800129a <movement_fsm+0x1b2>
        break;
 8001294:	bf00      	nop
 8001296:	e000      	b.n	800129a <movement_fsm+0x1b2>
        break;
 8001298:	bf00      	nop
    }
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200004c0 	.word	0x200004c0
 80012a8:	200004c1 	.word	0x200004c1
 80012ac:	200004c8 	.word	0x200004c8
 80012b0:	200004c4 	.word	0x200004c4

080012b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_MspInit+0x54>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_MspInit+0x54>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x54>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_MspInit+0x54>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_MspInit+0x54>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_MspInit+0x54>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	210f      	movs	r1, #15
 80012f6:	f06f 0001 	mvn.w	r0, #1
 80012fa:	f002 fde3 	bl	8003ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_I2C_MspInit+0x84>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d12c      	bne.n	8001388 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

		// Hay que modificar manualmente GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800134a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135c:	2304      	movs	r3, #4
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <HAL_I2C_MspInit+0x8c>)
 8001368:	f003 f968 	bl	800463c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0x88>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0x88>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400

0800139c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2c      	ldr	r2, [pc, #176]	; (800145c <HAL_TIM_PWM_MspInit+0xc0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d151      	bne.n	8001452 <HAL_TIM_PWM_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_TIM_PWM_MspInit+0xc4>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <HAL_TIM_PWM_MspInit+0xc4>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_TIM_PWM_MspInit+0xc4>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_TIM_PWM_MspInit+0xcc>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800140e:	4815      	ldr	r0, [pc, #84]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 8001410:	f002 fd82 	bl	8003f18 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800141a:	f7ff fd6a 	bl	8000ef2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_TIM_PWM_MspInit+0xc8>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2105      	movs	r1, #5
 8001446:	201a      	movs	r0, #26
 8001448:	f002 fd3c 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800144c:	201a      	movs	r0, #26
 800144e:	f002 fd55 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010000 	.word	0x40010000
 8001460:	40023800 	.word	0x40023800
 8001464:	20000448 	.word	0x20000448
 8001468:	40026470 	.word	0x40026470

0800146c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_TIM_MspPostInit+0x68>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d11e      	bne.n	80014cc <HAL_TIM_MspPostInit+0x60>
		 *
		 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_TIM_MspPostInit+0x6c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_DOUT_Pin;
 80014aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DOUT_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_TIM_MspPostInit+0x70>)
 80014c8:	f003 f8b8 	bl	800463c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_InitTick+0xe8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_InitTick+0xe8>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_InitTick+0xe8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150c:	f107 0210 	add.w	r2, r7, #16
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fb16 	bl	8005b48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001526:	f004 fafb 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 800152a:	6378      	str	r0, [r7, #52]	; 0x34
 800152c:	e004      	b.n	8001538 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800152e:	f004 faf7 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8001532:	4603      	mov	r3, r0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153a:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_InitTick+0xec>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	3b01      	subs	r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_InitTick+0xf0>)
 8001548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_InitTick+0xf0>)
 8001550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_InitTick+0xf0>)
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HAL_InitTick+0xf0>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_InitTick+0xf0>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_InitTick+0xf0>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <HAL_InitTick+0xf0>)
 8001570:	f004 fb1c 	bl	8005bac <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800157a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11b      	bne.n	80015ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <HAL_InitTick+0xf0>)
 8001584:	f004 fb6c 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800158e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001592:	2b00      	cmp	r3, #0
 8001594:	d111      	bne.n	80015ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001596:	201c      	movs	r0, #28
 8001598:	f002 fcb0 	bl	8003efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d808      	bhi.n	80015b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80015a2:	2200      	movs	r2, #0
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	201c      	movs	r0, #28
 80015a8:	f002 fc8c 	bl	8003ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_InitTick+0xf4>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e002      	b.n	80015ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3738      	adds	r7, #56	; 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	200007c8 	.word	0x200007c8
 80015d4:	20000094 	.word	0x20000094

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800160a:	f004 fe51 	bl	80062b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000400 	.word	0x20000400

08001618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM2_IRQHandler+0x10>)
 800161e:	f004 fe47 	bl	80062b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200007c8 	.word	0x200007c8

0800162c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2_Stream4_IRQHandler+0x10>)
 8001632:	f002 fd99 	bl	8004168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000448 	.word	0x20000448

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <t_Timer>:

uint32_t segundos_j1 = 0, segundos_j2 = 0, incremento = 0;

void tareas_error_handler(uint8_t);

void t_Timer() {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 1000; //1seg
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	607b      	str	r3, [r7, #4]
	while (1) {
		if (!get_error_position() && modo_de_juego == 1) {
 8001670:	f001 f832 	bl	80026d8 <get_error_position>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11b      	bne.n	80016b2 <t_Timer+0x4e>
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <t_Timer+0x60>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d117      	bne.n	80016b2 <t_Timer+0x4e>
			if (get_side_to_move() == 0) {
 8001682:	f001 f817 	bl	80026b4 <get_side_to_move>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <t_Timer+0x3c>
				if (segundos_j1 > 0)
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <t_Timer+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00e      	beq.n	80016b2 <t_Timer+0x4e>
					segundos_j1--;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <t_Timer+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <t_Timer+0x64>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e008      	b.n	80016b2 <t_Timer+0x4e>
			}

			else {
				if (segundos_j2 > 0)
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <t_Timer+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <t_Timer+0x4e>
					segundos_j2--;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <t_Timer+0x68>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <t_Timer+0x68>)
 80016b0:	6013      	str	r3, [r2, #0]
			}

		}

		actualizar_display = 1;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <t_Timer+0x6c>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80016b8:	463b      	mov	r3, r7
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	f006 fb9b 	bl	8007df8 <vTaskDelayUntil>
		if (!get_error_position() && modo_de_juego == 1) {
 80016c2:	e7d5      	b.n	8001670 <t_Timer+0xc>
 80016c4:	20000811 	.word	0x20000811
 80016c8:	20000814 	.word	0x20000814
 80016cc:	20000818 	.word	0x20000818
 80016d0:	20000813 	.word	0x20000813

080016d4 <t_LCD>:
	}
}

void t_LCD(void*) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

	if (lcd_queue == NULL) {
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <t_LCD+0x6c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <t_LCD+0x16>
		tareas_error_handler(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f000 ffd1 	bl	800268c <tareas_error_handler>
	}

	lcd_init();
 80016ea:	f7fe fef7 	bl	80004dc <lcd_init>

	LCDQueueItem_t msg;

	while (1) {
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <t_LCD+0x6c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f107 0108 	add.w	r1, r7, #8
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 fea0 	bl	8007440 <xQueueReceive>
		switch (msg.type) {
 8001700:	7a3b      	ldrb	r3, [r7, #8]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d014      	beq.n	8001730 <t_LCD+0x5c>
 8001706:	2b02      	cmp	r3, #2
 8001708:	dcf1      	bgt.n	80016ee <t_LCD+0x1a>
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <t_LCD+0x40>
 800170e:	2b01      	cmp	r3, #1
 8001710:	d009      	beq.n	8001726 <t_LCD+0x52>
 8001712:	e014      	b.n	800173e <t_LCD+0x6a>
		case 0:
			lcd_send_cmd(msg.data[0]);
 8001714:	7a7b      	ldrb	r3, [r7, #9]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff1e 	bl	8000558 <lcd_send_cmd>
			vTaskDelay((TickType_t) msg.delay);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fbe8 	bl	8007ef4 <vTaskDelay>
			break;
 8001724:	e00b      	b.n	800173e <t_LCD+0x6a>
		case 1:
			lcd_send_data(msg.data[0]);
 8001726:	7a7b      	ldrb	r3, [r7, #9]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff45 	bl	80005b8 <lcd_send_data>
			break;
 800172e:	e006      	b.n	800173e <t_LCD+0x6a>
		case 2:
			lcd_send_string(msg.data);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	3301      	adds	r3, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff6e 	bl	8000618 <lcd_send_string>
			break;
 800173c:	bf00      	nop
		xQueueReceive(lcd_queue, &msg, portMAX_DELAY);
 800173e:	e7d6      	b.n	80016ee <t_LCD+0x1a>
 8001740:	200004ac 	.word	0x200004ac

08001744 <t_Botones>:
		default:
		}
	}
}

void t_Botones(void*) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

	Debounce_t b1, b2, b3;

	debounce_init(&b1, 1, 2);
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	2202      	movs	r2, #2
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f812 	bl	800077e <debounce_init>
	debounce_init(&b2, 1, 2);
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	2202      	movs	r2, #2
 8001760:	2101      	movs	r1, #1
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f80b 	bl	800077e <debounce_init>
	debounce_init(&b3, 1, 2);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2202      	movs	r2, #2
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f804 	bl	800077e <debounce_init>

	if (buttons_queue == NULL) {
 8001776:	4b42      	ldr	r3, [pc, #264]	; (8001880 <t_Botones+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <t_Botones+0x40>
		tareas_error_handler(4);
 800177e:	2004      	movs	r0, #4
 8001780:	f000 ff84 	bl	800268c <tareas_error_handler>
	}

	uint8_t msg = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

	while (1) {
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	483e      	ldr	r0, [pc, #248]	; (8001884 <t_Botones+0x140>)
 800178c:	f003 f8da 	bl	8004944 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f816 	bl	80007cc <debounce_run>
		debounce_run(&b2, HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin));
 80017a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a4:	4837      	ldr	r0, [pc, #220]	; (8001884 <t_Botones+0x140>)
 80017a6:	f003 f8cd 	bl	8004944 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f809 	bl	80007cc <debounce_run>
		debounce_run(&b3, HAL_GPIO_ReadPin(BOTON_3_GPIO_Port, BOTON_3_Pin));
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	4831      	ldr	r0, [pc, #196]	; (8001884 <t_Botones+0x140>)
 80017c0:	f003 f8c0 	bl	8004944 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fffc 	bl	80007cc <debounce_run>

		if (debounce_flank(&b1)) { // Boton arriba (no contra el tablero)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f87b 	bl	80008d4 <debounce_flank>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d012      	beq.n	800180a <t_Botones+0xc6>
			msg = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <t_Botones+0x13c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 f813 	bl	8007818 <uxQueueMessagesWaiting>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	d808      	bhi.n	800180a <t_Botones+0xc6>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <t_Botones+0x13c>)
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	f107 010f 	add.w	r1, r7, #15
 8001800:	2300      	movs	r3, #0
 8001802:	f04f 32ff 	mov.w	r2, #4294967295
 8001806:	f005 fd1d 	bl	8007244 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b2)) { // Boton abajo (contra el tablero)
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f860 	bl	80008d4 <debounce_flank>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <t_Botones+0xfc>
			msg = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <t_Botones+0x13c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fff8 	bl	8007818 <uxQueueMessagesWaiting>
 8001828:	4603      	mov	r3, r0
 800182a:	2b13      	cmp	r3, #19
 800182c:	d808      	bhi.n	8001840 <t_Botones+0xfc>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <t_Botones+0x13c>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f107 010f 	add.w	r1, r7, #15
 8001836:	2300      	movs	r3, #0
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	f005 fd02 	bl	8007244 <xQueueGenericSend>
			}
		}

		if (debounce_flank(&b3)) { // Boton verde
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f845 	bl	80008d4 <debounce_flank>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d012      	beq.n	8001876 <t_Botones+0x132>
			msg = 3;
 8001850:	2303      	movs	r3, #3
 8001852:	73fb      	strb	r3, [r7, #15]
			if (uxQueueMessagesWaiting(buttons_queue) < 20) {
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <t_Botones+0x13c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f005 ffdd 	bl	8007818 <uxQueueMessagesWaiting>
 800185e:	4603      	mov	r3, r0
 8001860:	2b13      	cmp	r3, #19
 8001862:	d808      	bhi.n	8001876 <t_Botones+0x132>
				xQueueSend(buttons_queue, (void* )&msg, portMAX_DELAY);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <t_Botones+0x13c>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	f107 010f 	add.w	r1, r7, #15
 800186c:	2300      	movs	r3, #0
 800186e:	f04f 32ff 	mov.w	r2, #4294967295
 8001872:	f005 fce7 	bl	8007244 <xQueueGenericSend>
			}
		}

		vTaskDelay(10);
 8001876:	200a      	movs	r0, #10
 8001878:	f006 fb3c 	bl	8007ef4 <vTaskDelay>
		debounce_run(&b1, HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin));
 800187c:	e784      	b.n	8001788 <t_Botones+0x44>
 800187e:	bf00      	nop
 8001880:	200004b0 	.word	0x200004b0
 8001884:	40020800 	.word	0x40020800

08001888 <t_userLoop>:
	}
}

void t_userLoop(void*) {
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b098      	sub	sp, #96	; 0x60
 800188c:	af00      	add	r7, sp, #0
 800188e:	61f8      	str	r0, [r7, #28]

	if (ws2812_sem == NULL) {
 8001890:	4b9f      	ldr	r3, [pc, #636]	; (8001b10 <t_userLoop+0x288>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <t_userLoop+0x16>
		tareas_error_handler(2);
 8001898:	2002      	movs	r0, #2
 800189a:	f000 fef7 	bl	800268c <tareas_error_handler>
	}

	if (buttons_queue == NULL) {
 800189e:	4b9d      	ldr	r3, [pc, #628]	; (8001b14 <t_userLoop+0x28c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <t_userLoop+0x24>
		tareas_error_handler(4);
 80018a6:	2004      	movs	r0, #4
 80018a8:	f000 fef0 	bl	800268c <tareas_error_handler>
	}

	if (lcd_queue == NULL) {
 80018ac:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <t_userLoop+0x290>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <t_userLoop+0x32>
		tareas_error_handler(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f000 fee9 	bl	800268c <tareas_error_handler>
	}

	user_htim1 = &htim1;
 80018ba:	4b98      	ldr	r3, [pc, #608]	; (8001b1c <t_userLoop+0x294>)
 80018bc:	4a98      	ldr	r2, [pc, #608]	; (8001b20 <t_userLoop+0x298>)
 80018be:	601a      	str	r2, [r3, #0]
	user_init();
 80018c0:	f000 feec 	bl	800269c <user_init>

	ws2812_init();
 80018c4:	f001 fe4c 	bl	8003560 <ws2812_init>

	uint8_t button = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 33; // 30fps aprox
 80018ce:	2321      	movs	r3, #33	; 0x21
 80018d0:	65bb      	str	r3, [r7, #88]	; 0x58

	LCDQueueItem_t msg = { 0 };
 80018d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]

	char msg_tiempo[] = "-> JX - XX:XX    ";
 80018e4:	4b8f      	ldr	r3, [pc, #572]	; (8001b24 <t_userLoop+0x29c>)
 80018e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80018ea:	461d      	mov	r5, r3
 80018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	8023      	strh	r3, [r4, #0]

	uint8_t prev_side_to_move = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	xQueueSend(buttons_queue, &button, 0);
 80018fa:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <t_userLoop+0x28c>)
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001902:	2300      	movs	r3, #0
 8001904:	2200      	movs	r2, #0
 8001906:	f005 fc9d 	bl	8007244 <xQueueGenericSend>

	while (1) {
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 800190a:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <t_userLoop+0x28c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001912:	2200      	movs	r2, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fd93 	bl	8007440 <xQueueReceive>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d104      	bne.n	800192a <t_userLoop+0xa2>
			ME_general(button);
 8001920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f99b 	bl	8001c60 <ME_general>
		}

		switch (modo_de_juego) {
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <t_userLoop+0x2a0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b03      	cmp	r3, #3
 8001930:	f200 817b 	bhi.w	8001c2a <t_userLoop+0x3a2>
 8001934:	a201      	add	r2, pc, #4	; (adr r2, 800193c <t_userLoop+0xb4>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	08001c2b 	.word	0x08001c2b
 8001940:	0800194d 	.word	0x0800194d
 8001944:	08001c2b 	.word	0x08001c2b
 8001948:	08001c2b 	.word	0x08001c2b
		case 0:
			break;
		case 1:
			user_loop(); // FSM CHESS
 800194c:	f000 fff8 	bl	8002940 <user_loop>

			// Detecto si hubo un cambio de turno para sumar incremento de tiempo
			if (prev_side_to_move != get_side_to_move()) {
 8001950:	f000 feb0 	bl	80026b4 <get_side_to_move>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800195c:	4293      	cmp	r3, r2
 800195e:	d017      	beq.n	8001990 <t_userLoop+0x108>
				prev_side_to_move = get_side_to_move();
 8001960:	f000 fea8 	bl	80026b4 <get_side_to_move>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (prev_side_to_move)
 800196a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <t_userLoop+0xfa>
					segundos_j1 += incremento;
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <t_userLoop+0x2a4>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <t_userLoop+0x2a8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <t_userLoop+0x2a4>)
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e006      	b.n	8001990 <t_userLoop+0x108>
				else
					segundos_j2 += incremento;
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <t_userLoop+0x2ac>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <t_userLoop+0x2a8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <t_userLoop+0x2ac>)
 800198e:	6013      	str	r3, [r2, #0]
			}

			//Imprimo tiempos si tengo que hacerlo
			if (actualizar_display && mostrar_tiempo) {
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <t_userLoop+0x2b0>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8147 	beq.w	8001c28 <t_userLoop+0x3a0>
 800199a:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <t_userLoop+0x2b4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8142 	beq.w	8001c28 <t_userLoop+0x3a0>
				actualizar_display = 0;
 80019a4:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <t_userLoop+0x2b0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
				//msg = lcd_msg_clear();
				//xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
				msg = lcd_msg_first_line();
 80019aa:	463b      	mov	r3, r7
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fea2 	bl	80006f6 <lcd_msg_first_line>
 80019b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80019b6:	463d      	mov	r5, r7
 80019b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019c0:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80019c4:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <t_userLoop+0x290>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019cc:	2300      	movs	r3, #0
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	f005 fc37 	bl	8007244 <xQueueGenericSend>

				if (get_side_to_move() == 0) {
 80019d6:	f000 fe6d 	bl	80026b4 <get_side_to_move>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <t_userLoop+0x166>
					msg_tiempo[0] = '-';
 80019e0:	232d      	movs	r3, #45	; 0x2d
 80019e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					msg_tiempo[1] = '>';
 80019e6:	233e      	movs	r3, #62	; 0x3e
 80019e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80019ec:	e005      	b.n	80019fa <t_userLoop+0x172>
				} else {
					msg_tiempo[0] = ' ';
 80019ee:	2320      	movs	r3, #32
 80019f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					msg_tiempo[1] = ' ';
 80019f4:	2320      	movs	r3, #32
 80019f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				}

				// char * msg_tiempo = "JX - XX:XX";
				msg_tiempo[4] = '1';
 80019fa:	2331      	movs	r3, #49	; 0x31
 80019fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[8] = ((segundos_j1 / 60) / 10) + 48;
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <t_userLoop+0x2a4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <t_userLoop+0x2b8>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3330      	adds	r3, #48	; 0x30
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				msg_tiempo[9] = ((segundos_j1 / 60) % 10) + 48;
 8001a16:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <t_userLoop+0x2a4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <t_userLoop+0x2bc>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0959      	lsrs	r1, r3, #5
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <t_userLoop+0x2c0>)
 8001a24:	fba3 2301 	umull	r2, r3, r3, r1
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1aca      	subs	r2, r1, r3
 8001a34:	b2d3      	uxtb	r3, r2
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				msg_tiempo[11] = ((segundos_j1 % 60) / 10) + 48;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <t_userLoop+0x2a4>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <t_userLoop+0x2bc>)
 8001a44:	fba3 2301 	umull	r2, r3, r3, r1
 8001a48:	095a      	lsrs	r2, r3, #5
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	1aca      	subs	r2, r1, r3
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <t_userLoop+0x2c0>)
 8001a56:	fba3 2302 	umull	r2, r3, r3, r2
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3330      	adds	r3, #48	; 0x30
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				msg_tiempo[12] = ((segundos_j1 % 60) % 10) + 48;
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <t_userLoop+0x2a4>)
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <t_userLoop+0x2bc>)
 8001a6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a70:	095a      	lsrs	r2, r3, #5
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	1aca      	subs	r2, r1, r3
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <t_userLoop+0x2c0>)
 8001a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a82:	08d9      	lsrs	r1, r3, #3
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	1ad1      	subs	r1, r2, r3
 8001a8e:	b2cb      	uxtb	r3, r1
 8001a90:	3330      	adds	r3, #48	; 0x30
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				msg = lcd_msg_from_string(msg_tiempo);
 8001a98:	463b      	mov	r3, r7
 8001a9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fdce 	bl	8000642 <lcd_msg_from_string>
 8001aa6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001aaa:	463d      	mov	r5, r7
 8001aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ab4:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <t_userLoop+0x290>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac6:	f005 fbbd 	bl	8007244 <xQueueGenericSend>
				msg = lcd_msg_second_line();
 8001aca:	463b      	mov	r3, r7
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fe34 	bl	800073a <lcd_msg_second_line>
 8001ad2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ad6:	463d      	mov	r5, r7
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ae0:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <t_userLoop+0x290>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001aec:	2300      	movs	r3, #0
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	f005 fba7 	bl	8007244 <xQueueGenericSend>

				if (get_side_to_move() == 1) {
 8001af6:	f000 fddd 	bl	80026b4 <get_side_to_move>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d125      	bne.n	8001b4c <t_userLoop+0x2c4>
					msg_tiempo[0] = '-';
 8001b00:	232d      	movs	r3, #45	; 0x2d
 8001b02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					msg_tiempo[1] = '>';
 8001b06:	233e      	movs	r3, #62	; 0x3e
 8001b08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b0c:	e024      	b.n	8001b58 <t_userLoop+0x2d0>
 8001b0e:	bf00      	nop
 8001b10:	200004b4 	.word	0x200004b4
 8001b14:	200004b0 	.word	0x200004b0
 8001b18:	200004ac 	.word	0x200004ac
 8001b1c:	20000824 	.word	0x20000824
 8001b20:	20000400 	.word	0x20000400
 8001b24:	08009618 	.word	0x08009618
 8001b28:	20000811 	.word	0x20000811
 8001b2c:	20000814 	.word	0x20000814
 8001b30:	2000081c 	.word	0x2000081c
 8001b34:	20000818 	.word	0x20000818
 8001b38:	20000813 	.word	0x20000813
 8001b3c:	20000812 	.word	0x20000812
 8001b40:	1b4e81b5 	.word	0x1b4e81b5
 8001b44:	88888889 	.word	0x88888889
 8001b48:	cccccccd 	.word	0xcccccccd
				} else {
					msg_tiempo[0] = ' ';
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					msg_tiempo[1] = ' ';
 8001b52:	2320      	movs	r3, #32
 8001b54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				}

				msg_tiempo[4] = '2';
 8001b58:	2332      	movs	r3, #50	; 0x32
 8001b5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				msg_tiempo[8] = ((segundos_j2 / 60) / 10) + 48;
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <t_userLoop+0x3c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <t_userLoop+0x3c4>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3330      	adds	r3, #48	; 0x30
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				msg_tiempo[9] = ((segundos_j2 / 60) % 10) + 48;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <t_userLoop+0x3c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <t_userLoop+0x3c8>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0959      	lsrs	r1, r3, #5
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <t_userLoop+0x3cc>)
 8001b82:	fba3 2301 	umull	r2, r3, r3, r1
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	1aca      	subs	r2, r1, r3
 8001b92:	b2d3      	uxtb	r3, r2
 8001b94:	3330      	adds	r3, #48	; 0x30
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				msg_tiempo[11] = ((segundos_j2 % 60) / 10) + 48;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <t_userLoop+0x3c0>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <t_userLoop+0x3c8>)
 8001ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ba6:	095a      	lsrs	r2, r3, #5
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	1aca      	subs	r2, r1, r3
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <t_userLoop+0x3cc>)
 8001bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3330      	adds	r3, #48	; 0x30
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				msg_tiempo[12] = ((segundos_j2 % 60) % 10) + 48;
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <t_userLoop+0x3c0>)
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <t_userLoop+0x3c8>)
 8001bca:	fba3 2301 	umull	r2, r3, r3, r1
 8001bce:	095a      	lsrs	r2, r3, #5
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	1aca      	subs	r2, r1, r3
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <t_userLoop+0x3cc>)
 8001bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001be0:	08d9      	lsrs	r1, r3, #3
 8001be2:	460b      	mov	r3, r1
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	1ad1      	subs	r1, r2, r3
 8001bec:	b2cb      	uxtb	r3, r1
 8001bee:	3330      	adds	r3, #48	; 0x30
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				msg = lcd_msg_from_string(msg_tiempo);
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fd1f 	bl	8000642 <lcd_msg_from_string>
 8001c04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c08:	463d      	mov	r5, r7
 8001c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c12:	e884 0003 	stmia.w	r4, {r0, r1}
				xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <t_userLoop+0x3d0>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	f005 fb0e 	bl	8007244 <xQueueGenericSend>
			}
			break;
 8001c28:	bf00      	nop
			break;
		case 3:
			break;
		}

		xSemaphoreGive(ws2812_sem);
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <t_userLoop+0x3d4>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	f005 fb06 	bl	8007244 <xQueueGenericSend>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001c38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f006 f8da 	bl	8007df8 <vTaskDelayUntil>
		if (xQueueReceive(buttons_queue, &button, 0) == pdTRUE) {
 8001c44:	e661      	b.n	800190a <t_userLoop+0x82>
 8001c46:	bf00      	nop
 8001c48:	20000818 	.word	0x20000818
 8001c4c:	1b4e81b5 	.word	0x1b4e81b5
 8001c50:	88888889 	.word	0x88888889
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	200004ac 	.word	0x200004ac
 8001c5c:	200004b4 	.word	0x200004b4

08001c60 <ME_general>:
	}
}

static void ME_general(uint8_t button) {
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b090      	sub	sp, #64	; 0x40
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	77fb      	strb	r3, [r7, #31]
	static int8_t sub_estado = 0;
	LCDQueueItem_t msg = { 0 };
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]

	uint8_t aux_button = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch (estado) {
 8001c82:	4bad      	ldr	r3, [pc, #692]	; (8001f38 <ME_general+0x2d8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	f200 84c7 	bhi.w	800261a <ME_general+0x9ba>
 8001c8c:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <ME_general+0x34>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001cad 	.word	0x08001cad
 8001c98:	08001db5 	.word	0x08001db5
 8001c9c:	08001f61 	.word	0x08001f61
 8001ca0:	08002299 	.word	0x08002299
 8001ca4:	080024d5 	.word	0x080024d5
 8001ca8:	08002501 	.word	0x08002501
	case ME_GENERAL_RESET:
		modo_de_juego = 0;
 8001cac:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <ME_general+0x2dc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		msg = lcd_msg_clear();
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fcfc 	bl	80006b2 <lcd_msg_clear>
 8001cba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cbe:	463d      	mov	r5, r7
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc8:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ccc:	4b9c      	ldr	r3, [pc, #624]	; (8001f40 <ME_general+0x2e0>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cda:	f005 fab3 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fd08 	bl	80006f6 <lcd_msg_first_line>
 8001ce6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cea:	463d      	mov	r5, r7
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cf4:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001cf8:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <ME_general+0x2e0>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d00:	2300      	movs	r3, #0
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	f005 fa9d 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Smart Chess");
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	498d      	ldr	r1, [pc, #564]	; (8001f44 <ME_general+0x2e4>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc97 	bl	8000642 <lcd_msg_from_string>
 8001d14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d18:	463d      	mov	r5, r7
 8001d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d22:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001d26:	4b86      	ldr	r3, [pc, #536]	; (8001f40 <ME_general+0x2e0>)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	f005 fa86 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fcfd 	bl	800073a <lcd_msg_second_line>
 8001d40:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d44:	463d      	mov	r5, r7
 8001d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d4e:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <ME_general+0x2e0>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	f005 fa70 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 8001d64:	463b      	mov	r3, r7
 8001d66:	4978      	ldr	r1, [pc, #480]	; (8001f48 <ME_general+0x2e8>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc6a 	bl	8000642 <lcd_msg_from_string>
 8001d6e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d72:	463d      	mov	r5, r7
 8001d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d7c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001d80:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <ME_general+0x2e0>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	f005 fa59 	bl	8007244 <xQueueGenericSend>

		if (button == 3) {
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	f040 8437 	bne.w	8002608 <ME_general+0x9a8>
			estado = ME_GENERAL_SELECCION_MODO;
 8001d9a:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <ME_general+0x2d8>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <ME_general+0x2ec>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001da8:	2300      	movs	r3, #0
 8001daa:	2200      	movs	r2, #0
 8001dac:	f005 fa4a 	bl	8007244 <xQueueGenericSend>
		}

		break;
 8001db0:	f000 bc2a 	b.w	8002608 <ME_general+0x9a8>
	case ME_GENERAL_SELECCION_MODO:
		msg = lcd_msg_clear();
 8001db4:	463b      	mov	r3, r7
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fc7b 	bl	80006b2 <lcd_msg_clear>
 8001dbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001dc0:	463d      	mov	r5, r7
 8001dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dca:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001dce:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <ME_general+0x2e0>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	f005 fa32 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001de0:	463b      	mov	r3, r7
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fc87 	bl	80006f6 <lcd_msg_first_line>
 8001de8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001dec:	463d      	mov	r5, r7
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001df6:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001dfa:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <ME_general+0x2e0>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e02:	2300      	movs	r3, #0
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	f005 fa1c 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Modo:");
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	4950      	ldr	r1, [pc, #320]	; (8001f50 <ME_general+0x2f0>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fc16 	bl	8000642 <lcd_msg_from_string>
 8001e16:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e1a:	463d      	mov	r5, r7
 8001e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e24:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <ME_general+0x2e0>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e30:	2300      	movs	r3, #0
 8001e32:	f04f 32ff 	mov.w	r2, #4294967295
 8001e36:	f005 fa05 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc7c 	bl	800073a <lcd_msg_second_line>
 8001e42:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e46:	463d      	mov	r5, r7
 8001e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e50:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001e54:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <ME_general+0x2e0>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	f005 f9ef 	bl	8007244 <xQueueGenericSend>
		if (sub_estado == 0) {
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <ME_general+0x2f4>)
 8001e68:	f993 3000 	ldrsb.w	r3, [r3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d116      	bne.n	8001e9e <ME_general+0x23e>
			msg = lcd_msg_from_string("-> Jug vs Jug");
 8001e70:	463b      	mov	r3, r7
 8001e72:	4939      	ldr	r1, [pc, #228]	; (8001f58 <ME_general+0x2f8>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fbe4 	bl	8000642 <lcd_msg_from_string>
 8001e7a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e7e:	463d      	mov	r5, r7
 8001e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e88:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <ME_general+0x2e0>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e94:	2300      	movs	r3, #0
 8001e96:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9a:	f005 f9d3 	bl	8007244 <xQueueGenericSend>
		}
		if (sub_estado == 1) {
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <ME_general+0x2f4>)
 8001ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d116      	bne.n	8001ed6 <ME_general+0x276>
			msg = lcd_msg_from_string("-> Jug vs Maq");
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	492c      	ldr	r1, [pc, #176]	; (8001f5c <ME_general+0x2fc>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fbc8 	bl	8000642 <lcd_msg_from_string>
 8001eb2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001eb6:	463d      	mov	r5, r7
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ec0:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <ME_general+0x2e0>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	f005 f9b7 	bl	8007244 <xQueueGenericSend>
		}

		if (button == 3) {
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d115      	bne.n	8001f08 <ME_general+0x2a8>
			estado =
					sub_estado == 0 ?
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <ME_general+0x2f4>)
 8001ede:	f993 3000 	ldrsb.w	r3, [r3]
							ME_GENERAL_SELECCION_TIEMPO : ME_GENERAL_JVM;
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <ME_general+0x28a>
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	e000      	b.n	8001eec <ME_general+0x28c>
 8001eea:	2204      	movs	r2, #4
			estado =
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <ME_general+0x2d8>)
 8001eee:	701a      	strb	r2, [r3, #0]
			sub_estado = 0;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <ME_general+0x2f4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <ME_general+0x2ec>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001efe:	2300      	movs	r3, #0
 8001f00:	2200      	movs	r2, #0
 8001f02:	f005 f99f 	bl	8007244 <xQueueGenericSend>
		} else if (button != 0) {
			sub_estado = !sub_estado;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 8001f06:	e381      	b.n	800260c <ME_general+0x9ac>
		} else if (button != 0) {
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 837e 	beq.w	800260c <ME_general+0x9ac>
			sub_estado = !sub_estado;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <ME_general+0x2f4>)
 8001f12:	f993 3000 	ldrsb.w	r3, [r3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	b25a      	sxtb	r2, r3
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <ME_general+0x2f4>)
 8001f24:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <ME_general+0x2ec>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	f005 f987 	bl	8007244 <xQueueGenericSend>
		break;
 8001f36:	e369      	b.n	800260c <ME_general+0x9ac>
 8001f38:	20000810 	.word	0x20000810
 8001f3c:	20000811 	.word	0x20000811
 8001f40:	200004ac 	.word	0x200004ac
 8001f44:	0800962c 	.word	0x0800962c
 8001f48:	08009638 	.word	0x08009638
 8001f4c:	200004b0 	.word	0x200004b0
 8001f50:	08009648 	.word	0x08009648
 8001f54:	20000820 	.word	0x20000820
 8001f58:	08009658 	.word	0x08009658
 8001f5c:	08009668 	.word	0x08009668

	case ME_GENERAL_SELECCION_TIEMPO:
		msg = lcd_msg_clear();
 8001f60:	463b      	mov	r3, r7
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fba5 	bl	80006b2 <lcd_msg_clear>
 8001f68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f6c:	463d      	mov	r5, r7
 8001f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f76:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001f7a:	4bb8      	ldr	r3, [pc, #736]	; (800225c <ME_general+0x5fc>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f82:	2300      	movs	r3, #0
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	f005 f95c 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fbb1 	bl	80006f6 <lcd_msg_first_line>
 8001f94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f98:	463d      	mov	r5, r7
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fa6:	4bad      	ldr	r3, [pc, #692]	; (800225c <ME_general+0x5fc>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	f005 f946 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Selec. Tiempo:");
 8001fb8:	463b      	mov	r3, r7
 8001fba:	49a9      	ldr	r1, [pc, #676]	; (8002260 <ME_general+0x600>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fb40 	bl	8000642 <lcd_msg_from_string>
 8001fc2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fc6:	463d      	mov	r5, r7
 8001fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fd0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8001fd4:	4ba1      	ldr	r3, [pc, #644]	; (800225c <ME_general+0x5fc>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe2:	f005 f92f 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fba6 	bl	800073a <lcd_msg_second_line>
 8001fee:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ff2:	463d      	mov	r5, r7
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ffc:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002000:	4b96      	ldr	r3, [pc, #600]	; (800225c <ME_general+0x5fc>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002008:	2300      	movs	r3, #0
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
 800200e:	f005 f919 	bl	8007244 <xQueueGenericSend>

		switch (sub_estado) {
 8002012:	4b94      	ldr	r3, [pc, #592]	; (8002264 <ME_general+0x604>)
 8002014:	f993 3000 	ldrsb.w	r3, [r3]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d869      	bhi.n	80020f0 <ME_general+0x490>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <ME_general+0x3c4>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	0800203d 	.word	0x0800203d
 8002028:	0800205b 	.word	0x0800205b
 800202c:	08002079 	.word	0x08002079
 8002030:	08002097 	.word	0x08002097
 8002034:	080020b5 	.word	0x080020b5
 8002038:	080020d3 	.word	0x080020d3
		case 0:
			msg = lcd_msg_from_string("5min S/INC");
 800203c:	463b      	mov	r3, r7
 800203e:	498a      	ldr	r1, [pc, #552]	; (8002268 <ME_general+0x608>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fafe 	bl	8000642 <lcd_msg_from_string>
 8002046:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800204a:	463d      	mov	r5, r7
 800204c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002050:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002054:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002058:	e04a      	b.n	80020f0 <ME_general+0x490>
		case 1:
			msg = lcd_msg_from_string("5min +30seg");
 800205a:	463b      	mov	r3, r7
 800205c:	4983      	ldr	r1, [pc, #524]	; (800226c <ME_general+0x60c>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe faef 	bl	8000642 <lcd_msg_from_string>
 8002064:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002068:	463d      	mov	r5, r7
 800206a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002072:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002076:	e03b      	b.n	80020f0 <ME_general+0x490>
		case 2:
			msg = lcd_msg_from_string("10min S/INC");
 8002078:	463b      	mov	r3, r7
 800207a:	497d      	ldr	r1, [pc, #500]	; (8002270 <ME_general+0x610>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fae0 	bl	8000642 <lcd_msg_from_string>
 8002082:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002086:	463d      	mov	r5, r7
 8002088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800208a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002090:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 8002094:	e02c      	b.n	80020f0 <ME_general+0x490>
		case 3:
			msg = lcd_msg_from_string("10min +1min");
 8002096:	463b      	mov	r3, r7
 8002098:	4976      	ldr	r1, [pc, #472]	; (8002274 <ME_general+0x614>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fad1 	bl	8000642 <lcd_msg_from_string>
 80020a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020a4:	463d      	mov	r5, r7
 80020a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ae:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80020b2:	e01d      	b.n	80020f0 <ME_general+0x490>
		case 4:
			msg = lcd_msg_from_string("30min S/INC");
 80020b4:	463b      	mov	r3, r7
 80020b6:	4970      	ldr	r1, [pc, #448]	; (8002278 <ME_general+0x618>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fac2 	bl	8000642 <lcd_msg_from_string>
 80020be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020c2:	463d      	mov	r5, r7
 80020c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020cc:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80020d0:	e00e      	b.n	80020f0 <ME_general+0x490>
		case 5:
			msg = lcd_msg_from_string("30min +3min");
 80020d2:	463b      	mov	r3, r7
 80020d4:	4969      	ldr	r1, [pc, #420]	; (800227c <ME_general+0x61c>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fab3 	bl	8000642 <lcd_msg_from_string>
 80020dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020e0:	463d      	mov	r5, r7
 80020e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ea:	e884 0003 	stmia.w	r4, {r0, r1}
			break;
 80020ee:	bf00      	nop
		}

		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80020f0:	4b5a      	ldr	r3, [pc, #360]	; (800225c <ME_general+0x5fc>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020f8:	2300      	movs	r3, #0
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	f005 f8a1 	bl	8007244 <xQueueGenericSend>

		if (button == 2) {
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d119      	bne.n	800213c <ME_general+0x4dc>
			sub_estado--;
 8002108:	4b56      	ldr	r3, [pc, #344]	; (8002264 <ME_general+0x604>)
 800210a:	f993 3000 	ldrsb.w	r3, [r3]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	b25a      	sxtb	r2, r3
 8002116:	4b53      	ldr	r3, [pc, #332]	; (8002264 <ME_general+0x604>)
 8002118:	701a      	strb	r2, [r3, #0]
			if (sub_estado < 0)
 800211a:	4b52      	ldr	r3, [pc, #328]	; (8002264 <ME_general+0x604>)
 800211c:	f993 3000 	ldrsb.w	r3, [r3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da02      	bge.n	800212a <ME_general+0x4ca>
				sub_estado = 5;
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <ME_general+0x604>)
 8002126:	2205      	movs	r2, #5
 8002128:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 800212a:	4b55      	ldr	r3, [pc, #340]	; (8002280 <ME_general+0x620>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002132:	2300      	movs	r3, #0
 8002134:	2200      	movs	r2, #0
 8002136:	f005 f885 	bl	8007244 <xQueueGenericSend>
			}
			sub_estado = 0;
			mostrar_tiempo = 1;
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 800213a:	e269      	b.n	8002610 <ME_general+0x9b0>
		} else if (button == 1) {
 800213c:	7ffb      	ldrb	r3, [r7, #31]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d119      	bne.n	8002176 <ME_general+0x516>
			sub_estado++;
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <ME_general+0x604>)
 8002144:	f993 3000 	ldrsb.w	r3, [r3]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3301      	adds	r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	b25a      	sxtb	r2, r3
 8002150:	4b44      	ldr	r3, [pc, #272]	; (8002264 <ME_general+0x604>)
 8002152:	701a      	strb	r2, [r3, #0]
			if (sub_estado > 5)
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <ME_general+0x604>)
 8002156:	f993 3000 	ldrsb.w	r3, [r3]
 800215a:	2b05      	cmp	r3, #5
 800215c:	dd02      	ble.n	8002164 <ME_general+0x504>
				sub_estado = 0;
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <ME_general+0x604>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <ME_general+0x620>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800216c:	2300      	movs	r3, #0
 800216e:	2200      	movs	r2, #0
 8002170:	f005 f868 	bl	8007244 <xQueueGenericSend>
		break;
 8002174:	e24c      	b.n	8002610 <ME_general+0x9b0>
		} else if (button == 3) {
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b03      	cmp	r3, #3
 800217a:	f040 8249 	bne.w	8002610 <ME_general+0x9b0>
			estado = ME_GENERAL_JVJ;
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <ME_general+0x624>)
 8002180:	2203      	movs	r2, #3
 8002182:	701a      	strb	r2, [r3, #0]
			switch (sub_estado) {
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <ME_general+0x604>)
 8002186:	f993 3000 	ldrsb.w	r3, [r3]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d856      	bhi.n	800223c <ME_general+0x5dc>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <ME_general+0x534>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021c5 	.word	0x080021c5
 800219c:	080021dd 	.word	0x080021dd
 80021a0:	080021f5 	.word	0x080021f5
 80021a4:	0800220d 	.word	0x0800220d
 80021a8:	08002225 	.word	0x08002225
				segundos_j1 = 300;
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <ME_general+0x628>)
 80021ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021b2:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80021b4:	4b35      	ldr	r3, [pc, #212]	; (800228c <ME_general+0x62c>)
 80021b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ba:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <ME_general+0x630>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
				break;
 80021c2:	e03b      	b.n	800223c <ME_general+0x5dc>
				segundos_j1 = 300;
 80021c4:	4b30      	ldr	r3, [pc, #192]	; (8002288 <ME_general+0x628>)
 80021c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ca:	601a      	str	r2, [r3, #0]
				segundos_j2 = 300;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <ME_general+0x62c>)
 80021ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021d2:	601a      	str	r2, [r3, #0]
				incremento = 30;
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <ME_general+0x630>)
 80021d6:	221e      	movs	r2, #30
 80021d8:	601a      	str	r2, [r3, #0]
				break;
 80021da:	e02f      	b.n	800223c <ME_general+0x5dc>
				segundos_j1 = 600;
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <ME_general+0x628>)
 80021de:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021e2:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <ME_general+0x62c>)
 80021e6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021ea:	601a      	str	r2, [r3, #0]
				incremento = 0;
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <ME_general+0x630>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
				break;
 80021f2:	e023      	b.n	800223c <ME_general+0x5dc>
				segundos_j1 = 600;
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <ME_general+0x628>)
 80021f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021fa:	601a      	str	r2, [r3, #0]
				segundos_j2 = 600;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <ME_general+0x62c>)
 80021fe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002202:	601a      	str	r2, [r3, #0]
				incremento = 60;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <ME_general+0x630>)
 8002206:	223c      	movs	r2, #60	; 0x3c
 8002208:	601a      	str	r2, [r3, #0]
				break;
 800220a:	e017      	b.n	800223c <ME_general+0x5dc>
				segundos_j1 = 1800;
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <ME_general+0x628>)
 800220e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002212:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <ME_general+0x62c>)
 8002216:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800221a:	601a      	str	r2, [r3, #0]
				incremento = 0;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <ME_general+0x630>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
				break;
 8002222:	e00b      	b.n	800223c <ME_general+0x5dc>
				segundos_j1 = 1800;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <ME_general+0x628>)
 8002226:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800222a:	601a      	str	r2, [r3, #0]
				segundos_j2 = 1800;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <ME_general+0x62c>)
 800222e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002232:	601a      	str	r2, [r3, #0]
				incremento = 180;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <ME_general+0x630>)
 8002236:	22b4      	movs	r2, #180	; 0xb4
 8002238:	601a      	str	r2, [r3, #0]
				break;
 800223a:	bf00      	nop
			sub_estado = 0;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <ME_general+0x604>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
			mostrar_tiempo = 1;
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <ME_general+0x634>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <ME_general+0x620>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8002250:	2300      	movs	r3, #0
 8002252:	2200      	movs	r2, #0
 8002254:	f004 fff6 	bl	8007244 <xQueueGenericSend>
		break;
 8002258:	e1da      	b.n	8002610 <ME_general+0x9b0>
 800225a:	bf00      	nop
 800225c:	200004ac 	.word	0x200004ac
 8002260:	08009678 	.word	0x08009678
 8002264:	20000820 	.word	0x20000820
 8002268:	08009688 	.word	0x08009688
 800226c:	08009694 	.word	0x08009694
 8002270:	080096a0 	.word	0x080096a0
 8002274:	080096ac 	.word	0x080096ac
 8002278:	080096b8 	.word	0x080096b8
 800227c:	080096c4 	.word	0x080096c4
 8002280:	200004b0 	.word	0x200004b0
 8002284:	20000810 	.word	0x20000810
 8002288:	20000814 	.word	0x20000814
 800228c:	20000818 	.word	0x20000818
 8002290:	2000081c 	.word	0x2000081c
 8002294:	20000812 	.word	0x20000812

	case ME_GENERAL_JVJ:
		modo_de_juego = 1;
 8002298:	4b90      	ldr	r3, [pc, #576]	; (80024dc <ME_general+0x87c>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]

		if (sub_estado == 0) {
 800229e:	4b90      	ldr	r3, [pc, #576]	; (80024e0 <ME_general+0x880>)
 80022a0:	f993 3000 	ldrsb.w	r3, [r3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d170      	bne.n	800238a <ME_general+0x72a>
			msg = lcd_msg_clear();
 80022a8:	463b      	mov	r3, r7
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fa01 	bl	80006b2 <lcd_msg_clear>
 80022b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022b4:	463d      	mov	r5, r7
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022be:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <ME_general+0x884>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022ca:	2300      	movs	r3, #0
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	f004 ffb8 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80022d4:	463b      	mov	r3, r7
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fa0d 	bl	80006f6 <lcd_msg_first_line>
 80022dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022e0:	463d      	mov	r5, r7
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ea:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80022ee:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <ME_general+0x884>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022f6:	2300      	movs	r3, #0
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	f004 ffa2 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_from_string("Ver Tiempos");
 8002300:	463b      	mov	r3, r7
 8002302:	4979      	ldr	r1, [pc, #484]	; (80024e8 <ME_general+0x888>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f99c 	bl	8000642 <lcd_msg_from_string>
 800230a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800230e:	463d      	mov	r5, r7
 8002310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002314:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002318:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800231c:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <ME_general+0x884>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002324:	2300      	movs	r3, #0
 8002326:	f04f 32ff 	mov.w	r2, #4294967295
 800232a:	f004 ff8b 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 800232e:	463b      	mov	r3, r7
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fa02 	bl	800073a <lcd_msg_second_line>
 8002336:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800233a:	463d      	mov	r5, r7
 800233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002340:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002344:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002348:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <ME_general+0x884>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002350:	2300      	movs	r3, #0
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	f004 ff75 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 800235a:	463b      	mov	r3, r7
 800235c:	4963      	ldr	r1, [pc, #396]	; (80024ec <ME_general+0x88c>)
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f96f 	bl	8000642 <lcd_msg_from_string>
 8002364:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002368:	463d      	mov	r5, r7
 800236a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800236c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002372:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <ME_general+0x884>)
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800237e:	2300      	movs	r3, #0
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	f004 ff5e 	bl	8007244 <xQueueGenericSend>
 8002388:	e072      	b.n	8002470 <ME_general+0x810>
		} else {
			mostrar_tiempo = 0;
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <ME_general+0x890>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			msg = lcd_msg_clear();
 8002390:	463b      	mov	r3, r7
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f98d 	bl	80006b2 <lcd_msg_clear>
 8002398:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800239c:	463d      	mov	r5, r7
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023a6:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80023aa:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <ME_general+0x884>)
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023b2:	2300      	movs	r3, #0
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	f004 ff44 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_first_line();
 80023bc:	463b      	mov	r3, r7
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f999 	bl	80006f6 <lcd_msg_first_line>
 80023c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023c8:	463d      	mov	r5, r7
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023d2:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <ME_general+0x884>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023de:	2300      	movs	r3, #0
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	f004 ff2e 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_from_string("Modo Reset");
 80023e8:	463b      	mov	r3, r7
 80023ea:	4942      	ldr	r1, [pc, #264]	; (80024f4 <ME_general+0x894>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f928 	bl	8000642 <lcd_msg_from_string>
 80023f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023f6:	463d      	mov	r5, r7
 80023f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002400:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <ME_general+0x884>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800240c:	2300      	movs	r3, #0
 800240e:	f04f 32ff 	mov.w	r2, #4294967295
 8002412:	f004 ff17 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_second_line();
 8002416:	463b      	mov	r3, r7
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f98e 	bl	800073a <lcd_msg_second_line>
 800241e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002422:	463d      	mov	r5, r7
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002428:	e895 0003 	ldmia.w	r5, {r0, r1}
 800242c:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <ME_general+0x884>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002438:	2300      	movs	r3, #0
 800243a:	f04f 32ff 	mov.w	r2, #4294967295
 800243e:	f004 ff01 	bl	8007244 <xQueueGenericSend>
			msg = lcd_msg_from_string("Boton Verde");
 8002442:	463b      	mov	r3, r7
 8002444:	4929      	ldr	r1, [pc, #164]	; (80024ec <ME_general+0x88c>)
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f8fb 	bl	8000642 <lcd_msg_from_string>
 800244c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002450:	463d      	mov	r5, r7
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800245a:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800245e:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <ME_general+0x884>)
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002466:	2300      	movs	r3, #0
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	f004 feea 	bl	8007244 <xQueueGenericSend>
		}

		if (button == 3) {
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d116      	bne.n	80024a4 <ME_general+0x844>
			if (sub_estado == 1) {
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <ME_general+0x880>)
 8002478:	f993 3000 	ldrsb.w	r3, [r3]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <ME_general+0x82c>
				user_init();
 8002480:	f000 f90c 	bl	800269c <user_init>
				estado = ME_GENERAL_RESET;
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <ME_general+0x898>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e002      	b.n	8002492 <ME_general+0x832>
			} else {
				mostrar_tiempo = 1;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <ME_general+0x890>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]

			}

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <ME_general+0x89c>)
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800249a:	2300      	movs	r3, #0
 800249c:	2200      	movs	r2, #0
 800249e:	f004 fed1 	bl	8007244 <xQueueGenericSend>
		} else if (button != 0) {
			sub_estado = !sub_estado;

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
		}
		break;
 80024a2:	e0b7      	b.n	8002614 <ME_general+0x9b4>
		} else if (button != 0) {
 80024a4:	7ffb      	ldrb	r3, [r7, #31]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80b4 	beq.w	8002614 <ME_general+0x9b4>
			sub_estado = !sub_estado;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <ME_general+0x880>)
 80024ae:	f993 3000 	ldrsb.w	r3, [r3]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	b25a      	sxtb	r2, r3
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <ME_general+0x880>)
 80024c0:	701a      	strb	r2, [r3, #0]
			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <ME_general+0x89c>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80024ca:	2300      	movs	r3, #0
 80024cc:	2200      	movs	r2, #0
 80024ce:	f004 feb9 	bl	8007244 <xQueueGenericSend>
		break;
 80024d2:	e09f      	b.n	8002614 <ME_general+0x9b4>
	case ME_GENERAL_JVM:
		modo_de_juego = 2;
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <ME_general+0x87c>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
		break;
 80024da:	e09e      	b.n	800261a <ME_general+0x9ba>
 80024dc:	20000811 	.word	0x20000811
 80024e0:	20000820 	.word	0x20000820
 80024e4:	200004ac 	.word	0x200004ac
 80024e8:	080096d0 	.word	0x080096d0
 80024ec:	080096dc 	.word	0x080096dc
 80024f0:	20000812 	.word	0x20000812
 80024f4:	080096e8 	.word	0x080096e8
 80024f8:	20000810 	.word	0x20000810
 80024fc:	200004b0 	.word	0x200004b0
	case ME_GENERAL_FIN:
		modo_de_juego = 3;
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <ME_general+0x9c4>)
 8002502:	2203      	movs	r2, #3
 8002504:	701a      	strb	r2, [r3, #0]

		msg = lcd_msg_clear();
 8002506:	463b      	mov	r3, r7
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f8d2 	bl	80006b2 <lcd_msg_clear>
 800250e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002512:	463d      	mov	r5, r7
 8002514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002518:	e895 0003 	ldmia.w	r5, {r0, r1}
 800251c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <ME_general+0x9c8>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002528:	2300      	movs	r3, #0
 800252a:	f04f 32ff 	mov.w	r2, #4294967295
 800252e:	f004 fe89 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002532:	463b      	mov	r3, r7
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f8de 	bl	80006f6 <lcd_msg_first_line>
 800253a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800253e:	463d      	mov	r5, r7
 8002540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002544:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002548:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <ME_general+0x9c8>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002554:	2300      	movs	r3, #0
 8002556:	f04f 32ff 	mov.w	r2, #4294967295
 800255a:	f004 fe73 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Juego Terminado");
 800255e:	463b      	mov	r3, r7
 8002560:	4932      	ldr	r1, [pc, #200]	; (800262c <ME_general+0x9cc>)
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f86d 	bl	8000642 <lcd_msg_from_string>
 8002568:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800256c:	463d      	mov	r5, r7
 800256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002576:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <ME_general+0x9c8>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002582:	2300      	movs	r3, #0
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	f004 fe5c 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 800258c:	463b      	mov	r3, r7
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe f8d3 	bl	800073a <lcd_msg_second_line>
 8002594:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002598:	463d      	mov	r5, r7
 800259a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025a2:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <ME_general+0x9c8>)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025ae:	2300      	movs	r3, #0
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	f004 fe46 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Btn Verde-Start");
 80025b8:	463b      	mov	r3, r7
 80025ba:	491d      	ldr	r1, [pc, #116]	; (8002630 <ME_general+0x9d0>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe f840 	bl	8000642 <lcd_msg_from_string>
 80025c2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025c6:	463d      	mov	r5, r7
 80025c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025d0:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <ME_general+0x9c8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025dc:	2300      	movs	r3, #0
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	f004 fe2f 	bl	8007244 <xQueueGenericSend>

		if (button == 3) {
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d115      	bne.n	8002618 <ME_general+0x9b8>
			user_init();
 80025ec:	f000 f856 	bl	800269c <user_init>
			estado = ME_GENERAL_RESET;
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <ME_general+0x9d4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

			xQueueSend(buttons_queue, &aux_button, 0); // Actualizo ME
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <ME_general+0x9d8>)
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80025fe:	2300      	movs	r3, #0
 8002600:	2200      	movs	r2, #0
 8002602:	f004 fe1f 	bl	8007244 <xQueueGenericSend>
		}
		break;
 8002606:	e007      	b.n	8002618 <ME_general+0x9b8>
		break;
 8002608:	bf00      	nop
 800260a:	e006      	b.n	800261a <ME_general+0x9ba>
		break;
 800260c:	bf00      	nop
 800260e:	e004      	b.n	800261a <ME_general+0x9ba>
		break;
 8002610:	bf00      	nop
 8002612:	e002      	b.n	800261a <ME_general+0x9ba>
		break;
 8002614:	bf00      	nop
 8002616:	e000      	b.n	800261a <ME_general+0x9ba>
		break;
 8002618:	bf00      	nop
	}
}
 800261a:	bf00      	nop
 800261c:	3740      	adds	r7, #64	; 0x40
 800261e:	46bd      	mov	sp, r7
 8002620:	bdb0      	pop	{r4, r5, r7, pc}
 8002622:	bf00      	nop
 8002624:	20000811 	.word	0x20000811
 8002628:	200004ac 	.word	0x200004ac
 800262c:	080096f4 	.word	0x080096f4
 8002630:	08009638 	.word	0x08009638
 8002634:	20000810 	.word	0x20000810
 8002638:	200004b0 	.word	0x200004b0

0800263c <t_WS2812>:

void t_WS2812(void*) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

	if (ws2812_sem == NULL) {
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <t_WS2812+0x44>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <t_WS2812+0x16>
		tareas_error_handler(2);
 800264c:	2002      	movs	r0, #2
 800264e:	f000 f81d 	bl	800268c <tareas_error_handler>
	}

	ws2812_init();
 8002652:	f000 ff85 	bl	8003560 <ws2812_init>

	while (1) {
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <t_WS2812+0x44>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f04f 31ff 	mov.w	r1, #4294967295
 800265e:	4618      	mov	r0, r3
 8002660:	f004 ffce 	bl	8007600 <xQueueSemaphoreTake>
		ws2812_update_leds_from_data(user_htim1);
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <t_WS2812+0x48>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f001 f81b 	bl	80036a4 <ws2812_update_leds_from_data>
		while (!ws2812_finished_dma) {
 800266e:	e002      	b.n	8002676 <t_WS2812+0x3a>
			vTaskDelay(5);
 8002670:	2005      	movs	r0, #5
 8002672:	f005 fc3f 	bl	8007ef4 <vTaskDelay>
		while (!ws2812_finished_dma) {
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <t_WS2812+0x4c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f8      	beq.n	8002670 <t_WS2812+0x34>
		xSemaphoreTake(ws2812_sem, portMAX_DELAY);
 800267e:	e7ea      	b.n	8002656 <t_WS2812+0x1a>
 8002680:	200004b4 	.word	0x200004b4
 8002684:	20000824 	.word	0x20000824
 8002688:	200016a4 	.word	0x200016a4

0800268c <tareas_error_handler>:
		}

	}
}

void tareas_error_handler(uint8_t error) {
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002696:	b672      	cpsid	i
}
 8002698:	bf00      	nop
	__disable_irq();
	while (1) {
		UNUSED(error);
 800269a:	e7fe      	b.n	800269a <tareas_error_handler+0xe>

0800269c <user_init>:
extern xQueueHandle lcd_queue;

extern game_state_t game_state;
extern char lighting_state;

void user_init() {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	//game_set_sensor_reader((sensor_reader_t) reed_scan_sensors);

	game_set_led_output_array(ws2812_color_data);
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <user_init+0x14>)
 80026a2:	f7fe f947 	bl	8000934 <game_set_led_output_array>

	game_reset();
 80026a6:	f7fe f958 	bl	800095a <game_reset>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200015a4 	.word	0x200015a4

080026b4 <get_side_to_move>:

uint8_t get_side_to_move()
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
	return (game_state.side_to_move == WHITE ? 0 : 1);
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <get_side_to_move+0x20>)
 80026ba:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000828 	.word	0x20000828

080026d8 <get_error_position>:

uint8_t get_error_position()
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	return (lighting_state == LIGHTING_ERROR_STATE ? 1 : 0);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <get_error_position+0x1c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	200016a5 	.word	0x200016a5

080026f8 <get_promotion>:

piece_t get_promotion() {
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0

	LCDQueueItem_t msg = { 0 };
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
	uint8_t button = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	76fb      	strb	r3, [r7, #27]
	piece_t piece = QUEEN;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 */

	//xQueueReset(buttons_queue); // Borro mensajes si habia alguna pulsada de boton pendiente

	while (1) {
		msg = lcd_msg_clear();
 800271a:	463b      	mov	r3, r7
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ffc8 	bl	80006b2 <lcd_msg_clear>
 8002722:	f107 041c 	add.w	r4, r7, #28
 8002726:	463d      	mov	r5, r7
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002730:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002734:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <get_promotion+0x22c>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	f107 011c 	add.w	r1, r7, #28
 800273c:	2300      	movs	r3, #0
 800273e:	f04f 32ff 	mov.w	r2, #4294967295
 8002742:	f004 fd7f 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_first_line();
 8002746:	463b      	mov	r3, r7
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd ffd4 	bl	80006f6 <lcd_msg_first_line>
 800274e:	f107 041c 	add.w	r4, r7, #28
 8002752:	463d      	mov	r5, r7
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800275c:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002760:	4b70      	ldr	r3, [pc, #448]	; (8002924 <get_promotion+0x22c>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	f107 011c 	add.w	r1, r7, #28
 8002768:	2300      	movs	r3, #0
 800276a:	f04f 32ff 	mov.w	r2, #4294967295
 800276e:	f004 fd69 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_from_string("Elija pieza:");
 8002772:	463b      	mov	r3, r7
 8002774:	496c      	ldr	r1, [pc, #432]	; (8002928 <get_promotion+0x230>)
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd ff63 	bl	8000642 <lcd_msg_from_string>
 800277c:	f107 041c 	add.w	r4, r7, #28
 8002780:	463d      	mov	r5, r7
 8002782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002786:	e895 0003 	ldmia.w	r5, {r0, r1}
 800278a:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <get_promotion+0x22c>)
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f107 011c 	add.w	r1, r7, #28
 8002796:	2300      	movs	r3, #0
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	f004 fd52 	bl	8007244 <xQueueGenericSend>
		msg = lcd_msg_second_line();
 80027a0:	463b      	mov	r3, r7
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd ffc9 	bl	800073a <lcd_msg_second_line>
 80027a8:	f107 041c 	add.w	r4, r7, #28
 80027ac:	463d      	mov	r5, r7
 80027ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027b6:	e884 0003 	stmia.w	r4, {r0, r1}
		xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <get_promotion+0x22c>)
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	f107 011c 	add.w	r1, r7, #28
 80027c2:	2300      	movs	r3, #0
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	f004 fd3c 	bl	8007244 <xQueueGenericSend>
		switch (piece) {
 80027cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80027d0:	3b01      	subs	r3, #1
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d86a      	bhi.n	80028ac <get_promotion+0x1b4>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <get_promotion+0xe4>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	0800281d 	.word	0x0800281d
 80027e4:	0800287d 	.word	0x0800287d
 80027e8:	0800284d 	.word	0x0800284d
		case QUEEN:
			msg = lcd_msg_from_string("-> Reina");
 80027ec:	463b      	mov	r3, r7
 80027ee:	494f      	ldr	r1, [pc, #316]	; (800292c <get_promotion+0x234>)
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd ff26 	bl	8000642 <lcd_msg_from_string>
 80027f6:	f107 041c 	add.w	r4, r7, #28
 80027fa:	463d      	mov	r5, r7
 80027fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002804:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002808:	4b46      	ldr	r3, [pc, #280]	; (8002924 <get_promotion+0x22c>)
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f107 011c 	add.w	r1, r7, #28
 8002810:	2300      	movs	r3, #0
 8002812:	f04f 32ff 	mov.w	r2, #4294967295
 8002816:	f004 fd15 	bl	8007244 <xQueueGenericSend>
			break;
 800281a:	e047      	b.n	80028ac <get_promotion+0x1b4>
		case ROOK:
			msg = lcd_msg_from_string("-> Torre");
 800281c:	463b      	mov	r3, r7
 800281e:	4944      	ldr	r1, [pc, #272]	; (8002930 <get_promotion+0x238>)
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd ff0e 	bl	8000642 <lcd_msg_from_string>
 8002826:	f107 041c 	add.w	r4, r7, #28
 800282a:	463d      	mov	r5, r7
 800282c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002830:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002834:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <get_promotion+0x22c>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f107 011c 	add.w	r1, r7, #28
 8002840:	2300      	movs	r3, #0
 8002842:	f04f 32ff 	mov.w	r2, #4294967295
 8002846:	f004 fcfd 	bl	8007244 <xQueueGenericSend>
			break;
 800284a:	e02f      	b.n	80028ac <get_promotion+0x1b4>
		case KNIGHT:
			msg = lcd_msg_from_string("-> Caballo");
 800284c:	463b      	mov	r3, r7
 800284e:	4939      	ldr	r1, [pc, #228]	; (8002934 <get_promotion+0x23c>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fef6 	bl	8000642 <lcd_msg_from_string>
 8002856:	f107 041c 	add.w	r4, r7, #28
 800285a:	463d      	mov	r5, r7
 800285c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800285e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002864:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <get_promotion+0x22c>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 011c 	add.w	r1, r7, #28
 8002870:	2300      	movs	r3, #0
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	f004 fce5 	bl	8007244 <xQueueGenericSend>
			break;
 800287a:	e017      	b.n	80028ac <get_promotion+0x1b4>
		case BISHOP:
			msg = lcd_msg_from_string("-> Alfil");
 800287c:	463b      	mov	r3, r7
 800287e:	492e      	ldr	r1, [pc, #184]	; (8002938 <get_promotion+0x240>)
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fede 	bl	8000642 <lcd_msg_from_string>
 8002886:	f107 041c 	add.w	r4, r7, #28
 800288a:	463d      	mov	r5, r7
 800288c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002890:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002894:	e884 0003 	stmia.w	r4, {r0, r1}
			xQueueSend(lcd_queue, (void* )&msg, portMAX_DELAY);
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <get_promotion+0x22c>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	f107 011c 	add.w	r1, r7, #28
 80028a0:	2300      	movs	r3, #0
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	f004 fccd 	bl	8007244 <xQueueGenericSend>
			break;
 80028aa:	bf00      	nop
		default:
		}
		xQueueReceive(buttons_queue, &button, portMAX_DELAY);
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <get_promotion+0x244>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f107 011b 	add.w	r1, r7, #27
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fdc1 	bl	8007440 <xQueueReceive>

		switch (button) {
 80028be:	7efb      	ldrb	r3, [r7, #27]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d023      	beq.n	800290c <get_promotion+0x214>
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	dc22      	bgt.n	800290e <get_promotion+0x216>
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d010      	beq.n	80028ee <get_promotion+0x1f6>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d11e      	bne.n	800290e <get_promotion+0x216>
		case 3: // Boton verde, salgo del while con la ultima pieza seleccionada
			break;
		case 2: // Cambio de pieza "ascendentemente"
			piece++;
 80028d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028d4:	3301      	adds	r3, #1
 80028d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece > 4) // Salteo el peon
 80028da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d902      	bls.n	80028e8 <get_promotion+0x1f0>
				piece = 1; // Salteo el rey
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	76fb      	strb	r3, [r7, #27]
			break;
 80028ec:	e00f      	b.n	800290e <get_promotion+0x216>
		case 1: // Cambio de pieza "descendentemente"
			piece--;
 80028ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (piece < 1) // Salteo el rey
 80028f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <get_promotion+0x20e>
				piece = 4; // Salteon el peon
 8002900:	2304      	movs	r3, #4
 8002902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			button = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	76fb      	strb	r3, [r7, #27]
			break;
 800290a:	e000      	b.n	800290e <get_promotion+0x216>
			break;
 800290c:	bf00      	nop
		}

		if (button)
 800290e:	7efb      	ldrb	r3, [r7, #27]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d100      	bne.n	8002916 <get_promotion+0x21e>
		msg = lcd_msg_clear();
 8002914:	e701      	b.n	800271a <get_promotion+0x22>
			break;
 8002916:	bf00      	nop
	}

	return piece;
 8002918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	200004ac 	.word	0x200004ac
 8002928:	08009704 	.word	0x08009704
 800292c:	08009714 	.word	0x08009714
 8002930:	08009720 	.word	0x08009720
 8002934:	0800972c 	.word	0x0800972c
 8002938:	08009738 	.word	0x08009738
 800293c:	200004b0 	.word	0x200004b0

08002940 <user_loop>:

uint8_t sensor_data[64];

void user_loop() {
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	game_fsm();
 8002944:	f7fe f801 	bl	800094a <game_fsm>
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <clear_game_state>:
#include "engine/board.h"

#include <stdio.h>


int clear_game_state(game_state_t * state){
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 128; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e00d      	b.n	8002976 <clear_game_state+0x2a>
        state->color[i] = COLOR_EMPTY;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	3380      	adds	r3, #128	; 0x80
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
        state->pieces[i] = PIECE_EMPTY;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	2206      	movs	r2, #6
 800296e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 128; i++){
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3301      	adds	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b7f      	cmp	r3, #127	; 0x7f
 800297a:	ddee      	ble.n	800295a <clear_game_state+0xe>
    }
    return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <place_piece>:

int place_piece(game_state_t * state, piece_t piece, color_t color, uint8_t square){
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	4608      	mov	r0, r1
 8002994:	4611      	mov	r1, r2
 8002996:	461a      	mov	r2, r3
 8002998:	4603      	mov	r3, r0
 800299a:	70fb      	strb	r3, [r7, #3]
 800299c:	460b      	mov	r3, r1
 800299e:	70bb      	strb	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
    state->pieces[square] = piece;
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	78f9      	ldrb	r1, [r7, #3]
 80029aa:	54d1      	strb	r1, [r2, r3]
    state->color[square] = color;
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	78ba      	ldrb	r2, [r7, #2]
 80029b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <remove_piece>:

int remove_piece(game_state_t * state, uint8_t square){
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70fb      	strb	r3, [r7, #3]
    state->pieces[square] = PIECE_EMPTY;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	2106      	movs	r1, #6
 80029d8:	54d1      	strb	r1, [r2, r3]
    state->color[square] = COLOR_EMPTY;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return 1;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <engine_reset>:
#include "engine/interface.h"
#include <stdint.h>

game_state_t game_state;

void engine_reset(){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
    load_fen(&game_state, STARTFEN);
 80029f8:	4902      	ldr	r1, [pc, #8]	; (8002a04 <engine_reset+0x10>)
 80029fa:	4803      	ldr	r0, [pc, #12]	; (8002a08 <engine_reset+0x14>)
 80029fc:	f000 f838 	bl	8002a70 <load_fen>
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08009744 	.word	0x08009744
 8002a08:	20000828 	.word	0x20000828

08002a0c <engine_move_piece>:

char engine_move_piece(move_t move){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    return make_move(&game_state, move, 1);
 8002a14:	2201      	movs	r2, #1
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <engine_move_piece+0x20>)
 8002a1a:	f000 f9d7 	bl	8002dcc <make_move>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b2db      	uxtb	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000828 	.word	0x20000828

08002a30 <engine_list_moves>:

int engine_list_moves(move_t * moves){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    return generate_moves(&game_state, moves);
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <engine_list_moves+0x1c>)
 8002a3c:	f000 fae0 	bl	8003000 <generate_moves>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000828 	.word	0x20000828

08002a50 <engine_get_piece>:

char engine_get_piece(uint8_t square){
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
    return game_state.pieces[square];
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <engine_get_piece+0x1c>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	20000828 	.word	0x20000828

08002a70 <load_fen>:
#include "engine/moves.h"

#include <stdio.h>


int load_fen(game_state_t * state, const char * fen) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]

    clear_game_state(state);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff66 	bl	800294c <clear_game_state>

    char * f = (char *)fen;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

    char col = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	72fb      	strb	r3, [r7, #11]
    char row = 7;
 8002a88:	2307      	movs	r3, #7
 8002a8a:	72bb      	strb	r3, [r7, #10]

    do {
        switch( f[0] ) {
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3b2f      	subs	r3, #47	; 0x2f
 8002a92:	2b43      	cmp	r3, #67	; 0x43
 8002a94:	f200 8166 	bhi.w	8002d64 <load_fen+0x2f4>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <load_fen+0x30>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002d19 	.word	0x08002d19
 8002aa4:	08002d65 	.word	0x08002d65
 8002aa8:	08002d25 	.word	0x08002d25
 8002aac:	08002d2d 	.word	0x08002d2d
 8002ab0:	08002d35 	.word	0x08002d35
 8002ab4:	08002d3d 	.word	0x08002d3d
 8002ab8:	08002d45 	.word	0x08002d45
 8002abc:	08002d4d 	.word	0x08002d4d
 8002ac0:	08002d55 	.word	0x08002d55
 8002ac4:	08002d5d 	.word	0x08002d5d
 8002ac8:	08002d65 	.word	0x08002d65
 8002acc:	08002d65 	.word	0x08002d65
 8002ad0:	08002d65 	.word	0x08002d65
 8002ad4:	08002d65 	.word	0x08002d65
 8002ad8:	08002d65 	.word	0x08002d65
 8002adc:	08002d65 	.word	0x08002d65
 8002ae0:	08002d65 	.word	0x08002d65
 8002ae4:	08002d65 	.word	0x08002d65
 8002ae8:	08002d65 	.word	0x08002d65
 8002aec:	08002c0b 	.word	0x08002c0b
 8002af0:	08002d65 	.word	0x08002d65
 8002af4:	08002d65 	.word	0x08002d65
 8002af8:	08002d65 	.word	0x08002d65
 8002afc:	08002d65 	.word	0x08002d65
 8002b00:	08002d65 	.word	0x08002d65
 8002b04:	08002d65 	.word	0x08002d65
 8002b08:	08002d65 	.word	0x08002d65
 8002b0c:	08002d65 	.word	0x08002d65
 8002b10:	08002bb1 	.word	0x08002bb1
 8002b14:	08002d65 	.word	0x08002d65
 8002b18:	08002d65 	.word	0x08002d65
 8002b1c:	08002c29 	.word	0x08002c29
 8002b20:	08002d65 	.word	0x08002d65
 8002b24:	08002c47 	.word	0x08002c47
 8002b28:	08002bcf 	.word	0x08002bcf
 8002b2c:	08002bed 	.word	0x08002bed
 8002b30:	08002d65 	.word	0x08002d65
 8002b34:	08002d65 	.word	0x08002d65
 8002b38:	08002d65 	.word	0x08002d65
 8002b3c:	08002d65 	.word	0x08002d65
 8002b40:	08002d65 	.word	0x08002d65
 8002b44:	08002d65 	.word	0x08002d65
 8002b48:	08002d65 	.word	0x08002d65
 8002b4c:	08002d65 	.word	0x08002d65
 8002b50:	08002d65 	.word	0x08002d65
 8002b54:	08002d65 	.word	0x08002d65
 8002b58:	08002d65 	.word	0x08002d65
 8002b5c:	08002d65 	.word	0x08002d65
 8002b60:	08002d65 	.word	0x08002d65
 8002b64:	08002d65 	.word	0x08002d65
 8002b68:	08002d65 	.word	0x08002d65
 8002b6c:	08002cbf 	.word	0x08002cbf
 8002b70:	08002d65 	.word	0x08002d65
 8002b74:	08002d65 	.word	0x08002d65
 8002b78:	08002d65 	.word	0x08002d65
 8002b7c:	08002d65 	.word	0x08002d65
 8002b80:	08002d65 	.word	0x08002d65
 8002b84:	08002d65 	.word	0x08002d65
 8002b88:	08002d65 	.word	0x08002d65
 8002b8c:	08002d65 	.word	0x08002d65
 8002b90:	08002c65 	.word	0x08002c65
 8002b94:	08002d65 	.word	0x08002d65
 8002b98:	08002d65 	.word	0x08002d65
 8002b9c:	08002cdd 	.word	0x08002cdd
 8002ba0:	08002d65 	.word	0x08002d65
 8002ba4:	08002cfb 	.word	0x08002cfb
 8002ba8:	08002c83 	.word	0x08002c83
 8002bac:	08002ca1 	.word	0x08002ca1
        case 'K':
            place_piece(state, KING, WHITE, COORD2SQ(row, col));
 8002bb0:	7abb      	ldrb	r3, [r7, #10]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	4413      	add	r3, r2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fee2 	bl	800298a <place_piece>
            col++;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	72fb      	strb	r3, [r7, #11]
            break;
 8002bcc:	e0ca      	b.n	8002d64 <load_fen+0x2f4>
        case 'Q':
            place_piece(state, QUEEN, WHITE, COORD2SQ(row, col));
 8002bce:	7abb      	ldrb	r3, [r7, #10]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2101      	movs	r1, #1
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fed3 	bl	800298a <place_piece>
            col++;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	3301      	adds	r3, #1
 8002be8:	72fb      	strb	r3, [r7, #11]
            break;
 8002bea:	e0bb      	b.n	8002d64 <load_fen+0x2f4>
        case 'R':
            place_piece(state, ROOK, WHITE, COORD2SQ(row, col));
 8002bec:	7abb      	ldrb	r3, [r7, #10]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fec4 	bl	800298a <place_piece>
            col++;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	3301      	adds	r3, #1
 8002c06:	72fb      	strb	r3, [r7, #11]
            break;
 8002c08:	e0ac      	b.n	8002d64 <load_fen+0x2f4>
        case 'B':
            place_piece(state, BISHOP, WHITE, COORD2SQ(row, col));
 8002c0a:	7abb      	ldrb	r3, [r7, #10]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	4413      	add	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2200      	movs	r2, #0
 8002c18:	2103      	movs	r1, #3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feb5 	bl	800298a <place_piece>
            col++;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	3301      	adds	r3, #1
 8002c24:	72fb      	strb	r3, [r7, #11]
            break;
 8002c26:	e09d      	b.n	8002d64 <load_fen+0x2f4>
        case 'N':
            place_piece(state, KNIGHT, WHITE, COORD2SQ(row, col));
 8002c28:	7abb      	ldrb	r3, [r7, #10]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	2104      	movs	r1, #4
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fea6 	bl	800298a <place_piece>
            col++;
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	3301      	adds	r3, #1
 8002c42:	72fb      	strb	r3, [r7, #11]
            break;
 8002c44:	e08e      	b.n	8002d64 <load_fen+0x2f4>
        case 'P':
            place_piece(state, PAWN, WHITE, COORD2SQ(row, col));
 8002c46:	7abb      	ldrb	r3, [r7, #10]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	4413      	add	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	2105      	movs	r1, #5
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fe97 	bl	800298a <place_piece>
            col++;
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	72fb      	strb	r3, [r7, #11]
            break;
 8002c62:	e07f      	b.n	8002d64 <load_fen+0x2f4>
        case 'k':
            place_piece(state, KING, BLACK, COORD2SQ(row, col));
 8002c64:	7abb      	ldrb	r3, [r7, #10]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2201      	movs	r2, #1
 8002c72:	2100      	movs	r1, #0
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fe88 	bl	800298a <place_piece>
            col++;
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	72fb      	strb	r3, [r7, #11]
            break;
 8002c80:	e070      	b.n	8002d64 <load_fen+0x2f4>
        case 'q':
            place_piece(state, QUEEN, BLACK, COORD2SQ(row, col));
 8002c82:	7abb      	ldrb	r3, [r7, #10]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2101      	movs	r1, #1
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe79 	bl	800298a <place_piece>
            col++;
 8002c98:	7afb      	ldrb	r3, [r7, #11]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	72fb      	strb	r3, [r7, #11]
            break;
 8002c9e:	e061      	b.n	8002d64 <load_fen+0x2f4>
        case 'r':
            place_piece(state, ROOK, BLACK, COORD2SQ(row, col));
 8002ca0:	7abb      	ldrb	r3, [r7, #10]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2201      	movs	r2, #1
 8002cae:	2102      	movs	r1, #2
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fe6a 	bl	800298a <place_piece>
            col++;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	72fb      	strb	r3, [r7, #11]
            break;
 8002cbc:	e052      	b.n	8002d64 <load_fen+0x2f4>
        case 'b':
            place_piece(state, BISHOP, BLACK, COORD2SQ(row, col));
 8002cbe:	7abb      	ldrb	r3, [r7, #10]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2103      	movs	r1, #3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fe5b 	bl	800298a <place_piece>
            col++;
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	72fb      	strb	r3, [r7, #11]
            break;
 8002cda:	e043      	b.n	8002d64 <load_fen+0x2f4>
        case 'n':
            place_piece(state, KNIGHT, BLACK, COORD2SQ(row, col));
 8002cdc:	7abb      	ldrb	r3, [r7, #10]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2104      	movs	r1, #4
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fe4c 	bl	800298a <place_piece>
            col++;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	72fb      	strb	r3, [r7, #11]
            break;
 8002cf8:	e034      	b.n	8002d64 <load_fen+0x2f4>
        case 'p':
            place_piece(state, PAWN, BLACK, COORD2SQ(row, col));
 8002cfa:	7abb      	ldrb	r3, [r7, #10]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	4413      	add	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2201      	movs	r2, #1
 8002d08:	2105      	movs	r1, #5
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fe3d 	bl	800298a <place_piece>
            col++;
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	3301      	adds	r3, #1
 8002d14:	72fb      	strb	r3, [r7, #11]
            break;
 8002d16:	e025      	b.n	8002d64 <load_fen+0x2f4>
        case '/':
            row--;
 8002d18:	7abb      	ldrb	r3, [r7, #10]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	72bb      	strb	r3, [r7, #10]
            col=0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	72fb      	strb	r3, [r7, #11]
            break;
 8002d22:	e01f      	b.n	8002d64 <load_fen+0x2f4>
        case '1':
            col+=1;
 8002d24:	7afb      	ldrb	r3, [r7, #11]
 8002d26:	3301      	adds	r3, #1
 8002d28:	72fb      	strb	r3, [r7, #11]
            break;
 8002d2a:	e01b      	b.n	8002d64 <load_fen+0x2f4>
        case '2':
            col+=2;
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	3302      	adds	r3, #2
 8002d30:	72fb      	strb	r3, [r7, #11]
            break;
 8002d32:	e017      	b.n	8002d64 <load_fen+0x2f4>
        case '3':
            col+=3;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	3303      	adds	r3, #3
 8002d38:	72fb      	strb	r3, [r7, #11]
            break;
 8002d3a:	e013      	b.n	8002d64 <load_fen+0x2f4>
        case '4':
            col+=4;
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	72fb      	strb	r3, [r7, #11]
            break;
 8002d42:	e00f      	b.n	8002d64 <load_fen+0x2f4>
        case '5':
            col+=5;
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	3305      	adds	r3, #5
 8002d48:	72fb      	strb	r3, [r7, #11]
            break;
 8002d4a:	e00b      	b.n	8002d64 <load_fen+0x2f4>
        case '6':
            col+=6;
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	3306      	adds	r3, #6
 8002d50:	72fb      	strb	r3, [r7, #11]
            break;
 8002d52:	e007      	b.n	8002d64 <load_fen+0x2f4>
        case '7':
            col+=7;
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	3307      	adds	r3, #7
 8002d58:	72fb      	strb	r3, [r7, #11]
            break;
 8002d5a:	e003      	b.n	8002d64 <load_fen+0x2f4>
        case '8':
            col+=8;
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	72fb      	strb	r3, [r7, #11]
            break;
 8002d62:	bf00      	nop
        };

        f++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
    } while ( f[0] != ' ' );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	f47f ae8c 	bne.w	8002a8c <load_fen+0x1c>

    f++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]

    if (f[0]=='w') {
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b77      	cmp	r3, #119	; 0x77
 8002d80:	d104      	bne.n	8002d8c <load_fen+0x31c>
        state->side_to_move = WHITE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8002d8a:	e003      	b.n	8002d94 <load_fen+0x324>
    } else {
        state->side_to_move = BLACK;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    f+=2;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3302      	adds	r3, #2
 8002d98:	60fb      	str	r3, [r7, #12]
        // case 'q':
        //     b.castle |= CASTLE_BQ;
        //     break;
        // }

        f++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
    } while (f[0] != ' ' );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d1f8      	bne.n	8002d9a <load_fen+0x32a>

    //b.hash ^= zobrist.castling[b.castle];

    f++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
    //     b.ep = convert_a_0x88(f);
    //     b.hash ^= zobrist.ep[b.ep];
    // }

    do {
        f++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
    }
    while (f[0] != ' ' );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d1f8      	bne.n	8002dae <load_fen+0x33e>
    f++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
	// b.ply = (unsigned char) ply;

    // b.rep_index = 0;
    // b.rep_stack[b.rep_index] = b.hash;

    return 1;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <make_move>:

//Determina si la pieza se desliza (K, Q, R, B, N)
uint8_t piece_can_slide[5] = {0, 1, 1, 1, 0};


int make_move(game_state_t * state, move_t move, uint8_t safe){
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002dd8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ddc:	6018      	str	r0, [r3, #0]
 8002dde:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002de2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002de6:	6019      	str	r1, [r3, #0]
 8002de8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002dec:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002df0:	701a      	strb	r2, [r3, #0]

    if(move.from == move.to)
 8002df2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002df6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e00:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d101      	bne.n	8002e0e <make_move+0x42>
        return 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e0eb      	b.n	8002fe6 <make_move+0x21a>

    if(safe){
 8002e0e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e12:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05d      	beq.n	8002ed8 <make_move+0x10c>
        uint8_t move_ok = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
        move_t moves[256];
        uint8_t nmoves = generate_moves(state, moves);
 8002e22:	f107 0214 	add.w	r2, r7, #20
 8002e26:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e2a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002e2e:	4611      	mov	r1, r2
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f000 f8e5 	bl	8003000 <generate_moves>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3315 	strb.w	r3, [r7, #789]	; 0x315
        for(uint8_t i = 0; i < nmoves; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002e42:	e03d      	b.n	8002ec0 <make_move+0xf4>
            if(moves[i].from == move.from && moves[i].to == move.to){
 8002e44:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e48:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e4c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e5e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d126      	bne.n	8002eb6 <make_move+0xea>
 8002e68:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e70:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e84:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002e88:	785b      	ldrb	r3, [r3, #1]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <make_move+0xea>
                move_ok = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
                move.promotion = moves[i].promotion;
 8002e94:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002e98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002e9c:	f5a3 7141 	sub.w	r1, r3, #772	; 0x304
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002eb0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002eb4:	709a      	strb	r2, [r3, #2]
        for(uint8_t i = 0; i < nmoves; i++){
 8002eb6:	f897 3316 	ldrb.w	r3, [r7, #790]	; 0x316
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f887 3316 	strb.w	r3, [r7, #790]	; 0x316
 8002ec0:	f897 2316 	ldrb.w	r2, [r7, #790]	; 0x316
 8002ec4:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3bb      	bcc.n	8002e44 <make_move+0x78>
            }
        }
        if(!move_ok){
 8002ecc:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <make_move+0x10c>
            return 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e086      	b.n	8002fe6 <make_move+0x21a>
        }
    }

    state->side_to_move = (color_t)(1 - (uint8_t)state->side_to_move);
 8002ed8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002edc:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002ee6:	f1c3 0301 	rsb	r3, r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002ef0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    if(state->pieces[move.to] != PIECE_EMPTY)   
 8002efa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002efe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f02:	785b      	ldrb	r3, [r3, #1]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f0a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	5c9b      	ldrb	r3, [r3, r2]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d00c      	beq.n	8002f30 <make_move+0x164>
        remove_piece(state, move.to);
 8002f16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f1a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f1e:	785a      	ldrb	r2, [r3, #1]
 8002f20:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f24:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f28:	4611      	mov	r1, r2
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f7ff fd4b 	bl	80029c6 <remove_piece>

    if(move.promotion != 0)
 8002f30:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f34:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f38:	789b      	ldrb	r3, [r3, #2]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01f      	beq.n	8002f7e <make_move+0x1b2>
    {
        place_piece(state, check_promotion(), state->color[move.from], move.to);
 8002f3e:	f000 f857 	bl	8002ff0 <check_promotion>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461c      	mov	r4, r3
 8002f46:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f4a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f56:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002f62:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f66:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	f507 7146 	add.w	r1, r7, #792	; 0x318
 8002f70:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 8002f74:	4621      	mov	r1, r4
 8002f76:	6800      	ldr	r0, [r0, #0]
 8002f78:	f7ff fd07 	bl	800298a <place_piece>
 8002f7c:	e025      	b.n	8002fca <make_move+0x1fe>
    }
    else
    {
        place_piece(state, state->pieces[move.from], state->color[move.from], move.to);
 8002f7e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f82:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f8e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	5c99      	ldrb	r1, [r3, r2]
 8002f96:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002f9a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002fa6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002fb2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002fb6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8002fc0:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 8002fc4:	6800      	ldr	r0, [r0, #0]
 8002fc6:	f7ff fce0 	bl	800298a <place_piece>
    }

    remove_piece(state, move.from);
 8002fca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002fce:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002fd8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002fdc:	4611      	mov	r1, r2
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f7ff fcf1 	bl	80029c6 <remove_piece>
    return 1;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}

08002ff0 <check_promotion>:

/*
    Devuelve la pieza seleccionada para promoción.
*/
piece_t check_promotion()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    return get_promotion();
 8002ff4:	f7ff fb80 	bl	80026f8 <get_promotion>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <generate_moves>:
/*
Retorna todos los movimientos pseudo-legales para un estado.
Los movimientos pseudo-legales son los legales incluyendo los que dejan
al rey en jaque (que segun las reglas no es un movimiento legal)
*/
int generate_moves(game_state_t * state, move_t * moves){
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]

    uint16_t n_moves = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	82fb      	strh	r3, [r7, #22]

    for(int square = 0; square < 128; square++){
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e281      	b.n	8003518 <generate_moves+0x518>

        uint8_t piece_type = state->pieces[square];
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	737b      	strb	r3, [r7, #13]

        if(piece_type == PIECE_EMPTY) //Lugar vacio
 800301e:	7b7b      	ldrb	r3, [r7, #13]
 8003020:	2b06      	cmp	r3, #6
 8003022:	f000 8273 	beq.w	800350c <generate_moves+0x50c>
            continue;

        if(state->color[square] != state->side_to_move) //No corresponde al color que mueve en el turno
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	3380      	adds	r3, #128	; 0x80
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003036:	429a      	cmp	r2, r3
 8003038:	f040 826a 	bne.w	8003510 <generate_moves+0x510>
            continue;

        /*
        Los peones se mueven muy distino al resto de las piezas, lo tomo como caso separado
        */
        else if(piece_type == PAWN){
 800303c:	7b7b      	ldrb	r3, [r7, #13]
 800303e:	2b05      	cmp	r3, #5
 8003040:	f040 81e2 	bne.w	8003408 <generate_moves+0x408>
            if((state->side_to_move) == (WHITE)){//Peon blanco
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80ee 	bne.w	800322c <generate_moves+0x22c>
                if(IS_VALID(square + DIR_N)){
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3310      	adds	r3, #16
 8003054:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003058:	2b00      	cmp	r3, #0
 800305a:	d162      	bne.n	8003122 <generate_moves+0x122>
                    if(state->pieces[square + DIR_N] == PIECE_EMPTY){
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3310      	adds	r3, #16
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d15c      	bne.n	8003122 <generate_moves+0x122>
                        moves[n_moves].from = square;
 8003068:	8afa      	ldrh	r2, [r7, #22]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	8afa      	ldrh	r2, [r7, #22]
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	f101 0210 	add.w	r2, r1, #16
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003092:	8afa      	ldrh	r2, [r7, #22]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	2200      	movs	r2, #0
 80030a0:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80030a2:	8afa      	ldrh	r2, [r7, #22]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d107      	bne.n	80030c8 <generate_moves+0xc8>
                            moves[n_moves].promotion = 1;
 80030b8:	8afa      	ldrh	r2, [r7, #22]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	2201      	movs	r2, #1
 80030c6:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	3301      	adds	r3, #1
 80030cc:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_2 && state->pieces[square + DIR_NN] == PIECE_EMPTY){//Peon blanco sin mover con lugar vacio
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	111b      	asrs	r3, r3, #4
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d125      	bne.n	8003122 <generate_moves+0x122>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	3320      	adds	r3, #32
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d11f      	bne.n	8003122 <generate_moves+0x122>
                            moves[n_moves].from = square;
 80030e2:	8afa      	ldrh	r2, [r7, #22]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_NN;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	b2d9      	uxtb	r1, r3
 80030f8:	8afa      	ldrh	r2, [r7, #22]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	f101 0220 	add.w	r2, r1, #32
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;   
 800310c:	8afa      	ldrh	r2, [r7, #22]
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	709a      	strb	r2, [r3, #2]
                            n_moves++;
 800311c:	8afb      	ldrh	r3, [r7, #22]
 800311e:	3301      	adds	r3, #1
 8003120:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon blanco
                */
                if(IS_VALID(square + DIR_NE)){
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3311      	adds	r3, #17
 8003126:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800312a:	2b00      	cmp	r3, #0
 800312c:	d13a      	bne.n	80031a4 <generate_moves+0x1a4>
                    if(state->color[square + DIR_NE] == BLACK){
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	3311      	adds	r3, #17
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800313a:	2b01      	cmp	r3, #1
 800313c:	d132      	bne.n	80031a4 <generate_moves+0x1a4>
                        moves[n_moves].from = square;
 800313e:	8afa      	ldrh	r2, [r7, #22]
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NE;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b2d9      	uxtb	r1, r3
 8003154:	8afa      	ldrh	r2, [r7, #22]
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	4413      	add	r3, r2
 8003160:	f101 0211 	add.w	r2, r1, #17
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003168:	8afa      	ldrh	r2, [r7, #22]
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	2200      	movs	r2, #0
 8003176:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 8003178:	8afa      	ldrh	r2, [r7, #22]
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b07      	cmp	r3, #7
 800318c:	d107      	bne.n	800319e <generate_moves+0x19e>
                            moves[n_moves].promotion = 1;
 800318e:	8afa      	ldrh	r2, [r7, #22]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4413      	add	r3, r2
 800319a:	2201      	movs	r2, #1
 800319c:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 800319e:	8afb      	ldrh	r3, [r7, #22]
 80031a0:	3301      	adds	r3, #1
 80031a2:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_NW)){
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	330f      	adds	r3, #15
 80031a8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 81b0 	bne.w	8003512 <generate_moves+0x512>
                    if(state->color[square + DIR_NW] == BLACK){
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	330f      	adds	r3, #15
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 81a7 	bne.w	8003512 <generate_moves+0x512>
                        moves[n_moves].from = square;
 80031c4:	8afa      	ldrh	r2, [r7, #22]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_NW;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	b2d9      	uxtb	r1, r3
 80031da:	8afa      	ldrh	r2, [r7, #22]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	f101 020f 	add.w	r2, r1, #15
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80031ee:	8afa      	ldrh	r2, [r7, #22]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	2200      	movs	r2, #0
 80031fc:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_8)
 80031fe:	8afa      	ldrh	r2, [r7, #22]
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	4413      	add	r3, r2
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b07      	cmp	r3, #7
 8003212:	d107      	bne.n	8003224 <generate_moves+0x224>
                            moves[n_moves].promotion = 1;
 8003214:	8afa      	ldrh	r2, [r7, #22]
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4413      	add	r3, r2
 8003220:	2201      	movs	r2, #1
 8003222:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	3301      	adds	r3, #1
 8003228:	82fb      	strh	r3, [r7, #22]
 800322a:	e172      	b.n	8003512 <generate_moves+0x512>
                    }
                }
            } 
            else{//Peon negro
                if(IS_VALID(square + DIR_S)){
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3b10      	subs	r3, #16
 8003230:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003234:	2b00      	cmp	r3, #0
 8003236:	d162      	bne.n	80032fe <generate_moves+0x2fe>
                    if(state->pieces[square + DIR_S] == PIECE_EMPTY){
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3b10      	subs	r3, #16
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	2b06      	cmp	r3, #6
 8003242:	d15c      	bne.n	80032fe <generate_moves+0x2fe>
                        moves[n_moves].from = square;
 8003244:	8afa      	ldrh	r2, [r7, #22]
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_S;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	b2d9      	uxtb	r1, r3
 800325a:	8afa      	ldrh	r2, [r7, #22]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	f1a1 0210 	sub.w	r2, r1, #16
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 800326e:	8afa      	ldrh	r2, [r7, #22]
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	2200      	movs	r2, #0
 800327c:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 800327e:	8afa      	ldrh	r2, [r7, #22]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4413      	add	r3, r2
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <generate_moves+0x2a4>
                            moves[n_moves].promotion = 1;
 8003294:	8afa      	ldrh	r2, [r7, #22]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	2201      	movs	r2, #1
 80032a2:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 80032a4:	8afb      	ldrh	r3, [r7, #22]
 80032a6:	3301      	adds	r3, #1
 80032a8:	82fb      	strh	r3, [r7, #22]
                        if(SQ2ROW(square) == ROW_7 && state->pieces[square + DIR_SS] == PIECE_EMPTY){ //Peon negro sin mover
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	111b      	asrs	r3, r3, #4
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d125      	bne.n	80032fe <generate_moves+0x2fe>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3b20      	subs	r3, #32
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d11f      	bne.n	80032fe <generate_moves+0x2fe>
                            moves[n_moves].from = square;
 80032be:	8afa      	ldrh	r2, [r7, #22]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = square + DIR_SS;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b2d9      	uxtb	r1, r3
 80032d4:	8afa      	ldrh	r2, [r7, #22]
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	f1a1 0220 	sub.w	r2, r1, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 80032e8:	8afa      	ldrh	r2, [r7, #22]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	709a      	strb	r2, [r3, #2]
                            n_moves++;                    
 80032f8:	8afb      	ldrh	r3, [r7, #22]
 80032fa:	3301      	adds	r3, #1
 80032fc:	82fb      	strh	r3, [r7, #22]
                    }
                }
                /*
                    Capturas de peon negro
                */
                if(IS_VALID(square + DIR_SE)){
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	3b0f      	subs	r3, #15
 8003302:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003306:	2b00      	cmp	r3, #0
 8003308:	d13a      	bne.n	8003380 <generate_moves+0x380>
                    if(state->color[square + DIR_SE] == WHITE){
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3b0f      	subs	r3, #15
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d132      	bne.n	8003380 <generate_moves+0x380>
                        moves[n_moves].from = square;
 800331a:	8afa      	ldrh	r2, [r7, #22]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SE;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b2d9      	uxtb	r1, r3
 8003330:	8afa      	ldrh	r2, [r7, #22]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4413      	add	r3, r2
 800333c:	f1a1 020f 	sub.w	r2, r1, #15
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003344:	8afa      	ldrh	r2, [r7, #22]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4413      	add	r3, r2
 8003350:	2200      	movs	r2, #0
 8003352:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 8003354:	8afa      	ldrh	r2, [r7, #22]
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4413      	add	r3, r2
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d107      	bne.n	800337a <generate_moves+0x37a>
                            moves[n_moves].promotion = 1;
 800336a:	8afa      	ldrh	r2, [r7, #22]
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4413      	add	r3, r2
 8003376:	2201      	movs	r2, #1
 8003378:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 800337a:	8afb      	ldrh	r3, [r7, #22]
 800337c:	3301      	adds	r3, #1
 800337e:	82fb      	strh	r3, [r7, #22]
                    }
                }
                if(IS_VALID(square + DIR_SW)){
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	3b11      	subs	r3, #17
 8003384:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 80c2 	bne.w	8003512 <generate_moves+0x512>
                    if(state->color[square + DIR_SW] == WHITE){
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3b11      	subs	r3, #17
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 80b9 	bne.w	8003512 <generate_moves+0x512>
                        moves[n_moves].from = square;
 80033a0:	8afa      	ldrh	r2, [r7, #22]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = square + DIR_SW;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	b2d9      	uxtb	r1, r3
 80033b6:	8afa      	ldrh	r2, [r7, #22]
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	f1a1 0211 	sub.w	r2, r1, #17
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 80033ca:	8afa      	ldrh	r2, [r7, #22]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	709a      	strb	r2, [r3, #2]
                        if(SQ2ROW(moves[n_moves].to) == ROW_1)
 80033da:	8afa      	ldrh	r2, [r7, #22]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <generate_moves+0x400>
                            moves[n_moves].promotion = 1;
 80033f0:	8afa      	ldrh	r2, [r7, #22]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	2201      	movs	r2, #1
 80033fe:	709a      	strb	r2, [r3, #2]
                        n_moves++;    
 8003400:	8afb      	ldrh	r3, [r7, #22]
 8003402:	3301      	adds	r3, #1
 8003404:	82fb      	strh	r3, [r7, #22]
 8003406:	e084      	b.n	8003512 <generate_moves+0x512>
        En caso de que sea rey, reina, torre, alfil o caballo
        */
       
        else{
            //Itero sobre todas las direcciones posibles
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e076      	b.n	80034fc <generate_moves+0x4fc>

                uint8_t new_square = square + move_directions[piece_type][direction_num];
 800340e:	7b7a      	ldrb	r2, [r7, #13]
 8003410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003414:	4946      	ldr	r1, [pc, #280]	; (8003530 <generate_moves+0x530>)
 8003416:	00d2      	lsls	r2, r2, #3
 8003418:	440a      	add	r2, r1
 800341a:	4413      	add	r3, r2
 800341c:	f993 3000 	ldrsb.w	r3, [r3]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	4413      	add	r3, r2
 8003428:	73bb      	strb	r3, [r7, #14]

                //Asumo que la pieza se puede deslizar, luego salgo del loop si no se puede
                while(IS_VALID(new_square)){
 800342a:	e05a      	b.n	80034e2 <generate_moves+0x4e2>

                    if(state->pieces[new_square] == PIECE_EMPTY){ //Lugar vacio, es un movimiento valido
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d121      	bne.n	800347a <generate_moves+0x47a>
                        moves[n_moves].from = square;
 8003436:	8afa      	ldrh	r2, [r7, #22]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]
                        moves[n_moves].to = new_square;
 8003448:	8afa      	ldrh	r2, [r7, #22]
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	4413      	add	r3, r2
 8003454:	7bba      	ldrb	r2, [r7, #14]
 8003456:	705a      	strb	r2, [r3, #1]
                        moves[n_moves].promotion = 0;
 8003458:	8afa      	ldrh	r2, [r7, #22]
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	4413      	add	r3, r2
 8003464:	2200      	movs	r2, #0
 8003466:	709a      	strb	r2, [r3, #2]
                        n_moves++;
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	3301      	adds	r3, #1
 800346c:	82fb      	strh	r3, [r7, #22]
                        }
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        

                    }
                    //Si no se puede deslizar, dejo de checkear esta direccion
                    if(!piece_can_slide[piece_type]){
 800346e:	7b7b      	ldrb	r3, [r7, #13]
 8003470:	4a30      	ldr	r2, [pc, #192]	; (8003534 <generate_moves+0x534>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d127      	bne.n	80034c8 <generate_moves+0x4c8>
                        break;
 8003478:	e03a      	b.n	80034f0 <generate_moves+0x4f0>
                        if(state->color[new_square] != state->side_to_move){ //Lugar con pieza enemiga, se puede capturar
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800348a:	429a      	cmp	r2, r3
 800348c:	d02f      	beq.n	80034ee <generate_moves+0x4ee>
                            moves[n_moves].from = square;
 800348e:	8afa      	ldrh	r2, [r7, #22]
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
                            moves[n_moves].to = new_square;
 80034a0:	8afa      	ldrh	r2, [r7, #22]
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	7bba      	ldrb	r2, [r7, #14]
 80034ae:	705a      	strb	r2, [r3, #1]
                            moves[n_moves].promotion = 0;
 80034b0:	8afa      	ldrh	r2, [r7, #22]
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	2200      	movs	r2, #0
 80034be:	709a      	strb	r2, [r3, #2]
                            n_moves++;    
 80034c0:	8afb      	ldrh	r3, [r7, #22]
 80034c2:	3301      	adds	r3, #1
 80034c4:	82fb      	strh	r3, [r7, #22]
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80034c6:	e012      	b.n	80034ee <generate_moves+0x4ee>
                    }
                    //Si se puede deslizar, avanzo un cuadrado en la misma direccion
                    new_square += move_directions[piece_type][direction_num];
 80034c8:	7b7a      	ldrb	r2, [r7, #13]
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4918      	ldr	r1, [pc, #96]	; (8003530 <generate_moves+0x530>)
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	440a      	add	r2, r1
 80034d4:	4413      	add	r3, r2
 80034d6:	f993 3000 	ldrsb.w	r3, [r3]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	4413      	add	r3, r2
 80034e0:	73bb      	strb	r3, [r7, #14]
                while(IS_VALID(new_square)){
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d09f      	beq.n	800342c <generate_moves+0x42c>
 80034ec:	e000      	b.n	80034f0 <generate_moves+0x4f0>
                        break; //Si estaba deslizando, ya no puede avanzar mas.                        
 80034ee:	bf00      	nop
            for(int8_t direction_num = 0; direction_num < total_move_directions[piece_type]; direction_num++){
 80034f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003500:	7b7a      	ldrb	r2, [r7, #13]
 8003502:	490d      	ldr	r1, [pc, #52]	; (8003538 <generate_moves+0x538>)
 8003504:	5c8a      	ldrb	r2, [r1, r2]
 8003506:	4293      	cmp	r3, r2
 8003508:	db81      	blt.n	800340e <generate_moves+0x40e>
 800350a:	e002      	b.n	8003512 <generate_moves+0x512>
            continue;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <generate_moves+0x512>
            continue;
 8003510:	bf00      	nop
    for(int square = 0; square < 128; square++){
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3301      	adds	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b7f      	cmp	r3, #127	; 0x7f
 800351c:	f77f ad7a 	ble.w	8003014 <generate_moves+0x14>
                }
            }
        }
    }
    return n_moves;
 8003520:	8afb      	ldrh	r3, [r7, #22]
}
 8003522:	4618      	mov	r0, r3
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000004 	.word	0x20000004
 8003534:	20000034 	.word	0x20000034
 8003538:	2000002c 	.word	0x2000002c

0800353c <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t ws2812_color_data[8][8]; //Color data: 24bits: 0xBBRRGG

uint8_t ws2812_finished_dma; //DMA finished flag


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8003544:	210c      	movs	r1, #12
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f002 fdec 	bl	8006124 <HAL_TIM_PWM_Stop_DMA>
	ws2812_finished_dma = 1;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200016a4 	.word	0x200016a4

08003560 <ws2812_init>:

void ws2812_init(){
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
	for(int i = 0; i < (64 * 24 + 60); i++){
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	e010      	b.n	800358e <ws2812_init+0x2e>
		if(i < 60)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b3b      	cmp	r3, #59	; 0x3b
 8003570:	dc05      	bgt.n	800357e <ws2812_init+0x1e>
			ws2812_pwm_data[i] = WS2812_BREAK;
 8003572:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <ws2812_init+0x48>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2100      	movs	r1, #0
 8003578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800357c:	e004      	b.n	8003588 <ws2812_init+0x28>
		else
			ws2812_pwm_data[i] = WS2812_ZERO;
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <ws2812_init+0x48>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	211c      	movs	r1, #28
 8003584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < (64 * 24 + 60); i++){
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f240 623b 	movw	r2, #1595	; 0x63b
 8003594:	4293      	cmp	r3, r2
 8003596:	dde9      	ble.n	800356c <ws2812_init+0xc>
	}
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000092c 	.word	0x2000092c

080035ac <ws2812_update_pwm_data>:
								57, 54, 41, 38, 25, 22, 9, 6,
								56, 55, 40, 39, 24, 23, 8, 7};



void ws2812_update_pwm_data(){
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
	for(int row = 0; row < 8; row++){
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e065      	b.n	8003684 <ws2812_update_pwm_data+0xd8>
		for(int col = 0; col < 8; col++){
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e05c      	b.n	8003678 <ws2812_update_pwm_data+0xcc>

			int index = row*8 + col;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]

			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80035c8:	4933      	ldr	r1, [pc, #204]	; (8003698 <ws2812_update_pwm_data+0xec>)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	00da      	lsls	r2, r3, #3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
											  ((ws2812_color_data[row][col] & (0xFF0000)) >> 8) |
 80035dc:	482e      	ldr	r0, [pc, #184]	; (8003698 <ws2812_update_pwm_data+0xec>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	00d9      	lsls	r1, r3, #3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	440b      	add	r3, r1
 80035e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 80035f0:	431a      	orrs	r2, r3
										      (ws2812_color_data[row][col] & 0x0000FF);
 80035f2:	4829      	ldr	r0, [pc, #164]	; (8003698 <ws2812_update_pwm_data+0xec>)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	00d9      	lsls	r1, r3, #3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	440b      	add	r3, r1
 80035fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003600:	b2db      	uxtb	r3, r3
			uint32_t ws2812_corrected_color = ((ws2812_color_data[row][col] & (0x00FF00)) << 8) |
 8003602:	4313      	orrs	r3, r2
 8003604:	607b      	str	r3, [r7, #4]

			for(int i = 0; i < 24; i++){
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	e02f      	b.n	800366c <ws2812_update_pwm_data+0xc0>



				if(ws2812_corrected_color & (0x800000 >> i))
 800360c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	fa42 f303 	asr.w	r3, r2, r3
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d011      	beq.n	8003644 <ws2812_update_pwm_data+0x98>
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ONE;
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <ws2812_update_pwm_data+0xf0>)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <ws2812_update_pwm_data+0xf4>)
 800363c:	214c      	movs	r1, #76	; 0x4c
 800363e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003642:	e010      	b.n	8003666 <ws2812_update_pwm_data+0xba>
				else
					ws2812_pwm_data[60 + 24*led_strip_pos_lut[index] + i] = WS2812_ZERO;
 8003644:	4a15      	ldr	r2, [pc, #84]	; (800369c <ws2812_update_pwm_data+0xf0>)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <ws2812_update_pwm_data+0xf4>)
 8003660:	211c      	movs	r1, #28
 8003662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 24; i++){
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b17      	cmp	r3, #23
 8003670:	ddcc      	ble.n	800360c <ws2812_update_pwm_data+0x60>
		for(int col = 0; col < 8; col++){
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3301      	adds	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b07      	cmp	r3, #7
 800367c:	dd9f      	ble.n	80035be <ws2812_update_pwm_data+0x12>
	for(int row = 0; row < 8; row++){
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b07      	cmp	r3, #7
 8003688:	dd96      	ble.n	80035b8 <ws2812_update_pwm_data+0xc>
			}
		}

	}
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	200015a4 	.word	0x200015a4
 800369c:	2000003c 	.word	0x2000003c
 80036a0:	2000092c 	.word	0x2000092c

080036a4 <ws2812_update_leds_from_data>:

void ws2812_update_leds_from_data(TIM_HandleTypeDef *htim){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	  ws2812_update_pwm_data();
 80036ac:	f7ff ff7e 	bl	80035ac <ws2812_update_pwm_data>
	  ws2812_finished_dma = 0;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <ws2812_update_leds_from_data+0x28>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_4, (uint32_t *)ws2812_pwm_data, sizeof(ws2812_pwm_data) / sizeof(uint16_t));
 80036b6:	f240 633c 	movw	r3, #1596	; 0x63c
 80036ba:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <ws2812_update_leds_from_data+0x2c>)
 80036bc:	210c      	movs	r1, #12
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f002 fb80 	bl	8005dc4 <HAL_TIM_PWM_Start_DMA>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200016a4 	.word	0x200016a4
 80036d0:	2000092c 	.word	0x2000092c

080036d4 <lighting_set_output>:
//Array donde se escribe la salida
led_color * output_array = (led_color *)0;


//Setter para el array de salida
void lighting_set_output(led_color led_output_array[8][8]){
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    output_array = (led_color *)led_output_array;
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <lighting_set_output+0x1c>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200016a8 	.word	0x200016a8

080036f4 <set_color>:


//Cambia un elemento de una casilla del array de salida
void set_color(int rank, int file, uint8_t color_id){
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	71fb      	strb	r3, [r7, #7]
    output_array[rank*8 + file] = color_from_id[color_id];
 8003702:	79fa      	ldrb	r2, [r7, #7]
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <set_color+0x34>)
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	00d8      	lsls	r0, r3, #3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4403      	add	r3, r0
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	4905      	ldr	r1, [pc, #20]	; (800372c <set_color+0x38>)
 8003716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	200016a8 	.word	0x200016a8
 800372c:	2000007c 	.word	0x2000007c

08003730 <paint_board>:
//   FUNCIONES QUE PINTAN CASILLAS         //
//                                         //
/////////////////////////////////////////////

//Pinta casillas de blanco o negro
void paint_board() {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  for (int rank = 0; rank < 8; rank++) {
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	e01a      	b.n	8003772 <paint_board+0x42>
    for (int file = 0; file < 8; file++) {
 800373c:	2300      	movs	r3, #0
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	e011      	b.n	8003766 <paint_board+0x36>
      set_color(rank, file, (rank&1) == (file&1) ? BLACK_ID : WHITE_ID);
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4053      	eors	r3, r2
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffca 	bl	80036f4 <set_color>
    for (int file = 0; file < 8; file++) {
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b07      	cmp	r3, #7
 800376a:	ddea      	ble.n	8003742 <paint_board+0x12>
  for (int rank = 0; rank < 8; rank++) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3301      	adds	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b07      	cmp	r3, #7
 8003776:	dde1      	ble.n	800373c <paint_board+0xc>
    }
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <paint_valid_moves>:

//Pinta donde hay lugars validos a donde mover
int paint_valid_moves(uint8_t square_lifted, move_t * valid_moves, int total_valid_moves){
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]

    int lifted_piece_valid_moves = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

    total_valid_moves = engine_list_moves(valid_moves);
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f7ff f94b 	bl	8002a30 <engine_list_moves>
 800379a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < total_valid_moves; i++){
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e026      	b.n	80037f0 <paint_valid_moves+0x6e>
        if(valid_moves[i].from == square_lifted){
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d119      	bne.n	80037ea <paint_valid_moves+0x68>
            set_color(SQ2ROW(valid_moves[i].to), SQ2COL(valid_moves[i].to), VALID_ID);
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4413      	add	r3, r2
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	2202      	movs	r2, #2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7ff ff88 	bl	80036f4 <set_color>
            lifted_piece_valid_moves ++;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < total_valid_moves; i++){
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	dbd4      	blt.n	80037a2 <paint_valid_moves+0x20>
        }
    }
    return lifted_piece_valid_moves;
 80037f8:	697b      	ldr	r3, [r7, #20]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <paint_differences>:

//Pinta discrepancias entre el estado en memoria del tablero y el leido
char paint_differences(){
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
    //char sensor_state[8];
    //get_sensors(sensor_state);
    char board_ok = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]

    for (int rank = 0; rank < 8; rank++) {
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	e04e      	b.n	80038b2 <paint_differences+0xae>
        for (int file = 0; file < 8; file++) {
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e045      	b.n	80038a6 <paint_differences+0xa2>
            if((reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) == PIECE_EMPTY){
 800381a:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <paint_differences+0xc0>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4413      	add	r3, r2
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	fa42 f303 	asr.w	r3, r2, r3
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d015      	beq.n	800385e <paint_differences+0x5a>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	b2da      	uxtb	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	4413      	add	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f904 	bl	8002a50 <engine_get_piece>
 8003848:	4603      	mov	r3, r0
 800384a:	2b06      	cmp	r3, #6
 800384c:	d107      	bne.n	800385e <paint_differences+0x5a>
                set_color(rank, file, INVALID_ID);
 800384e:	2205      	movs	r2, #5
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f7ff ff4e 	bl	80036f4 <set_color>
                board_ok = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e020      	b.n	80038a0 <paint_differences+0x9c>
            }
            else if(!(reed_data[rank] & (1 << file)) && engine_get_piece(COORD2SQ(rank, file)) != PIECE_EMPTY){
 800385e:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <paint_differences+0xc0>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4413      	add	r3, r2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	fa42 f303 	asr.w	r3, r2, r3
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d114      	bne.n	80038a0 <paint_differences+0x9c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4413      	add	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f8e2 	bl	8002a50 <engine_get_piece>
 800388c:	4603      	mov	r3, r0
 800388e:	2b06      	cmp	r3, #6
 8003890:	d006      	beq.n	80038a0 <paint_differences+0x9c>
                set_color(rank, file, MISSING_ID);
 8003892:	2204      	movs	r2, #4
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68b8      	ldr	r0, [r7, #8]
 8003898:	f7ff ff2c 	bl	80036f4 <set_color>
                board_ok = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
        for (int file = 0; file < 8; file++) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3301      	adds	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b07      	cmp	r3, #7
 80038aa:	ddb6      	ble.n	800381a <paint_differences+0x16>
    for (int rank = 0; rank < 8; rank++) {
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	ddad      	ble.n	8003814 <paint_differences+0x10>
            }
        }
    }
    return board_ok;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200016b8 	.word	0x200016b8

080038c8 <paint_capture>:

//Pinta discrepancias entre el estado en memoria del tablero y la captura esperada
char paint_capture(int rank, int file){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    set_color(rank, file, VALID_ID);
 80038d2:	2202      	movs	r2, #2
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff0c 	bl	80036f4 <set_color>
    return 1;
 80038dc:	2301      	movs	r3, #1
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <lighting_set_state>:

uint8_t square_lifted_lighting;
move_t * valid_moves_lighting;
int total_valid_moves_lighting;

void lighting_set_state(char state){
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
    lighting_state = state;
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <lighting_set_state+0x1c>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	7013      	strb	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	200016a5 	.word	0x200016a5

08003908 <lighting_piece_lifted_square>:

void lighting_piece_lifted_square(uint8_t square){
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
    square_lifted_lighting = square;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <lighting_piece_lifted_square+0x1c>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	7013      	strb	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	200016ac 	.word	0x200016ac

08003928 <set_valid_moves>:

void set_valid_moves(move_t * moves, int total_valid_moves){
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
    valid_moves_lighting = moves;
 8003932:	4a06      	ldr	r2, [pc, #24]	; (800394c <set_valid_moves+0x24>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6013      	str	r3, [r2, #0]
    total_valid_moves_lighting = total_valid_moves;
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <set_valid_moves+0x28>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6013      	str	r3, [r2, #0]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	200016b0 	.word	0x200016b0
 8003950:	200016b4 	.word	0x200016b4

08003954 <lighting_refresh>:

void lighting_refresh(){
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
    switch (lighting_state) {
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <lighting_refresh+0x8c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d83c      	bhi.n	80039da <lighting_refresh+0x86>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <lighting_refresh+0x14>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	08003979 	.word	0x08003979
 800396c:	0800397f 	.word	0x0800397f
 8003970:	080039b1 	.word	0x080039b1
 8003974:	080039bb 	.word	0x080039bb
        case LIGHTING_IDLE_STATE:
            paint_board();
 8003978:	f7ff feda 	bl	8003730 <paint_board>
        break;
 800397c:	e02d      	b.n	80039da <lighting_refresh+0x86>

        case LIGHTING_LIFTED_STATE:
            paint_board();
 800397e:	f7ff fed7 	bl	8003730 <paint_board>
            set_color(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting), LIFTED_ID);
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <lighting_refresh+0x90>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <lighting_refresh+0x90>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	2203      	movs	r2, #3
 8003996:	4619      	mov	r1, r3
 8003998:	f7ff feac 	bl	80036f4 <set_color>
            paint_valid_moves(square_lifted_lighting, valid_moves_lighting, total_valid_moves_lighting);
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <lighting_refresh+0x90>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <lighting_refresh+0x94>)
 80039a2:	6811      	ldr	r1, [r2, #0]
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <lighting_refresh+0x98>)
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff feea 	bl	8003782 <paint_valid_moves>
        break;
 80039ae:	e014      	b.n	80039da <lighting_refresh+0x86>

        case LIGHTING_ERROR_STATE:
            paint_board();
 80039b0:	f7ff febe 	bl	8003730 <paint_board>
            paint_differences();
 80039b4:	f7ff ff26 	bl	8003804 <paint_differences>
        break;
 80039b8:	e00f      	b.n	80039da <lighting_refresh+0x86>

        case LIGHTING_CAPTURE_STATE:
            paint_board();
 80039ba:	f7ff feb9 	bl	8003730 <paint_board>
            paint_capture(SQ2ROW(square_lifted_lighting), SQ2COL(square_lifted_lighting));
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <lighting_refresh+0x90>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <lighting_refresh+0x90>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7ff ff78 	bl	80038c8 <paint_capture>
        break;
 80039d8:	bf00      	nop
    }
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200016a5 	.word	0x200016a5
 80039e4:	200016ac 	.word	0x200016ac
 80039e8:	200016b0 	.word	0x200016b0
 80039ec:	200016b4 	.word	0x200016b4

080039f0 <t_reed_scan_sensors>:

volatile uint8_t reed_data[8] = { 0 };



void t_reed_scan_sensors() {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0

	while (1) {
		for (int row = 0; row < 8; row++) {
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	e131      	b.n	8003c60 <t_reed_scan_sensors+0x270>
			HAL_GPIO_WritePin(REED_1_GPIO_Port, REED_1_Pin, row == 0);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4897      	ldr	r0, [pc, #604]	; (8003c6c <t_reed_scan_sensors+0x27c>)
 8003a0e:	f000 ffb1 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_2_GPIO_Port, REED_2_Pin, row == 1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2102      	movs	r1, #2
 8003a22:	4892      	ldr	r0, [pc, #584]	; (8003c6c <t_reed_scan_sensors+0x27c>)
 8003a24:	f000 ffa6 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_3_GPIO_Port, REED_3_Pin, row == 2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	488d      	ldr	r0, [pc, #564]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003a3a:	f000 ff9b 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_4_GPIO_Port, REED_4_Pin, row == 3);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4889      	ldr	r0, [pc, #548]	; (8003c74 <t_reed_scan_sensors+0x284>)
 8003a50:	f000 ff90 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_5_GPIO_Port, REED_5_Pin, row == 4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	4883      	ldr	r0, [pc, #524]	; (8003c74 <t_reed_scan_sensors+0x284>)
 8003a66:	f000 ff85 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_6_GPIO_Port, REED_6_Pin, row == 5);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	487d      	ldr	r0, [pc, #500]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003a7c:	f000 ff7a 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_7_GPIO_Port, REED_7_Pin, row == 6);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	4876      	ldr	r0, [pc, #472]	; (8003c6c <t_reed_scan_sensors+0x27c>)
 8003a92:	f000 ff6f 	bl	8004974 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REED_8_GPIO_Port, REED_8_Pin, row == 7);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b07      	cmp	r3, #7
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aa8:	4872      	ldr	r0, [pc, #456]	; (8003c74 <t_reed_scan_sensors+0x284>)
 8003aaa:	f000 ff63 	bl	8004974 <HAL_GPIO_WritePin>

			//for(int i = 0; i < 100; i++){ asm("nop"); } //Delay chico para dejar que la señal se propage
			vTaskDelay(10); // Lo uso para hacer más lenta toda la lectura
 8003aae:	200a      	movs	r0, #10
 8003ab0:	f004 fa20 	bl	8007ef4 <vTaskDelay>

			reed_data[row] = 0;
 8003ab4:	4a70      	ldr	r2, [pc, #448]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_A_GPIO_Port, REED_A_Pin) != 0);
 8003abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac2:	486c      	ldr	r0, [pc, #432]	; (8003c74 <t_reed_scan_sensors+0x284>)
 8003ac4:	f000 ff3e 	bl	8004944 <HAL_GPIO_ReadPin>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4a68      	ldr	r2, [pc, #416]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	b25a      	sxtb	r2, r3
 8003ae2:	b24b      	sxtb	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	b2d9      	uxtb	r1, r3
 8003aea:	4a63      	ldr	r2, [pc, #396]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	460a      	mov	r2, r1
 8003af2:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_B_GPIO_Port, REED_B_Pin) != 0) << 1;
 8003af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003af8:	485d      	ldr	r0, [pc, #372]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003afa:	f000 ff23 	bl	8004944 <HAL_GPIO_ReadPin>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <t_reed_scan_sensors+0x118>
 8003b04:	2102      	movs	r1, #2
 8003b06:	e000      	b.n	8003b0a <t_reed_scan_sensors+0x11a>
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	b25a      	sxtb	r2, r3
 8003b16:	b24b      	sxtb	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	b2d9      	uxtb	r1, r3
 8003b1e:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	460a      	mov	r2, r1
 8003b26:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_C_GPIO_Port, REED_C_Pin) != 0) << 2;
 8003b28:	2110      	movs	r1, #16
 8003b2a:	4851      	ldr	r0, [pc, #324]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003b2c:	f000 ff0a 	bl	8004944 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <t_reed_scan_sensors+0x14a>
 8003b36:	2104      	movs	r1, #4
 8003b38:	e000      	b.n	8003b3c <t_reed_scan_sensors+0x14c>
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	b25a      	sxtb	r2, r3
 8003b48:	b24b      	sxtb	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	b2d9      	uxtb	r1, r3
 8003b50:	4a49      	ldr	r2, [pc, #292]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	460a      	mov	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_D_GPIO_Port, REED_D_Pin) != 0) << 3;
 8003b5a:	2110      	movs	r1, #16
 8003b5c:	4843      	ldr	r0, [pc, #268]	; (8003c6c <t_reed_scan_sensors+0x27c>)
 8003b5e:	f000 fef1 	bl	8004944 <HAL_GPIO_ReadPin>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <t_reed_scan_sensors+0x17c>
 8003b68:	2108      	movs	r1, #8
 8003b6a:	e000      	b.n	8003b6e <t_reed_scan_sensors+0x17e>
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4a42      	ldr	r2, [pc, #264]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	b25a      	sxtb	r2, r3
 8003b7a:	b24b      	sxtb	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	b2d9      	uxtb	r1, r3
 8003b82:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	460a      	mov	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_E_GPIO_Port, REED_E_Pin) != 0) << 4;
 8003b8c:	2120      	movs	r1, #32
 8003b8e:	4838      	ldr	r0, [pc, #224]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003b90:	f000 fed8 	bl	8004944 <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <t_reed_scan_sensors+0x1ae>
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	e000      	b.n	8003ba0 <t_reed_scan_sensors+0x1b0>
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	b25a      	sxtb	r2, r3
 8003bac:	b24b      	sxtb	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	b2d9      	uxtb	r1, r3
 8003bb4:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	460a      	mov	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_F_GPIO_Port, REED_F_Pin) != 0) << 5;
 8003bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bc2:	482c      	ldr	r0, [pc, #176]	; (8003c74 <t_reed_scan_sensors+0x284>)
 8003bc4:	f000 febe 	bl	8004944 <HAL_GPIO_ReadPin>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <t_reed_scan_sensors+0x1e2>
 8003bce:	2120      	movs	r1, #32
 8003bd0:	e000      	b.n	8003bd4 <t_reed_scan_sensors+0x1e4>
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	b25a      	sxtb	r2, r3
 8003be0:	b24b      	sxtb	r3, r1
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	460a      	mov	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_G_GPIO_Port, REED_G_Pin) != 0) << 6;
 8003bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf6:	481e      	ldr	r0, [pc, #120]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003bf8:	f000 fea4 	bl	8004944 <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <t_reed_scan_sensors+0x216>
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	e000      	b.n	8003c08 <t_reed_scan_sensors+0x218>
 8003c06:	2100      	movs	r1, #0
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	b25a      	sxtb	r2, r3
 8003c14:	b24b      	sxtb	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	b2d9      	uxtb	r1, r3
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	460a      	mov	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
			reed_data[row] |= (HAL_GPIO_ReadPin(REED_H_GPIO_Port, REED_H_Pin) != 0) << 7;
 8003c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c2a:	4811      	ldr	r0, [pc, #68]	; (8003c70 <t_reed_scan_sensors+0x280>)
 8003c2c:	f000 fe8a 	bl	8004944 <HAL_GPIO_ReadPin>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <t_reed_scan_sensors+0x24a>
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	e000      	b.n	8003c3c <t_reed_scan_sensors+0x24c>
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	b25a      	sxtb	r2, r3
 8003c48:	b24b      	sxtb	r3, r1
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	b2d9      	uxtb	r1, r3
 8003c50:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <t_reed_scan_sensors+0x288>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	460a      	mov	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < 8; row++) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b07      	cmp	r3, #7
 8003c64:	f77f aeca 	ble.w	80039fc <t_reed_scan_sensors+0xc>
 8003c68:	e6c5      	b.n	80039f6 <t_reed_scan_sensors+0x6>
 8003c6a:	bf00      	nop
 8003c6c:	40020800 	.word	0x40020800
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020000 	.word	0x40020000
 8003c78:	200016b8 	.word	0x200016b8

08003c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c80:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c82:	490e      	ldr	r1, [pc, #56]	; (8003cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c84:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c88:	e002      	b.n	8003c90 <LoopCopyDataInit>

08003c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c8e:	3304      	adds	r3, #4

08003c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c94:	d3f9      	bcc.n	8003c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c98:	4c0b      	ldr	r4, [pc, #44]	; (8003cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c9c:	e001      	b.n	8003ca2 <LoopFillZerobss>

08003c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca0:	3204      	adds	r2, #4

08003ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca4:	d3fb      	bcc.n	8003c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ca6:	f7fd fccb 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003caa:	f005 fbe5 	bl	8009478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cae:	f7fc fe5b 	bl	8000968 <main>
  bx  lr    
 8003cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cbc:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003cc0:	080097b8 	.word	0x080097b8
  ldr r2, =_sbss
 8003cc4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003cc8:	20005558 	.word	0x20005558

08003ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ccc:	e7fe      	b.n	8003ccc <ADC_IRQHandler>
	...

08003cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <HAL_Init+0x40>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_Init+0x40>)
 8003ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_Init+0x40>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_Init+0x40>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f000 f8d8 	bl	8003eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cfe:	200f      	movs	r0, #15
 8003d00:	f7fd fbee 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d04:	f7fd fad6 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_IncTick+0x20>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_IncTick+0x24>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_IncTick+0x24>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000098 	.word	0x20000098
 8003d38:	200016c0 	.word	0x200016c0

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_GetTick+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200016c0 	.word	0x200016c0

08003d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d86:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	60d3      	str	r3, [r2, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__NVIC_GetPriorityGrouping+0x18>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	f003 0307 	and.w	r3, r3, #7
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db0b      	blt.n	8003de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4907      	ldr	r1, [pc, #28]	; (8003df0 <__NVIC_EnableIRQ+0x38>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2001      	movs	r0, #1
 8003dda:	fa00 f202 	lsl.w	r2, r0, r2
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	; (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	; (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf28      	it	cs
 8003e66:	2304      	movcs	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d902      	bls.n	8003e78 <NVIC_EncodePriority+0x30>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3b03      	subs	r3, #3
 8003e76:	e000      	b.n	8003e7a <NVIC_EncodePriority+0x32>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e90:	f04f 31ff 	mov.w	r1, #4294967295
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	4313      	orrs	r3, r2
         );
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff4c 	bl	8003d54 <__NVIC_SetPriorityGrouping>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed6:	f7ff ff61 	bl	8003d9c <__NVIC_GetPriorityGrouping>
 8003eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f7ff ffb1 	bl	8003e48 <NVIC_EncodePriority>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff80 	bl	8003df4 <__NVIC_SetPriority>
}
 8003ef4:	bf00      	nop
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff54 	bl	8003db8 <__NVIC_EnableIRQ>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff ff0a 	bl	8003d3c <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff fef1 	bl	8003d3c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa91 	bl	8004544 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa48 	bl	80044d8 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f010803f 	.word	0xf010803f

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_DMA_Start_IT+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e040      	b.n	800411c <HAL_DMA_Start_IT+0xa8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d12f      	bne.n	800410e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f9da 	bl	800447c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0216 	orr.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e005      	b.n	800411a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d004      	beq.n	8004142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e00c      	b.n	800415c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2205      	movs	r2, #5
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004174:	4b8e      	ldr	r3, [pc, #568]	; (80043b0 <HAL_DMA_IRQHandler+0x248>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a8e      	ldr	r2, [pc, #568]	; (80043b4 <HAL_DMA_IRQHandler+0x24c>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2208      	movs	r2, #8
 8004194:	409a      	lsls	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01a      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	2208      	movs	r2, #8
 80041c2:	409a      	lsls	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	2204      	movs	r2, #4
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d012      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2204      	movs	r2, #4
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2210      	movs	r2, #16
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d043      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2210      	movs	r2, #16
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d024      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e01f      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e016      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0208 	bic.w	r2, r2, #8
 80042c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2220      	movs	r2, #32
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 808f 	beq.w	8004408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8087 	beq.w	8004408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b05      	cmp	r3, #5
 8004310:	d136      	bne.n	8004380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0216 	bic.w	r2, r2, #22
 8004320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_DMA_IRQHandler+0x1da>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	223f      	movs	r2, #63	; 0x3f
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d07e      	beq.n	8004474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
        }
        return;
 800437e:	e079      	b.n	8004474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10d      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d031      	beq.n	8004408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e02c      	b.n	8004408 <HAL_DMA_IRQHandler+0x2a0>
 80043ae:	bf00      	nop
 80043b0:	20000000 	.word	0x20000000
 80043b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d023      	beq.n	8004408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e01e      	b.n	8004408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0210 	bic.w	r2, r2, #16
 80043e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	2b00      	cmp	r3, #0
 800440e:	d032      	beq.n	8004476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2205      	movs	r2, #5
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	d307      	bcc.n	8004450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f2      	bne.n	8004434 <HAL_DMA_IRQHandler+0x2cc>
 800444e:	e000      	b.n	8004452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004450:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
 8004472:	e000      	b.n	8004476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004474:	bf00      	nop
    }
  }
}
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d108      	bne.n	80044bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ba:	e007      	b.n	80044cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3b10      	subs	r3, #16
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <DMA_CalcBaseAndBitshift+0x64>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <DMA_CalcBaseAndBitshift+0x68>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d909      	bls.n	800451a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
 8004518:	e007      	b.n	800452a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	aaaaaaab 	.word	0xaaaaaaab
 8004540:	080097a0 	.word	0x080097a0

08004544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11f      	bne.n	800459e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d856      	bhi.n	8004612 <DMA_CheckFifoParam+0xce>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <DMA_CheckFifoParam+0x28>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458f 	.word	0x0800458f
 8004574:	0800457d 	.word	0x0800457d
 8004578:	08004613 	.word	0x08004613
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d046      	beq.n	8004616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e043      	b.n	8004616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004596:	d140      	bne.n	800461a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459c:	e03d      	b.n	800461a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d121      	bne.n	80045ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d837      	bhi.n	800461e <DMA_CheckFifoParam+0xda>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <DMA_CheckFifoParam+0x70>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cb 	.word	0x080045cb
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	080045dd 	.word	0x080045dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e030      	b.n	800462c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d025      	beq.n	8004622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045da:	e022      	b.n	8004622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e4:	d11f      	bne.n	8004626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ea:	e01c      	b.n	8004626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d903      	bls.n	80045fa <DMA_CheckFifoParam+0xb6>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d003      	beq.n	8004600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045f8:	e018      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      break;
 80045fe:	e015      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e00b      	b.n	800462a <DMA_CheckFifoParam+0xe6>
      break;
 8004612:	bf00      	nop
 8004614:	e00a      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
 8004618:	e008      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e006      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;   
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
    }
  } 
  
  return status; 
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e159      	b.n	800490c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	f040 8148 	bne.w	8004906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d005      	beq.n	800468e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468a:	2b02      	cmp	r3, #2
 800468c:	d130      	bne.n	80046f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	2203      	movs	r2, #3
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0201 	and.w	r2, r3, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d017      	beq.n	800472c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d123      	bne.n	8004780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	08da      	lsrs	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3208      	adds	r2, #8
 800477a:	69b9      	ldr	r1, [r7, #24]
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80a2 	beq.w	8004906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b57      	ldr	r3, [pc, #348]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a56      	ldr	r2, [pc, #344]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b54      	ldr	r3, [pc, #336]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047de:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_GPIO_Init+0x2ec>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a49      	ldr	r2, [pc, #292]	; (800492c <HAL_GPIO_Init+0x2f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d019      	beq.n	800483e <HAL_GPIO_Init+0x202>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a48      	ldr	r2, [pc, #288]	; (8004930 <HAL_GPIO_Init+0x2f4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_GPIO_Init+0x1fe>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a47      	ldr	r2, [pc, #284]	; (8004934 <HAL_GPIO_Init+0x2f8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00d      	beq.n	8004836 <HAL_GPIO_Init+0x1fa>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a46      	ldr	r2, [pc, #280]	; (8004938 <HAL_GPIO_Init+0x2fc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <HAL_GPIO_Init+0x1f6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a45      	ldr	r2, [pc, #276]	; (800493c <HAL_GPIO_Init+0x300>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_GPIO_Init+0x1f2>
 800482a:	2304      	movs	r3, #4
 800482c:	e008      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800482e:	2307      	movs	r3, #7
 8004830:	e006      	b.n	8004840 <HAL_GPIO_Init+0x204>
 8004832:	2303      	movs	r3, #3
 8004834:	e004      	b.n	8004840 <HAL_GPIO_Init+0x204>
 8004836:	2302      	movs	r3, #2
 8004838:	e002      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800483e:	2300      	movs	r3, #0
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f002 0203 	and.w	r2, r2, #3
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	4093      	lsls	r3, r2
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004850:	4935      	ldr	r1, [pc, #212]	; (8004928 <HAL_GPIO_Init+0x2ec>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004882:	4a2f      	ldr	r2, [pc, #188]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_GPIO_Init+0x304>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004900:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	f67f aea2 	bls.w	8004658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	40013800 	.word	0x40013800
 800492c:	40020000 	.word	0x40020000
 8004930:	40020400 	.word	0x40020400
 8004934:	40020800 	.word	0x40020800
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40021000 	.word	0x40021000
 8004940:	40013c00 	.word	0x40013c00

08004944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e001      	b.n	8004966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
 8004980:	4613      	mov	r3, r2
 8004982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004984:	787b      	ldrb	r3, [r7, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004990:	e003      	b.n	800499a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	041a      	lsls	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	619a      	str	r2, [r3, #24]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e12b      	b.n	8004c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fc9c 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a0c:	f001 f888 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 8004a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4a81      	ldr	r2, [pc, #516]	; (8004c1c <HAL_I2C_Init+0x274>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d807      	bhi.n	8004a2c <HAL_I2C_Init+0x84>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <HAL_I2C_Init+0x278>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	bf94      	ite	ls
 8004a24:	2301      	movls	r3, #1
 8004a26:	2300      	movhi	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e006      	b.n	8004a3a <HAL_I2C_Init+0x92>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a7d      	ldr	r2, [pc, #500]	; (8004c24 <HAL_I2C_Init+0x27c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bf94      	ite	ls
 8004a34:	2301      	movls	r3, #1
 8004a36:	2300      	movhi	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e0e7      	b.n	8004c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a78      	ldr	r2, [pc, #480]	; (8004c28 <HAL_I2C_Init+0x280>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0c9b      	lsrs	r3, r3, #18
 8004a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a6a      	ldr	r2, [pc, #424]	; (8004c1c <HAL_I2C_Init+0x274>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d802      	bhi.n	8004a7c <HAL_I2C_Init+0xd4>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	e009      	b.n	8004a90 <HAL_I2C_Init+0xe8>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	4a69      	ldr	r2, [pc, #420]	; (8004c2c <HAL_I2C_Init+0x284>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	3301      	adds	r3, #1
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	495c      	ldr	r1, [pc, #368]	; (8004c1c <HAL_I2C_Init+0x274>)
 8004aac:	428b      	cmp	r3, r1
 8004aae:	d819      	bhi.n	8004ae4 <HAL_I2C_Init+0x13c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e59      	subs	r1, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ac4:	400b      	ands	r3, r1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_I2C_Init+0x138>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1e59      	subs	r1, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ade:	e051      	b.n	8004b84 <HAL_I2C_Init+0x1dc>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	e04f      	b.n	8004b84 <HAL_I2C_Init+0x1dc>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d111      	bne.n	8004b10 <HAL_I2C_Init+0x168>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1e58      	subs	r0, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	440b      	add	r3, r1
 8004afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e012      	b.n	8004b36 <HAL_I2C_Init+0x18e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1e58      	subs	r0, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	0099      	lsls	r1, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b26:	3301      	adds	r3, #1
 8004b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Init+0x196>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e022      	b.n	8004b84 <HAL_I2C_Init+0x1dc>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10e      	bne.n	8004b64 <HAL_I2C_Init+0x1bc>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1e58      	subs	r0, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	440b      	add	r3, r1
 8004b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b62:	e00f      	b.n	8004b84 <HAL_I2C_Init+0x1dc>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1e58      	subs	r0, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	0099      	lsls	r1, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	6809      	ldr	r1, [r1, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6911      	ldr	r1, [r2, #16]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68d2      	ldr	r2, [r2, #12]
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	000186a0 	.word	0x000186a0
 8004c20:	001e847f 	.word	0x001e847f
 8004c24:	003d08ff 	.word	0x003d08ff
 8004c28:	431bde83 	.word	0x431bde83
 8004c2c:	10624dd3 	.word	0x10624dd3

08004c30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	817b      	strh	r3, [r7, #10]
 8004c40:	4613      	mov	r3, r2
 8004c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c44:	f7ff f87a 	bl	8003d3c <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	f040 80e0 	bne.w	8004e18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	2319      	movs	r3, #25
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4970      	ldr	r1, [pc, #448]	; (8004e24 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f964 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0d3      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_I2C_Master_Transmit+0x50>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0cc      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d007      	beq.n	8004ca6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2221      	movs	r2, #33	; 0x21
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f89c 	bl	8004e2c <I2C_MasterRequestWrite>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e08d      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d14:	e066      	b.n	8004de4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6a39      	ldr	r1, [r7, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f9de 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d107      	bne.n	8004d3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e06b      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d11b      	bne.n	8004db8 <HAL_I2C_Master_Transmit+0x188>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d017      	beq.n	8004db8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	6a39      	ldr	r1, [r7, #32]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f9ce 	bl	800515e <I2C_WaitOnBTFFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d107      	bne.n	8004de0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e01a      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d194      	bne.n	8004d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	00100002 	.word	0x00100002
 8004e28:	ffff0000 	.word	0xffff0000

08004e2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d006      	beq.n	8004e56 <I2C_MasterRequestWrite+0x2a>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d003      	beq.n	8004e56 <I2C_MasterRequestWrite+0x2a>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e54:	d108      	bne.n	8004e68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00b      	b.n	8004e80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	2b12      	cmp	r3, #18
 8004e6e:	d107      	bne.n	8004e80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f84f 	bl	8004f30 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	d103      	bne.n	8004eb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e035      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d108      	bne.n	8004ed0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	e01b      	b.n	8004f08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ed0:	897b      	ldrh	r3, [r7, #10]
 8004ed2:	11db      	asrs	r3, r3, #7
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f063 030f 	orn	r3, r3, #15
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	490e      	ldr	r1, [pc, #56]	; (8004f28 <I2C_MasterRequestWrite+0xfc>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f875 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e010      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4907      	ldr	r1, [pc, #28]	; (8004f2c <I2C_MasterRequestWrite+0x100>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f865 	bl	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	00010008 	.word	0x00010008
 8004f2c:	00010002 	.word	0x00010002

08004f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	e025      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d021      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fe fef7 	bl	8003d3c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d116      	bne.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e023      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10d      	bne.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	e00c      	b.n	8004fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d0b6      	beq.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fec:	e051      	b.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d123      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e046      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d021      	beq.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fe fe75 	bl	8003d3c <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d116      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e020      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10c      	bne.n	80050b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e00b      	b.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	43da      	mvns	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d18d      	bne.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e8:	e02d      	b.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f878 	bl	80051e0 <I2C_IsAcknowledgeFailed>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e02d      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d021      	beq.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fe fe1b 	bl	8003d3c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d116      	bne.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e007      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d1ca      	bne.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800516a:	e02d      	b.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f837 	bl	80051e0 <I2C_IsAcknowledgeFailed>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e02d      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d021      	beq.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fe fdda 	bl	8003d3c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d116      	bne.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e007      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d1ca      	bne.n	800516c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d11b      	bne.n	8005230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e267      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d075      	beq.n	800534a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800525e:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00c      	beq.n	8005284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526a:	4b85      	ldr	r3, [pc, #532]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005272:	2b08      	cmp	r3, #8
 8005274:	d112      	bne.n	800529c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005282:	d10b      	bne.n	800529c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005284:	4b7e      	ldr	r3, [pc, #504]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d05b      	beq.n	8005348 <HAL_RCC_OscConfig+0x108>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d157      	bne.n	8005348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e242      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a4:	d106      	bne.n	80052b4 <HAL_RCC_OscConfig+0x74>
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	e01d      	b.n	80052f0 <HAL_RCC_OscConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x98>
 80052be:	4b70      	ldr	r3, [pc, #448]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6f      	ldr	r2, [pc, #444]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6c      	ldr	r2, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0xb0>
 80052d8:	4b69      	ldr	r3, [pc, #420]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a68      	ldr	r2, [pc, #416]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a65      	ldr	r2, [pc, #404]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80052ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d013      	beq.n	8005320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe fd20 	bl	8003d3c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe fd1c 	bl	8003d3c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e207      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0xc0>
 800531e:	e014      	b.n	800534a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fe fd0c 	bl	8003d3c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005328:	f7fe fd08 	bl	8003d3c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e1f3      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	4b51      	ldr	r3, [pc, #324]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0xe8>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d063      	beq.n	800541e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005356:	4b4a      	ldr	r3, [pc, #296]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800536a:	2b08      	cmp	r3, #8
 800536c:	d11c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536e:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d116      	bne.n	80053a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_RCC_OscConfig+0x152>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d001      	beq.n	8005392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e1c7      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4937      	ldr	r1, [pc, #220]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	e03a      	b.n	800541e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <HAL_RCC_OscConfig+0x244>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fe fcc1 	bl	8003d3c <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053be:	f7fe fcbd 	bl	8003d3c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e1a8      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d0:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4925      	ldr	r1, [pc, #148]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
 80053f0:	e015      	b.n	800541e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_RCC_OscConfig+0x244>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fe fca0 	bl	8003d3c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005400:	f7fe fc9c 	bl	8003d3c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e187      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005412:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d036      	beq.n	8005498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_RCC_OscConfig+0x248>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fe fc80 	bl	8003d3c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005440:	f7fe fc7c 	bl	8003d3c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e167      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x240>)
 8005454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x200>
 800545e:	e01b      	b.n	8005498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_OscConfig+0x248>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005466:	f7fe fc69 	bl	8003d3c <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800546c:	e00e      	b.n	800548c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546e:	f7fe fc65 	bl	8003d3c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d907      	bls.n	800548c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e150      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
 8005480:	40023800 	.word	0x40023800
 8005484:	42470000 	.word	0x42470000
 8005488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1ea      	bne.n	800546e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8097 	beq.w	80055d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	4b7d      	ldr	r3, [pc, #500]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a7c      	ldr	r2, [pc, #496]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d6:	4b77      	ldr	r3, [pc, #476]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d118      	bne.n	8005514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e2:	4b74      	ldr	r3, [pc, #464]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a73      	ldr	r2, [pc, #460]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 80054e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ee:	f7fe fc25 	bl	8003d3c <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f6:	f7fe fc21 	bl	8003d3c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e10c      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_RCC_OscConfig+0x474>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x2ea>
 800551c:	4b64      	ldr	r3, [pc, #400]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	4a63      	ldr	r2, [pc, #396]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6713      	str	r3, [r2, #112]	; 0x70
 8005528:	e01c      	b.n	8005564 <HAL_RCC_OscConfig+0x324>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b05      	cmp	r3, #5
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x30c>
 8005532:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4a5e      	ldr	r2, [pc, #376]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	6713      	str	r3, [r2, #112]	; 0x70
 800553e:	4b5c      	ldr	r3, [pc, #368]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a5b      	ldr	r2, [pc, #364]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6713      	str	r3, [r2, #112]	; 0x70
 800554a:	e00b      	b.n	8005564 <HAL_RCC_OscConfig+0x324>
 800554c:	4b58      	ldr	r3, [pc, #352]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a57      	ldr	r2, [pc, #348]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800555e:	f023 0304 	bic.w	r3, r3, #4
 8005562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fe fbe6 	bl	8003d3c <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005572:	e00a      	b.n	800558a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fe fbe2 	bl	8003d3c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0cb      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558a:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0ee      	beq.n	8005574 <HAL_RCC_OscConfig+0x334>
 8005596:	e014      	b.n	80055c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005598:	f7fe fbd0 	bl	8003d3c <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a0:	f7fe fbcc 	bl	8003d3c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0b5      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b6:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ee      	bne.n	80055a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a1 	beq.w	8005720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055de:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d05c      	beq.n	80056a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d141      	bne.n	8005676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fe fba0 	bl	8003d3c <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005600:	f7fe fb9c 	bl	8003d3c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e087      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	491b      	ldr	r1, [pc, #108]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fe fb75 	bl	8003d3c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005656:	f7fe fb71 	bl	8003d3c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e05c      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005668:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x416>
 8005674:	e054      	b.n	8005720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCC_OscConfig+0x478>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fe fb5e 	bl	8003d3c <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005684:	f7fe fb5a 	bl	8003d3c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e045      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCC_OscConfig+0x470>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x444>
 80056a2:	e03d      	b.n	8005720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d107      	bne.n	80056bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e038      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40007000 	.word	0x40007000
 80056b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x4ec>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d028      	beq.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d121      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d11a      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d111      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	3b01      	subs	r3, #1
 8005706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0cc      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005744:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d90c      	bls.n	800576c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b65      	ldr	r3, [pc, #404]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0b8      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005784:	4b59      	ldr	r3, [pc, #356]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a58      	ldr	r2, [pc, #352]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800578e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a52      	ldr	r2, [pc, #328]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	494d      	ldr	r1, [pc, #308]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d044      	beq.n	8005850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	4b47      	ldr	r3, [pc, #284]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d119      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e07f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d003      	beq.n	80057ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d107      	bne.n	80057fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ee:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e06f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e067      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 0203 	bic.w	r2, r3, #3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4934      	ldr	r1, [pc, #208]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	4313      	orrs	r3, r2
 800581e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005820:	f7fe fa8c 	bl	8003d3c <HAL_GetTick>
 8005824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fe fa88 	bl	8003d3c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e04f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583e:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 020c 	and.w	r2, r3, #12
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	429a      	cmp	r2, r3
 800584e:	d1eb      	bne.n	8005828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d20c      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b22      	ldr	r3, [pc, #136]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e032      	b.n	80058de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005884:	4b19      	ldr	r3, [pc, #100]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4916      	ldr	r1, [pc, #88]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	490e      	ldr	r1, [pc, #56]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058b6:	f000 f821 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 80058ba:	4602      	mov	r2, r0
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	490a      	ldr	r1, [pc, #40]	; (80058f0 <HAL_RCC_ClockConfig+0x1c0>)
 80058c8:	5ccb      	ldrb	r3, [r1, r3]
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <HAL_RCC_ClockConfig+0x1c4>)
 80058d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCC_ClockConfig+0x1c8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fb fe02 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023c00 	.word	0x40023c00
 80058ec:	40023800 	.word	0x40023800
 80058f0:	08009788 	.word	0x08009788
 80058f4:	20000000 	.word	0x20000000
 80058f8:	20000094 	.word	0x20000094

080058fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005900:	b094      	sub	sp, #80	; 0x50
 8005902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	647b      	str	r3, [r7, #68]	; 0x44
 8005908:	2300      	movs	r3, #0
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	2300      	movs	r3, #0
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005914:	4b79      	ldr	r3, [pc, #484]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b08      	cmp	r3, #8
 800591e:	d00d      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x40>
 8005920:	2b08      	cmp	r3, #8
 8005922:	f200 80e1 	bhi.w	8005ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x34>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d003      	beq.n	8005936 <HAL_RCC_GetSysClockFreq+0x3a>
 800592e:	e0db      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005934:	e0db      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005936:	4b73      	ldr	r3, [pc, #460]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800593a:	e0d8      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800593c:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005946:	4b6d      	ldr	r3, [pc, #436]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d063      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005952:	4b6a      	ldr	r3, [pc, #424]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	2200      	movs	r2, #0
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
 800595c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
 8005966:	2300      	movs	r3, #0
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800596e:	4622      	mov	r2, r4
 8005970:	462b      	mov	r3, r5
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	0159      	lsls	r1, r3, #5
 800597c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005980:	0150      	lsls	r0, r2, #5
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4621      	mov	r1, r4
 8005988:	1a51      	subs	r1, r2, r1
 800598a:	6139      	str	r1, [r7, #16]
 800598c:	4629      	mov	r1, r5
 800598e:	eb63 0301 	sbc.w	r3, r3, r1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a0:	4659      	mov	r1, fp
 80059a2:	018b      	lsls	r3, r1, #6
 80059a4:	4651      	mov	r1, sl
 80059a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059aa:	4651      	mov	r1, sl
 80059ac:	018a      	lsls	r2, r1, #6
 80059ae:	4651      	mov	r1, sl
 80059b0:	ebb2 0801 	subs.w	r8, r2, r1
 80059b4:	4659      	mov	r1, fp
 80059b6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	462b      	mov	r3, r5
 80059dc:	eb49 0303 	adc.w	r3, r9, r3
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059ee:	4629      	mov	r1, r5
 80059f0:	024b      	lsls	r3, r1, #9
 80059f2:	4621      	mov	r1, r4
 80059f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059f8:	4621      	mov	r1, r4
 80059fa:	024a      	lsls	r2, r1, #9
 80059fc:	4610      	mov	r0, r2
 80059fe:	4619      	mov	r1, r3
 8005a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a02:	2200      	movs	r2, #0
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a0c:	f7fa fbe8 	bl	80001e0 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4613      	mov	r3, r2
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	e058      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	2200      	movs	r2, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	4611      	mov	r1, r2
 8005a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	f04f 0000 	mov.w	r0, #0
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a46:	0150      	lsls	r0, r2, #5
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a52:	4649      	mov	r1, r9
 8005a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a70:	eb63 050b 	sbc.w	r5, r3, fp
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	00eb      	lsls	r3, r5, #3
 8005a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a82:	00e2      	lsls	r2, r4, #3
 8005a84:	4614      	mov	r4, r2
 8005a86:	461d      	mov	r5, r3
 8005a88:	4643      	mov	r3, r8
 8005a8a:	18e3      	adds	r3, r4, r3
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	464b      	mov	r3, r9
 8005a90:	eb45 0303 	adc.w	r3, r5, r3
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	028b      	lsls	r3, r1, #10
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aac:	4621      	mov	r1, r4
 8005aae:	028a      	lsls	r2, r1, #10
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac0:	f7fa fb8e 	bl	80001e0 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ae6:	e002      	b.n	8005aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3750      	adds	r7, #80	; 0x50
 8005af4:	46bd      	mov	sp, r7
 8005af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	007a1200 	.word	0x007a1200

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000000 	.word	0x20000000

08005b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b24:	f7ff fff0 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0a9b      	lsrs	r3, r3, #10
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	08009798 	.word	0x08009798

08005b48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	220f      	movs	r2, #15
 8005b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b58:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0203 	and.w	r2, r3, #3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b70:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	08db      	lsrs	r3, r3, #3
 8005b82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <HAL_RCC_GetClockConfig+0x60>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0207 	and.w	r2, r3, #7
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40023c00 	.word	0x40023c00

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e041      	b.n	8005c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f839 	bl	8005c4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 fe2e 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e044      	b.n	8005d02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x6c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d013      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x6c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_TIM_Base_Start_IT+0xb4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x6c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <HAL_TIM_Base_Start_IT+0xb8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x6c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_TIM_Base_Start_IT+0xbc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x6c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d111      	bne.n	8005cf0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d010      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cee:	e007      	b.n	8005d00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40014000 	.word	0x40014000

08005d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e041      	b.n	8005dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb fb26 	bl	800139c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f000 fd72 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	e022      	b.n	8005e36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d109      	bne.n	8005e0a <HAL_TIM_PWM_Start_DMA+0x46>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	e015      	b.n	8005e36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d109      	bne.n	8005e24 <HAL_TIM_PWM_Start_DMA+0x60>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2301      	moveq	r3, #1
 8005e1e:	2300      	movne	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	e008      	b.n	8005e36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e15d      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_TIM_PWM_Start_DMA+0x94>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e022      	b.n	8005e9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d109      	bne.n	8005e72 <HAL_TIM_PWM_Start_DMA+0xae>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	e015      	b.n	8005e9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e008      	b.n	8005e9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d024      	beq.n	8005eec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start_DMA+0xee>
 8005ea8:	887b      	ldrh	r3, [r7, #2]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e123      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec0:	e016      	b.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed0:	e00e      	b.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	e006      	b.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eea:	e001      	b.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e104      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	f200 80ae 	bhi.w	8006054 <HAL_TIM_PWM_Start_DMA+0x290>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f35 	.word	0x08005f35
 8005f04:	08006055 	.word	0x08006055
 8005f08:	08006055 	.word	0x08006055
 8005f0c:	08006055 	.word	0x08006055
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08006055 	.word	0x08006055
 8005f18:	08006055 	.word	0x08006055
 8005f1c:	08006055 	.word	0x08006055
 8005f20:	08005fc5 	.word	0x08005fc5
 8005f24:	08006055 	.word	0x08006055
 8005f28:	08006055 	.word	0x08006055
 8005f2c:	08006055 	.word	0x08006055
 8005f30:	0800600d 	.word	0x0800600d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	4a72      	ldr	r2, [pc, #456]	; (8006104 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	4a71      	ldr	r2, [pc, #452]	; (8006108 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	4a70      	ldr	r2, [pc, #448]	; (800610c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3334      	adds	r3, #52	; 0x34
 8005f58:	461a      	mov	r2, r3
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	f7fe f88a 	bl	8004074 <HAL_DMA_Start_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0c7      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	60da      	str	r2, [r3, #12]
      break;
 8005f7a:	e06e      	b.n	800605a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	4a60      	ldr	r2, [pc, #384]	; (8006104 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4a5f      	ldr	r2, [pc, #380]	; (8006108 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	4a5e      	ldr	r2, [pc, #376]	; (800610c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3338      	adds	r3, #56	; 0x38
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	f7fe f866 	bl	8004074 <HAL_DMA_Start_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e0a3      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fc0:	60da      	str	r2, [r3, #12]
      break;
 8005fc2:	e04a      	b.n	800605a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	4a4e      	ldr	r2, [pc, #312]	; (8006104 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005fca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a4d      	ldr	r2, [pc, #308]	; (8006108 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a4c      	ldr	r2, [pc, #304]	; (800610c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005fda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	333c      	adds	r3, #60	; 0x3c
 8005fe8:	461a      	mov	r2, r3
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	f7fe f842 	bl	8004074 <HAL_DMA_Start_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07f      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006008:	60da      	str	r2, [r3, #12]
      break;
 800600a:	e026      	b.n	800605a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	4a3c      	ldr	r2, [pc, #240]	; (8006104 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4a3b      	ldr	r2, [pc, #236]	; (8006108 <HAL_TIM_PWM_Start_DMA+0x344>)
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	4a3a      	ldr	r2, [pc, #232]	; (800610c <HAL_TIM_PWM_Start_DMA+0x348>)
 8006022:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3340      	adds	r3, #64	; 0x40
 8006030:	461a      	mov	r2, r3
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	f7fe f81e 	bl	8004074 <HAL_DMA_Start_IT>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e05b      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006050:	60da      	str	r2, [r3, #12]
      break;
 8006052:	e002      	b.n	800605a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
      break;
 8006058:	bf00      	nop
  }

  if (status == HAL_OK)
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d14b      	bne.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fdfb 	bl	8006c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a27      	ldr	r2, [pc, #156]	; (8006110 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d107      	bne.n	8006088 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_PWM_Start_DMA+0x300>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_PWM_Start_DMA+0x300>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_TIM_PWM_Start_DMA+0x350>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_TIM_PWM_Start_DMA+0x354>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_TIM_PWM_Start_DMA+0x358>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d111      	bne.n	80060e8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d010      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e6:	e007      	b.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	0800673b 	.word	0x0800673b
 8006108:	080067e3 	.word	0x080067e3
 800610c:	080066a9 	.word	0x080066a9
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000

08006124 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d855      	bhi.n	80061e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006175 	.word	0x08006175
 8006144:	080061e5 	.word	0x080061e5
 8006148:	080061e5 	.word	0x080061e5
 800614c:	080061e5 	.word	0x080061e5
 8006150:	08006191 	.word	0x08006191
 8006154:	080061e5 	.word	0x080061e5
 8006158:	080061e5 	.word	0x080061e5
 800615c:	080061e5 	.word	0x080061e5
 8006160:	080061ad 	.word	0x080061ad
 8006164:	080061e5 	.word	0x080061e5
 8006168:	080061e5 	.word	0x080061e5
 800616c:	080061e5 	.word	0x080061e5
 8006170:	080061c9 	.word	0x080061c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006182:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd ffcb 	bl	8004124 <HAL_DMA_Abort_IT>
      break;
 800618e:	e02c      	b.n	80061ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd ffbd 	bl	8004124 <HAL_DMA_Abort_IT>
      break;
 80061aa:	e01e      	b.n	80061ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd ffaf 	bl	8004124 <HAL_DMA_Abort_IT>
      break;
 80061c6:	e010      	b.n	80061ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fd ffa1 	bl	8004124 <HAL_DMA_Abort_IT>
      break;
 80061e2:	e002      	b.n	80061ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
      break;
 80061e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d157      	bne.n	80062a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fd33 	bl	8006c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d117      	bne.n	8006238 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10f      	bne.n	8006238 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	f240 4344 	movw	r3, #1092	; 0x444
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10f      	bne.n	8006268 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	f240 4344 	movw	r3, #1092	; 0x444
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <HAL_TIM_PWM_Stop_DMA+0x154>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006276:	e013      	b.n	80062a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d104      	bne.n	8006288 <HAL_TIM_PWM_Stop_DMA+0x164>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006286:	e00b      	b.n	80062a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b08      	cmp	r3, #8
 800628c:	d104      	bne.n	8006298 <HAL_TIM_PWM_Stop_DMA+0x174>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006296:	e003      	b.n	80062a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000

080062b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d122      	bne.n	800630c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0202 	mvn.w	r2, #2
 80062dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9b0 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9a2 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fd f91b 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b04      	cmp	r3, #4
 8006318:	d122      	bne.n	8006360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b04      	cmp	r3, #4
 8006326:	d11b      	bne.n	8006360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0204 	mvn.w	r2, #4
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f986 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f978 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fd f8f1 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b08      	cmp	r3, #8
 800636c:	d122      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b08      	cmp	r3, #8
 800637a:	d11b      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0208 	mvn.w	r2, #8
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f95c 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f94e 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fd f8c7 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b10      	cmp	r3, #16
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0210 	mvn.w	r2, #16
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2208      	movs	r2, #8
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f932 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f924 	bl	8006644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fd f89d 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b01      	cmp	r3, #1
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0201 	mvn.w	r2, #1
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fa fd50 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	2b80      	cmp	r3, #128	; 0x80
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fcf2 	bl	8006e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d10e      	bne.n	800648c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d107      	bne.n	800648c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8fa 	bl	8006680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b20      	cmp	r3, #32
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0220 	mvn.w	r2, #32
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fcbc 	bl	8006e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064da:	2302      	movs	r3, #2
 80064dc:	e0ae      	b.n	800663c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	f200 809f 	bhi.w	800662c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006529 	.word	0x08006529
 80064f8:	0800662d 	.word	0x0800662d
 80064fc:	0800662d 	.word	0x0800662d
 8006500:	0800662d 	.word	0x0800662d
 8006504:	08006569 	.word	0x08006569
 8006508:	0800662d 	.word	0x0800662d
 800650c:	0800662d 	.word	0x0800662d
 8006510:	0800662d 	.word	0x0800662d
 8006514:	080065ab 	.word	0x080065ab
 8006518:	0800662d 	.word	0x0800662d
 800651c:	0800662d 	.word	0x0800662d
 8006520:	0800662d 	.word	0x0800662d
 8006524:	080065eb 	.word	0x080065eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fa0c 	bl	800694c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6999      	ldr	r1, [r3, #24]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	619a      	str	r2, [r3, #24]
      break;
 8006566:	e064      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa52 	bl	8006a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	619a      	str	r2, [r3, #24]
      break;
 80065a8:	e043      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fa9d 	bl	8006af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0208 	orr.w	r2, r2, #8
 80065c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0204 	bic.w	r2, r2, #4
 80065d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69d9      	ldr	r1, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	61da      	str	r2, [r3, #28]
      break;
 80065e8:	e023      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fae7 	bl	8006bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	021a      	lsls	r2, r3, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	61da      	str	r2, [r3, #28]
      break;
 800662a:	e002      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
      break;
 8006630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d107      	bne.n	80066d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ce:	e02a      	b.n	8006726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d107      	bne.n	80066ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2202      	movs	r2, #2
 80066de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e8:	e01d      	b.n	8006726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d107      	bne.n	8006704 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2204      	movs	r2, #4
 80066f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006702:	e010      	b.n	8006726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d107      	bne.n	800671e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2208      	movs	r2, #8
 8006712:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800671c:	e003      	b.n	8006726 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ffb4 	bl	8006694 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d10b      	bne.n	800676a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d136      	bne.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006768:	e031      	b.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d10b      	bne.n	800678c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2202      	movs	r2, #2
 8006778:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d125      	bne.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678a:	e020      	b.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d10b      	bne.n	80067ae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2204      	movs	r2, #4
 800679a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d114      	bne.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	e00f      	b.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d10a      	bne.n	80067ce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2208      	movs	r2, #8
 80067bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d103      	bne.n	80067ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7fc feb4 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	771a      	strb	r2, [r3, #28]
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d103      	bne.n	8006802 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	771a      	strb	r2, [r3, #28]
 8006800:	e019      	b.n	8006836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d103      	bne.n	8006814 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2202      	movs	r2, #2
 8006810:	771a      	strb	r2, [r3, #28]
 8006812:	e010      	b.n	8006836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d103      	bne.n	8006826 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2204      	movs	r2, #4
 8006822:	771a      	strb	r2, [r3, #28]
 8006824:	e007      	b.n	8006836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d102      	bne.n	8006836 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2208      	movs	r2, #8
 8006834:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff ff18 	bl	800666c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a34      	ldr	r2, [pc, #208]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a31      	ldr	r2, [pc, #196]	; (8006934 <TIM_Base_SetConfig+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a30      	ldr	r2, [pc, #192]	; (8006938 <TIM_Base_SetConfig+0xec>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <TIM_Base_SetConfig+0xf0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01b      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d017      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a22      	ldr	r2, [pc, #136]	; (8006934 <TIM_Base_SetConfig+0xe8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a21      	ldr	r2, [pc, #132]	; (8006938 <TIM_Base_SetConfig+0xec>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_Base_SetConfig+0xf0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <TIM_Base_SetConfig+0xf4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <TIM_Base_SetConfig+0xf8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <TIM_Base_SetConfig+0xfc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	615a      	str	r2, [r3, #20]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40014000 	.word	0x40014000
 8006944:	40014400 	.word	0x40014400
 8006948:	40014800 	.word	0x40014800

0800694c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0302 	bic.w	r3, r3, #2
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <TIM_OC1_SetConfig+0xc8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10c      	bne.n	80069c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0308 	bic.w	r3, r3, #8
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f023 0304 	bic.w	r3, r3, #4
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <TIM_OC1_SetConfig+0xc8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d111      	bne.n	80069ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40010000 	.word	0x40010000

08006a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0210 	bic.w	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0320 	bic.w	r3, r3, #32
 8006a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <TIM_OC2_SetConfig+0xd4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a15      	ldr	r2, [pc, #84]	; (8006aec <TIM_OC2_SetConfig+0xd4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d113      	bne.n	8006ac4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000

08006af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <TIM_OC3_SetConfig+0xd0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10d      	bne.n	8006b6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <TIM_OC3_SetConfig+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	031b      	lsls	r3, r3, #12
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <TIM_OC4_SetConfig+0x9c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d109      	bne.n	8006c38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	019b      	lsls	r3, r3, #6
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000

08006c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	2201      	movs	r2, #1
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	43db      	mvns	r3, r3
 8006c86:	401a      	ands	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e050      	b.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d013      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a18      	ldr	r2, [pc, #96]	; (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a16      	ldr	r2, [pc, #88]	; (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10c      	bne.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40010000 	.word	0x40010000
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40000c00 	.word	0x40000c00
 8006d88:	40014000 	.word	0x40014000

08006d8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e03d      	b.n	8006e24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6a:	2b84      	cmp	r3, #132	; 0x84
 8006e6c:	d005      	beq.n	8006e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	3303      	adds	r3, #3
 8006e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e8c:	f001 f866 	bl	8007f5c <vTaskStartScheduler>
  
  return osOK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e98:	b089      	sub	sp, #36	; 0x24
 8006e9a:	af04      	add	r7, sp, #16
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <osThreadCreate+0x54>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01c      	beq.n	8006eea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685c      	ldr	r4, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691e      	ldr	r6, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ffc8 	bl	8006e58 <makeFreeRtosPriority>
 8006ec8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	9100      	str	r1, [sp, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4632      	mov	r2, r6
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fde0 	bl	8007aa4 <xTaskCreateStatic>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e01c      	b.n	8006f24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685c      	ldr	r4, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ef6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ffaa 	bl	8006e58 <makeFreeRtosPriority>
 8006f04:	4602      	mov	r2, r0
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	9200      	str	r2, [sp, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	4632      	mov	r2, r6
 8006f12:	4629      	mov	r1, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 fe22 	bl	8007b5e <xTaskCreate>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <osDelay+0x16>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e000      	b.n	8006f46 <osDelay+0x18>
 8006f44:	2301      	movs	r3, #1
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 ffd4 	bl	8007ef4 <vTaskDelay>
  
  return osOK;
 8006f4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f103 0208 	add.w	r2, r3, #8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f103 0208 	add.w	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e00c      	b.n	8007032 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3308      	adds	r3, #8
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e002      	b.n	8007026 <vListInsert+0x2e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	d2f6      	bcs.n	8007020 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6892      	ldr	r2, [r2, #8]
 8007080:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6852      	ldr	r2, [r2, #4]
 800708a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d103      	bne.n	800709e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	1e5a      	subs	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ea:	f001 fe9b 	bl	8008e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	3b01      	subs	r3, #1
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	441a      	add	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d114      	bne.n	800716a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3310      	adds	r3, #16
 800714c:	4618      	mov	r0, r3
 800714e:	f001 f957 	bl	8008400 <xTaskRemoveFromEventList>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <xQueueGenericReset+0xcc>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	e009      	b.n	800717e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3310      	adds	r3, #16
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff fef1 	bl	8006f56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3324      	adds	r3, #36	; 0x24
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff feec 	bl	8006f56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800717e:	f001 fe81 	bl	8008e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007182:	2301      	movs	r3, #1
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	613b      	str	r3, [r7, #16]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3348      	adds	r3, #72	; 0x48
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 ff0d 	bl	8008fe8 <pvPortMalloc>
 80071ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d011      	beq.n	80071fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	3348      	adds	r3, #72	; 0x48
 80071de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071e8:	79fa      	ldrb	r2, [r7, #7]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f805 	bl	8007204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071fa:	69bb      	ldr	r3, [r7, #24]
	}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d103      	bne.n	8007220 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e002      	b.n	8007226 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007232:	2101      	movs	r1, #1
 8007234:	69b8      	ldr	r0, [r7, #24]
 8007236:	f7ff ff43 	bl	80070c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGenericSend+0x32>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <xQueueGenericSend+0x40>
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <xQueueGenericSend+0x44>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <xQueueGenericSend+0x46>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <xQueueGenericSend+0x60>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSend+0x6e>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <xQueueGenericSend+0x72>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <xQueueGenericSend+0x74>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d2:	f001 fa55 	bl	8008780 <xTaskGetSchedulerState>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <xQueueGenericSend+0x9e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <xQueueGenericSend+0xa2>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericSend+0xa4>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericSend+0xbe>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61fb      	str	r3, [r7, #28]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007302:	f001 fd8f 	bl	8008e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <xQueueGenericSend+0xd4>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d129      	bne.n	800736c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731e:	f000 fab1 	bl	8007884 <prvCopyDataToQueue>
 8007322:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f865 	bl	8008400 <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800733c:	4b3f      	ldr	r3, [pc, #252]	; (800743c <xQueueGenericSend+0x1f8>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e00a      	b.n	8007364 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007354:	4b39      	ldr	r3, [pc, #228]	; (800743c <xQueueGenericSend+0x1f8>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007364:	f001 fd8e 	bl	8008e84 <vPortExitCritical>
				return pdPASS;
 8007368:	2301      	movs	r3, #1
 800736a:	e063      	b.n	8007434 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007372:	f001 fd87 	bl	8008e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007376:	2300      	movs	r3, #0
 8007378:	e05c      	b.n	8007434 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	4618      	mov	r0, r3
 8007386:	f001 f89d 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800738e:	f001 fd79 	bl	8008e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007392:	f000 fe4d 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007396:	f001 fd45 	bl	8008e24 <vPortEnterCritical>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d103      	bne.n	80073b0 <xQueueGenericSend+0x16c>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d103      	bne.n	80073c6 <xQueueGenericSend+0x182>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c6:	f001 fd5d 	bl	8008e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ca:	1d3a      	adds	r2, r7, #4
 80073cc:	f107 0314 	add.w	r3, r7, #20
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f88c 	bl	80084f0 <xTaskCheckForTimeOut>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d124      	bne.n	8007428 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073e0:	f000 fb48 	bl	8007a74 <prvIsQueueFull>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d018      	beq.n	800741c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	3310      	adds	r3, #16
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4611      	mov	r1, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 ffe0 	bl	80083b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f000 fad3 	bl	80079a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f000 fe25 	bl	800804c <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af7c 	bne.w	8007302 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <xQueueGenericSend+0x1f8>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	e772      	b.n	8007302 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800741c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741e:	f000 fac1 	bl	80079a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007422:	f000 fe13 	bl	800804c <xTaskResumeAll>
 8007426:	e76c      	b.n	8007302 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800742a:	f000 fabb 	bl	80079a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742e:	f000 fe0d 	bl	800804c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3738      	adds	r7, #56	; 0x38
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	; 0x30
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <xQueueReceive+0x30>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	623b      	str	r3, [r7, #32]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d103      	bne.n	800747e <xQueueReceive+0x3e>
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <xQueueReceive+0x42>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <xQueueReceive+0x44>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xQueueReceive+0x5e>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61fb      	str	r3, [r7, #28]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800749e:	f001 f96f 	bl	8008780 <xTaskGetSchedulerState>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <xQueueReceive+0x6e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <xQueueReceive+0x72>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <xQueueReceive+0x74>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xQueueReceive+0x8e>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	61bb      	str	r3, [r7, #24]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ce:	f001 fca9 	bl	8008e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01f      	beq.n	800751e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e2:	f000 fa39 	bl	8007958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	1e5a      	subs	r2, r3, #1
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00f      	beq.n	8007516 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	3310      	adds	r3, #16
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 ff80 	bl	8008400 <xTaskRemoveFromEventList>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007506:	4b3d      	ldr	r3, [pc, #244]	; (80075fc <xQueueReceive+0x1bc>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007516:	f001 fcb5 	bl	8008e84 <vPortExitCritical>
				return pdPASS;
 800751a:	2301      	movs	r3, #1
 800751c:	e069      	b.n	80075f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007524:	f001 fcae 	bl	8008e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007528:	2300      	movs	r3, #0
 800752a:	e062      	b.n	80075f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	4618      	mov	r0, r3
 8007538:	f000 ffc4 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007540:	f001 fca0 	bl	8008e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007544:	f000 fd74 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007548:	f001 fc6c 	bl	8008e24 <vPortEnterCritical>
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007552:	b25b      	sxtb	r3, r3
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d103      	bne.n	8007562 <xQueueReceive+0x122>
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007568:	b25b      	sxtb	r3, r3
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d103      	bne.n	8007578 <xQueueReceive+0x138>
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007578:	f001 fc84 	bl	8008e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800757c:	1d3a      	adds	r2, r7, #4
 800757e:	f107 0310 	add.w	r3, r7, #16
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ffb3 	bl	80084f0 <xTaskCheckForTimeOut>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d123      	bne.n	80075d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f000 fa59 	bl	8007a48 <prvIsQueueEmpty>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 ff07 	bl	80083b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ac:	f000 f9fa 	bl	80079a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075b0:	f000 fd4c 	bl	800804c <xTaskResumeAll>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d189      	bne.n	80074ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80075ba:	4b10      	ldr	r3, [pc, #64]	; (80075fc <xQueueReceive+0x1bc>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	e780      	b.n	80074ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ce:	f000 f9e9 	bl	80079a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075d2:	f000 fd3b 	bl	800804c <xTaskResumeAll>
 80075d6:	e77a      	b.n	80074ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075da:	f000 f9e3 	bl	80079a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075de:	f000 fd35 	bl	800804c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e4:	f000 fa30 	bl	8007a48 <prvIsQueueEmpty>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f43f af6f 	beq.w	80074ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3730      	adds	r7, #48	; 0x30
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	e000ed04 	.word	0xe000ed04

08007600 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08e      	sub	sp, #56	; 0x38
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800760a:	2300      	movs	r3, #0
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	623b      	str	r3, [r7, #32]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	61fb      	str	r3, [r7, #28]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007650:	f001 f896 	bl	8008780 <xTaskGetSchedulerState>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <xQueueSemaphoreTake+0x60>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <xQueueSemaphoreTake+0x64>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <xQueueSemaphoreTake+0x66>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	61bb      	str	r3, [r7, #24]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007680:	f001 fbd0 	bl	8008e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d024      	beq.n	80076da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	1e5a      	subs	r2, r3, #1
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d104      	bne.n	80076aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076a0:	f001 fa16 	bl	8008ad0 <pvTaskIncrementMutexHeldCount>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00f      	beq.n	80076d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	3310      	adds	r3, #16
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fea2 	bl	8008400 <xTaskRemoveFromEventList>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076c2:	4b54      	ldr	r3, [pc, #336]	; (8007814 <xQueueSemaphoreTake+0x214>)
 80076c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076d2:	f001 fbd7 	bl	8008e84 <vPortExitCritical>
				return pdPASS;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e097      	b.n	800780a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d111      	bne.n	8007704 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	617b      	str	r3, [r7, #20]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80076fc:	f001 fbc2 	bl	8008e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007700:	2300      	movs	r3, #0
 8007702:	e082      	b.n	800780a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fed8 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007718:	f001 fbb4 	bl	8008e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800771c:	f000 fc88 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007720:	f001 fb80 	bl	8008e24 <vPortEnterCritical>
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800772a:	b25b      	sxtb	r3, r3
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d103      	bne.n	800773a <xQueueSemaphoreTake+0x13a>
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007740:	b25b      	sxtb	r3, r3
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d103      	bne.n	8007750 <xQueueSemaphoreTake+0x150>
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007750:	f001 fb98 	bl	8008e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007754:	463a      	mov	r2, r7
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fec7 	bl	80084f0 <xTaskCheckForTimeOut>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d132      	bne.n	80077ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800776a:	f000 f96d 	bl	8007a48 <prvIsQueueEmpty>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d026      	beq.n	80077c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800777c:	f001 fb52 	bl	8008e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f819 	bl	80087bc <xTaskPriorityInherit>
 800778a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800778c:	f001 fb7a 	bl	8008e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	3324      	adds	r3, #36	; 0x24
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fe0d 	bl	80083b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800779e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077a0:	f000 f900 	bl	80079a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077a4:	f000 fc52 	bl	800804c <xTaskResumeAll>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f47f af68 	bne.w	8007680 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80077b0:	4b18      	ldr	r3, [pc, #96]	; (8007814 <xQueueSemaphoreTake+0x214>)
 80077b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	e75e      	b.n	8007680 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077c4:	f000 f8ee 	bl	80079a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c8:	f000 fc40 	bl	800804c <xTaskResumeAll>
 80077cc:	e758      	b.n	8007680 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077d0:	f000 f8e8 	bl	80079a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077d4:	f000 fc3a 	bl	800804c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077da:	f000 f935 	bl	8007a48 <prvIsQueueEmpty>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f43f af4d 	beq.w	8007680 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80077ec:	f001 fb1a 	bl	8008e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80077f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f2:	f000 f82f 	bl	8007854 <prvGetDisinheritPriorityAfterTimeout>
 80077f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 f8d8 	bl	80089b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007804:	f001 fb3e 	bl	8008e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007808:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800780a:	4618      	mov	r0, r3
 800780c:	3738      	adds	r7, #56	; 0x38
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800783c:	f001 faf2 	bl	8008e24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007846:	f001 fb1d 	bl	8008e84 <vPortExitCritical>

	return uxReturn;
 800784a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1c3 0307 	rsb	r3, r3, #7
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e001      	b.n	8007876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007876:	68fb      	ldr	r3, [r7, #12]
	}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d14d      	bne.n	8007946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fffa 	bl	80088a8 <xTaskPriorityDisinherit>
 80078b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	609a      	str	r2, [r3, #8]
 80078bc:	e043      	b.n	8007946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d119      	bne.n	80078f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6858      	ldr	r0, [r3, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	461a      	mov	r2, r3
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	f001 fdf8 	bl	80094c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d32b      	bcc.n	8007946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	e026      	b.n	8007946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68d8      	ldr	r0, [r3, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	461a      	mov	r2, r3
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	f001 fdde 	bl	80094c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	425b      	negs	r3, r3
 8007912:	441a      	add	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d207      	bcs.n	8007934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	425b      	negs	r3, r3
 800792e:	441a      	add	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d105      	bne.n	8007946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3b01      	subs	r3, #1
 8007944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800794e:	697b      	ldr	r3, [r7, #20]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d018      	beq.n	800799c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	441a      	add	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	429a      	cmp	r2, r3
 8007982:	d303      	bcc.n	800798c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68d9      	ldr	r1, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	461a      	mov	r2, r3
 8007996:	6838      	ldr	r0, [r7, #0]
 8007998:	f001 fd94 	bl	80094c4 <memcpy>
	}
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079ac:	f001 fa3a 	bl	8008e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079b8:	e011      	b.n	80079de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d012      	beq.n	80079e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3324      	adds	r3, #36	; 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fd1a 	bl	8008400 <xTaskRemoveFromEventList>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079d2:	f000 fdef 	bl	80085b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	3b01      	subs	r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dce9      	bgt.n	80079ba <prvUnlockQueue+0x16>
 80079e6:	e000      	b.n	80079ea <prvUnlockQueue+0x46>
					break;
 80079e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079f2:	f001 fa47 	bl	8008e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079f6:	f001 fa15 	bl	8008e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a02:	e011      	b.n	8007a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d012      	beq.n	8007a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3310      	adds	r3, #16
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fcf5 	bl	8008400 <xTaskRemoveFromEventList>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a1c:	f000 fdca 	bl	80085b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dce9      	bgt.n	8007a04 <prvUnlockQueue+0x60>
 8007a30:	e000      	b.n	8007a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	22ff      	movs	r2, #255	; 0xff
 8007a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a3c:	f001 fa22 	bl	8008e84 <vPortExitCritical>
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a50:	f001 f9e8 	bl	8008e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e001      	b.n	8007a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a66:	f001 fa0d 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a7c:	f001 f9d2 	bl	8008e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d102      	bne.n	8007a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e001      	b.n	8007a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 f9f5 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08e      	sub	sp, #56	; 0x38
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	623b      	str	r3, [r7, #32]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xTaskCreateStatic+0x46>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61fb      	str	r3, [r7, #28]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aea:	23a0      	movs	r3, #160	; 0xa0
 8007aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2ba0      	cmp	r3, #160	; 0xa0
 8007af2:	d00a      	beq.n	8007b0a <xTaskCreateStatic+0x66>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	61bb      	str	r3, [r7, #24]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01e      	beq.n	8007b50 <xTaskCreateStatic+0xac>
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01b      	beq.n	8007b50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	2202      	movs	r2, #2
 8007b26:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	9302      	str	r3, [sp, #8]
 8007b32:	f107 0314 	add.w	r3, r7, #20
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f850 	bl	8007be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b4a:	f000 f8eb 	bl	8007d24 <prvAddNewTaskToReadyList>
 8007b4e:	e001      	b.n	8007b54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b54:	697b      	ldr	r3, [r7, #20]
	}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3728      	adds	r7, #40	; 0x28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08c      	sub	sp, #48	; 0x30
 8007b62:	af04      	add	r7, sp, #16
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fa38 	bl	8008fe8 <pvPortMalloc>
 8007b78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00e      	beq.n	8007b9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b80:	20a0      	movs	r0, #160	; 0xa0
 8007b82:	f001 fa31 	bl	8008fe8 <pvPortMalloc>
 8007b86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30
 8007b94:	e005      	b.n	8007ba2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b96:	6978      	ldr	r0, [r7, #20]
 8007b98:	f001 faf2 	bl	8009180 <vPortFree>
 8007b9c:	e001      	b.n	8007ba2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d017      	beq.n	8007bd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bb0:	88fa      	ldrh	r2, [r7, #6]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f80e 	bl	8007be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bcc:	69f8      	ldr	r0, [r7, #28]
 8007bce:	f000 f8a9 	bl	8007d24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	e002      	b.n	8007bde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bde:	69bb      	ldr	r3, [r7, #24]
	}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	3b01      	subs	r3, #1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f023 0307 	bic.w	r3, r3, #7
 8007c0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	617b      	str	r3, [r7, #20]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01f      	beq.n	8007c76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	e012      	b.n	8007c62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	7819      	ldrb	r1, [r3, #0]
 8007c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	3334      	adds	r3, #52	; 0x34
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d9e9      	bls.n	8007c3c <prvInitialiseNewTask+0x54>
 8007c68:	e000      	b.n	8007c6c <prvInitialiseNewTask+0x84>
			{
				break;
 8007c6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c74:	e003      	b.n	8007c7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2b06      	cmp	r3, #6
 8007c82:	d901      	bls.n	8007c88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c84:	2306      	movs	r3, #6
 8007c86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	2200      	movs	r2, #0
 8007c98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff f979 	bl	8006f96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	3318      	adds	r3, #24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff f974 	bl	8006f96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	f1c3 0207 	rsb	r2, r3, #7
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	334c      	adds	r3, #76	; 0x4c
 8007cd8:	224c      	movs	r2, #76	; 0x4c
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fb6d 	bl	80093bc <memset>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	4a0c      	ldr	r2, [pc, #48]	; (8007d18 <prvInitialiseNewTask+0x130>)
 8007ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <prvInitialiseNewTask+0x134>)
 8007cec:	655a      	str	r2, [r3, #84]	; 0x54
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <prvInitialiseNewTask+0x138>)
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	69b8      	ldr	r0, [r7, #24]
 8007cfa:	f000 ff63 	bl	8008bc4 <pxPortInitialiseStack>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d10:	bf00      	nop
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20005418 	.word	0x20005418
 8007d1c:	20005480 	.word	0x20005480
 8007d20:	200054e8 	.word	0x200054e8

08007d24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d2c:	f001 f87a 	bl	8008e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d30:	4b2a      	ldr	r3, [pc, #168]	; (8007ddc <prvAddNewTaskToReadyList+0xb8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <prvAddNewTaskToReadyList+0xb8>)
 8007d38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <prvAddNewTaskToReadyList+0xbc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d42:	4a27      	ldr	r2, [pc, #156]	; (8007de0 <prvAddNewTaskToReadyList+0xbc>)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d48:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <prvAddNewTaskToReadyList+0xb8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d110      	bne.n	8007d72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d50:	f000 fc54 	bl	80085fc <prvInitialiseTaskLists>
 8007d54:	e00d      	b.n	8007d72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d56:	4b23      	ldr	r3, [pc, #140]	; (8007de4 <prvAddNewTaskToReadyList+0xc0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d5e:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <prvAddNewTaskToReadyList+0xbc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d802      	bhi.n	8007d72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d6c:	4a1c      	ldr	r2, [pc, #112]	; (8007de0 <prvAddNewTaskToReadyList+0xbc>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d72:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <prvAddNewTaskToReadyList+0xc4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <prvAddNewTaskToReadyList+0xc4>)
 8007d7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	2201      	movs	r2, #1
 8007d82:	409a      	lsls	r2, r3
 8007d84:	4b19      	ldr	r3, [pc, #100]	; (8007dec <prvAddNewTaskToReadyList+0xc8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	4a18      	ldr	r2, [pc, #96]	; (8007dec <prvAddNewTaskToReadyList+0xc8>)
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <prvAddNewTaskToReadyList+0xcc>)
 8007d9c:	441a      	add	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7ff f903 	bl	8006fb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007daa:	f001 f86b 	bl	8008e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dae:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <prvAddNewTaskToReadyList+0xc0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00e      	beq.n	8007dd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <prvAddNewTaskToReadyList+0xbc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d207      	bcs.n	8007dd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <prvAddNewTaskToReadyList+0xd0>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200017c4 	.word	0x200017c4
 8007de0:	200016c4 	.word	0x200016c4
 8007de4:	200017d0 	.word	0x200017d0
 8007de8:	200017e0 	.word	0x200017e0
 8007dec:	200017cc 	.word	0x200017cc
 8007df0:	200016c8 	.word	0x200016c8
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	617b      	str	r3, [r7, #20]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <vTaskDelayUntil+0x46>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	613b      	str	r3, [r7, #16]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007e3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <vTaskDelayUntil+0xf0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <vTaskDelayUntil+0x64>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007e5c:	f000 f8e8 	bl	8008030 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <vTaskDelayUntil+0xf4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a3a      	ldr	r2, [r7, #32]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d20b      	bcs.n	8007e92 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d211      	bcs.n	8007ea8 <vTaskDelayUntil+0xb0>
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d90d      	bls.n	8007ea8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e90:	e00a      	b.n	8007ea8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d303      	bcc.n	8007ea4 <vTaskDelayUntil+0xac>
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d901      	bls.n	8007ea8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2100      	movs	r1, #0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fe1b 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007ec2:	f000 f8c3 	bl	800804c <xTaskResumeAll>
 8007ec6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <vTaskDelayUntil+0xf8>)
 8007ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ede:	bf00      	nop
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200017ec 	.word	0x200017ec
 8007eec:	200017c8 	.word	0x200017c8
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d017      	beq.n	8007f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f06:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <vTaskDelay+0x60>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <vTaskDelay+0x30>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60bb      	str	r3, [r7, #8]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f24:	f000 f884 	bl	8008030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fde4 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f30:	f000 f88c 	bl	800804c <xTaskResumeAll>
 8007f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d107      	bne.n	8007f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <vTaskDelay+0x64>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200017ec 	.word	0x200017ec
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	1d39      	adds	r1, r7, #4
 8007f6e:	f107 0308 	add.w	r3, r7, #8
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f8 fcc4 	bl	8000900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	9202      	str	r2, [sp, #8]
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	460a      	mov	r2, r1
 8007f8a:	4921      	ldr	r1, [pc, #132]	; (8008010 <vTaskStartScheduler+0xb4>)
 8007f8c:	4821      	ldr	r0, [pc, #132]	; (8008014 <vTaskStartScheduler+0xb8>)
 8007f8e:	f7ff fd89 	bl	8007aa4 <xTaskCreateStatic>
 8007f92:	4603      	mov	r3, r0
 8007f94:	4a20      	ldr	r2, [pc, #128]	; (8008018 <vTaskStartScheduler+0xbc>)
 8007f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f98:	4b1f      	ldr	r3, [pc, #124]	; (8008018 <vTaskStartScheduler+0xbc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	e001      	b.n	8007faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d11b      	bne.n	8007fe8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fc4:	4b15      	ldr	r3, [pc, #84]	; (800801c <vTaskStartScheduler+0xc0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	334c      	adds	r3, #76	; 0x4c
 8007fca:	4a15      	ldr	r2, [pc, #84]	; (8008020 <vTaskStartScheduler+0xc4>)
 8007fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fce:	4b15      	ldr	r3, [pc, #84]	; (8008024 <vTaskStartScheduler+0xc8>)
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <vTaskStartScheduler+0xcc>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <vTaskStartScheduler+0xd0>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fe2:	f000 fe7d 	bl	8008ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fe6:	e00e      	b.n	8008006 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fee:	d10a      	bne.n	8008006 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <vTaskStartScheduler+0xa8>
}
 8008006:	bf00      	nop
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	08009780 	.word	0x08009780
 8008014:	080085cd 	.word	0x080085cd
 8008018:	200017e8 	.word	0x200017e8
 800801c:	200016c4 	.word	0x200016c4
 8008020:	200000ec 	.word	0x200000ec
 8008024:	200017e4 	.word	0x200017e4
 8008028:	200017d0 	.word	0x200017d0
 800802c:	200017c8 	.word	0x200017c8

08008030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008034:	4b04      	ldr	r3, [pc, #16]	; (8008048 <vTaskSuspendAll+0x18>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	4a03      	ldr	r2, [pc, #12]	; (8008048 <vTaskSuspendAll+0x18>)
 800803c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	200017ec 	.word	0x200017ec

0800804c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800805a:	4b41      	ldr	r3, [pc, #260]	; (8008160 <xTaskResumeAll+0x114>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <xTaskResumeAll+0x2c>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	603b      	str	r3, [r7, #0]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008078:	f000 fed4 	bl	8008e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800807c:	4b38      	ldr	r3, [pc, #224]	; (8008160 <xTaskResumeAll+0x114>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	4a37      	ldr	r2, [pc, #220]	; (8008160 <xTaskResumeAll+0x114>)
 8008084:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008086:	4b36      	ldr	r3, [pc, #216]	; (8008160 <xTaskResumeAll+0x114>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d161      	bne.n	8008152 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800808e:	4b35      	ldr	r3, [pc, #212]	; (8008164 <xTaskResumeAll+0x118>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d05d      	beq.n	8008152 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008096:	e02e      	b.n	80080f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008098:	4b33      	ldr	r3, [pc, #204]	; (8008168 <xTaskResumeAll+0x11c>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3318      	adds	r3, #24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe ffe0 	bl	800706a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3304      	adds	r3, #4
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe ffdb 	bl	800706a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	2201      	movs	r2, #1
 80080ba:	409a      	lsls	r2, r3
 80080bc:	4b2b      	ldr	r3, [pc, #172]	; (800816c <xTaskResumeAll+0x120>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	4a2a      	ldr	r2, [pc, #168]	; (800816c <xTaskResumeAll+0x120>)
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4a27      	ldr	r2, [pc, #156]	; (8008170 <xTaskResumeAll+0x124>)
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fe ff67 	bl	8006fb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4b23      	ldr	r3, [pc, #140]	; (8008174 <xTaskResumeAll+0x128>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d302      	bcc.n	80080f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080f0:	4b21      	ldr	r3, [pc, #132]	; (8008178 <xTaskResumeAll+0x12c>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f6:	4b1c      	ldr	r3, [pc, #112]	; (8008168 <xTaskResumeAll+0x11c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1cc      	bne.n	8008098 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008104:	f000 fb1c 	bl	8008740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008108:	4b1c      	ldr	r3, [pc, #112]	; (800817c <xTaskResumeAll+0x130>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008114:	f000 f836 	bl	8008184 <xTaskIncrementTick>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <xTaskResumeAll+0x12c>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f1      	bne.n	8008114 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008130:	4b12      	ldr	r3, [pc, #72]	; (800817c <xTaskResumeAll+0x130>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <xTaskResumeAll+0x12c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <xTaskResumeAll+0x134>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008152:	f000 fe97 	bl	8008e84 <vPortExitCritical>

	return xAlreadyYielded;
 8008156:	68bb      	ldr	r3, [r7, #8]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200017ec 	.word	0x200017ec
 8008164:	200017c4 	.word	0x200017c4
 8008168:	20001784 	.word	0x20001784
 800816c:	200017cc 	.word	0x200017cc
 8008170:	200016c8 	.word	0x200016c8
 8008174:	200016c4 	.word	0x200016c4
 8008178:	200017d8 	.word	0x200017d8
 800817c:	200017d4 	.word	0x200017d4
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818e:	4b4e      	ldr	r3, [pc, #312]	; (80082c8 <xTaskIncrementTick+0x144>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 808e 	bne.w	80082b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008198:	4b4c      	ldr	r3, [pc, #304]	; (80082cc <xTaskIncrementTick+0x148>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3301      	adds	r3, #1
 800819e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081a0:	4a4a      	ldr	r2, [pc, #296]	; (80082cc <xTaskIncrementTick+0x148>)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d120      	bne.n	80081ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <xTaskIncrementTick+0x14c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <xTaskIncrementTick+0x48>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	603b      	str	r3, [r7, #0]
}
 80081c8:	bf00      	nop
 80081ca:	e7fe      	b.n	80081ca <xTaskIncrementTick+0x46>
 80081cc:	4b40      	ldr	r3, [pc, #256]	; (80082d0 <xTaskIncrementTick+0x14c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	4b40      	ldr	r3, [pc, #256]	; (80082d4 <xTaskIncrementTick+0x150>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a3e      	ldr	r2, [pc, #248]	; (80082d0 <xTaskIncrementTick+0x14c>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4a3e      	ldr	r2, [pc, #248]	; (80082d4 <xTaskIncrementTick+0x150>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	4b3d      	ldr	r3, [pc, #244]	; (80082d8 <xTaskIncrementTick+0x154>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a3c      	ldr	r2, [pc, #240]	; (80082d8 <xTaskIncrementTick+0x154>)
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	f000 faa9 	bl	8008740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081ee:	4b3b      	ldr	r3, [pc, #236]	; (80082dc <xTaskIncrementTick+0x158>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d348      	bcc.n	800828a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f8:	4b35      	ldr	r3, [pc, #212]	; (80082d0 <xTaskIncrementTick+0x14c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008202:	4b36      	ldr	r3, [pc, #216]	; (80082dc <xTaskIncrementTick+0x158>)
 8008204:	f04f 32ff 	mov.w	r2, #4294967295
 8008208:	601a      	str	r2, [r3, #0]
					break;
 800820a:	e03e      	b.n	800828a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820c:	4b30      	ldr	r3, [pc, #192]	; (80082d0 <xTaskIncrementTick+0x14c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	d203      	bcs.n	800822c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008224:	4a2d      	ldr	r2, [pc, #180]	; (80082dc <xTaskIncrementTick+0x158>)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800822a:	e02e      	b.n	800828a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	3304      	adds	r3, #4
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe ff1a 	bl	800706a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d004      	beq.n	8008248 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3318      	adds	r3, #24
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe ff11 	bl	800706a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	2201      	movs	r2, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <xTaskIncrementTick+0x15c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4313      	orrs	r3, r2
 8008256:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <xTaskIncrementTick+0x15c>)
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <xTaskIncrementTick+0x160>)
 8008268:	441a      	add	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe fe9d 	bl	8006fb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <xTaskIncrementTick+0x164>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	429a      	cmp	r2, r3
 8008282:	d3b9      	bcc.n	80081f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008288:	e7b6      	b.n	80081f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800828a:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <xTaskIncrementTick+0x164>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008290:	4914      	ldr	r1, [pc, #80]	; (80082e4 <xTaskIncrementTick+0x160>)
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d901      	bls.n	80082a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80082a2:	2301      	movs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082a6:	4b11      	ldr	r3, [pc, #68]	; (80082ec <xTaskIncrementTick+0x168>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80082ae:	2301      	movs	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e004      	b.n	80082be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <xTaskIncrementTick+0x16c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <xTaskIncrementTick+0x16c>)
 80082bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082be:	697b      	ldr	r3, [r7, #20]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200017ec 	.word	0x200017ec
 80082cc:	200017c8 	.word	0x200017c8
 80082d0:	2000177c 	.word	0x2000177c
 80082d4:	20001780 	.word	0x20001780
 80082d8:	200017dc 	.word	0x200017dc
 80082dc:	200017e4 	.word	0x200017e4
 80082e0:	200017cc 	.word	0x200017cc
 80082e4:	200016c8 	.word	0x200016c8
 80082e8:	200016c4 	.word	0x200016c4
 80082ec:	200017d8 	.word	0x200017d8
 80082f0:	200017d4 	.word	0x200017d4

080082f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082fa:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <vTaskSwitchContext+0xac>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008302:	4b28      	ldr	r3, [pc, #160]	; (80083a4 <vTaskSwitchContext+0xb0>)
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008308:	e044      	b.n	8008394 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800830a:	4b26      	ldr	r3, [pc, #152]	; (80083a4 <vTaskSwitchContext+0xb0>)
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008310:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <vTaskSwitchContext+0xb4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	fab3 f383 	clz	r3, r3
 800831c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	f1c3 031f 	rsb	r3, r3, #31
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	4921      	ldr	r1, [pc, #132]	; (80083ac <vTaskSwitchContext+0xb8>)
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <vTaskSwitchContext+0x5c>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	607b      	str	r3, [r7, #4]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <vTaskSwitchContext+0x5a>
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4a14      	ldr	r2, [pc, #80]	; (80083ac <vTaskSwitchContext+0xb8>)
 800835c:	4413      	add	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3308      	adds	r3, #8
 8008372:	429a      	cmp	r2, r3
 8008374:	d104      	bne.n	8008380 <vTaskSwitchContext+0x8c>
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	605a      	str	r2, [r3, #4]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <vTaskSwitchContext+0xbc>)
 8008388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800838a:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <vTaskSwitchContext+0xbc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	334c      	adds	r3, #76	; 0x4c
 8008390:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <vTaskSwitchContext+0xc0>)
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	200017ec 	.word	0x200017ec
 80083a4:	200017d8 	.word	0x200017d8
 80083a8:	200017cc 	.word	0x200017cc
 80083ac:	200016c8 	.word	0x200016c8
 80083b0:	200016c4 	.word	0x200016c4
 80083b4:	200000ec 	.word	0x200000ec

080083b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	60fb      	str	r3, [r7, #12]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <vTaskPlaceOnEventList+0x44>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3318      	adds	r3, #24
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fe fe06 	bl	8006ff8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083ec:	2101      	movs	r1, #1
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	f000 fb82 	bl	8008af8 <prvAddCurrentTaskToDelayedList>
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200016c4 	.word	0x200016c4

08008400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	60fb      	str	r3, [r7, #12]
}
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	3318      	adds	r3, #24
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fe1a 	bl	800706a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <xTaskRemoveFromEventList+0xac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d11c      	bne.n	8008478 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fe11 	bl	800706a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	2201      	movs	r2, #1
 800844e:	409a      	lsls	r2, r3
 8008450:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <xTaskRemoveFromEventList+0xb0>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4313      	orrs	r3, r2
 8008456:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <xTaskRemoveFromEventList+0xb0>)
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <xTaskRemoveFromEventList+0xb4>)
 8008468:	441a      	add	r2, r3
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe fd9d 	bl	8006fb0 <vListInsertEnd>
 8008476:	e005      	b.n	8008484 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3318      	adds	r3, #24
 800847c:	4619      	mov	r1, r3
 800847e:	480e      	ldr	r0, [pc, #56]	; (80084b8 <xTaskRemoveFromEventList+0xb8>)
 8008480:	f7fe fd96 	bl	8006fb0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <xTaskRemoveFromEventList+0xbc>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	429a      	cmp	r2, r3
 8008490:	d905      	bls.n	800849e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008492:	2301      	movs	r3, #1
 8008494:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008496:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <xTaskRemoveFromEventList+0xc0>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e001      	b.n	80084a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084a2:	697b      	ldr	r3, [r7, #20]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200017ec 	.word	0x200017ec
 80084b0:	200017cc 	.word	0x200017cc
 80084b4:	200016c8 	.word	0x200016c8
 80084b8:	20001784 	.word	0x20001784
 80084bc:	200016c4 	.word	0x200016c4
 80084c0:	200017d8 	.word	0x200017d8

080084c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <vTaskInternalSetTimeOutState+0x24>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <vTaskInternalSetTimeOutState+0x28>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	200017dc 	.word	0x200017dc
 80084ec:	200017c8 	.word	0x200017c8

080084f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008532:	f000 fc77 	bl	8008e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <xTaskCheckForTimeOut+0xbc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d102      	bne.n	8008556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e023      	b.n	800859e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <xTaskCheckForTimeOut+0xc0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d007      	beq.n	8008572 <xTaskCheckForTimeOut+0x82>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e015      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	429a      	cmp	r2, r3
 800857a:	d20b      	bcs.n	8008594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff9b 	bl	80084c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e004      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800859a:	2301      	movs	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800859e:	f000 fc71 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200017c8 	.word	0x200017c8
 80085b0:	200017dc 	.word	0x200017dc

080085b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <vTaskMissedYield+0x14>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	200017d8 	.word	0x200017d8

080085cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d4:	f000 f852 	bl	800867c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085d8:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <prvIdleTask+0x28>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d9f9      	bls.n	80085d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <prvIdleTask+0x2c>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085f0:	e7f0      	b.n	80085d4 <prvIdleTask+0x8>
 80085f2:	bf00      	nop
 80085f4:	200016c8 	.word	0x200016c8
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
 8008606:	e00c      	b.n	8008622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a12      	ldr	r2, [pc, #72]	; (800865c <prvInitialiseTaskLists+0x60>)
 8008614:	4413      	add	r3, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fc9d 	bl	8006f56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b06      	cmp	r3, #6
 8008626:	d9ef      	bls.n	8008608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008628:	480d      	ldr	r0, [pc, #52]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800862a:	f7fe fc94 	bl	8006f56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008630:	f7fe fc91 	bl	8006f56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <prvInitialiseTaskLists+0x6c>)
 8008636:	f7fe fc8e 	bl	8006f56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800863a:	480c      	ldr	r0, [pc, #48]	; (800866c <prvInitialiseTaskLists+0x70>)
 800863c:	f7fe fc8b 	bl	8006f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008640:	480b      	ldr	r0, [pc, #44]	; (8008670 <prvInitialiseTaskLists+0x74>)
 8008642:	f7fe fc88 	bl	8006f56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <prvInitialiseTaskLists+0x78>)
 8008648:	4a05      	ldr	r2, [pc, #20]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800864a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvInitialiseTaskLists+0x7c>)
 800864e:	4a05      	ldr	r2, [pc, #20]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008650:	601a      	str	r2, [r3, #0]
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200016c8 	.word	0x200016c8
 8008660:	20001754 	.word	0x20001754
 8008664:	20001768 	.word	0x20001768
 8008668:	20001784 	.word	0x20001784
 800866c:	20001798 	.word	0x20001798
 8008670:	200017b0 	.word	0x200017b0
 8008674:	2000177c 	.word	0x2000177c
 8008678:	20001780 	.word	0x20001780

0800867c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008682:	e019      	b.n	80086b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008684:	f000 fbce 	bl	8008e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008688:	4b10      	ldr	r3, [pc, #64]	; (80086cc <prvCheckTasksWaitingTermination+0x50>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fce8 	bl	800706a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3b01      	subs	r3, #1
 80086a0:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 80086a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ae:	f000 fbe9 	bl	8008e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f810 	bl	80086d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086b8:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e1      	bne.n	8008684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001798 	.word	0x20001798
 80086d0:	200017c4 	.word	0x200017c4
 80086d4:	200017ac 	.word	0x200017ac

080086d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	334c      	adds	r3, #76	; 0x4c
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fe71 	bl	80093cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fd41 	bl	8009180 <vPortFree>
				vPortFree( pxTCB );
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fd3e 	bl	8009180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008704:	e018      	b.n	8008738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800870c:	2b01      	cmp	r3, #1
 800870e:	d103      	bne.n	8008718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fd35 	bl	8009180 <vPortFree>
	}
 8008716:	e00f      	b.n	8008738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800871e:	2b02      	cmp	r3, #2
 8008720:	d00a      	beq.n	8008738 <prvDeleteTCB+0x60>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60fb      	str	r3, [r7, #12]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <prvDeleteTCB+0x5e>
	}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008758:	e008      	b.n	800876c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a04      	ldr	r2, [pc, #16]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 800876a:	6013      	str	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	2000177c 	.word	0x2000177c
 800877c:	200017e4 	.word	0x200017e4

08008780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <xTaskGetSchedulerState+0x34>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800878e:	2301      	movs	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	e008      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <xTaskGetSchedulerState+0x38>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800879c:	2302      	movs	r3, #2
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	e001      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087a6:	687b      	ldr	r3, [r7, #4]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	200017d0 	.word	0x200017d0
 80087b8:	200017ec 	.word	0x200017ec

080087bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d05e      	beq.n	8008890 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d6:	4b31      	ldr	r3, [pc, #196]	; (800889c <xTaskPriorityInherit+0xe0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	429a      	cmp	r2, r3
 80087de:	d24e      	bcs.n	800887e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	db06      	blt.n	80087f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e8:	4b2c      	ldr	r3, [pc, #176]	; (800889c <xTaskPriorityInherit+0xe0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	f1c3 0207 	rsb	r2, r3, #7
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <xTaskPriorityInherit+0xe4>)
 8008808:	4413      	add	r3, r2
 800880a:	4299      	cmp	r1, r3
 800880c:	d12f      	bne.n	800886e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	3304      	adds	r3, #4
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fc29 	bl	800706a <uxListRemove>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	2201      	movs	r2, #1
 8008824:	fa02 f303 	lsl.w	r3, r2, r3
 8008828:	43da      	mvns	r2, r3
 800882a:	4b1e      	ldr	r3, [pc, #120]	; (80088a4 <xTaskPriorityInherit+0xe8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4013      	ands	r3, r2
 8008830:	4a1c      	ldr	r2, [pc, #112]	; (80088a4 <xTaskPriorityInherit+0xe8>)
 8008832:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008834:	4b19      	ldr	r3, [pc, #100]	; (800889c <xTaskPriorityInherit+0xe0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	2201      	movs	r2, #1
 8008844:	409a      	lsls	r2, r3
 8008846:	4b17      	ldr	r3, [pc, #92]	; (80088a4 <xTaskPriorityInherit+0xe8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4313      	orrs	r3, r2
 800884c:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <xTaskPriorityInherit+0xe8>)
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4a10      	ldr	r2, [pc, #64]	; (80088a0 <xTaskPriorityInherit+0xe4>)
 800885e:	441a      	add	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7fe fba2 	bl	8006fb0 <vListInsertEnd>
 800886c:	e004      	b.n	8008878 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <xTaskPriorityInherit+0xe0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008878:	2301      	movs	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	e008      	b.n	8008890 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008882:	4b06      	ldr	r3, [pc, #24]	; (800889c <xTaskPriorityInherit+0xe0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	429a      	cmp	r2, r3
 800888a:	d201      	bcs.n	8008890 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800888c:	2301      	movs	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008890:	68fb      	ldr	r3, [r7, #12]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	200016c4 	.word	0x200016c4
 80088a0:	200016c8 	.word	0x200016c8
 80088a4:	200017cc 	.word	0x200017cc

080088a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d06e      	beq.n	800899c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088be:	4b3a      	ldr	r3, [pc, #232]	; (80089a8 <xTaskPriorityDisinherit+0x100>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d00a      	beq.n	80088de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	60fb      	str	r3, [r7, #12]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60bb      	str	r3, [r7, #8]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008900:	1e5a      	subs	r2, r3, #1
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890e:	429a      	cmp	r2, r3
 8008910:	d044      	beq.n	800899c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008916:	2b00      	cmp	r3, #0
 8008918:	d140      	bne.n	800899c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fba3 	bl	800706a <uxListRemove>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d115      	bne.n	8008956 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	491f      	ldr	r1, [pc, #124]	; (80089ac <xTaskPriorityDisinherit+0x104>)
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xTaskPriorityDisinherit+0xae>
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	2201      	movs	r2, #1
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	43da      	mvns	r2, r3
 800894c:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <xTaskPriorityDisinherit+0x108>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4013      	ands	r3, r2
 8008952:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <xTaskPriorityDisinherit+0x108>)
 8008954:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	f1c3 0207 	rsb	r2, r3, #7
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	2201      	movs	r2, #1
 8008970:	409a      	lsls	r2, r3
 8008972:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <xTaskPriorityDisinherit+0x108>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4313      	orrs	r3, r2
 8008978:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <xTaskPriorityDisinherit+0x108>)
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4a08      	ldr	r2, [pc, #32]	; (80089ac <xTaskPriorityDisinherit+0x104>)
 800898a:	441a      	add	r2, r3
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	3304      	adds	r3, #4
 8008990:	4619      	mov	r1, r3
 8008992:	4610      	mov	r0, r2
 8008994:	f7fe fb0c 	bl	8006fb0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800899c:	697b      	ldr	r3, [r7, #20]
	}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200016c4 	.word	0x200016c4
 80089ac:	200016c8 	.word	0x200016c8
 80089b0:	200017cc 	.word	0x200017cc

080089b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80089c2:	2301      	movs	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d077      	beq.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60fb      	str	r3, [r7, #12]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d902      	bls.n	80089fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	e002      	b.n	8008a00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d058      	beq.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d153      	bne.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a14:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d10a      	bne.n	8008a34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	db04      	blt.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f1c3 0207 	rsb	r2, r3, #7
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	6959      	ldr	r1, [r3, #20]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008a62:	4413      	add	r3, r2
 8008a64:	4299      	cmp	r1, r3
 8008a66:	d129      	bne.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fafc 	bl	800706a <uxListRemove>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	43da      	mvns	r2, r3
 8008a84:	4b11      	ldr	r3, [pc, #68]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	4a10      	ldr	r2, [pc, #64]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	2201      	movs	r2, #1
 8008a94:	409a      	lsls	r2, r3
 8008a96:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	4a0b      	ldr	r2, [pc, #44]	; (8008acc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4a06      	ldr	r2, [pc, #24]	; (8008ac8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008aae:	441a      	add	r2, r3
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fa7a 	bl	8006fb0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008abc:	bf00      	nop
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	200016c4 	.word	0x200016c4
 8008ac8:	200016c8 	.word	0x200016c8
 8008acc:	200017cc 	.word	0x200017cc

08008ad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ad4:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008ae6:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
	}
 8008aea:	4618      	mov	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	200016c4 	.word	0x200016c4

08008af8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b02:	4b29      	ldr	r3, [pc, #164]	; (8008ba8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b08:	4b28      	ldr	r3, [pc, #160]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe faab 	bl	800706a <uxListRemove>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	2201      	movs	r2, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	43da      	mvns	r2, r3
 8008b28:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	4a20      	ldr	r2, [pc, #128]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d10a      	bne.n	8008b50 <prvAddCurrentTaskToDelayedList+0x58>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4619      	mov	r1, r3
 8008b48:	481a      	ldr	r0, [pc, #104]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b4a:	f7fe fa31 	bl	8006fb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b4e:	e026      	b.n	8008b9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b58:	4b14      	ldr	r3, [pc, #80]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d209      	bcs.n	8008b7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b68:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe fa3f 	bl	8006ff8 <vListInsert>
}
 8008b7a:	e010      	b.n	8008b9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7c:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7fe fa35 	bl	8006ff8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d202      	bcs.n	8008b9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b98:	4a09      	ldr	r2, [pc, #36]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6013      	str	r3, [r2, #0]
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	200017c8 	.word	0x200017c8
 8008bac:	200016c4 	.word	0x200016c4
 8008bb0:	200017cc 	.word	0x200017cc
 8008bb4:	200017b0 	.word	0x200017b0
 8008bb8:	20001780 	.word	0x20001780
 8008bbc:	2000177c 	.word	0x2000177c
 8008bc0:	200017e4 	.word	0x200017e4

08008bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f023 0201 	bic.w	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3b04      	subs	r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <pxPortInitialiseStack+0x64>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3b14      	subs	r3, #20
 8008bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f06f 0202 	mvn.w	r2, #2
 8008c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3b20      	subs	r3, #32
 8008c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	08008c2d 	.word	0x08008c2d

08008c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c36:	4b12      	ldr	r3, [pc, #72]	; (8008c80 <prvTaskExitError+0x54>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d00a      	beq.n	8008c56 <prvTaskExitError+0x2a>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <prvTaskExitError+0x28>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c6a:	bf00      	nop
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0fc      	beq.n	8008c6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	2000009c 	.word	0x2000009c
	...

08008c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <pxCurrentTCBConst2>)
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	6808      	ldr	r0, [r1, #0]
 8008c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	f380 8809 	msr	PSP, r0
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8811 	msr	BASEPRI, r0
 8008caa:	4770      	bx	lr
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst2>:
 8008cb0:	200016c4 	.word	0x200016c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cb8:	4808      	ldr	r0, [pc, #32]	; (8008cdc <prvPortStartFirstTask+0x24>)
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	6800      	ldr	r0, [r0, #0]
 8008cbe:	f380 8808 	msr	MSP, r0
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8814 	msr	CONTROL, r0
 8008cca:	b662      	cpsie	i
 8008ccc:	b661      	cpsie	f
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	df00      	svc	0
 8008cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cda:	bf00      	nop
 8008cdc:	e000ed08 	.word	0xe000ed08

08008ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ce6:	4b46      	ldr	r3, [pc, #280]	; (8008e00 <xPortStartScheduler+0x120>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a46      	ldr	r2, [pc, #280]	; (8008e04 <xPortStartScheduler+0x124>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10a      	bne.n	8008d06 <xPortStartScheduler+0x26>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d06:	4b3e      	ldr	r3, [pc, #248]	; (8008e00 <xPortStartScheduler+0x120>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a3f      	ldr	r2, [pc, #252]	; (8008e08 <xPortStartScheduler+0x128>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10a      	bne.n	8008d26 <xPortStartScheduler+0x46>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d26:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <xPortStartScheduler+0x12c>)
 8008d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	22ff      	movs	r2, #255	; 0xff
 8008d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <xPortStartScheduler+0x130>)
 8008d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d4e:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d54:	e009      	b.n	8008d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d56:	4b2f      	ldr	r3, [pc, #188]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d6a:	78fb      	ldrb	r3, [r7, #3]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d0ef      	beq.n	8008d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f1c3 0307 	rsb	r3, r3, #7
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d00a      	beq.n	8008d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	60bb      	str	r3, [r7, #8]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d98:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <xPortStartScheduler+0x134>)
 8008da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <xPortStartScheduler+0x134>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008daa:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <xPortStartScheduler+0x134>)
 8008dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008db6:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <xPortStartScheduler+0x138>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dce:	f000 f8dd 	bl	8008f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <xPortStartScheduler+0x13c>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dd8:	f000 f8fc 	bl	8008fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <xPortStartScheduler+0x140>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <xPortStartScheduler+0x140>)
 8008de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008de8:	f7ff ff66 	bl	8008cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dec:	f7ff fa82 	bl	80082f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008df0:	f7ff ff1c 	bl	8008c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	e000ed00 	.word	0xe000ed00
 8008e04:	410fc271 	.word	0x410fc271
 8008e08:	410fc270 	.word	0x410fc270
 8008e0c:	e000e400 	.word	0xe000e400
 8008e10:	200017f0 	.word	0x200017f0
 8008e14:	200017f4 	.word	0x200017f4
 8008e18:	e000ed20 	.word	0xe000ed20
 8008e1c:	2000009c 	.word	0x2000009c
 8008e20:	e000ef34 	.word	0xe000ef34

08008e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	607b      	str	r3, [r7, #4]
}
 8008e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a0d      	ldr	r2, [pc, #52]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d10f      	bne.n	8008e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <vPortEnterCritical+0x5c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	603b      	str	r3, [r7, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <vPortEnterCritical+0x4a>
	}
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	2000009c 	.word	0x2000009c
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <vPortExitCritical+0x50>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <vPortExitCritical+0x24>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	607b      	str	r3, [r7, #4]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008eb2:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <vPortExitCritical+0x42>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	2000009c 	.word	0x2000009c
	...

08008ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ee0:	f3ef 8009 	mrs	r0, PSP
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <pxCurrentTCBConst>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f01e 0f10 	tst.w	lr, #16
 8008ef0:	bf08      	it	eq
 8008ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f04:	f380 8811 	msr	BASEPRI, r0
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f7ff f9f0 	bl	80082f4 <vTaskSwitchContext>
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f380 8811 	msr	BASEPRI, r0
 8008f1c:	bc09      	pop	{r0, r3}
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	6808      	ldr	r0, [r1, #0]
 8008f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f26:	f01e 0f10 	tst.w	lr, #16
 8008f2a:	bf08      	it	eq
 8008f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f30:	f380 8809 	msr	PSP, r0
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst>:
 8008f40:	200016c4 	.word	0x200016c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f62:	f7ff f90f 	bl	8008184 <xTaskIncrementTick>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <SysTick_Handler+0x40>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f383 8811 	msr	BASEPRI, r3
}
 8008f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <vPortSetupTimerInterrupt+0x38>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <vPortSetupTimerInterrupt+0x3c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <vPortSetupTimerInterrupt+0x40>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	099b      	lsrs	r3, r3, #6
 8008fa8:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <vPortSetupTimerInterrupt+0x44>)
 8008faa:	3b01      	subs	r3, #1
 8008fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fae:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	e000e010 	.word	0xe000e010
 8008fc4:	e000e018 	.word	0xe000e018
 8008fc8:	20000000 	.word	0x20000000
 8008fcc:	10624dd3 	.word	0x10624dd3
 8008fd0:	e000e014 	.word	0xe000e014

08008fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fe4 <vPortEnableVFP+0x10>
 8008fd8:	6801      	ldr	r1, [r0, #0]
 8008fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fde:	6001      	str	r1, [r0, #0]
 8008fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fe2:	bf00      	nop
 8008fe4:	e000ed88 	.word	0xe000ed88

08008fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ff4:	f7ff f81c 	bl	8008030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ff8:	4b5b      	ldr	r3, [pc, #364]	; (8009168 <pvPortMalloc+0x180>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009000:	f000 f920 	bl	8009244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009004:	4b59      	ldr	r3, [pc, #356]	; (800916c <pvPortMalloc+0x184>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8093 	bne.w	8009138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01d      	beq.n	8009054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009018:	2208      	movs	r2, #8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d014      	beq.n	8009054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f023 0307 	bic.w	r3, r3, #7
 8009030:	3308      	adds	r3, #8
 8009032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <pvPortMalloc+0x6c>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	617b      	str	r3, [r7, #20]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d06e      	beq.n	8009138 <pvPortMalloc+0x150>
 800905a:	4b45      	ldr	r3, [pc, #276]	; (8009170 <pvPortMalloc+0x188>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d869      	bhi.n	8009138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009064:	4b43      	ldr	r3, [pc, #268]	; (8009174 <pvPortMalloc+0x18c>)
 8009066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009068:	4b42      	ldr	r3, [pc, #264]	; (8009174 <pvPortMalloc+0x18c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800906e:	e004      	b.n	800907a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d903      	bls.n	800908c <pvPortMalloc+0xa4>
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f1      	bne.n	8009070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800908c:	4b36      	ldr	r3, [pc, #216]	; (8009168 <pvPortMalloc+0x180>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	429a      	cmp	r2, r3
 8009094:	d050      	beq.n	8009138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2208      	movs	r2, #8
 800909c:	4413      	add	r3, r2
 800909e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	2308      	movs	r3, #8
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d91f      	bls.n	80090f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <pvPortMalloc+0xf8>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	613b      	str	r3, [r7, #16]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090f2:	69b8      	ldr	r0, [r7, #24]
 80090f4:	f000 f908 	bl	8009308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <pvPortMalloc+0x188>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <pvPortMalloc+0x188>)
 8009104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009106:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <pvPortMalloc+0x188>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <pvPortMalloc+0x190>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d203      	bcs.n	800911a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009112:	4b17      	ldr	r3, [pc, #92]	; (8009170 <pvPortMalloc+0x188>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a18      	ldr	r2, [pc, #96]	; (8009178 <pvPortMalloc+0x190>)
 8009118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <pvPortMalloc+0x184>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	431a      	orrs	r2, r3
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <pvPortMalloc+0x194>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a11      	ldr	r2, [pc, #68]	; (800917c <pvPortMalloc+0x194>)
 8009136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009138:	f7fe ff88 	bl	800804c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <pvPortMalloc+0x174>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60fb      	str	r3, [r7, #12]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <pvPortMalloc+0x172>
	return pvReturn;
 800915c:	69fb      	ldr	r3, [r7, #28]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3728      	adds	r7, #40	; 0x28
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20005400 	.word	0x20005400
 800916c:	20005414 	.word	0x20005414
 8009170:	20005404 	.word	0x20005404
 8009174:	200053f8 	.word	0x200053f8
 8009178:	20005408 	.word	0x20005408
 800917c:	2000540c 	.word	0x2000540c

08009180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d04d      	beq.n	800922e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009192:	2308      	movs	r3, #8
 8009194:	425b      	negs	r3, r3
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <vPortFree+0xb8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10a      	bne.n	80091c4 <vPortFree+0x44>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	60fb      	str	r3, [r7, #12]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00a      	beq.n	80091e2 <vPortFree+0x62>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	60bb      	str	r3, [r7, #8]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <vPortFree+0xb8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01e      	beq.n	800922e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11a      	bne.n	800922e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <vPortFree+0xb8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	43db      	mvns	r3, r3
 8009202:	401a      	ands	r2, r3
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009208:	f7fe ff12 	bl	8008030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <vPortFree+0xbc>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4413      	add	r3, r2
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <vPortFree+0xbc>)
 8009218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800921a:	6938      	ldr	r0, [r7, #16]
 800921c:	f000 f874 	bl	8009308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009220:	4b07      	ldr	r3, [pc, #28]	; (8009240 <vPortFree+0xc0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	4a06      	ldr	r2, [pc, #24]	; (8009240 <vPortFree+0xc0>)
 8009228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800922a:	f7fe ff0f 	bl	800804c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20005414 	.word	0x20005414
 800923c:	20005404 	.word	0x20005404
 8009240:	20005410 	.word	0x20005410

08009244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800924a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800924e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009250:	4b27      	ldr	r3, [pc, #156]	; (80092f0 <prvHeapInit+0xac>)
 8009252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00c      	beq.n	8009278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3307      	adds	r3, #7
 8009262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <prvHeapInit+0xac>)
 8009274:	4413      	add	r3, r2
 8009276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800927c:	4a1d      	ldr	r2, [pc, #116]	; (80092f4 <prvHeapInit+0xb0>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <prvHeapInit+0xb0>)
 8009284:	2200      	movs	r2, #0
 8009286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009290:	2208      	movs	r2, #8
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <prvHeapInit+0xb4>)
 80092a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <prvHeapInit+0xb4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <prvHeapInit+0xb4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <prvHeapInit+0xb4>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <prvHeapInit+0xb8>)
 80092d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	4a09      	ldr	r2, [pc, #36]	; (8009300 <prvHeapInit+0xbc>)
 80092da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <prvHeapInit+0xc0>)
 80092de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	200017f8 	.word	0x200017f8
 80092f4:	200053f8 	.word	0x200053f8
 80092f8:	20005400 	.word	0x20005400
 80092fc:	20005408 	.word	0x20005408
 8009300:	20005404 	.word	0x20005404
 8009304:	20005414 	.word	0x20005414

08009308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009310:	4b28      	ldr	r3, [pc, #160]	; (80093b4 <prvInsertBlockIntoFreeList+0xac>)
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e002      	b.n	800931c <prvInsertBlockIntoFreeList+0x14>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	429a      	cmp	r2, r3
 8009324:	d8f7      	bhi.n	8009316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	4413      	add	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d108      	bne.n	800934a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	441a      	add	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d118      	bne.n	8009390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b15      	ldr	r3, [pc, #84]	; (80093b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d00d      	beq.n	8009386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	441a      	add	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	e008      	b.n	8009398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e003      	b.n	8009398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d002      	beq.n	80093a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	200053f8 	.word	0x200053f8
 80093b8:	20005400 	.word	0x20005400

080093bc <memset>:
 80093bc:	4402      	add	r2, r0
 80093be:	4603      	mov	r3, r0
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <_reclaim_reent>:
 80093cc:	4b29      	ldr	r3, [pc, #164]	; (8009474 <_reclaim_reent+0xa8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4283      	cmp	r3, r0
 80093d2:	b570      	push	{r4, r5, r6, lr}
 80093d4:	4604      	mov	r4, r0
 80093d6:	d04b      	beq.n	8009470 <_reclaim_reent+0xa4>
 80093d8:	69c3      	ldr	r3, [r0, #28]
 80093da:	b143      	cbz	r3, 80093ee <_reclaim_reent+0x22>
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d144      	bne.n	800946c <_reclaim_reent+0xa0>
 80093e2:	69e3      	ldr	r3, [r4, #28]
 80093e4:	6819      	ldr	r1, [r3, #0]
 80093e6:	b111      	cbz	r1, 80093ee <_reclaim_reent+0x22>
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f879 	bl	80094e0 <_free_r>
 80093ee:	6961      	ldr	r1, [r4, #20]
 80093f0:	b111      	cbz	r1, 80093f8 <_reclaim_reent+0x2c>
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 f874 	bl	80094e0 <_free_r>
 80093f8:	69e1      	ldr	r1, [r4, #28]
 80093fa:	b111      	cbz	r1, 8009402 <_reclaim_reent+0x36>
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 f86f 	bl	80094e0 <_free_r>
 8009402:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009404:	b111      	cbz	r1, 800940c <_reclaim_reent+0x40>
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f86a 	bl	80094e0 <_free_r>
 800940c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940e:	b111      	cbz	r1, 8009416 <_reclaim_reent+0x4a>
 8009410:	4620      	mov	r0, r4
 8009412:	f000 f865 	bl	80094e0 <_free_r>
 8009416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009418:	b111      	cbz	r1, 8009420 <_reclaim_reent+0x54>
 800941a:	4620      	mov	r0, r4
 800941c:	f000 f860 	bl	80094e0 <_free_r>
 8009420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009422:	b111      	cbz	r1, 800942a <_reclaim_reent+0x5e>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f85b 	bl	80094e0 <_free_r>
 800942a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800942c:	b111      	cbz	r1, 8009434 <_reclaim_reent+0x68>
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f856 	bl	80094e0 <_free_r>
 8009434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009436:	b111      	cbz	r1, 800943e <_reclaim_reent+0x72>
 8009438:	4620      	mov	r0, r4
 800943a:	f000 f851 	bl	80094e0 <_free_r>
 800943e:	6a23      	ldr	r3, [r4, #32]
 8009440:	b1b3      	cbz	r3, 8009470 <_reclaim_reent+0xa4>
 8009442:	4620      	mov	r0, r4
 8009444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009448:	4718      	bx	r3
 800944a:	5949      	ldr	r1, [r1, r5]
 800944c:	b941      	cbnz	r1, 8009460 <_reclaim_reent+0x94>
 800944e:	3504      	adds	r5, #4
 8009450:	69e3      	ldr	r3, [r4, #28]
 8009452:	2d80      	cmp	r5, #128	; 0x80
 8009454:	68d9      	ldr	r1, [r3, #12]
 8009456:	d1f8      	bne.n	800944a <_reclaim_reent+0x7e>
 8009458:	4620      	mov	r0, r4
 800945a:	f000 f841 	bl	80094e0 <_free_r>
 800945e:	e7c0      	b.n	80093e2 <_reclaim_reent+0x16>
 8009460:	680e      	ldr	r6, [r1, #0]
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f83c 	bl	80094e0 <_free_r>
 8009468:	4631      	mov	r1, r6
 800946a:	e7ef      	b.n	800944c <_reclaim_reent+0x80>
 800946c:	2500      	movs	r5, #0
 800946e:	e7ef      	b.n	8009450 <_reclaim_reent+0x84>
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	bf00      	nop
 8009474:	200000ec 	.word	0x200000ec

08009478 <__libc_init_array>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4d0d      	ldr	r5, [pc, #52]	; (80094b0 <__libc_init_array+0x38>)
 800947c:	4c0d      	ldr	r4, [pc, #52]	; (80094b4 <__libc_init_array+0x3c>)
 800947e:	1b64      	subs	r4, r4, r5
 8009480:	10a4      	asrs	r4, r4, #2
 8009482:	2600      	movs	r6, #0
 8009484:	42a6      	cmp	r6, r4
 8009486:	d109      	bne.n	800949c <__libc_init_array+0x24>
 8009488:	4d0b      	ldr	r5, [pc, #44]	; (80094b8 <__libc_init_array+0x40>)
 800948a:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__libc_init_array+0x44>)
 800948c:	f000 f880 	bl	8009590 <_init>
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	2600      	movs	r6, #0
 8009496:	42a6      	cmp	r6, r4
 8009498:	d105      	bne.n	80094a6 <__libc_init_array+0x2e>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a0:	4798      	blx	r3
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7ee      	b.n	8009484 <__libc_init_array+0xc>
 80094a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094aa:	4798      	blx	r3
 80094ac:	3601      	adds	r6, #1
 80094ae:	e7f2      	b.n	8009496 <__libc_init_array+0x1e>
 80094b0:	080097b0 	.word	0x080097b0
 80094b4:	080097b0 	.word	0x080097b0
 80094b8:	080097b0 	.word	0x080097b0
 80094bc:	080097b4 	.word	0x080097b4

080094c0 <__retarget_lock_acquire_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <__retarget_lock_release_recursive>:
 80094c2:	4770      	bx	lr

080094c4 <memcpy>:
 80094c4:	440a      	add	r2, r1
 80094c6:	4291      	cmp	r1, r2
 80094c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094cc:	d100      	bne.n	80094d0 <memcpy+0xc>
 80094ce:	4770      	bx	lr
 80094d0:	b510      	push	{r4, lr}
 80094d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094da:	4291      	cmp	r1, r2
 80094dc:	d1f9      	bne.n	80094d2 <memcpy+0xe>
 80094de:	bd10      	pop	{r4, pc}

080094e0 <_free_r>:
 80094e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094e2:	2900      	cmp	r1, #0
 80094e4:	d044      	beq.n	8009570 <_free_r+0x90>
 80094e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ea:	9001      	str	r0, [sp, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f1a1 0404 	sub.w	r4, r1, #4
 80094f2:	bfb8      	it	lt
 80094f4:	18e4      	addlt	r4, r4, r3
 80094f6:	f000 f83f 	bl	8009578 <__malloc_lock>
 80094fa:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <_free_r+0x94>)
 80094fc:	9801      	ldr	r0, [sp, #4]
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	b933      	cbnz	r3, 8009510 <_free_r+0x30>
 8009502:	6063      	str	r3, [r4, #4]
 8009504:	6014      	str	r4, [r2, #0]
 8009506:	b003      	add	sp, #12
 8009508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800950c:	f000 b83a 	b.w	8009584 <__malloc_unlock>
 8009510:	42a3      	cmp	r3, r4
 8009512:	d908      	bls.n	8009526 <_free_r+0x46>
 8009514:	6825      	ldr	r5, [r4, #0]
 8009516:	1961      	adds	r1, r4, r5
 8009518:	428b      	cmp	r3, r1
 800951a:	bf01      	itttt	eq
 800951c:	6819      	ldreq	r1, [r3, #0]
 800951e:	685b      	ldreq	r3, [r3, #4]
 8009520:	1949      	addeq	r1, r1, r5
 8009522:	6021      	streq	r1, [r4, #0]
 8009524:	e7ed      	b.n	8009502 <_free_r+0x22>
 8009526:	461a      	mov	r2, r3
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	b10b      	cbz	r3, 8009530 <_free_r+0x50>
 800952c:	42a3      	cmp	r3, r4
 800952e:	d9fa      	bls.n	8009526 <_free_r+0x46>
 8009530:	6811      	ldr	r1, [r2, #0]
 8009532:	1855      	adds	r5, r2, r1
 8009534:	42a5      	cmp	r5, r4
 8009536:	d10b      	bne.n	8009550 <_free_r+0x70>
 8009538:	6824      	ldr	r4, [r4, #0]
 800953a:	4421      	add	r1, r4
 800953c:	1854      	adds	r4, r2, r1
 800953e:	42a3      	cmp	r3, r4
 8009540:	6011      	str	r1, [r2, #0]
 8009542:	d1e0      	bne.n	8009506 <_free_r+0x26>
 8009544:	681c      	ldr	r4, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	6053      	str	r3, [r2, #4]
 800954a:	440c      	add	r4, r1
 800954c:	6014      	str	r4, [r2, #0]
 800954e:	e7da      	b.n	8009506 <_free_r+0x26>
 8009550:	d902      	bls.n	8009558 <_free_r+0x78>
 8009552:	230c      	movs	r3, #12
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	e7d6      	b.n	8009506 <_free_r+0x26>
 8009558:	6825      	ldr	r5, [r4, #0]
 800955a:	1961      	adds	r1, r4, r5
 800955c:	428b      	cmp	r3, r1
 800955e:	bf04      	itt	eq
 8009560:	6819      	ldreq	r1, [r3, #0]
 8009562:	685b      	ldreq	r3, [r3, #4]
 8009564:	6063      	str	r3, [r4, #4]
 8009566:	bf04      	itt	eq
 8009568:	1949      	addeq	r1, r1, r5
 800956a:	6021      	streq	r1, [r4, #0]
 800956c:	6054      	str	r4, [r2, #4]
 800956e:	e7ca      	b.n	8009506 <_free_r+0x26>
 8009570:	b003      	add	sp, #12
 8009572:	bd30      	pop	{r4, r5, pc}
 8009574:	20005554 	.word	0x20005554

08009578 <__malloc_lock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_lock+0x8>)
 800957a:	f7ff bfa1 	b.w	80094c0 <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	20005550 	.word	0x20005550

08009584 <__malloc_unlock>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__malloc_unlock+0x8>)
 8009586:	f7ff bf9c 	b.w	80094c2 <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	20005550 	.word	0x20005550

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
